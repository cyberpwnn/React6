react.Config -> fmIR:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> fmIR
    java.lang.String A_ENTITYCACHE_INTERVAL -> Jjvw
    java.lang.String A_COMMANDOVERRIDE_TPS -> EKHL
    java.lang.String A_REACT_REMOTE_PORT -> HSpS
    java.lang.String A_REACT_REMOTE_ENABLED -> IFSE
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> RsPX
    java.lang.String A_POOL_MAXTHREADS -> xXIp
    java.lang.String A_POOL_SYNC_NANOS -> qJdO
    java.lang.String A_ENTITYCACHE_ENABLED -> OPTg
    java.lang.String A_FASTLEAF_ENABLED -> cImA
    java.lang.String A_FASTLEAF_ONDECAY -> fmII
    java.lang.String A_FASTLEAF_INSTANT -> UcGj
    java.lang.String A_FASTLEAF_DECAYPERIOD -> Ywcx
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> YoTO
    java.lang.String A_ENTITYSTACK_ENABLED -> qArl
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> paTN
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> bGHp
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> AFlD
    java.lang.String A_GLASS_SHOW_BLOCKS -> eHBI
    java.lang.String A_GLASS_SHOW_PARTICLES -> Nfal
    java.lang.String A_ALLOW_CULL -> pHAe
    java.lang.String A_ALLOW_PURGE -> eqsn
    java.lang.String A_ALLOW_CACHE -> aLUn
    java.lang.String A_CULL_RULES -> JHsd
    java.lang.String A_RAI_TPS_HIGH_TICK -> dxBo
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> quWm
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> PmIb
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> mhjO
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> KCgF
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> ftvm
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> rUur
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> DYFM
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> RroH
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> PKFf
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> QVYl
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> lCcx
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> mOYC
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> KULB
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> eqvt
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> nkqL
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> jyWf
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> BInv
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> TWVJ
    java.lang.String A_RAI_FLUID_TIME_CEIL -> WWnG
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> BInt
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> kbgT
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> VChy
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> Qona
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> RrrQ
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> YoUq
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> pHCw
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> upeV
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> lLYB
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> WFlQ
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> AGMG
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> iurt
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> IxwJ
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> ugrw
    java.lang.String A_LANGUAGE -> kkXO
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> Jsii
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> ckok
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> cIli
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> WWkp
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> UAFQ
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> Gaoe
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> IWUX
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> gNJG
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> aThj
    java.lang.String A_RAI_ENTITY_PROPIGATE -> ktIK
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> jpeJ
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> VfKn
    int ENTITYCACHE_CHUNK_RADIUS -> xylo
    int ENTITYCACHE_INTERVAL -> CDbd
    boolean COMMANDOVERRIDES_TPS -> KLYw
    int REACT_REMOTE_PORT -> SCSJ
    boolean REACT_REMOTE_ENABLED -> TVux
    int ENTITY_STACK_MAX_COUNT -> dLrw
    int POOL_MAXTHREADS -> hkBr
    long POOL_SYNC_NANOS -> ogGA
    boolean ENTITYCACHE_ENABLED -> kQgw
    boolean FASTLEAF_ENABLED -> JtNH
    boolean FASTLEAF_ONDECAY -> YoXO
    boolean FASTLEAF_INSTANT -> xiPO
    int FASTLEAF_DECAYPERIOD -> CLuB
    boolean COMMANDOVERRIDES_MEMORY -> iKax
    boolean ENTITYSTACK_ENABLED -> CoXw
    int ENTITYSTACK_MINIMUM_GROUP -> ccbb
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> BtfB
    int ENTITYSTACK_MAXIMUM_HEALTH -> AXPd
    boolean GLASS_SHOW_BLOCKS -> iSrL
    boolean GLASS_SHOW_PARTICLES -> LytC
    react.glang.GList ALLOW_CULL -> Jbkm
    react.glang.GList ALLOW_PURGE -> tCQQ
    react.glang.GList ALLOW_CACHE -> GbSr
    react.glang.GList CULL_RULES -> Garr
    double RAI_TPS_HIGH_TICK -> ySAJ
    long RAI_REDSTONE_TIME_FLOOR -> XdEP
    long RAI_REDSTONE_TIME_CEIL -> mhpA
    long RAI_REDSTONE_TIME_MUDDING -> jqHV
    double RAI_REDSTONE_TIME_FUNCTION -> vIVV
    double RAI_REDSTONE_TIME_OVERBLEED -> UIXF
    int RAI_REDSTONE_TIME_RADIUS -> AFoe
    int RAI_REDSTONE_TIME_PROPIGATION -> uOEI
    long RAI_HOPPER_TIME_FLOOR -> fmLa
    long RAI_HOPPER_TIME_CEIL -> FopS
    long RAI_HOPPER_TIME_MUDDING -> oMQv
    double RAI_HOPPER_TIME_FUNCTION -> flkF
    double RAI_HOPPER_TIME_OVERBLEED -> ssPs
    int RAI_HOPPER_TIME_RADIUS -> iKaG
    int RAI_HOPPER_TIME_PROPIGATION -> pYGF
    int RAI_ENTITY_CHUNK_MULTIPLIER -> vAEe
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> upfT
    int RAI_ENTITY_CHUNK_RADIUS -> KwSH
    long RAI_FLUID_TIME_FLOOR -> HLGF
    long RAI_FLUID_TIME_CEIL -> BuHq
    long RAI_FLUID_TIME_MUDDING -> WaDD
    double RAI_FLUID_TIME_FUNCTION -> dgHq
    double RAI_FLUID_TIME_OVERBLEED -> avqE
    int RAI_FLUID_TIME_RADIUS -> ytfJ
    int RAI_FLUID_TIME_PROPIGATION -> CVHl
    double SMEAR_TICK_ENTITIES_MAX_TICK -> ivXf
    double SMEAR_TICK_TILES_MAX_TICK -> MJUF
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> ncdh
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> JsoU
    double SMEAR_TICK_ENTITIES_AMOUNT -> Vvpw
    double SMEAR_TICK_TILES_AMOUNT -> TNhc
    boolean SMEAR_TICK_ENTITIES_ENABLE -> AXSD
    boolean SMEAR_TICK_TILES_ENABLE -> saqo
    boolean HOPPER_OVERTICK_ENABLE -> YDej
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> VwRc
    long RAI_CHUNK_TIME_CEIL -> dnyD
    long RAI_CHUNK_TIME_MUDDING -> RbUb
    double RAI_CHUNK_TIME_FUNCTION -> Mkvr
    double RAI_CHUNK_TIME_OVERBLEED -> RPqY
    int RAI_CHUNK_TIME_RADIUS -> nuFQ
    int RAI_CHUNK_TIME_PROPIGATION -> bXPb
    boolean RAI_CHUNK_TIME_PROPIGATE -> UcLl
    boolean RAI_FLUID_TIME_PROPIGATE -> onvi
    boolean RAI_ENTITY_PROPIGATE -> mFmn
    boolean RAI_HOPPER_TIME_PROPIGATE -> HKeK
    boolean RAI_REDSTONE_TIME_PROPIGATE -> FpRu
    boolean hrld -> yJQJ
    boolean rns -> NLvT
    boolean rrl -> teUR
    34:34:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> fmIR
    675:697:void onRead(org.bukkit.plugin.Plugin) -> Jjvw
    701:731:void read(java.io.File,boolean) -> fmIR
    736:849:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> fmIR
    854:891:react.surge.cluster.DataCluster defaultConfig(boolean) -> fmIR
    896:971:react.glang.GList getDefaultEntitiesForCaching() -> fmIR
    976:1051:react.glang.GList getDefaultEntitiesForCulling() -> Jjvw
    1056:1093:react.glang.GList getDefaultEntitiesForRemoval() -> EKHL
    1098:1127:react.glang.GList getDefaultCullRules() -> HSpS
    258:648:void <clinit>() -> <clinit>
react.Config$1 -> fmIR$1:
    java.io.File val$fConfig -> nccY
    java.io.File val$fConfigExperimental -> CwkQ
    org.bukkit.plugin.Plugin val$main -> dVFh
    657:657:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Gate -> Jjvw:
    react.glang.GMap defaultSettings -> Oikj
    35:35:void <init>() -> <init>
    41:127:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> fmIR
    131:156:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> fmIR
    161:161:int getChunkCountForView() -> IFSE
    166:166:int getMaxChunksForView() -> RsPX
    171:171:boolean hasFawe() -> xXIp
    176:197:void tickEntityNextTickListTick(org.bukkit.World) -> fmIR
    201:205:void resetEntityMaxTick(org.bukkit.World) -> Jjvw
    209:209:int getEntityTickMax(org.bukkit.World) -> EKHL
    214:214:int getTileTickMax(org.bukkit.World) -> HSpS
    219:237:void tweakEntityTickMax(org.bukkit.World,int) -> fmIR
    241:258:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> fmIR
    263:267:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> fmIR
    271:283:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> fmIR
    288:292:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> Jjvw
    296:314:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> fmIR
    318:322:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> IFSE
    327:330:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> fmIR
    335:338:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> Jjvw
    343:343:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> EKHL
    348:348:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> HSpS
    353:353:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> IFSE
    360:366:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    372:373:void unloadChunk(org.bukkit.World,int,int) -> fmIR
    377:383:void removeEntity(org.bukkit.entity.Entity) -> fmIR
    387:393:void purgeEntity(org.bukkit.entity.Entity) -> Jjvw
    397:403:void cullEntity(org.bukkit.entity.Entity) -> EKHL
    407:413:void cachedEntity(org.bukkit.entity.Entity) -> HSpS
    418:435:void updateBlock(org.bukkit.block.Block) -> fmIR
    439:443:java.lang.String header(java.lang.String,react.surge.util.C) -> fmIR
    448:448:java.lang.String header(react.surge.util.C) -> fmIR
    454:458:void updateFluid(org.bukkit.block.Block) -> Jjvw
    37:37:void <clinit>() -> <clinit>
react.Gate$1 -> Jjvw$1:
    react.api.SelectorPosition val$sel -> APCW
    react.glang.Callback val$prog -> UAJX
    react.glang.Callback val$cb -> DXkT
    42:42:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:125:void run() -> run
react.Gate$1$1 -> Jjvw$1$1:
    java.lang.Object val$o -> BdJF
    java.lang.reflect.Constructor val$vectorConstruct -> Aqft
    java.lang.reflect.Constructor val$cuboidConstruct -> wepW
    java.lang.reflect.Method val$faweFixMethod -> IOKf
    java.lang.Integer[] val$total -> jExQ
    java.lang.Integer[] val$sof -> TFYi
    java.lang.Integer val$tot -> WrGL
    react.Gate$1 this$0 -> cSEx
    74:74:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    80:94:void run() -> run
react.Gate$1$2 -> Jjvw$1$2:
    java.lang.Integer[] val$total -> jExQ
    react.Gate$1 this$0 -> cSEx
    99:99:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    105:113:void run() -> run
react.Gate$2 -> Jjvw$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> MuJl
    271:271:void <clinit>() -> <clinit>
react.Info -> EKHL:
    java.lang.String CORE_REACT_DOT -> rhBp
    java.lang.String CORE_NAME -> MciH
    java.lang.String CORE_CACHE -> cBEe
    java.lang.String CORE_DOTYML -> WPDd
    java.lang.String COMMAND_REACT -> IEys
    java.lang.String COMMAND_RAI -> cSFn
    java.lang.String COMMAND_ACT_DESCRIPTION -> RHeN
    java.lang.String COMMAND_ACT -> sYcf
    java.lang.String COMMAND_ACT_ALIAS_1 -> BuIy
    java.lang.String COMMAND_ACT_ALIAS_2 -> xOaT
    java.lang.String COMMAND_ACT_USAGE -> TqOL
    java.lang.String COMMAND_HELP_DESCRIPTION -> wClV
    java.lang.String COMMAND_HELP -> ySDc
    java.lang.String COMMAND_HELP_ALIAS_1 -> nceb
    java.lang.String COMMAND_HELP_ALIAS_2 -> McgS
    java.lang.String COMMAND_HELP_USAGE -> KwSk
    java.lang.String COMMAND_STATUS_DESCRIPTION -> EeAh
    java.lang.String COMMAND_STATUS -> oDfE
    java.lang.String COMMAND_STATUS_ALIAS_1 -> dgIj
    java.lang.String COMMAND_STATUS_ALIAS_2 -> yIqu
    java.lang.String COMMAND_STATUS_USAGE -> KTpU
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> Wqeh
    java.lang.String COMMAND_CPUSCORE -> SLGa
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> DYNO
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> YDfl
    java.lang.String COMMAND_CPUSCORE_USAGE -> DYMp
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> OXlb
    java.lang.String COMMAND_RELOAD -> jNgm
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> KfSP
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> Suyr
    java.lang.String COMMAND_RELOAD_USAGE -> GQVH
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> vbki
    java.lang.String COMMAND_MONITOR -> hjdp
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> ndId
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> VwWB
    java.lang.String COMMAND_MONITOR_USAGE -> KLbf
    java.lang.String COMMAND_VERSION_DESCRIPTION -> UtSU
    java.lang.String COMMAND_VERSION -> eGlK
    java.lang.String COMMAND_VERSION_ALIAS_1 -> tBul
    java.lang.String COMMAND_VERSION_ALIAS_2 -> kALv
    java.lang.String COMMAND_VERSION_USAGE -> flrP
    java.lang.String COMMAND_MAP_DESCRIPTION -> TiAK
    java.lang.String COMMAND_MAP -> CEKP
    java.lang.String COMMAND_MAP_ALIAS_1 -> EmUe
    java.lang.String COMMAND_MAP_ALIAS_2 -> FNUj
    java.lang.String COMMAND_MAP_USAGE -> gxfb
    java.lang.String COMMAND_GLASS_DESCRIPTION -> jqOV
    java.lang.String COMMAND_GLASS -> uplg
    java.lang.String COMMAND_GLASS_ALIAS_1 -> eYMh
    java.lang.String COMMAND_GLASS_ALIAS_2 -> QyGf
    java.lang.String COMMAND_GLASS_USAGE -> PeCQ
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> vbnR
    java.lang.String COMMAND_CBLAME -> EmSv
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> Hmkr
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> QyGs
    java.lang.String COMMAND_CBLAME_USAGE -> dUjU
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> pXki
    java.lang.String COMMAND_ACTIONLOG -> JcQh
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> rgcT
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> wCmc
    java.lang.String COMMAND_ACTIONLOG_USAGE -> xqeY
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> SBvw
    java.lang.String COMMAND_CAPABILITIES -> qmQX
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> LiWm
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> KvvF
    java.lang.String COMMAND_CAPABILITIES_USAGE -> rFAV
    java.lang.String MSG_PERMISSION -> SnLk
    java.lang.String MSG_MONITORING_STARTED -> Edca
    java.lang.String MSG_MONITORING_STOPPED -> ETBq
    java.lang.String MSG_ACTIONLOGGING_STARTED -> ydGb
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> LrLJ
    java.lang.String MSG_GLASS_STARTED -> Qxih
    java.lang.String MSG_GLASS_STOPPED -> lnfV
    org.bukkit.Color COLOR_HOPPER -> lfUp
    org.bukkit.Color COLOR_BLOCK_UPDATE -> OXqU
    org.bukkit.Color COLOR_BLOCK_FROMTO -> hbYw
    org.bukkit.Color COLOR_BLOCK_BURN -> GkMQ
    org.bukkit.Color COLOR_BLOCK_DECAY -> TXAI
    org.bukkit.Color COLOR_BLOCK_FORM -> hkLG
    java.lang.String NAME_TICK -> Xckg
    java.lang.String NAME_MEMORY -> PBay
    java.lang.String NAME_CHUNKS -> Lhyq
    java.lang.String NAME_ENTITIES -> iKig
    java.lang.String STATE_MONITORING_TAB -> DYST
    java.lang.String STATE_MONITORING_ENABLED -> lvuu
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> CVOB
    java.lang.String STATE_MAPPING_ENABLED -> ySIP
    java.lang.String STATE_SOUND_PLAYS -> AFvU
    java.lang.String STATE_MONITORING_POSTED -> AWwa
    java.lang.String STATE_MONITORING_LASTTAB -> owoQ
    java.lang.String STATE_GLASSES_ENABLED -> cuNL
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> xaFu
    java.lang.String STATE_PLAYER_HOTBAR -> EKSO
    java.lang.String STATE_PLAYER_SHIFT -> eGlt
    java.lang.String STATE_PLAYER_SCROLL -> skJE
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> fltD
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> nBGr
    java.lang.String PERM_ACCESS -> tSxq
    java.lang.String PERM_MONITOR -> NgOm
    java.lang.String PERM_MONITOR_TITLE -> rWEF
    java.lang.String PERM_MONITOR_ACTIONLOG -> DjTB
    java.lang.String PERM_MONITOR_MAP -> DXpr
    java.lang.String PERM_MONITOR_ENVIRONMENT -> psBA
    java.lang.String PERM_MONITOR_GLASSES -> BBKS
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> wDPl
    java.lang.String PERM_ACT -> eYSJ
    java.lang.String PERM_RAI -> xGVw
    java.lang.String PERM_RAI_CONTROL -> qmVv
    java.lang.String PERM_RAI_ACCESS -> Wqkq
    java.lang.String PERM_RAI_MONITOR -> JQtV
    java.lang.String PERM_RELOAD -> CEPB
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> aCtX
    java.lang.String SAMPLER_REDSTONE_TICK -> jiDA
    java.lang.String SAMPLER_ENTITY_TIME -> DXsl
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> NNAJ
    java.lang.String SAMPLER_TILE_TIME_LOCK -> HnQx
    java.lang.String SAMPLER_TILE_TIME -> bGYS
    java.lang.String SAMPLER_TILE_DROPTICK -> WOjP
    java.lang.String SAMPLER_ENTITY_DROPTICK -> LFyS
    java.lang.String SAMPLER_REDSTONE_SECOND -> VCty
    java.lang.String SAMPLER_REDSTONE_TIME -> imoU
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> bGXd
    java.lang.String SAMPLER_HOPPER_TICK -> RkOO
    java.lang.String SAMPLER_HOPPER_SECOND -> OsEh
    java.lang.String SAMPLER_HOPPER_TIME -> Oabv
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> Kvxs
    java.lang.String SAMPLER_FLUID_TICK -> JkfI
    java.lang.String SAMPLER_FLUID_SECOND -> UkeP
    java.lang.String SAMPLER_FLUID_TIME -> mFvV
    java.lang.String SAMPLER_TPS -> fmVl
    java.lang.String SAMPLER_TICK -> Hmow
    java.lang.String SAMPLER_TIU -> nRik
    java.lang.String SAMPLER_MEM -> mGWA
    java.lang.String SAMPLER_FREEMEM -> mPGl
    java.lang.String SAMPLER_MAXMEM -> YobC
    java.lang.String SAMPLER_ALLOCMEM -> Hmro
    java.lang.String SAMPLER_MAHS -> pHSO
    java.lang.String SAMPLER_CHK -> PShL
    java.lang.String SAMPLER_ATASK -> HwDu
    java.lang.String SAMPLER_STASK -> cmBB
    java.lang.String SAMPLER_CHK_TIME -> TqUy
    java.lang.String SAMPLER_EXPLOSION_TIME -> Cwul
    java.lang.String SAMPLER_CHKS -> QyNs
    java.lang.String SAMPLER_ENT -> HnSv
    java.lang.String SAMPLER_ENTLIV -> KDYH
    java.lang.String SAMPLER_ENTDROP -> uFaJ
    java.lang.String SAMPLER_ENTTILE -> SmsD
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> dDnp
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> VDXO
    java.lang.String ACTION_CULL_ENTITIES_NAME -> gViy
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> aDXQ
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> SKok
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> QFJk
    java.lang.String ACTION_UPDATE_FLUID_NAME -> pQCb
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> qBct
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> dxUV
    java.lang.String ACTION_LOCK_FLUID_STATUS -> cmAk
    java.lang.String ACTION_LOCK_FLUID_NAME -> IyhW
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> XuSK
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> Tyfv
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> dMaK
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> impx
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> bOkQ
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> OjWw
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> FFJJ
    java.lang.String ACTION_LOCK_HOPPER_NAME -> jiDV
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> aLfh
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> aLfg
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> HLOk
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> JlIL
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> prdu
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> maKk
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> PeJB
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> YgRd
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> baKl
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> afYW
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> ghKh
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> JlIT
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> XuPy
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> aMGw
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> jydV
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> VMIO
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> lDVC
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> vQrX
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> vcTv
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> gEhA
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> nAjf
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> Ihed
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> ArQA
    java.lang.String ACTION_FIX_LIGHTING_NAME -> jiDS
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> TFdY
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> YDrR
    java.lang.String ACTION_COLLECT_GARBAGE -> VoNa
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> nuSb
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> gyOt
    6:6:void <init>() -> <init>
    8:232:void <clinit>() -> <clinit>
react.Lang -> HSpS:
    java.lang.String BUNDLE_NAME -> GHns
    java.util.ResourceBundle RESOURCE_BUNDLE -> QqAO
    java.util.ResourceBundle PRIMARY_BUNDLE -> XSPv
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> IFSE:
    react.React instance -> wMJS
    react.controller.SampleController sampleController -> Gjqv
    react.controller.PlayerController playerController -> CwxN
    react.controller.MonitorController monitorController -> STcN
    react.controller.CommandController commandController -> dUrf
    react.controller.ActionController actionController -> FElY
    react.controller.FastDecayController fastDecayController -> jNtN
    react.controller.EntityStackController entityStackController -> MBPo
    react.controller.GlassController glassController -> loLl
    react.controller.EntityCullController entityCullController -> YxXR
    react.controller.SpikeController spikeController -> qShM
    react.controller.SecurityController securityController -> EJyg
    react.controller.RedstoneController redstoneController -> XmDn
    react.controller.HopperController hopperController -> XcsF
    react.controller.PhysicsController physicsController -> xaMd
    react.controller.TickTimeController tickTimeController -> upuf
    react.controller.RAIController raiController -> uyfo
    react.controller.FluidController fluidController -> NUuI
    react.controller.ChunkController chunkController -> RkPy
    react.controller.GraphController graphController -> Mtrl
    react.controller.ChronophyFluidController fluidChronophyController -> nmBY
    react.controller.EventController eventController -> jNrb
    react.controller.BlockInjectController blockInjectController -> psGv
    react.controller.SmearTickController smearTickController -> ymAl
    react.controller.FeatureController featureController -> yuRU
    react.controller.HopperOvertickController hopperPlungeController -> CNEr
    react.controller.BenchmarkController benchmarkController -> VLhr
    react.controller.LanguageController languageController -> MAoH
    react.controller.RemoteController remoteController -> CMdo
    react.controller.ExplosiveController explosiveController -> Ywtw
    41:41:void <init>() -> <init>
    137:137:void enable() -> enable
    143:143:void disable() -> disable
react.action.ActionCollectGarbage -> RsPX:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionCollectGarbage$1 -> RsPX$1:
    react.api.IActionSource val$source -> maNX
    react.action.ActionCollectGarbage this$0 -> cuRa
    30:30:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> RsPX$1$1:
    long val$mbnex -> VDYc
    long val$mbmem -> UQwR
    react.action.ActionCollectGarbage$1 this$1 -> kkgh
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> xXIp:
    long ms -> WrPq
    int lcd -> BSRk
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> fmIR
    25:25:long access$002(react.action.ActionCullEntities,long) -> fmIR
    25:25:int access$100(react.action.ActionCullEntities) -> fmIR
    25:25:long access$000(react.action.ActionCullEntities) -> Jjvw
react.action.ActionCullEntities$1 -> xXIp$1:
    react.action.ActionCullEntities this$0 -> ghLv
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> qJdO
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> xXIp$2:
    react.action.ActionCullEntities this$0 -> ghLv
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> qJdO
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> xXIp$3:
    react.glang.FinalInteger val$completed -> tKne
    react.glang.FinalInteger val$total -> nmAq
    react.glang.FinalInteger val$totalCulled -> mrOX
    react.glang.FinalInteger val$totalChunked -> SwIK
    react.api.IActionSource val$source -> maNX
    react.action.ActionCullEntities this$0 -> ghLv
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> xXIp$4:
    react.api.IActionSource val$source -> maNX
    react.glang.FinalInteger val$totalCulled -> mrOX
    react.glang.FinalInteger val$totalChunked -> SwIK
    react.action.ActionCullEntities this$0 -> ghLv
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> qJdO:
    24:38:void <init>() -> <init>
    43:95:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionFixLighting$1 -> qJdO$1:
    react.action.ActionFixLighting this$0 -> rhOm
    28:28:void <init>(react.action.ActionFixLighting) -> <init>
    32:35:react.api.ISelector get() -> qJdO
    28:28:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> qJdO$2:
    react.api.IActionSource val$source -> maNX
    int val$ch -> NNFl
    react.action.ActionFixLighting this$0 -> rhOm
    70:70:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    74:79:void run(java.lang.Integer) -> fmIR
    70:70:void run(java.lang.Object) -> fmIR
react.action.ActionFixLighting$3 -> qJdO$3:
    react.action.ActionFixLighting this$0 -> rhOm
    81:81:void <init>(react.action.ActionFixLighting) -> <init>
    85:90:void run(java.lang.Double) -> fmIR
    81:81:void run(java.lang.Object) -> fmIR
react.action.ActionLockFluid -> OPTg:
    int lcd -> BSRk
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionLockFluid$1 -> OPTg$1:
    react.action.ActionLockFluid this$0 -> bOno
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> qJdO
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> OPTg$2:
    react.action.ActionLockFluid this$0 -> bOno
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> qJdO
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> cImA:
    int lcd -> BSRk
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionLockHopper$1 -> cImA$1:
    react.action.ActionLockHopper this$0 -> PSku
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> qJdO
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> cImA$2:
    react.action.ActionLockHopper this$0 -> PSku
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> qJdO
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> fmII:
    int lcd -> BSRk
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionLockRedstone$1 -> fmII$1:
    react.action.ActionLockRedstone this$0 -> Punx
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> qJdO
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> fmII$2:
    react.action.ActionLockRedstone this$0 -> Punx
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> qJdO
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> UcGj:
    long ms -> WrPq
    int lcd -> BSRk
    boolean fail -> PCLM
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> Jjvw
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> fmIR
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> fmIR
    23:23:int access$200(react.action.ActionPurgeChunks) -> Jjvw
    23:23:long access$100(react.action.ActionPurgeChunks) -> EKHL
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> fmIR
react.action.ActionPurgeChunks$1 -> UcGj$1:
    react.action.ActionPurgeChunks this$0 -> fCJh
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> qJdO
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> UcGj$2:
    int val$dk -> wnnE
    java.lang.Object val$j -> fTLR
    react.glang.FinalInteger val$acompleted -> LXar
    react.glang.FinalInteger val$completed -> tKne
    react.glang.FinalInteger val$total -> nmAq
    react.glang.FinalInteger val$totalCulled -> mrOX
    react.glang.FinalInteger val$totalChunked -> SwIK
    react.api.IActionSource val$source -> maNX
    react.api.ISelector[] val$selectors -> fvMq
    react.action.ActionPurgeChunks this$0 -> fCJh
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> UcGj$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> iLRc
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> UcGj$3:
    react.api.IActionSource val$source -> maNX
    react.glang.FinalInteger val$acompleted -> LXar
    react.action.ActionPurgeChunks this$0 -> fCJh
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> UcGj$4:
    org.bukkit.Chunk val$chunk -> DXyK
    java.lang.Runnable val$cb -> SnVj
    react.action.ActionPurgeChunks this$0 -> fCJh
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> Ywcx:
    long ms -> WrPq
    int lcd -> BSRk
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> Jjvw
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> fmIR
    27:27:int access$100(react.action.ActionPurgeEntities) -> fmIR
    27:27:long access$000(react.action.ActionPurgeEntities) -> Jjvw
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> fmIR
react.action.ActionPurgeEntities$1 -> Ywcx$1:
    react.action.ActionPurgeEntities this$0 -> ECKU
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> qJdO
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> Ywcx$2:
    react.action.ActionPurgeEntities this$0 -> ECKU
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> qJdO
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> Ywcx$3:
    react.glang.FinalInteger val$completed -> tKne
    react.glang.FinalInteger val$total -> nmAq
    react.glang.FinalInteger val$totalCulled -> mrOX
    react.glang.FinalInteger val$totalChunked -> SwIK
    react.api.IActionSource val$source -> maNX
    react.action.ActionPurgeEntities this$0 -> ECKU
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> Ywcx$4:
    react.api.IActionSource val$source -> maNX
    react.glang.FinalInteger val$totalCulled -> mrOX
    react.glang.FinalInteger val$totalChunked -> SwIK
    react.action.ActionPurgeEntities this$0 -> ECKU
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> Ywcx$5:
    org.bukkit.entity.Entity val$i -> sHnX
    react.glang.FinalInteger val$cu -> tDBP
    int val$k -> TNvH
    org.bukkit.Chunk val$chunk -> DXyK
    java.lang.Runnable val$cb -> SnVj
    react.action.ActionPurgeEntities this$0 -> ECKU
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> YoTO:
    int lcd -> BSRk
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionUnlockFluid$1 -> YoTO$1:
    react.action.ActionUnlockFluid this$0 -> IGGR
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> qJdO
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> qArl:
    int lcd -> BSRk
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionUnlockHopper$1 -> qArl$1:
    react.action.ActionUnlockHopper this$0 -> Tpxg
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> qJdO
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> paTN:
    int lcd -> BSRk
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.action.ActionUnlockRedstone$1 -> paTN$1:
    react.action.ActionUnlockRedstone this$0 -> hscV
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> qJdO
    30:30:java.lang.Object get() -> get
react.api.Action -> bGHp:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> jyhv
    java.lang.String[] nodes -> OYYY
    react.api.ActionHandle handle -> BlgG
    react.api.ActionState state -> xrQD
    react.api.ActionTargetType target -> RHpJ
    react.api.ActionType type -> BArW
    react.api.IActionSource currentSource -> eiyH
    double progress -> Vnnj
    react.glang.GMap defaultSelectors -> AYBj
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> fmIR
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> fmIR
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> OPTg
    89:89:react.api.ActionState getState() -> cImA
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> fmIR
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> fmII
    125:125:react.api.ActionType getType() -> UcGj
    131:131:react.glang.GMap getDefaultSelectors() -> Ywcx
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> Jjvw
    151:152:void completeAction() -> YoTO
    157:157:react.api.IActionSource getCurrentSource() -> qArl
    163:163:java.lang.String[] getNodes() -> paTN
    169:170:void setNodes(java.lang.String[]) -> fmIR
    void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
react.api.ActionAlreadyRunningException -> AFlD:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> eHBI:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> Nfal:
    react.api.ActionHandle AUTOMATIC -> sYns
    react.api.ActionHandle MANUAL -> dpKJ
    react.api.ActionHandle MUTEX -> CpLg
    react.api.ActionHandle[] $VALUES -> JuBA
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> pHAe:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> eqsn:
    react.api.ActionState IDLE -> jGII
    react.api.ActionState RUNNING -> CUwv
    react.api.ActionState[] $VALUES -> dwyf
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> aLUn:
    react.api.ActionTargetType POSITIONAL -> HUHn
    react.api.ActionTargetType SYSTEM -> ooiP
    react.api.ActionTargetType[] $VALUES -> dNHY
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> JHsd:
    react.api.ActionType FIX_LIGHTING -> SCee
    react.api.ActionType UNLOCK_FLUID -> hYsJ
    react.api.ActionType LOCK_FLUID -> dDui
    react.api.ActionType UNLOCK_HOPPER -> AaTT
    react.api.ActionType LOCK_HOPPER -> ncsq
    react.api.ActionType UNLOCK_REDSTONE -> bHAH
    react.api.ActionType LOCK_REDSTONE -> ogXV
    react.api.ActionType CULL_ENTITIES -> jFgA
    react.api.ActionType COLLECT_GARBAGE -> ydTh
    react.api.ActionType PURGE_ENTITIES -> yleC
    react.api.ActionType PURGE_CHUNKS -> fCKQ
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> BlgG
    react.api.ActionTargetType target -> RHpJ
    react.api.ActionType[] $VALUES -> cAqT
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    25:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> bGHp
    49:49:react.api.ActionTargetType getTarget() -> fmII
    5:17:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> dxBo:
    react.api.ActivationRangeType ANIMALS -> ccuS
    react.api.ActivationRangeType MONSTERS -> KxCi
    react.api.ActivationRangeType MISC -> HLWF
    react.api.ActivationRangeType[] $VALUES -> qvOK
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> quWm:
    int value() -> value
react.api.Async -> PmIb:
react.api.CPUBenchmark -> mhjO:
    org.bukkit.command.CommandSender sender -> sender
    int score -> Xlfq
    java.lang.Runnable onFinish -> YNGc
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> AFlD
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> fmIR
    10:10:int access$100(react.api.CPUBenchmark) -> Jjvw
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> EKHL
react.api.CPUBenchmark$1 -> mhjO$1:
    react.api.CPUBenchmark this$0 -> ncsg
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> mhjO$2:
    react.api.CPUBenchmark this$0 -> ncsg
    73:73:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> KCgF:
    react.api.CPUResult ULTRA_SLOW -> LYDV
    react.api.CPUResult VERY_SLOW -> INxq
    react.api.CPUResult SLOW -> wxAJ
    react.api.CPUResult AVERAGE -> skSf
    react.api.CPUResult GOOD -> MdVy
    react.api.CPUResult FAST -> eQMN
    react.api.CPUResult VERY_FAST -> gOBn
    react.api.CPUResult ULTRA_FAST -> MJgL
    java.lang.String m -> GtKH
    react.api.CPUResult[] $VALUES -> MSYA
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> fmIR
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> ftvm:
    react.glang.GMap cache -> RHtf
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> Jjvw
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> EKHL
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> eHBI
    54:54:boolean has(java.lang.Object) -> HSpS
react.api.Capabilities -> rUur:
    react.api.Capabilities DUAL_WIELD -> oMhf
    react.api.Capabilities SCOREBOARD -> CDyH
    react.api.Capabilities HOPPERS -> PutF
    react.api.Capabilities ATTRIBUTES -> gWRe
    react.api.Capabilities ENTITY_AI -> rVqN
    react.api.Capabilities ACTION_BAR -> Xcxi
    react.api.Capabilities ENTITY_NAMES -> FNdS
    react.surge.util.ProtocolRange r -> Vfcr
    java.lang.String n -> UInT
    react.api.Capabilities[] $VALUES -> iTgk
    10:10:react.api.Capabilities[] values() -> values
    10:10:react.api.Capabilities valueOf(java.lang.String) -> valueOf
    24:27:void <init>(java.lang.String,int,java.lang.String,react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:boolean isCapable() -> Nfal
    42:43:void sendNotCapable(org.bukkit.command.CommandSender) -> fmIR
    47:48:void sendCapable(org.bukkit.command.CommandSender) -> Jjvw
    10:18:void <clinit>() -> <clinit>
react.api.ChunkIssue -> DYFM:
    react.api.ChunkIssue ENTITY -> UuBK
    react.api.ChunkIssue HOPPER -> BBXT
    react.api.ChunkIssue REDSTONE -> kuAH
    react.api.ChunkIssue FLUID -> VnsG
    react.api.ChunkIssue PHYSICS -> xaTJ
    react.api.ChunkIssue[] $VALUES -> fdoT
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.api.Clip -> RroH:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> PKFf:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> Jjvw
    30:31:void sendResponseSuccess(java.lang.String) -> EKHL
    36:37:void sendResponseError(java.lang.String) -> HSpS
    42:43:void sendResponseActing(java.lang.String) -> IFSE
react.api.ConsoleActionSource -> QVYl:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> Jjvw
    18:19:void sendResponseSuccess(java.lang.String) -> EKHL
    24:25:void sendResponseError(java.lang.String) -> HSpS
    30:31:void sendResponseActing(java.lang.String) -> IFSE
react.api.CullList -> lCcx:
    react.glang.GSet toCull -> brUg
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> IFSE
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> pHAe
react.api.DTest -> mOYC:
    3:3:void <init>() -> <init>
    7:58:int test() -> eqsn
react.api.EntityFlag -> KULB:
    react.api.EntityFlag NAMED -> WGav
    react.api.EntityFlag TAMED -> rEnu
    react.api.EntityFlag STACKED -> QyUu
    react.api.EntityFlag RIDDEN -> rySl
    react.api.EntityFlag LEASHED -> GIVK
    java.lang.String m -> GtKH
    react.api.EntityFlag[] $VALUES -> rqCn
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> RsPX
    40:60:boolean is(org.bukkit.entity.Entity) -> xXIp
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> eqvt:
    react.glang.GSet entityTypes -> HThy
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> aLUn
react.api.EntitySample -> nkqL:
    react.glang.GMap counts -> JksY
    react.glang.GMap sets -> JlSx
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> JHsd
    45:45:react.glang.GList getTypes() -> dxBo
    50:57:int total() -> quWm
    62:67:int get(org.bukkit.entity.EntityType) -> fmIR
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> Jjvw
    84:96:void add(org.bukkit.entity.Entity) -> IFSE
react.api.Experimental -> jyWf:
react.api.IAction -> BInv:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> OPTg
    void act(react.api.IActionSource,react.api.ISelector[]) -> Jjvw
    void enact(react.api.IActionSource,react.api.ISelector[]) -> fmIR
    react.api.ActionState getState() -> cImA
    react.api.ActionTargetType getTarget() -> fmII
    void setNodes(java.lang.String[]) -> fmIR
    java.lang.String[] getNodes() -> paTN
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> fmIR
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> UcGj
    react.glang.GMap getDefaultSelectors() -> Ywcx
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> fmIR
    react.api.ISelector[] biselect(react.api.ISelector[]) -> fmIR
    react.api.IActionSource getCurrentSource() -> qArl
    void completeAction() -> YoTO
react.api.IActionSource -> TWVJ:
    void sendResponse(java.lang.String) -> Jjvw
    void sendResponseSuccess(java.lang.String) -> EKHL
    void sendResponseError(java.lang.String) -> HSpS
    void sendResponseActing(java.lang.String) -> IFSE
react.api.ICache -> WWnG:
    react.glang.GSet get(java.lang.Object) -> Jjvw
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> EKHL
    void clear() -> clear
    boolean has(java.lang.Object) -> HSpS
    react.glang.GList k() -> eHBI
react.api.ICommand -> BInt:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> PmIb
    java.lang.String[] getPermissions() -> mhjO
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> RsPX
    react.api.SideGate getSideGate() -> KCgF
    void registerParameterDescription(java.lang.String,java.lang.String) -> fmIR
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.api.IRecord -> kbgT:
    java.lang.String getRecordType() -> ftvm
    long getRecordTime() -> rUur
    react.json.JSONObject toJSON() -> DYFM
    java.lang.Object getRecordObject() -> RroH
    void fromJSON(react.json.JSONObject) -> fmIR
react.api.IRecordBook -> VChy:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> fmIR
    long getOldestRecordTime() -> PKFf
    void addRecord(react.api.IRecord) -> fmIR
    long getLatestRecordTime() -> QVYl
    int countRecords(long,long) -> fmIR
    react.glang.GMap getRecords(long,long) -> Jjvw
    int purgeRecordsBefore(long) -> Jjvw
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> Qona:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> lCcx
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> mOYC
    react.surge.util.C getAltColor() -> KULB
    void setColor(react.surge.util.C,react.surge.util.C) -> fmIR
    int getInterval() -> getInterval
    void setInterval(int) -> Jjvw
    void sample() -> eqvt
    java.lang.String get() -> get
    void construct() -> nkqL
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> RrrQ:
    react.api.SelectionMode getMode() -> jyWf
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> IFSE
    react.glang.GSet getList() -> BInv
    react.glang.GSet getPossibilities() -> TWVJ
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> RsPX
    java.lang.String getName() -> getName
react.api.Injection -> YoUq:
    react.api.InjectionMethod value() -> WWnG
react.api.InjectionMethod -> pHCw:
    react.api.InjectionMethod SWAP -> tDII
    react.api.InjectionMethod SUBSTRATE -> RcJY
    react.api.InjectionMethod RELOAD -> opNk
    react.api.InjectionMethod[] $VALUES -> BBYL
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> upeV:
    java.lang.String value() -> value
react.api.MSampler -> lLYB:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> BInt
react.api.MonitorHeading -> WFlQ:
    react.api.ISampler head -> mqxS
    react.glang.GList children -> hkYt
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> fmIR
    27:27:react.api.ISampler getHead() -> kbgT
    32:33:void setHead(react.api.ISampler) -> Jjvw
    37:37:react.glang.GList getChildren() -> VChy
    42:42:java.lang.String getHeadText() -> Qona
    47:60:java.lang.String getChildText() -> RrrQ
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> fmIR
react.api.NoiseGenerator -> AGMG:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> iurt:
    react.api.NoiseGenerator[] octaves -> fTRE
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> YoUq
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> IxwJ:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> iLYu
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> pHCw
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> ugrw:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> fmIR
react.api.Permissable -> kkXO:
    react.api.Permissable ACCESS -> fdsS
    react.api.Permissable MONITOR -> Aihk
    react.api.Permissable MONITOR_TITLE -> LYIR
    react.api.Permissable MONITOR_ACTIONLOG -> baWp
    react.api.Permissable MONITOR_MAP -> sQev
    react.api.Permissable MONITOR_ENVIRONMENT -> EeVR
    react.api.Permissable MONITOR_GLASSES -> OkAi
    react.api.Permissable MONITOR_CHUNK_BLAME -> tejP
    react.api.Permissable RAI_MONITOR -> fnDN
    react.api.Permissable RAI_CONTROL -> Rbgy
    react.api.Permissable RAI_ACCESS -> fnDQ
    react.api.Permissable RAI -> nSWg
    react.api.Permissable ACT -> afch
    react.api.Permissable RELOAD -> bigG
    java.lang.String node -> cRvn
    react.api.Permissable[] $VALUES -> hkYQ
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> EKHL
    46:46:java.lang.String getNode() -> upeV
    7:22:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> Jsii:
    org.bukkit.entity.Player p -> KxHJ
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> Jjvw
    30:31:void sendResponseSuccess(java.lang.String) -> EKHL
    36:37:void sendResponseError(java.lang.String) -> HSpS
    42:43:void sendResponseActing(java.lang.String) -> IFSE
react.api.PluginSelfDeleter -> ckok:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> hYwC
    java.lang.Runnable r -> iLXs
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> fmIR
react.api.RAIActionSource -> cIli:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> Jjvw
    16:17:void sendResponseSuccess(java.lang.String) -> EKHL
    22:23:void sendResponseError(java.lang.String) -> HSpS
    28:29:void sendResponseActing(java.lang.String) -> IFSE
react.api.ReactCommand -> WWkp:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> UIoQ
    java.lang.String usage -> axFn
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> nKGJ
    react.api.SideGate sideGate -> FhXH
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> RsPX
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> fmIR
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> PmIb
    47:47:java.lang.String[] getPermissions() -> mhjO
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> KCgF
react.api.ReactException -> UAFQ:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> Gaoe:
    react.glang.GMap keystore -> iDHT
    boolean monitoring -> monitoring
    boolean actionlogging -> LOvN
    boolean glasses -> vuAq
    boolean mapping -> qeQi
    int monitorSelection -> cljU
    int plays -> JBAA
    boolean monitorPosted -> sQeU
    int monitorLastSelection -> PuuM
    int switchNotification -> hshi
    int hotbarSlot -> FFTq
    boolean shift -> LPXw
    int scroll -> Qpiq
    double lastHeight -> rhXV
    boolean heightMovement -> IhrS
    org.bukkit.entity.Player p -> KxHJ
    41:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> lLYB
    124:124:boolean isMapping() -> WFlQ
    129:129:org.bukkit.entity.Player getP() -> AGMG
    134:136:void setMonitoring(boolean) -> Jjvw
    140:142:void setMapping(boolean) -> EKHL
    146:146:int getMonitorSelection() -> iurt
    151:153:void setMonitorSelection(int) -> EKHL
    157:157:int getHotbarSlot() -> IxwJ
    162:164:void setHotbarSlot(int) -> HSpS
    168:168:boolean isShifting() -> ugrw
    173:175:void setShifting(boolean) -> HSpS
    179:179:boolean isShift() -> kkXO
    184:186:void setShift(boolean) -> IFSE
    190:190:int getScroll() -> Jsii
    195:197:void setScroll(int) -> IFSE
    201:201:int getMonitorLastSelection() -> ckok
    206:208:void setMonitorLastSelection(int) -> RsPX
    212:213:void setP(org.bukkit.entity.Player) -> fmIR
    217:217:double getLastHeight() -> cIli
    222:224:void setLastHeight(double) -> fmIR
    228:228:boolean isHeightMovement() -> WWkp
    233:235:void setHeightMovement(boolean) -> RsPX
    239:239:int getSwitchNotification() -> UAFQ
    244:246:void setSwitchNotification(int) -> xXIp
    250:250:boolean getMonitorPosted() -> Gaoe
    255:257:void setMonitorPosted(boolean) -> xXIp
    261:261:int getPlays() -> IWUX
    266:268:void setPlays(int) -> qJdO
    272:272:boolean isGlasses() -> gNJG
    277:279:void setGlasses(boolean) -> qJdO
    283:283:boolean isActionlogging() -> aThj
    288:290:void setActionlogging(boolean) -> OPTg
    24:39:void <clinit>() -> <clinit>
react.api.Record -> IWUX:
    java.lang.String recordType -> Pdud
    long recordTime -> ghXo
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> ftvm
    32:32:long getRecordTime() -> rUur
    38:38:java.lang.Object getRecordObject() -> RroH
    react.json.JSONObject toJSON() -> DYFM
    void fromJSON(react.json.JSONObject) -> fmIR
react.api.RecordBook -> gNJG:
    java.io.File recordFile -> qvVm
    react.json.JSONObject js -> PCSi
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> fmIR
    79:87:react.api.IRecord getRecord(long) -> fmIR
    react.api.IRecord createDummyRecord(long,java.lang.String) -> fmIR
    95:107:long getOldestRecordTime() -> PKFf
    113:125:long getLatestRecordTime() -> QVYl
    130:130:boolean within(long,long,long) -> fmIR
    136:144:int countRecords(long,long) -> fmIR
    150:162:react.glang.GMap getRecords(long,long) -> Jjvw
    168:181:int purgeRecordsBefore(long) -> Jjvw
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> aThj:
react.api.SampledChunk -> ktIK:
    org.bukkit.Chunk c -> QOHT
    react.glang.GMap counts -> JksY
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> ktIK
    26:38:void hit(react.api.ChunkIssue,int) -> fmIR
    42:42:org.bukkit.Chunk getC() -> jpeJ
    47:47:react.glang.GMap getCounts() -> VfKn
react.api.SampledType -> jpeJ:
    react.api.SampledType ENTITY_TIME_LOCK -> yJiO
    react.api.SampledType TILE_TIME_LOCK -> cBYy
    react.api.SampledType ENTITY_TIME -> vIpA
    react.api.SampledType TILE_TIME -> FEwN
    react.api.SampledType ENTITY_DROPTICK -> dxbG
    react.api.SampledType TILE_DROPTICK -> XKLW
    react.api.SampledType REDSTONE_TICK_USAGE -> fCSM
    react.api.SampledType REDSTONE_TICK -> yAvo
    react.api.SampledType REDSTONE_SECOND -> jyrK
    react.api.SampledType REDSTONE_TIME -> XKJb
    react.api.SampledType HOPPER_TICK_USAGE -> KDdR
    react.api.SampledType HOPPER_TICK -> SULm
    react.api.SampledType HOPPER_SECOND -> ETUJ
    react.api.SampledType HOPPER_TIME -> ghXO
    react.api.SampledType FLUID_TICK_USAGE -> GYyo
    react.api.SampledType FLUID_TICK -> PLCs
    react.api.SampledType FLUID_SECOND -> LYIf
    react.api.SampledType FLUID_TIME -> QgxN
    react.api.SampledType TPS -> uhoY
    react.api.SampledType TICK -> JRcD
    react.api.SampledType TIU -> eapX
    react.api.SampledType MEM -> RAHf
    react.api.SampledType FREEMEM -> iKyu
    react.api.SampledType MAXMEM -> RcKc
    react.api.SampledType ALLOCMEM -> lECg
    react.api.SampledType MAHS -> AjLo
    react.api.SampledType CHK_TIME -> rWUV
    react.api.SampledType EXPLOSION_TIME -> GAIa
    react.api.SampledType CHK -> WHHG
    react.api.SampledType ATASK -> qnET
    react.api.SampledType STASK -> Heni
    react.api.SampledType CHKS -> dMkw
    react.api.SampledType ENT -> KgHd
    react.api.SampledType ENTLIV -> mYGh
    react.api.SampledType ENTDROP -> Yoon
    react.api.SampledType ENTTILE -> AjNb
    java.lang.String node -> cRvn
    react.api.SampledType[] $VALUES -> wfgl
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    49:49:react.api.ISampler get() -> xylo
    55:55:java.lang.String toString() -> toString
    59:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> upeV
    6:43:void <clinit>() -> <clinit>
react.api.Sampler -> VfKn:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> VVIU
    react.surge.util.C altColor -> mGhe
    int interval -> IXTI
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> mOYC
    49:49:react.surge.util.C getAltColor() -> KULB
    55:55:int getInterval() -> getInterval
    void sample() -> eqvt
    void construct() -> nkqL
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> fmIR
    107:108:void setInterval(int) -> Jjvw
react.api.Sector -> xylo:
    int value() -> value
react.api.SelectionException -> CDbd:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> KLYw:
    react.api.SelectionMode WHITELIST -> RtOy
    react.api.SelectionMode BLACKLIST -> awiy
    react.api.SelectionMode[] $VALUES -> stOF
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> SCSJ:
    java.lang.Class objectType -> CMpR
    react.api.SelectionMode mode -> wfgY
    react.glang.GSet list -> eHaw
    react.glang.GSet possibilities -> awjn
    int popoff -> tUMv
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> jyWf
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> IFSE
    43:43:react.glang.GSet getList() -> BInv
    49:49:react.glang.GSet getPossibilities() -> TWVJ
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> RsPX
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> xXIp
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> TVux:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> EKHL
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> RsPX
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> qJdO
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> dLrw:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> hkBr:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> Jjvw
    29:30:void add(org.bukkit.Chunk,int) -> fmIR
    34:38:void add(org.bukkit.World) -> RsPX
    42:46:void addAll() -> CDbd
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> RsPX
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> qJdO
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> ogGA:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> RsPX
    87:87:java.lang.String getName() -> getName
react.api.Side -> kQgw:
    react.api.Side PLAYERS -> Cxel
    react.api.Side CONSOLE -> ETYH
    java.lang.String ss -> jOaJ
    react.api.Side[] $VALUES -> tTmV
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> KLYw
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> HSpS
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> JtNH:
    react.api.SideGate PLAYERS_ONLY -> SnaM
    react.api.SideGate CONSOLES_ONLY -> EuyJ
    react.api.SideGate ANYTHING -> vJRT
    react.api.SideGate[] $VALUES -> WOxh
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> fmIR
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> JtNH$1:
    int[] $SwitchMap$react$api$SideGate -> QFXG
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> YoXO:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> GcMt
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> SCSJ
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> xiPO:
    double wScale -> TiSb
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> fmIR
react.api.SpecializedTickLimiter -> CLuB:
    double rMaxTime -> qCRp
    long rStartTime -> QFXC
    double rLastTime -> Jtga
    long rMark -> YyDJ
    double tMaxTime -> JuIL
    react.gmath.Average atimes -> lEFL
    react.gmath.Average adropped -> iwRC
    int droppedTicks -> AjOV
    boolean entityTick -> ELFo
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> iKax:
    react.glang.GList sources -> gVvh
    react.glang.GList splooge -> JlXF
    react.glang.GSet destroy -> vcbx
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> fmIR
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> Jjvw
    void clipped(org.bukkit.Location) -> fmIR
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> Jjvw
    boolean isAllowedSource(org.bukkit.Location) -> EKHL
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> fmIR
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> Jjvw
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> EKHL
react.api.SploogeCounter$1 -> iKax$1:
    java.util.Iterator val$it -> wwhJ
    org.bukkit.Location val$start -> vdCv
    int val$maxDistance -> Tqcv
    react.api.SploogeCounter this$0 -> IiTl
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> iKax$1$1:
    react.api.SploogeCounter$1 this$1 -> HfRL
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> CoXw:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> ccbb:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> DYFM
    38:49:void fromJSON(react.json.JSONObject) -> fmIR
react.api.StackTraceRecordBook -> BtfB:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> Jjvw
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> fmIR
react.api.StackedEntity -> AXPd:
    org.bukkit.entity.LivingEntity entity -> xPXL
    int count -> count
    double rmx -> qLCp
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> fmIR
    46:46:int getAbsoluteMaxCount() -> TVux
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> Jjvw
    56:58:void update() -> update
    62:68:void signalSize() -> dLrw
    72:123:void updateHealth() -> hkBr
    127:128:void heal(double) -> Jjvw
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> ogGA
    142:142:int getEffectiveCount(double) -> EKHL
    147:147:double getEffectiveMaxHealth(int) -> OPTg
    152:152:double getRealMaxHealth() -> kQgw
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> fmIR
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> iSrL:
    react.glang.GList headings -> OrxY
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> fmIR
    24:24:int getMaxSelection() -> JtNH
    29:37:int left(int) -> cImA
    42:50:int right(int) -> fmII
    55:55:react.api.MonitorHeading getHeadFor(int) -> UcGj
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> fmIR
    83:100:java.lang.String getHotbarFor(int,boolean) -> fmIR
react.api.Unused -> LytC:
react.binject.BlockInjector -> Jbkm:
    react.surge.util.Protocol protocol -> YxfU
    java.lang.Class blocksClass -> oVao
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> fmIR
    29:56:void inject() -> YoXO
    61:61:react.surge.util.Protocol getVersion() -> xiPO
react.binject.IBlockInjector -> tCQQ:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> fmIR
    void add(int,java.lang.String,java.lang.Object) -> fmIR
    java.lang.Object get(java.lang.String) -> get
    void inject() -> YoXO
    react.surge.util.Protocol getVersion() -> xiPO
react.binject.InjectedBlock -> GbSr:
    react.surge.util.Protocol getInjectProtocol() -> CLuB
    java.lang.String getInjectKey() -> iKax
    java.lang.String getInjectCKey() -> CoXw
    int getInjectId() -> ccbb
react.binject.ReflectionUtil -> Garr:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> fmIR
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> fmIR
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> fmIR
    41:54:void setAccessible(java.lang.reflect.Field) -> fmIR
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> fmIR
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> fmIR
react.binject.V10.BlockInjector10 -> ySAJ:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> xXIp
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> fmIR
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIR
react.binject.V11.BlockInjector11 -> XdEP:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> qJdO
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> fmIR
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIR
react.binject.V12.BlockInjector12 -> mhpA:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> OPTg
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> fmIR
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIR
react.binject.V8.BlockInjector8 -> jqHV:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> cImA
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> fmIR
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIR
react.binject.V9.BlockInjector9 -> vIVV:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> fmII
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> fmIR
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> fmIR
react.cache.CachedEntity -> UIXF:
    java.util.UUID uid -> uiUQ
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> OQVV
    double x -> x
    double y -> y
    double z -> z
    double vx -> uWrl
    double vy -> XvCg
    double vz -> NNTC
    double dx -> fCUy
    double dy -> qdyA
    double dz -> Seru
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> qJdO
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> BtfB
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> AXPd
    120:121:void setVx(double) -> HSpS
    125:125:double getVy() -> iSrL
    130:131:void setVy(double) -> IFSE
    135:135:double getVz() -> LytC
    140:141:void setVz(double) -> RsPX
    145:145:double getDx() -> Jbkm
    150:151:void setDx(double) -> xXIp
    155:155:double getDy() -> tCQQ
    160:161:void setDy(double) -> qJdO
    165:165:double getDz() -> GbSr
    170:171:void setDz(double) -> OPTg
    175:175:java.util.UUID getUid() -> Garr
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> AFoe:
    int age -> XeCS
    boolean ageLock -> SCor
    boolean breed -> rqMQ
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> qJdO
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> ySAJ
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> XdEP
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> uOEI:
    org.bukkit.DyeColor dye -> rFYM
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> qJdO
    30:30:org.bukkit.DyeColor getDye() -> mhpA
    35:36:void setDye(org.bukkit.DyeColor) -> fmIR
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> fmLa:
    react.glang.GList potionEffects -> FyaL
    boolean canPickupItems -> iCnc
    org.bukkit.inventory.ItemStack[] armorContents -> esWy
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> yJmC
    double maxHealth -> maxHealth
    int maxAir -> ObWI
    int air -> ejfN
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> qJdO
    63:63:react.glang.GList getPotionEffects() -> jqHV
    68:69:void setPotionEffects(react.glang.GList) -> Jjvw
    73:73:boolean isCanPickupItems() -> vIVV
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> UIXF
    138:139:void setMaxAir(int) -> Ywcx
    143:143:int getAir() -> AFoe
    148:149:void setAir(int) -> YoTO
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> FopS:
    boolean sheared -> STpT
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> qJdO
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> oMQv:
    org.bukkit.inventory.ItemStack is -> TGRd
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> qJdO
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> flkF:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> ssPs:
    react.chronophysics.HopperDirection DOWN -> YMqG
    react.chronophysics.HopperDirection NORTH -> OjgM
    react.chronophysics.HopperDirection SOUTH -> dNPp
    react.chronophysics.HopperDirection EAST -> STpR
    react.chronophysics.HopperDirection WEST -> YMqI
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> toAv
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> HSpS
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> fmIR
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> Jjvw
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> ssPs$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> DQVP
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> iKaG:
    org.bukkit.block.Hopper source -> Ojfs
    react.glang.GList path -> yKLq
    org.bukkit.block.Hopper destination -> bGja
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> uOEI
    31:31:react.glang.GList getPath() -> fmLa
    36:36:org.bukkit.block.Hopper getDestination() -> FopS
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> fmIR
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> pYGF:
    org.bukkit.block.Hopper h -> ObXB
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> fmIR
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> oMQv
    62:62:boolean isLockedByRedstone() -> flkF
react.command.CommandAct -> vAEe:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> fmIR
    186:192:react.text.RTX getBeginningRTX() -> ssPs
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> fmIR
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> Jjvw
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> EKHL
    331:346:react.glang.GList getSortedCommands() -> iKaG
    351:358:int getPageSize(int) -> qArl
    363:363:boolean isValidPage(int,int) -> fmIR
    368:377:react.glang.GList getPage(int,int) -> Jjvw
react.command.CommandActionLog -> upfT:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandCPUScore -> KwSH:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandCapabilities -> HLGF:
    16:23:void <init>() -> <init>
    28:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandChunkBlame -> BuHq:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandChunkBlame$1 -> BuHq$1:
    org.bukkit.command.CommandSender val$sender -> tepI
    react.command.CommandChunkBlame this$0 -> GbpQ
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> BuHq$1$1:
    java.lang.String val$i -> kuIL
    react.glang.GMap val$top -> aEKV
    int val$totalx -> oxfm
    react.command.CommandChunkBlame$1 this$1 -> AXos
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> WaDD:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandHelp -> dgHq:
    28:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> fmIR
    69:75:react.text.RTX getBeginningRTX() -> ssPs
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> fmIR
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> Jjvw
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> EKHL
    191:198:react.glang.GList getSortedCommands() -> iKaG
    203:210:int getPageSize(int) -> qArl
    215:215:boolean isValidPage(int,int) -> fmIR
    220:229:react.glang.GList getPage(int,int) -> Jjvw
react.command.CommandMap -> avqE:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandMonitor -> ytfJ:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandReload -> CVHl:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.command.CommandReload$1 -> CVHl$1:
    org.bukkit.command.CommandSender val$sender -> tepI
    react.command.CommandReload this$0 -> dEcH
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> CVHl$1$1:
    react.command.CommandReload$1 this$1 -> qKhj
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> ivXf:
    28:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
    52:61:org.bukkit.inventory.ItemStack makeBook() -> pYGF
    66:92:void addSpikePages(react.glang.GList) -> EKHL
    96:106:void addStatusPages(react.glang.GList) -> HSpS
    110:127:int findSlot(org.bukkit.entity.Player) -> Jjvw
react.command.CommandVersion -> MJUF:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> fmIR
react.controller.ActionController -> ncdh:
    int kiv -> fTYp
    react.glang.GMap actions -> ymSQ
    react.glang.GMap pending -> HLcl
    react.glang.GList tasks -> eIGb
    18:18:void <init>() -> <init>
    29:70:void start() -> start
    74:75:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> fmIR
    79:100:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> Jjvw
    105:105:react.api.IAction getAction(react.api.ActionType) -> fmIR
    110:111:void registerAction(react.api.IAction) -> fmIR
    117:117:void stop() -> stop
    122:187:void tick() -> tick
    191:191:react.glang.GList getActions() -> vAEe
    196:203:react.glang.GList getActionNames() -> upfT
    20:20:void <clinit>() -> <clinit>
react.controller.BenchmarkController -> JsoU:
    react.api.CPUBenchmark finished -> fKjB
    boolean done -> tLaJ
    int score -> Xlfq
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> fmIR
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> fmIR
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> fmIR
react.controller.BenchmarkController$1 -> JsoU$1:
    react.controller.BenchmarkController this$0 -> KxQY
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> JsoU$1$1:
    react.controller.BenchmarkController$1 this$1 -> Pmma
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> JsoU$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> VgOO
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> Vvpw:
    react.glang.GMap rangeMapping -> HMDw
    react.binject.IBlockInjector injector -> KfoM
    boolean injected -> IrJy
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> KwSH
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> HLGF
    115:115:react.binject.IBlockInjector getInjector() -> BuHq
    120:120:boolean isInjected() -> WaDD
react.controller.ChronophyFluidController -> TNhc:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> AXSD:
    boolean firstTickList -> tLaR
    long firstTick -> Cgha
    long lastTick -> AGnI
    react.gmath.Average aCSMS -> IOfC
    react.glang.GMap pluginLoads -> MvEa
    react.glang.GMap playerLoads -> JtlD
    int serverLoads -> iMBP
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> dgHq
    63:73:void tickNextTickList() -> avqE
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIR
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> fmIR
    171:171:boolean isFirstTickList() -> ytfJ
    176:176:long getFirstTick() -> CVHl
    181:181:long getLastTick() -> ivXf
    186:186:react.gmath.Average getaCSMS() -> MJUF
    191:191:react.glang.GMap getPluginLoads() -> ncdh
    196:196:react.glang.GMap getPlayerLoads() -> JsoU
    201:201:int getServerLoads() -> Vvpw
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> fmIR
    21:21:int access$108(react.controller.ChunkController) -> Jjvw
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> EKHL
react.controller.ChunkController$1 -> AXSD$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> ekIO
    react.controller.ChunkController this$0 -> Mlrs
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> EKHL
    131:131:void run(java.lang.Object) -> fmIR
react.controller.CommandController -> saqo:
    react.glang.GList commands -> YMsK
    boolean k -> vBEx
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> OPTg
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> cImA
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> fmIR
    317:317:react.glang.GList getCommands() -> TNhc
    322:323:void setCommands(react.glang.GList) -> IFSE
    327:327:boolean isK() -> AXSD
    332:333:void setK(boolean) -> cImA
react.controller.EntityCullController -> YDej:
    react.glang.GSet flags -> nTAS
    react.glang.GSet defer -> fLID
    react.glang.GMap maxs -> aUiw
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> saqo
    172:180:int cull(org.bukkit.Chunk) -> EKHL
    185:285:int partialCull(org.bukkit.Chunk) -> HSpS
react.controller.EntityStackController -> VwRc:
    react.glang.GList stacks -> DayK
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> RsPX
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> EKHL
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> HSpS
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> fmIR
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> fmIR
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> IFSE
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> fmIR
react.controller.EntityStackController$1 -> VwRc$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> NxhR
    react.controller.EntityStackController this$0 -> BluV
    249:249:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> dnyD:
    react.glang.GMap slots -> JAgd
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> fmIR
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIR
react.controller.ExplosiveController -> RbUb:
    boolean firstTickList -> tLaR
    long firstTick -> Cgha
    long lastTick -> AGnI
    react.gmath.Average aCSMS -> IOfC
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> dgHq
    50:60:void tickNextTickList() -> avqE
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> fmIR
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> fmIR
    89:89:boolean isFirstTickList() -> ytfJ
    94:94:long getFirstTick() -> CVHl
    99:99:long getLastTick() -> ivXf
    104:104:react.gmath.Average getaCSMS() -> MJUF
react.controller.FastDecayController -> Mkvr:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> fmIR
    47:123:void checkBreak(org.bukkit.block.Block) -> EKHL
    127:135:void decay(org.bukkit.block.Block) -> HSpS
    141:141:void tick() -> tick
react.controller.FastDecayController$1 -> Mkvr$1:
    react.glang.GMap val$locs -> urFx
    react.controller.FastDecayController this$0 -> BCBg
    57:57:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    61:61:boolean isAllowedSplooge(org.bukkit.Location) -> Jjvw
    67:67:boolean isAllowedSource(org.bukkit.Location) -> EKHL
    73:92:void clipped(org.bukkit.Location) -> fmIR
    97:120:void finished() -> finished
react.controller.FastDecayController$1$1 -> Mkvr$1$1:
    int val$i -> AHPM
    react.controller.FastDecayController$1 this$1 -> lDke
    102:102:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    106:116:void run() -> run
react.controller.FastDecayController$2 -> Mkvr$2:
    org.bukkit.block.Block val$b -> bHOv
    react.controller.FastDecayController this$0 -> BCBg
    128:128:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    132:133:void run() -> run
react.controller.FeatureController -> RPqY:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> nuFQ:
    react.glang.GSet ignore -> Rbsg
    int flowsPerTick -> oghB
    int flowsPerSecond -> yCBW
    react.gmath.Average aFST -> YoyE
    react.gmath.Average aFSS -> IFwd
    react.gmath.Average aFSMS -> IrML
    boolean firstTickList -> tLaR
    long firstTick -> Cgha
    long lastTick -> AGnI
    react.glang.GSet frozen -> tUTm
    react.glang.GMap queue -> sRPv
    react.glang.GMap freezeTimes -> CEfR
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> IFSE
    68:76:void checkChunks() -> YDej
    80:97:void checkChunk(org.bukkit.Chunk) -> RsPX
    101:107:void queue(org.bukkit.block.Block) -> IFSE
    111:111:boolean isFrozen(org.bukkit.Chunk) -> xXIp
    116:117:void freeze(org.bukkit.Chunk) -> qJdO
    121:127:void unfreeze(org.bukkit.Chunk) -> OPTg
    131:138:void freeze(org.bukkit.Chunk,long) -> fmIR
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> dgHq
    172:182:void tickNextTickList() -> avqE
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> fmIR
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> fmIR
    248:248:react.glang.GSet getIgnore() -> VwRc
    253:253:int getTransfersPerTick() -> dnyD
    258:258:int getTransfersPerSecond() -> RbUb
    263:263:react.gmath.Average getaFST() -> Mkvr
    268:268:react.gmath.Average getaFSS() -> RPqY
    273:273:react.gmath.Average getaFSMS() -> nuFQ
    278:278:boolean isFirstTickList() -> ytfJ
    283:283:long getFirstTick() -> CVHl
    288:288:long getLastTick() -> ivXf
    293:293:react.glang.GSet getFrozen() -> bXPb
    298:298:react.glang.GMap getQueue() -> UcLl
    303:303:react.glang.GMap getFreezeTimes() -> onvi
react.controller.GlassController -> bXPb:
    react.glang.GMap q -> sJAQ
    react.glang.GList g -> PnPg
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> EKHL
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> HSpS
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> IFSE
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> fmIR
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> fmIR
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> fmIR
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> fmIR
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> fmIR
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> fmIR
    33:33:react.glang.GList access$000(react.controller.GlassController) -> fmIR
react.controller.GlassController$1 -> bXPb$1:
    react.glang.GMap val$cc -> SDTv
    react.controller.GlassController this$0 -> RIbg
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> bXPb$1$1:
    org.bukkit.Location val$i -> RlFi
    org.bukkit.entity.Player val$j -> xiqF
    react.controller.GlassController$1 this$1 -> ievI
    107:107:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> UcLl:
    react.glang.GMap g -> tMCt
    react.glang.GMap gr -> QOQL
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> fmIR
    121:156:void toggleMapping(org.bukkit.entity.Player) -> RsPX
    160:160:react.glang.GMap getG() -> mFmn
    165:165:react.glang.GMap getGr() -> HKeK
    28:28:react.glang.GMap access$000(react.controller.GraphController) -> fmIR
    28:28:react.glang.GMap access$100(react.controller.GraphController) -> Jjvw
react.controller.GraphController$1 -> UcLl$1:
    react.controller.GraphController this$0 -> QqQu
    49:49:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> UcLl$2:
    react.controller.GraphController this$0 -> QqQu
    85:85:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> UcLl$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> qKjF
    react.controller.GraphController this$0 -> QqQu
    101:101:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> onvi:
    react.glang.GSet ignore -> Rbsg
    int transfersPerTick -> PKju
    int transfersPerSecond -> XCBa
    react.gmath.Average aHST -> neEE
    react.gmath.Average aHSS -> Pmms
    react.gmath.Average aHSMS -> pkKB
    boolean firstTickList -> tLaR
    long firstTick -> Cgha
    long lastTick -> AGnI
    react.glang.GSet frozen -> tUTm
    react.glang.GMap queue -> sRPv
    react.glang.GMap freezeTimes -> CEfR
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> IFSE
    65:73:void checkChunks() -> YDej
    77:94:void checkChunk(org.bukkit.Chunk) -> RsPX
    98:104:void queue(org.bukkit.block.Block) -> IFSE
    108:108:boolean isFrozen(org.bukkit.Chunk) -> xXIp
    113:114:void freeze(org.bukkit.Chunk) -> qJdO
    118:124:void unfreeze(org.bukkit.Chunk) -> OPTg
    128:135:void freeze(org.bukkit.Chunk,long) -> fmIR
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> dgHq
    169:179:void tickNextTickList() -> avqE
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> fmIR
    207:207:react.glang.GSet getIgnore() -> VwRc
    212:212:int getTransfersPerTick() -> dnyD
    217:217:int getTransfersPerSecond() -> RbUb
    222:222:react.gmath.Average getaHST() -> FpRu
    227:227:react.gmath.Average getaHSS() -> yJQJ
    232:232:react.gmath.Average getaHSMS() -> NLvT
    237:237:boolean isFirstTickList() -> ytfJ
    242:242:long getFirstTick() -> CVHl
    247:247:long getLastTick() -> ivXf
    252:252:react.glang.GSet getFrozen() -> bXPb
    257:257:react.glang.GMap getQueue() -> UcLl
    262:262:react.glang.GMap getFreezeTimes() -> onvi
react.controller.HopperOvertickController -> mFmn:
    react.glang.GList possiblePlunge -> FOPN
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> EKHL
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> fmIR
react.controller.LanguageController -> HKeK:
    java.io.File languageFolder -> iwXD
    int oldVersion -> CFHT
    java.io.File dlf -> qnLt
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> teUR
    160:221:void downloadAll(boolean) -> fmII
    225:261:void downloadLanguage(java.lang.String) -> UcGj
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> Ywcx
    315:315:java.io.File getFileForLanguage(java.lang.String) -> YoTO
    320:332:void writeDefaults() -> nccY
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> fmIR
    31:31:void access$100(react.controller.LanguageController) -> fmIR
react.controller.LanguageController$1 -> HKeK$1:
    react.controller.LanguageController this$0 -> qmlT
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> HKeK$2:
    react.controller.LanguageController this$0 -> qmlT
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> HKeK$2$1:
    react.controller.LanguageController$2 this$1 -> Qpqd
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> fmIR
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> fmIR
    121:121:void onDownloadStarted(react.gnet.download.Download) -> fmIR
    126:128:void onDownloadFinished(react.gnet.download.Download) -> Jjvw
    134:134:void onDownloadFailed(react.gnet.download.Download) -> EKHL
react.controller.LanguageController$3 -> HKeK$3:
    react.controller.LanguageController this$0 -> qmlT
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> HKeK$3$1:
    react.controller.LanguageController$3 this$1 -> rNlP
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> HKeK$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> JAjG
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> HKeK$4:
    java.io.File val$dld -> dowa
    react.controller.LanguageController this$0 -> qmlT
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> fmIR
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> fmIR
    245:245:void onDownloadStarted(react.gnet.download.Download) -> fmIR
    250:251:void onDownloadFinished(react.gnet.download.Download) -> Jjvw
    257:257:void onDownloadFailed(react.gnet.download.Download) -> EKHL
react.controller.MonitorController -> FpRu:
    int maxCooldown -> GsvB
    react.api.TitleMonitor titleMonitor -> Fycj
    react.glang.GMap posts -> hlCl
    react.slate.PhantomSlate sb -> KwrB
    boolean ready -> uWxl
    43:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> CwkQ
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> xXIp
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> qJdO
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> dVFh
    178:183:float calcVolume(react.api.ReactPlayer) -> fmIR
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> OPTg
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> cImA
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> fmII
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> UcGj
    218:222:void startMonitoring(org.bukkit.entity.Player) -> Ywcx
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> YoTO
    241:246:void startActionLogging(org.bukkit.entity.Player) -> qArl
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> paTN
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> Jjvw
    278:290:void processPlayer(react.api.ReactPlayer) -> EKHL
    295:295:void handleActionLog(org.bukkit.entity.Player) -> bGHp
    299:323:void handleTriggers(react.api.ReactPlayer) -> HSpS
    327:366:void handleScrolling(react.api.ReactPlayer) -> IFSE
    370:398:void handleShifting(react.api.ReactPlayer) -> RsPX
    402:424:void handlePosting(react.api.ReactPlayer) -> xXIp
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> fmIR
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> fmIR
    470:477:void tickMonitor(react.api.ReactPlayer) -> qJdO
    481:481:react.api.TitleMonitor getTitleMonitor() -> Oikj
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> fmIR
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> fmIR
    515:527:void onTick() -> APCW
    531:553:void updateActionBoard() -> UAJX
    558:558:java.lang.String getTickName() -> DXkT
    34:34:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> fmIR
    34:34:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> fmIR
    34:34:boolean access$202(react.controller.MonitorController,boolean) -> fmIR
    34:34:boolean access$200(react.controller.MonitorController) -> Jjvw
    34:34:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> EKHL
    36:36:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> FpRu$1:
    react.controller.MonitorController this$0 -> cdgR
    68:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> FpRu$2:
    react.controller.MonitorController this$0 -> cdgR
    532:532:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> yJQJ:
    react.glang.GMap samples -> yugf
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> cImA
    51:52:void onHopper(org.bukkit.Chunk) -> fmII
    56:57:void onFluid(org.bukkit.Chunk) -> UcGj
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> fmIR
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> fmIR
    80:91:void onTick() -> APCW
    96:96:java.lang.String getTickName() -> DXkT
    101:101:react.glang.GMap getSamples() -> BdJF
react.controller.PlayerController -> NLvT:
    react.glang.GList players -> bjUX
    react.glang.GSet save -> vAjR
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> AFlD
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> fmIR
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> eHBI
    113:113:react.glang.GList getPlayers() -> Aqft
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIR
react.controller.PlayerController$1 -> NLvT$1:
    react.glang.GList val$toSave -> hswC
    react.controller.PlayerController this$0 -> ogin
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> teUR:
    react.rai.IRAI rai -> wxSP
    boolean raiEnabled -> XKUe
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    18:18:react.rai.IRAI access$000(react.controller.RAIController) -> fmIR
react.controller.RAIController$1 -> teUR$1:
    react.controller.RAIController this$0 -> DIMT
    49:49:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> nccY:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> EKHL
react.controller.ReactServerInfo -> CwkQ:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> wepW
    27:27:int dgetGameProtocol() -> IOKf
    33:33:java.lang.String dgetGameVersion() -> jExQ
    39:39:java.lang.String dgetReactVersion() -> TFYi
    45:45:int dgetMaxPlayers() -> WrGL
    51:58:react.glang.GList dgetConnectedPlayers() -> cSEx
    64:64:int dgetViewDistance() -> MuJl
    70:70:int dgetGamePort() -> rhBp
    76:76:java.lang.String dgetGameAddress() -> MciH
    82:89:react.glang.GList dgetRemotePlugins() -> cBEe
    95:102:react.glang.GList dgetWorlds() -> WPDd
    108:108:react.glang.GList dgetActions() -> IEys
    114:114:react.glang.GList dgetSamplers() -> cSFn
react.controller.RedstoneController -> dVFh:
    react.glang.GSet ignore -> Rbsg
    react.glang.GSet frozen -> tUTm
    react.glang.GMap queue -> sRPv
    react.glang.GMap freezeTimes -> CEfR
    int redstonePerTick -> dFHI
    int redstonePerSecond -> BTGf
    react.gmath.Average aRST -> NMxc
    react.gmath.Average aRSS -> LjVm
    react.gmath.Average aRSMS -> nugg
    boolean firstTickList -> tLaR
    long firstTick -> Cgha
    long lastTick -> AGnI
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> IFSE
    95:101:void tick() -> tick
    105:113:void checkChunks() -> YDej
    117:134:void checkChunk(org.bukkit.Chunk) -> RsPX
    138:144:void queue(org.bukkit.block.Block) -> IFSE
    148:148:boolean isFrozen(org.bukkit.Chunk) -> xXIp
    153:154:void freeze(org.bukkit.Chunk) -> qJdO
    158:165:void flushTickList() -> dgHq
    169:179:void tickNextTickList() -> avqE
    183:189:void unfreeze(org.bukkit.Chunk) -> OPTg
    193:200:void freeze(org.bukkit.Chunk,long) -> fmIR
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> fmIR
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> fmIR
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> fmIR
    246:246:react.glang.GSet getIgnore() -> VwRc
    251:251:react.glang.GSet getFrozen() -> bXPb
    256:256:react.glang.GMap getQueue() -> UcLl
    261:261:react.glang.GMap getFreezeTimes() -> onvi
    266:266:int getRedstonePerTick() -> RHeN
    271:271:int getRedstonePerSecond() -> sYcf
    276:276:react.gmath.Average getaRST() -> BuIy
    281:281:react.gmath.Average getaRSS() -> xOaT
    286:286:react.gmath.Average getaRSMS() -> TqOL
    291:291:boolean isFirstTickList() -> ytfJ
    296:296:long getFirstTick() -> CVHl
    301:301:long getLastTick() -> ivXf
react.controller.RemoteController -> Oikj:
    react.remote.server.RemoteServer remoteServer -> aDnf
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> wClV
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> fmIR
react.controller.RemoteController$1 -> Oikj$1:
    react.controller.RemoteController this$0 -> yufj
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> Oikj$2:
    react.controller.RemoteController this$0 -> yufj
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> ySDc
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> nceb
react.controller.SampleController -> APCW:
    react.glang.GMap samplers -> cdfy
    react.surge.server.SuperSampler ss -> wDmJ
    int cd -> pYkL
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> McgS
    69:74:void restartSuperSampler() -> KwSk
    78:79:void registerSampler(react.api.ISampler) -> EKHL
    83:83:react.api.ISampler getSampler(java.lang.String) -> qArl
    88:131:void constructSamplers() -> EeAh
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> oDfE
    187:209:void onTick() -> APCW
    214:214:java.lang.String getTickName() -> DXkT
    219:219:react.glang.GMap getSamplers() -> dgIj
    224:224:react.surge.server.SuperSampler getSs() -> yIqu
    229:229:int getCd() -> KTpU
    234:241:react.glang.GList getSamplerNames() -> Wqeh
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> fmIR
react.controller.SampleController$1 -> APCW$1:
    react.controller.SampleController this$0 -> Jtqd
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> APCW$2:
    react.controller.SampleController this$0 -> Jtqd
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> UAJX:
    java.lang.String ipa -> SLep
    react.glang.GList failures -> pYiq
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> paTN
    41:74:void checkForIP() -> SLGa
    78:91:void scan(java.lang.Runnable) -> fmIR
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> UAJX$1:
    react.controller.SecurityController this$0 -> NEfp
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> UAJX$2:
    java.lang.String val$ip -> IOim
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> UAJX$3:
    java.lang.Thread val$t -> IOjO
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> DXkT:
    react.glang.GMap etl -> ivxe
    react.glang.GMap ttl -> hcUV
    20:20:void <init>() -> <init>
    28:44:void start() -> start
    49:62:void stop() -> stop
    69:76:void on(org.bukkit.event.world.WorldLoadEvent) -> fmIR
    83:90:void on(org.bukkit.event.world.WorldUnloadEvent) -> fmIR
    96:96:void tick() -> tick
    100:112:void witholdWorld(org.bukkit.World) -> xXIp
    116:128:void releaseWorld(org.bukkit.World) -> qJdO
    132:144:double getUniversalEntityTick() -> DYNO
    149:161:double getUniversalEntityLimit() -> YDfl
    166:178:double getUniversalTileLimit() -> DYMp
    183:195:double getUniversalTileTick() -> OXlb
    200:207:double getUniversalEntityDroppedTicks() -> jNgm
    212:219:double getUniversalTileDroppedTicks() -> KfSP
    224:225:void setEntityTickLimit(org.bukkit.World,double) -> fmIR
    229:230:void setTileTickLimit(org.bukkit.World,double) -> Jjvw
    234:234:double getEntityTickLimit(org.bukkit.World) -> OPTg
    239:239:double getTileTickLimit(org.bukkit.World) -> cImA
    244:244:double getLastEntityTick(org.bukkit.World) -> fmII
    249:249:double getLastTileTick(org.bukkit.World) -> UcGj
    254:254:double getEntityDroppedTicks(org.bukkit.World) -> Ywcx
    259:259:double getTileDroppedTicks(org.bukkit.World) -> YoTO
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> fmIR
react.controller.SpikeController -> BdJF:
    react.glang.GMap spikes -> EfAn
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> APCW
    111:111:java.lang.String getTickName() -> DXkT
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> Suyr
    128:160:void whoFuckingDidThis(react.glang.Callback) -> fmIR
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> fmIR
react.controller.SpikeController$1 -> BdJF$1:
    react.controller.SpikeController this$0 -> iniC
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> BdJF$1$1:
    react.controller.SpikeController$1 this$1 -> Yxkf
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> BdJF$2:
    react.glang.GMap val$vv -> gOOl
    react.controller.SpikeController this$0 -> iniC
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> BdJF$3:
    java.lang.Thread val$t -> IOjO
    react.glang.Callback val$callback -> qByj
    react.controller.SpikeController this$0 -> iniC
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> Aqft:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.event.ReactEvent -> wepW:
    org.bukkit.event.HandlerList handlers -> breN
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> IOKf:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> jExQ:
    react.event.ScrollDirection direction -> hRSQ
    boolean cancellled -> KxUB
    int amount -> CyNS
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> GQVH
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> vbki
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> TFYi:
    react.event.ScrollDirection DOWN -> MTGX
    react.event.ScrollDirection UP -> AjVn
    react.event.ScrollDirection[] $VALUES -> lMaQ
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gbench.Profiler -> WrGL:
    long nanos -> ydhY
    long startNano -> clxw
    long millis -> HLjN
    long startMillis -> YgmF
    double time -> JuSt
    boolean profiling -> oyMg
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> paTN
    78:78:double getTicks() -> hjdp
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> ndId
    93:93:double getHours() -> VwWB
    98:98:double getMilliseconds() -> KLbf
    103:103:long getNanoseconds() -> UtSU
    108:108:long getNanos() -> eGlK
    113:113:long getStartNano() -> tBul
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> kALv
    128:128:double getTime() -> flrP
    133:133:boolean isProfiling() -> TiAK
react.gconcurrent.A -> cSEx:
    react.gconcurrent.ParallelPoolManager mgr -> tCvK
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> cSEx$1:
    react.gconcurrent.A this$0 -> AXvJ
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> MuJl:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> rhBp:
    react.gconcurrent.QueueMode mode -> QqXK
    react.glang.GList threads -> WjXd
    int next -> OYoW
    int threadCount -> LXwJ
    java.util.Queue squeue -> BBfh
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> yKVI
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> wpDU
    22:23:void syncQueue(react.gconcurrent.Execution) -> fmIR
    long getNanoGate() -> CEKP
    29:51:void tickSyncQueue() -> EmUe
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> FNUj
    102:109:int getTotalQueueSize() -> gxfb
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> Jjvw
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> jqOV
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> uplg
    161:188:void updateThreadInformation() -> eYMh
    192:224:react.gconcurrent.ParallelThread nextThread() -> QyGf
    229:235:void createThreads(int) -> bGHp
    239:239:react.gconcurrent.QueueMode getMode() -> PeCQ
    244:244:int getNext() -> vbnR
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> EmSv
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> Hmkr
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> QyGs
react.gconcurrent.ParallelThread -> MciH:
    java.util.Queue queue -> FWdS
    react.gconcurrent.ThreadInformation info -> yKVI
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> cImA
    63:70:void execute(react.gconcurrent.Execution) -> EKHL
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> Jjvw
    92:92:java.util.Queue getQueue() -> dUjU
    97:97:react.gconcurrent.ThreadInformation getInfo() -> pXki
react.gconcurrent.QueueMode -> cBEe:
    react.gconcurrent.QueueMode ROUND_ROBIN -> uFxe
    react.gconcurrent.QueueMode SMALLEST -> ydgN
    react.gconcurrent.QueueMode[] ENUM$VALUES -> mrfY
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> WPDd:
    react.gconcurrent.ParallelPoolManager mgr -> tCvK
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> WPDd$1:
    react.gconcurrent.S this$0 -> LYVQ
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> IEys:
    long tick -> clxR
    long atick -> gyeq
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> cSFn:
    double ticksPerSecond -> AYWm
    int queuedSize -> GJGU
    boolean processing -> RRWL
    double utilization -> kAkY
    react.gmath.Average ticksPerSecondAverage -> tTux
    long tick -> clxR
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> JcQh
    33:35:void setTicksPerSecond(double) -> fmII
    39:39:int getQueuedSize() -> rgcT
    44:45:void setQueuedSize(int) -> AFlD
    49:49:boolean isProcessing() -> wCmc
    54:55:void setProcessing(boolean) -> UcGj
    59:59:double getUtilization() -> xqeY
    64:65:void setUtilization(double) -> UcGj
    69:69:double getTicksPerSecondAverage() -> SBvw
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> qmQX
    89:89:int getId() -> getId
react.gformat.F -> RHeN:
    java.text.NumberFormat NF -> rXCJ
    java.text.DecimalFormat DF -> ifYf
    java.lang.String[] NAMES -> GJHD
    java.math.BigInteger THOUSAND -> YEhr
    java.util.NavigableMap MAP -> FXHV
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> bGHp
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> fmIR
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> fmIR
    201:221:java.lang.String timeLong(long,int) -> fmIR
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> EKHL
    236:236:java.lang.String b(double) -> Ywcx
    241:258:java.lang.String b(java.math.BigInteger) -> fmIR
    263:267:void instantiate() -> LiWm
    279:279:java.lang.String fileSize(long) -> HSpS
    292:292:java.lang.String memSize(long) -> IFSE
    305:306:java.lang.String stamp(long) -> RsPX
    322:349:java.lang.String ofSize(long,int) -> Jjvw
    363:368:java.lang.String trim(java.lang.String,int) -> Jjvw
    381:401:java.lang.String cname(java.lang.String) -> AFlD
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> xXIp
    459:477:java.lang.String memx(long) -> qJdO
    491:492:java.lang.String f(long) -> OPTg
    504:505:java.lang.String f(int) -> eHBI
    519:528:java.lang.String f(double,int) -> Jjvw
    544:553:java.lang.String fd(double,int) -> EKHL
    567:576:java.lang.String f(float,int) -> fmIR
    587:587:java.lang.String f(double) -> YoTO
    598:598:java.lang.String f(float) -> fmIR
    613:613:java.lang.String pc(double,int) -> HSpS
    628:628:java.lang.String pc(float,int) -> Jjvw
    641:641:java.lang.String pc(double) -> qArl
    654:654:java.lang.String pc(float) -> Jjvw
    670:670:java.lang.String pc(int,int,int) -> fmIR
    684:684:java.lang.String pc(int,int) -> EKHL
    700:700:java.lang.String pc(long,long,int) -> fmIR
    714:714:java.lang.String pc(long,long) -> HSpS
    726:726:java.lang.String msSeconds(long) -> cImA
    740:740:java.lang.String msSeconds(long,int) -> EKHL
    752:752:java.lang.String nsMs(long) -> fmII
    766:766:java.lang.String nsMs(long,int) -> HSpS
    780:780:java.lang.String nsMsd(long,int) -> IFSE
react.glang.AccessCallback -> sYcf:
    java.lang.Object get() -> get
react.glang.Adapter -> BuIy:
    java.lang.Object adapt(java.lang.Object) -> RsPX
    java.lang.Object onAdapt(java.lang.Object) -> xXIp
react.glang.Callback -> xOaT:
    java.lang.Object t -> vcpy
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> fmIR
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> TqOL:
    double i -> rGDb
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> paTN
react.glang.FinalFloat -> wClV:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> EKHL
react.glang.FinalInteger -> ySDc:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> Nfal
react.glang.FinalLong -> nceb:
    long i -> pHmr
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> UcGj
react.glang.FinalString -> McgS:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> KwSk:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> RsPX
    java.lang.Object onAdapt(java.lang.Object) -> xXIp
react.glang.GBiset -> EeAh:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> FhiR
    java.lang.Object b -> fTbX
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> KvvF
    53:54:void setA(java.lang.Object) -> qJdO
    63:63:java.lang.Object getB() -> rFAV
    73:74:void setB(java.lang.Object) -> OPTg
react.glang.GList -> oDfE:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> HSpS
    45:52:react.glang.GList grepDistance(int,int) -> IFSE
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> Jjvw
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> SnLk
    188:190:react.glang.GList shuffleCopy() -> Edca
    198:199:void shuffle() -> ETBq
    210:236:react.glang.GList split() -> ydGb
    248:248:boolean hasIndex(int) -> pHAe
    258:259:java.lang.Object pickRandom() -> LrLJ
    270:277:react.glang.GList stringList() -> Qxih
    288:292:void forEach(react.glang.Callback) -> Jjvw
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> eqsn
    336:336:react.glang.GList cropFrom(int) -> aLUn
    341:373:react.glang.GList split(int) -> JHsd
    389:389:react.glang.GList cropTo(int) -> dxBo
    406:416:react.glang.GList crop(int,int) -> RsPX
    427:431:react.glang.GList removeDuplicates() -> lnfV
    442:446:void removeAll(java.lang.Object) -> cImA
    455:455:boolean hasDuplicates() -> lfUp
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> OXqU
    484:490:void push(java.lang.Object,int) -> fmIR
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> fmII
    528:532:void add(java.util.List) -> fmIR
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> hbYw
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> GkMQ
    626:627:react.glang.GList qdel(java.lang.Object) -> UcGj
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> TXAI
    662:669:java.lang.Object popLast() -> hkLG
    674:683:java.lang.Object popRandom() -> Xckg
react.glang.GListAdapter -> dgIj:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> Jjvw
    java.lang.Object onAdapt(java.lang.Object) -> xXIp
react.glang.GMap -> yIqu:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> PBay
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> fmIR
    64:81:react.glang.GMap flip() -> Lhyq
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> fmIR
    121:121:react.glang.GList k() -> eHBI
    131:131:react.glang.GSet kset() -> iKig
    141:141:react.glang.GList v() -> DYST
    151:151:react.glang.GSet vset() -> lvuu
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> Jjvw
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> xXIp
    209:219:react.glang.GMap removeDuplicateValues() -> CVOB
    233:242:void put(react.glang.GList,react.glang.GList) -> fmIR
    251:267:react.glang.GList sortK() -> ySIP
    277:293:react.glang.GList sortV() -> AFvU
react.glang.GQuadraset -> KTpU:
    java.lang.Object a -> FhiR
    java.lang.Object b -> fTbX
    java.lang.Object c -> AaiY
    java.lang.Object d -> cTJx
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> KvvF
    25:26:void setA(java.lang.Object) -> qJdO
    30:30:java.lang.Object getB() -> rFAV
    35:36:void setB(java.lang.Object) -> OPTg
    40:40:java.lang.Object getC() -> AWwa
    45:46:void setC(java.lang.Object) -> Ywcx
    50:50:java.lang.Object getD() -> owoQ
    55:56:void setD(java.lang.Object) -> YoTO
react.glang.GSet -> Wqeh:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> SLGa:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> FhiR
    java.lang.Object b -> fTbX
    java.lang.Object c -> AaiY
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> KvvF
    26:27:void setA(java.lang.Object) -> qJdO
    31:31:java.lang.Object getB() -> rFAV
    36:37:void setB(java.lang.Object) -> OPTg
    41:41:java.lang.Object getC() -> AWwa
    46:47:void setC(java.lang.Object) -> Ywcx
react.gmath.Average -> DYNO:
    double[] values -> rXFA
    double average -> urOr
    boolean dirty -> JtvG
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> bGHp
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> cuNL
react.gmath.DoubleArrayUtils -> YDfl:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> fmIR
    17:19:void wrapRight(double[]) -> fmIR
    23:27:void fill(double[],double) -> fill
react.gmath.M -> DYMp:
    int precision -> CEkp
    int modulus -> QOVt
    float[] sin -> rNsf
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> fmIR
    31:36:boolean r(java.lang.Double) -> Jjvw
    51:51:double tps(long,int) -> RsPX
    63:63:double ticksFromNS(long) -> Ywcx
    75:101:java.lang.String toRoman(int) -> quWm
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> xXIp
    144:216:int fromRoman(java.lang.String) -> eHBI
    226:226:long ns() -> xaFu
    236:236:long ms() -> EKSO
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> Jjvw
    333:333:float sinLookup(int) -> PmIb
react.gnet.client.Client -> OXlb:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> fedX
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> fmIR
    74:74:react.gnet.packet.PacketHandler getHandler() -> eGlt
react.gnet.client.IClient -> jNgm:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> fmIR
    react.gnet.packet.PacketHandler getHandler() -> eGlt
react.gnet.download.Download -> KfSP:
    react.gnet.download.DownloadState state -> AiyS
    react.gnet.download.DownloadType type -> DkTk
    react.gnet.download.DownloadStatus status -> vRoH
    react.gnet.download.DownloadMonitor monitor -> BTMT
    java.net.URL url -> url
    java.io.File file -> WHUd
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> skJE
    92:92:react.gnet.download.DownloadType getType() -> fltD
    97:97:react.gnet.download.DownloadStatus getStatus() -> nBGr
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> tSxq
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> Suyr:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> fmIR
    void onDownloadStarted(react.gnet.download.Download) -> fmIR
    void onDownloadFinished(react.gnet.download.Download) -> Jjvw
    void onDownloadFailed(react.gnet.download.Download) -> EKHL
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> fmIR
react.gnet.download.DownloadState -> GQVH:
    react.gnet.download.DownloadState IDLE -> VDrE
    react.gnet.download.DownloadState DOWNLOADING -> oyOc
    react.gnet.download.DownloadState FAILED -> kAnS
    react.gnet.download.DownloadState FINISHED -> Emtv
    react.gnet.download.DownloadState[] $VALUES -> VDrH
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> vbki:
    long bytesDownloaded -> gOUL
    long bytesTotal -> KgVf
    long bytesPerSecond -> mPdc
    long timeElapsed -> KNEY
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> NgOm
    25:25:long getBytesDownloaded() -> rWEF
    30:31:void setBytesDownloaded(long) -> YoTO
    35:35:long getBytesTotal() -> DjTB
    40:41:void setBytesTotal(long) -> qArl
    45:45:long getBytesPerSecond() -> DXpr
    50:51:void setBytesPerSecond(long) -> paTN
    55:55:long getTimeElapsed() -> psBA
    60:61:void setTimeElapsed(long) -> bGHp
react.gnet.download.DownloadType -> hjdp:
    react.gnet.download.DownloadType DETERMINATE -> PmuW
    react.gnet.download.DownloadType INDETERMINATE -> vAmM
    react.gnet.download.DownloadType[] $VALUES -> fTbE
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> ndId:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> BBKS
    java.lang.String getPacketName() -> wDPl
react.gnet.packet.IncompatablePacketException -> VwWB:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> KLbf:
    react.gnet.packet.PacketBinding SERVER_BOUND -> yeMY
    react.gnet.packet.PacketBinding CLIENT_BOUND -> NxsM
    react.gnet.packet.PacketBinding[] $VALUES -> Djtq
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> UtSU:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> eGlK:
    react.glang.GList accept -> pkTV
    react.gnet.packet.PacketBinding side -> wNEl
    react.gnet.streams.OSS out -> Buor
    react.gnet.streams.ISS in -> ArmR
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> fmIR
    28:34:void accept(react.gnet.packet.IPacket) -> Jjvw
    38:46:react.gnet.packet.IPacket findPacket(int) -> mhjO
    51:66:react.gnet.packet.IPacket read() -> eYSJ
    71:77:void write(react.gnet.packet.IPacket) -> EKHL
react.gnet.packet.UnhandledPacketException -> tBul:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> kALv:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> eGlt
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> HSpS
react.gnet.server.Server -> flrP:
    int port -> port
    java.net.ServerSocket socket -> vmFJ
    react.gnet.packet.PacketHandler handler -> fedX
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> eGlt
    37:84:void run() -> run
    88:91:void pstart() -> xGVw
    95:96:void pstop() -> qmVv
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> HSpS
react.gnet.streams.ISS -> TiAK:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> pYqL
    boolean built -> rXGg
    byte[] readBuffer -> MCLm
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> KCgF
    64:72:react.glang.GList readStringList() -> Wqkq
    77:85:react.glang.GList readDoubleList() -> JQtV
    90:98:react.glang.GList readLongList() -> CEPB
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> fmIR
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> fmIR
    136:137:react.gnet.streams.ISS gzip() -> aCtX
    142:147:void build() -> jiDA
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> Jjvw
    435:436:void close() -> close
react.gnet.streams.OSS -> CEKP:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> fUFS
    react.gnet.streams.StreamBuilder bu -> pYqL
    boolean built -> rXGg
    byte[] writeBuffer -> uaPf
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> ftvm
    41:42:react.gnet.streams.OSS gzip(int) -> rUur
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> Jjvw
    53:58:void build() -> jiDA
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> qJdO
    102:108:void writeDoubleList(react.glang.GList) -> OPTg
    112:118:void writeLongList(react.glang.GList) -> cImA
    122:128:void writeStreamableList(react.glang.GList) -> fmII
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> DXsl
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> EKHL
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> EmUe:
    react.glang.GList constructors -> uiaM
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> fmIR
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIR
    49:50:void bind(react.gnet.streams.StreamConstructor) -> fmIR
    54:55:void bindGZIP(int) -> DYFM
    59:60:void bindGZIP() -> NNAJ
    64:65:void bindCipher(javax.crypto.Cipher) -> EKHL
    69:70:void bindBuffer(int) -> RroH
    74:75:void bindBuffer() -> HnQx
react.gnet.streams.StreamConstructor -> FNUj:
    java.io.InputStream constructInput(java.io.InputStream) -> fmIR
    java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIR
react.gnet.streams.constructors.BufferedStreamConstructor -> gxfb:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> Jjvw
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> Jjvw
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIR
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> fmIR
react.gnet.streams.constructors.CipherStreamConstructor -> jqOV:
    javax.crypto.Cipher cipher -> QhkE
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> EKHL
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> EKHL
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIR
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> fmIR
react.gnet.streams.constructors.GZipStreamConstructor -> uplg:
    int compressionLevel -> GlPA
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> HSpS
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> HSpS
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> fmIR
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> fmIR
react.gnet.streams.overlays.CGZIPInputStream -> eYMh:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> QyGf:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> PeCQ:
    void toBytes(react.gnet.streams.OSS) -> fmIR
    void fromBytes(react.gnet.streams.ISS) -> fmIR
react.graph.ColossalView -> vbnR:
    react.papyrus.BufferedFrame view -> Iqtf
    react.glang.GMap buffers -> hkkp
    react.glang.GMap graphs -> PwKB
    double level -> SgBM
    double targetLevel -> wDsN
    int maxX -> PvhI
    int maxY -> WQHw
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> bGYS
    51:77:void render() -> WOjP
    81:98:void scroll(int) -> PKFf
    102:112:void recompile() -> LFyS
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> fmIR
    122:122:react.papyrus.BufferedFrame getView() -> VCty
    127:127:react.glang.GMap getBuffers() -> imoU
    132:132:react.glang.GMap getGraphs() -> bGXd
    137:137:double getLevel() -> RkOO
    142:142:double getTargetLevel() -> OsEh
    147:147:int getMaxX() -> Oabv
    152:152:int getMaxY() -> Kvxs
react.graph.ColossalView$Builder -> vbnR$fmIR:
    react.glang.GList graphs -> CqBw
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> fmIR
    171:191:react.graph.ColossalView compute() -> JkfI
react.graph.CubicleIterator -> EmSv:
    int[][] mapping -> Xdla
    int xCubes -> VohS
    int yCubes -> lgWX
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> QVYl
    47:130:void insert(react.graph.GraphSize,int) -> fmIR
    134:145:void print() -> print
react.graph.GraphSampleLine -> Hmkr:
    double lx -> kmEF
    double ly -> bQIY
    react.api.ISampler sampler -> OQbW
    react.graph.IFormatter formatter -> hQxR
    byte graphColor -> EmxD
    byte backgroundColor -> YVoN
    byte borderColor -> mjYf
    byte textColor -> msJp
    int ticksLeftTitle -> QFiY
    int ticksOutTitle -> cvRK
    double nextPoint -> jjDv
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> eqvt
    51:183:void onRender(react.papyrus.BufferedFrame) -> fmIR
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> Jjvw
    226:254:int getHue(int,int,int) -> EKHL
    259:281:void scaleFor(react.glang.GList) -> UcGj
    285:285:react.graph.IFormatter getFormatter() -> lCcx
    290:291:void setFormatter(react.graph.IFormatter) -> fmIR
    295:295:byte getGraphColor() -> UkeP
    300:301:void setGraphColor(byte) -> fmIR
    305:305:byte getBackgroundColor() -> mFvV
    310:311:void setBackgroundColor(byte) -> Jjvw
    315:315:byte getBorderColor() -> fmVl
    320:321:void setBorderColor(byte) -> EKHL
    325:325:byte getTextColor() -> Hmow
    330:331:void setTextColor(byte) -> HSpS
    335:335:react.api.ISampler getSampler() -> nRik
react.graph.GraphSize -> QyGs:
    react.graph.GraphSize WIDE -> vSTl
    react.graph.GraphSize FULL -> oEoO
    react.graph.GraphSize SQUARE -> CyWF
    react.graph.GraphSize[] $VALUES -> ChUV
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> mGWA
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> QyGs$1:
    int[] $SwitchMap$react$graph$GraphSize -> VolB
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> dUjU:
    java.lang.String text -> text
    byte fontColor -> OYuX
    byte backgroundColor -> YVoN
    boolean wrote -> ebdm
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> fmIR
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> mPGl
    68:69:void setFontColor(byte) -> IFSE
    73:73:byte getBackgroundColor() -> mFvV
    78:79:void setBackgroundColor(byte) -> Jjvw
react.graph.GraphingInstance -> pXki:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> CqBw
    react.graph.ColossalView view -> hJMD
    react.papyrus.Papyrus papyrus -> NVrX
    react.papyrus.IRenderer renderer -> TXcj
    boolean mapping -> qeQi
    react.glang.GList msgs -> wMfj
    react.surge.sched.Task waiter -> MCNm
    react.surge.sched.Task waiter2 -> qUGI
    int shift -> ydnM
    boolean notif -> kBTA
    48:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> fmIR
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> fmIR
    138:142:void send(java.lang.String) -> Nfal
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> fmIR
    153:165:void on(react.event.ReactScrollEvent) -> fmIR
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> fmIR
    179:187:void destroy() -> destroy
    191:200:void toggle() -> YobC
    204:205:void setGraphs(react.glang.GList) -> Ywcx
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> Hmro
    243:259:void compile() -> pHSO
    32:32:boolean access$000(react.graph.GraphingInstance) -> fmIR
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> Jjvw
    32:32:boolean access$200(react.graph.GraphingInstance) -> EKHL
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> fmIR
    32:32:int access$300(react.graph.GraphingInstance) -> HSpS
    32:32:int access$310(react.graph.GraphingInstance) -> IFSE
    32:32:int access$302(react.graph.GraphingInstance,int) -> fmIR
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> RsPX
react.graph.GraphingInstance$1 -> pXki$1:
    org.bukkit.entity.Player val$player -> rGIB
    react.graph.GraphingInstance this$0 -> DRFs
    52:52:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> pXki$2:
    react.graph.GraphingInstance this$0 -> DRFs
    77:77:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> pXki$3:
    react.graph.GraphingInstance this$0 -> DRFs
    107:107:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> fmIR
react.graph.IFormatter -> JcQh:
    java.lang.String from(double) -> AFlD
react.graph.IGraph -> rgcT:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> PShL
    long getTimeViewport() -> HwDu
    void render(react.papyrus.BufferedFrame) -> EKHL
    double getMax() -> getMax
    void setMax(double) -> eHBI
react.graph.NormalGraph -> wCmc:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> WQMH
    long timeViewport -> OIUS
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> PShL
    35:35:long getTimeViewport() -> HwDu
    41:42:void render(react.papyrus.BufferedFrame) -> EKHL
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> eHBI
    void onRender(react.papyrus.BufferedFrame) -> fmIR
react.graph.PlotBoard -> xqeY:
    react.glang.GMap plots -> wDtq
    int maxRecordings -> lDuP
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> cmBB
    33:33:long getAccurateTimeSpan() -> TqUy
    38:50:long getMedian(long,long) -> IFSE
    55:55:long getMinimumAccuracyRange() -> Cwul
    60:70:double getMaxValue() -> QyNs
    75:85:double getMinValue() -> HnSv
    90:90:react.glang.GList sort(react.glang.GMap) -> Jjvw
    95:105:long earilestRecording() -> KDYH
    110:120:long latestRecording() -> uFaJ
    125:126:void reduceBefore(long) -> AFlD
    130:148:void reduceBetween(long,long) -> RsPX
    152:152:boolean before(long,long) -> xXIp
    157:157:boolean after(long,long) -> qJdO
    162:162:boolean within(long,long,long) -> fmIR
    167:177:react.glang.GMap getBetween(long,long) -> OPTg
    182:184:void plot(long,double) -> fmIR
    188:188:boolean hasAt(long) -> eHBI
    193:193:double getAt(long) -> Nfal
    198:198:int getSize() -> getSize
react.graph.Point -> SBvw:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> qmQX:
    int iid -> GlOl
    react.graph.IGraph graph -> USTx
    react.graph.GraphSize size -> lUwC
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> SmsD
    24:25:void setGraph(react.graph.IGraph) -> fmIR
    29:29:react.graph.GraphSize getSize() -> dDnp
    34:35:void setSize(react.graph.GraphSize) -> fmIR
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> LiWm:
    react.graph.RenderMaxType UNLIMITED -> qnXW
    react.graph.RenderMaxType LIMITED -> vlfJ
    react.graph.RenderMaxType[] $VALUES -> Ticx
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> KvvF:
    java.lang.String CRLF -> majr
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> pHAe
    162:198:java.lang.String toString(react.json.JSONObject) -> Jjvw
react.json.HTTPTokener -> rFAV:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> SnLk:
    java.util.ArrayList myArrayList -> EfJY
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> fmIR
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> lCcx
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> mOYC
    394:399:react.json.JSONObject getJSONObject(int) -> KULB
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> eqsn
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> eqvt
    515:515:boolean optBoolean(int) -> nkqL
    533:536:boolean optBoolean(int,boolean) -> Jjvw
    551:551:double optDouble(int) -> jyWf
    569:572:double optDouble(int,double) -> fmIR
    587:587:int optInt(int) -> BInv
    605:608:int optInt(int,int) -> qJdO
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> Jjvw
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> fmIR
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> fmIR
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> fmIR
    722:723:react.json.JSONArray optJSONArray(int) -> TWVJ
    737:738:react.json.JSONObject optJSONObject(int) -> WWnG
    752:752:long optLong(int) -> BInt
    770:773:long optLong(int,long) -> fmIR
    788:788:java.lang.String optString(int) -> kbgT
    803:804:java.lang.String optString(int,java.lang.String) -> fmIR
    816:817:react.json.JSONArray put(boolean) -> Ywcx
    830:831:react.json.JSONArray put(java.util.Collection) -> fmIR
    845:848:react.json.JSONArray put(double) -> Nfal
    860:861:react.json.JSONArray put(int) -> VChy
    873:874:react.json.JSONArray put(long) -> pHAe
    887:888:react.json.JSONArray put(java.util.Map) -> fmIR
    902:903:react.json.JSONArray put(java.lang.Object) -> qArl
    921:922:react.json.JSONArray put(int,boolean) -> EKHL
    939:940:react.json.JSONArray put(int,java.util.Collection) -> fmIR
    958:959:react.json.JSONArray put(int,double) -> Jjvw
    977:978:react.json.JSONArray put(int,int) -> OPTg
    996:997:react.json.JSONArray put(int,long) -> Jjvw
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> fmIR
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> fmIR
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> paTN
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> fmIR
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> fmIR
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> fmIR
react.json.JSONException -> Edca:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> UJeG
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> ETBq:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> fmIR
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> aLUn
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> fmIR
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> Jjvw
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> pHAe
    379:456:java.lang.String toString(react.json.JSONArray) -> Jjvw
    472:552:java.lang.String toString(react.json.JSONObject) -> Jjvw
react.json.JSONObject -> ydGb:
    java.util.Map map -> map
    java.lang.Object NULL -> gOWp
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> fmIR
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> Jjvw
    480:499:java.lang.String doubleToString(double) -> pHAe
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> JHsd
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> dxBo
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> quWm
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> EKHL
    751:767:java.lang.String[] getNames(java.lang.Object) -> bGHp
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> PmIb
    855:855:boolean isNull(java.lang.String) -> mhjO
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> VDXO
    917:937:java.lang.String numberToString(java.lang.Number) -> fmIR
    949:949:java.lang.Object opt(java.lang.String) -> KCgF
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> fmIR
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> fmIR
    1018:1018:boolean optBoolean(java.lang.String) -> ftvm
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> fmIR
    1054:1054:double optDouble(java.lang.String) -> rUur
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> fmIR
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> fmIR
    1116:1119:double optDouble(java.lang.String,double) -> fmIR
    1134:1134:int optInt(java.lang.String) -> DYFM
    1152:1155:int optInt(java.lang.String,int) -> EKHL
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> RroH
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> PKFf
    1198:1198:long optLong(java.lang.String) -> QVYl
    1216:1219:long optLong(java.lang.String,long) -> fmIR
    1234:1234:java.lang.String optString(java.lang.String) -> lCcx
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> Jjvw
    1255:1305:void populateMap(java.lang.Object) -> AFlD
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> Jjvw
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> fmIR
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> Jjvw
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> HSpS
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> Jjvw
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> fmIR
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> EKHL
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> HSpS
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> IFSE
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> fmIR
    1590:1590:java.lang.Object remove(java.lang.String) -> mOYC
    1605:1640:boolean similar(java.lang.Object) -> paTN
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> eHBI
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> EKHL
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> fmIR
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> fmIR
    2000:2004:void indent(java.io.Writer,int) -> fmIR
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> fmIR
react.json.JSONObject$Null -> ydGb$fmIR:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> LrLJ:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> Qxih:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> lnfV:
    long character -> yCKM
    boolean eof -> eof
    long index -> lpIj
    long line -> dgqb
    char previous -> msMU
    java.io.Reader reader -> reader
    boolean usePrevious -> uaQp
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> gViy
    119:131:int dehexchar(char) -> fmIR
    136:136:boolean end() -> aDXQ
    147:153:boolean more() -> SKok
    164:198:char next() -> next
    213:218:char next(char) -> Jjvw
    233:250:java.lang.String next(int) -> Qona
    263:266:char nextClean() -> QFJk
    287:334:java.lang.String nextString(char) -> EKHL
    349:361:java.lang.String nextTo(char) -> HSpS
    376:388:java.lang.String nextTo(java.lang.String) -> KULB
    403:441:java.lang.Object nextValue() -> pQCb
    458:479:char skipTo(char) -> IFSE
    491:491:react.json.JSONException syntaxError(java.lang.String) -> eqvt
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> lfUp:
    int maxdepth -> dxuo
    boolean comma -> UdYw
    char mode -> NWTm
    react.json.JSONObject[] stack -> nBnO
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> nkqL
    157:164:react.json.JSONWriter array() -> qBct
    180:193:react.json.JSONWriter end(char,char) -> fmIR
    206:206:react.json.JSONWriter endArray() -> dxUV
    219:219:react.json.JSONWriter endObject() -> cmAk
    235:258:react.json.JSONWriter key(java.lang.String) -> jyWf
    274:285:react.json.JSONWriter object() -> IyhW
    299:310:void pop(char) -> RsPX
    322:329:void push(react.json.JSONObject) -> HSpS
    342:342:react.json.JSONWriter value(boolean) -> YoTO
    356:356:react.json.JSONWriter value(double) -> eqsn
    369:369:react.json.JSONWriter value(long) -> eqsn
    385:385:react.json.JSONWriter value(java.lang.Object) -> Nfal
react.json.XML -> OXqU:
    java.lang.Character AMP -> qwKw
    java.lang.Character APOS -> Cpgc
    java.lang.Character BANG -> Gcao
    java.lang.Character EQ -> yePw
    java.lang.Character GT -> vtyU
    java.lang.Character LT -> qCfo
    java.lang.Character QUEST -> XeSL
    java.lang.Character QUOT -> etIy
    java.lang.Character SLASH -> aDxt
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> BInv
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> fmIR
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> pHAe
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> hbYw:
    java.util.HashMap entity -> staA
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> XuSK
    108:133:java.lang.Object nextContent() -> Tyfv
    149:166:java.lang.Object nextEntity(char) -> xXIp
    186:239:java.lang.Object nextMeta() -> dMaK
    261:334:java.lang.Object nextToken() -> impx
    354:420:boolean skipPast(java.lang.String) -> TWVJ
react.papyrus.BufferedFrame -> GkMQ:
    byte[][] frame -> IjIc
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> fmIR
    90:97:void write(byte) -> RsPX
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> fmIR
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> fmIR
    131:145:java.awt.image.BufferedImage toBufferedImage() -> bOkQ
    153:160:void writeRainbowMul() -> OjWw
    167:174:void writeRainbowAdd() -> FFJJ
    181:191:void writeSparks() -> jiDV
    195:201:boolean write(int,int,byte) -> fmIR
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> fmIR
    233:250:void write(react.papyrus.BufferedFrame) -> HSpS
    254:254:byte[][] getRawFrame() -> aLfh
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> TXAI:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> HSpS
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> fmIR
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> hkLG:
    org.bukkit.map.MapView getView() -> aLfg
    react.papyrus.BufferedFrame getFrameBuffer() -> HLOk
    void addRenderer(react.papyrus.IRenderer) -> fmIR
    void clearRenderers() -> JlIL
    react.glang.GList getRenderers() -> prdu
    void removeRenderer(react.papyrus.IRenderer) -> Jjvw
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> maKk
react.papyrus.IRenderer -> Xckg:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> fmIR
react.papyrus.Papyrus -> PBay:
    org.bukkit.map.MapView map -> tVBM
    react.papyrus.BufferedFrame frameBuffer -> CqHy
    react.papyrus.BufferedFrame lastFrameBuffer -> ptIP
    react.glang.GList renderers -> eshI
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> aLfg
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> HLOk
    51:52:void addRenderer(react.papyrus.IRenderer) -> fmIR
    57:58:void clearRenderers() -> JlIL
    63:63:react.glang.GList getRenderers() -> prdu
    69:70:void removeRenderer(react.papyrus.IRenderer) -> Jjvw
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> maKk
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> fmIR
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> Jjvw
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> EKHL
react.papyrus.Papyrus$1 -> PBay$1:
    org.bukkit.map.MapCanvas val$c -> JSWn
    org.bukkit.map.MapView val$v -> vtxO
    react.papyrus.Papyrus this$0 -> XSpC
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> Lhyq:
    int spaceSize -> SUan
    java.lang.String fontChars -> oOAy
    int[][] fontData -> KMiv
    react.papyrus.ReactFont Font -> DIWD
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> iKig:
    react.glang.GList subgoals -> JBWO
    java.lang.String tag -> jHBg
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> PeJB
    26:44:void propigate() -> YgRd
    49:50:void addGoal(react.rai.IGoal) -> fmIR
    55:65:react.glang.GList getFailingSubgoals() -> baKl
    71:71:boolean isFailing() -> afYW
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> ghKh
    void onPropigated() -> JlIT
react.rai.Goal$1 -> iKig$1:
    react.rai.IGoal val$i -> dhTk
    react.rai.Goal this$0 -> pRDc
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> DYST:
    react.glang.GList getSubgoals() -> PeJB
    void propigate() -> YgRd
    void onPropigated() -> JlIT
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> baKl
    boolean isFailing() -> afYW
    boolean onCheckFailing() -> ghKh
    void update() -> update
    void addGoal(react.rai.IGoal) -> fmIR
react.rai.IRAI -> lvuu:
    react.glang.GList getGoals() -> XuPy
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> fmIR
    react.glang.GList getEvents() -> aMGw
    void callEvent(react.rai.RAIEvent) -> fmIR
    react.glang.GList getListeners() -> jydV
react.rai.RAI -> CVOB:
    react.glang.GList goals -> lpKn
    react.glang.GList events -> opdF
    react.glang.GList logEvents -> EKyK
    react.glang.GList listeners -> dpeL
    long since -> uaTS
    react.rai.RAI instance -> rXKM
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> XuPy
    41:42:void addGoal(react.rai.IGoal) -> fmIR
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> aMGw
    80:87:void callEvent(react.rai.RAIEvent) -> fmIR
    92:92:react.glang.GList getListeners() -> jydV
react.rai.RAIEvent -> ySIP:
    react.rai.RAIEventType type -> neQG
    java.lang.String[] pars -> kcwL
    java.lang.String ovt -> lokU
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> VMIO
    29:29:java.lang.String[] getPars() -> lDVC
    34:34:java.lang.String getOvt() -> vQrX
react.rai.RAIEventType -> AFvU:
    react.rai.RAIEventType FIRE_ACTION -> jPWB
    react.rai.RAIEventType NOTE_GOAL_FAILING -> eQgj
    react.rai.RAIEventType NOTE_GOAL_FIXED -> SgFx
    java.lang.String[] msgs -> cnEf
    react.rai.RAIEventType[] $VALUES -> ETmD
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> vcTv
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> fmIR
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedChunkLoad -> AWwa:
    boolean failing -> cutj
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> ghKh
    66:79:void onPropigated() -> JlIT
react.rai.goals.GoalReducedChunkLoad$1 -> AWwa$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> ECkS
    43:43:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> AWwa$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> ECkS
    69:69:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> owoQ:
    boolean failing -> cutj
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> ghKh
    91:134:void onPropigated() -> JlIT
    22:22:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> fmIR
react.rai.goals.GoalReducedEntityCounts$1 -> owoQ$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> Gksy
    68:68:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> owoQ$2:
    org.bukkit.Chunk val$lx -> jqxm
    react.rai.goals.GoalReducedEntityCounts this$0 -> Gksy
    120:120:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> cuNL:
    boolean failing -> cutj
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> ghKh
    78:128:void onPropigated() -> JlIT
react.rai.goals.GoalStableChunkTime$1 -> cuNL$1:
    react.rai.goals.GoalStableChunkTime this$0 -> eHut
    55:55:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> cuNL$2:
    java.lang.Object val$i -> kmMH
    react.rai.goals.GoalStableChunkTime this$0 -> eHut
    112:112:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> xaFu:
    boolean failing -> cutj
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> JlIT
    35:35:void letUp() -> gEhA
    40:77:boolean onCheckFailing() -> ghKh
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> fmIR
react.rai.goals.GoalStableEntityTime$1 -> xaFu$1:
    react.rai.goals.GoalStableEntityTime this$0 -> ryqD
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> EKSO:
    boolean failing -> cutj
    react.glang.GMap reocc -> fDJj
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> JlIT
    88:125:boolean onCheckFailing() -> ghKh
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> fmIR
    24:24:boolean access$100(react.rai.goals.GoalStableFluidTime) -> Jjvw
react.rai.goals.GoalStableFluidTime$1 -> EKSO$1:
    org.bukkit.Chunk val$lx -> jqxm
    react.rai.goals.GoalStableFluidTime this$0 -> GSCg
    67:67:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> EKSO$2:
    react.rai.goals.GoalStableFluidTime this$0 -> GSCg
    108:108:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> eGlt:
    boolean failing -> cutj
    react.glang.GMap reocc -> fDJj
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> JlIT
    89:125:boolean onCheckFailing() -> ghKh
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> fmIR
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> Jjvw
react.rai.goals.GoalStableHopperTime$1 -> eGlt$1:
    org.bukkit.Chunk val$lx -> jqxm
    react.rai.goals.GoalStableHopperTime this$0 -> oWUN
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> eGlt$2:
    react.rai.goals.GoalStableHopperTime this$0 -> oWUN
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> skJE:
    boolean failing -> cutj
    react.glang.GMap reocc -> fDJj
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> JlIT
    89:126:boolean onCheckFailing() -> ghKh
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> fmIR
    24:24:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> Jjvw
react.rai.goals.GoalStableRedstoneTime$1 -> skJE$1:
    org.bukkit.Chunk val$lx -> jqxm
    react.rai.goals.GoalStableRedstoneTime this$0 -> IHHY
    67:67:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> skJE$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> IHHY
    109:109:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> fltD:
    boolean failing -> cutj
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> JlIT
    34:58:boolean onCheckFailing() -> ghKh
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> fmIR
react.rai.goals.GoalStableTickTime$1 -> fltD$1:
    react.rai.goals.GoalStableTickTime this$0 -> IGfx
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> nBGr:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> kSXs
    boolean authenticated -> suCd
    react.remote.server.ServerInfo info -> fvnH
    react.glang.GMap frems -> cdsb
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> RrrQ
    51:51:react.glang.GMap getFrames() -> nAjf
    56:75:int computeFrames() -> Ihed
    80:92:boolean clearToken() -> ArQA
    97:110:boolean updateServerInfo() -> jiDS
    115:129:boolean refreshToken() -> TFdY
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> EKHL
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> YDrR
    165:165:boolean isAuthenticated() -> VoNa
    170:170:react.remote.server.ServerInfo getInfo() -> nuSb
react.remote.client.packet.CPacketClearToken -> tSxq:
    java.lang.String token -> kSXs
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIR
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIR
    38:38:java.lang.String getToken() -> YDrR
    43:44:void setToken(java.lang.String) -> WWnG
react.remote.client.packet.CPacketComputeFrames -> NgOm:
    java.lang.String token -> kSXs
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIR
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIR
    38:38:java.lang.String getToken() -> YDrR
    43:44:void setToken(java.lang.String) -> WWnG
react.remote.client.packet.CPacketGetInfo -> rWEF:
    java.lang.String token -> kSXs
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIR
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIR
    38:38:java.lang.String getToken() -> YDrR
    43:44:void setToken(java.lang.String) -> WWnG
react.remote.client.packet.CPacketGetToken -> DjTB:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> fmIR
    36:38:void fromBytes(react.gnet.streams.ISS) -> fmIR
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> DXpr:
    java.lang.String token -> kSXs
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIR
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIR
    38:38:java.lang.String getToken() -> YDrR
    43:44:void setToken(java.lang.String) -> WWnG
react.remote.client.packet.ClientPacket -> psBA:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> fmIR
    void fromBytes(react.gnet.streams.ISS) -> fmIR
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> BBKS
    42:42:java.lang.String getPacketName() -> wDPl
react.remote.client.packet.ClientPacketType -> BBKS:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> skqd
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> IGge
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> eRHJ
    react.remote.client.packet.ClientPacketType GET_INFO -> TGdr
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> dqHC
    react.remote.client.packet.ClientPacketType[] $VALUES -> MLCP
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> wDPl:
    react.glang.GMap compute(long,long) -> EKHL
react.remote.server.KnownUser -> eYSJ:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> xGVw:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> fmIR
    38:41:void fromBytes(react.gnet.streams.ISS) -> fmIR
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> qmVv:
    react.glang.GList users -> AkEM
    react.glang.GMap session -> cmcw
    react.glang.GMap lastCompute -> PDKG
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> ySDc
    44:45:void registerUser(react.remote.server.KnownUser) -> fmIR
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> Jjvw
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> BInt
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> HSpS
    react.remote.server.IFrameComputer getFrameComputer() -> nceb
    170:171:void markLastCompute(react.remote.server.KnownUser) -> EKHL
    175:180:long getLastCompute(react.remote.server.KnownUser) -> HSpS
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> fmIR
    190:191:void deleteSession(react.remote.server.KnownUser) -> IFSE
    195:195:java.lang.String createToken() -> gyOt
react.remote.server.ServerInfo -> Wqkq:
    java.lang.String motd -> LbRY
    int gameProtocol -> nCOd
    java.lang.String gameVersion -> GlTi
    java.lang.String reactVersion -> mani
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> nnCr
    int viewDistance -> viewDistance
    int gamePort -> rqaw
    java.lang.String gameAddress -> cLEJ
    react.glang.GList remotePlugins -> IHIr
    react.glang.GList worlds -> qfNs
    react.glang.GList actions -> ecKn
    react.glang.GList samplers -> XKcw
    26:26:react.remote.server.ServerInfo empty() -> GHns
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> fmIR
    146:159:void fromBytes(react.gnet.streams.ISS) -> fmIR
    java.lang.String dgetMotd() -> wepW
    int dgetGameProtocol() -> IOKf
    java.lang.String dgetGameVersion() -> jExQ
    java.lang.String dgetReactVersion() -> TFYi
    int dgetMaxPlayers() -> WrGL
    react.glang.GList dgetConnectedPlayers() -> cSEx
    int dgetViewDistance() -> MuJl
    int dgetGamePort() -> rhBp
    java.lang.String dgetGameAddress() -> MciH
    react.glang.GList dgetRemotePlugins() -> cBEe
    react.glang.GList dgetWorlds() -> WPDd
    react.glang.GList dgetActions() -> IEys
    react.glang.GList dgetSamplers() -> cSFn
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> QqAO
    199:199:java.lang.String getGameVersion() -> XSPv
    204:204:java.lang.String getReactVersion() -> wMJS
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> Gjqv
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> CwxN
    229:229:java.lang.String getGameAddress() -> STcN
    234:234:react.glang.GList getRemotePlugins() -> dUrf
    239:239:react.glang.GList getWorlds() -> FElY
    244:244:react.glang.GList getActions() -> vAEe
    249:249:react.glang.GList getSamplers() -> jNtN
react.remote.server.ServerInfo$1 -> Wqkq$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> WPDd
    37:37:int dgetViewDistance() -> MuJl
    43:43:react.glang.GList dgetRemotePlugins() -> cBEe
    49:49:java.lang.String dgetReactVersion() -> TFYi
    55:55:java.lang.String dgetMotd() -> wepW
    61:61:int dgetMaxPlayers() -> WrGL
    67:67:java.lang.String dgetGameVersion() -> jExQ
    73:73:int dgetGameProtocol() -> IOKf
    79:79:int dgetGamePort() -> rhBp
    85:85:java.lang.String dgetGameAddress() -> MciH
    91:91:react.glang.GList dgetConnectedPlayers() -> cSEx
    97:97:react.glang.GList dgetActions() -> IEys
    103:103:react.glang.GList dgetSamplers() -> cSFn
react.remote.server.packet.ComputedFrame -> JQtV:
    react.glang.GMap values -> SnyU
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> fmIR
    28:36:void fromBytes(react.gnet.streams.ISS) -> fmIR
    40:40:react.glang.GMap getValues() -> MBPo
    45:46:void setValues(react.glang.GMap) -> EKHL
react.remote.server.packet.SPacketOk -> CEPB:
    boolean ok -> yuvB
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIR
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIR
    38:38:boolean isOk() -> loLl
    43:44:void setOk(boolean) -> qArl
react.remote.server.packet.SPacketSendFrames -> aCtX:
    react.glang.GMap frames -> FhtE
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> fmIR
    36:44:void fromBytes(react.gnet.streams.ISS) -> fmIR
    48:48:react.glang.GMap getFrames() -> nAjf
    53:54:void setFrames(react.glang.GMap) -> HSpS
react.remote.server.packet.SPacketSendInfo -> jiDA:
    react.remote.server.ServerInfo info -> fvnH
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIR
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIR
    38:38:react.remote.server.ServerInfo getInfo() -> nuSb
    43:44:void setInfo(react.remote.server.ServerInfo) -> fmIR
react.remote.server.packet.SPacketSendToken -> DXsl:
    java.lang.String token -> kSXs
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> fmIR
    33:34:void fromBytes(react.gnet.streams.ISS) -> fmIR
    38:38:java.lang.String getToken() -> YDrR
    43:44:void setToken(java.lang.String) -> WWnG
react.remote.server.packet.ServerPacket -> NNAJ:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> fmIR
    void fromBytes(react.gnet.streams.ISS) -> fmIR
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> BBKS
    42:42:java.lang.String getPacketName() -> wDPl
react.remote.server.packet.ServerPacketType -> HnQx:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> MSuf
    react.remote.server.packet.ServerPacketType SEND_INFO -> LsWB
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> opiK
    react.remote.server.packet.ServerPacketType OK -> uHGU
    react.remote.server.packet.ServerPacketType[] $VALUES -> LPsJ
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> bGYS:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleAsyncQueue$1 -> bGYS$1:
    react.sampler.SampleAsyncQueue this$0 -> mYbA
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleChunkTime -> WOjP:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleChunkTime$1 -> WOjP$1:
    react.sampler.SampleChunkTime this$0 -> DAJS
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleChunksLoaded -> LFyS:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleChunksLoaded$1 -> LFyS$1:
    react.sampler.SampleChunksLoaded this$0 -> oyYy
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleChunksLoadedPerSecond -> VCty:
    react.gmath.Average a -> IjNI
    react.graph.IFormatter formatter -> hQxR
    16:29:void <init>() -> <init>
    34:40:void construct() -> nkqL
    45:47:void sample() -> eqvt
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleChunksLoadedPerSecond$1 -> VCty$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> Rcem
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> AFlD
react.sampler.SampleEntitiesDrops -> imoU:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleEntitiesDrops$1 -> imoU$1:
    react.sampler.SampleEntitiesDrops this$0 -> sBAB
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleEntitiesLiving -> bGXd:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleEntitiesLiving$1 -> bGXd$1:
    react.sampler.SampleEntitiesLiving this$0 -> WarI
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleEntitiesTiles -> RkOO:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleEntitiesTiles$1 -> RkOO$1:
    react.sampler.SampleEntitiesTiles this$0 -> hRap
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleEntitiesTotal -> OsEh:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleEntitiesTotal$1 -> OsEh$1:
    react.sampler.SampleEntitiesTotal this$0 -> BnIr
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleEntityDroppedTicks -> Oabv:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleEntityDroppedTicks$1 -> Oabv$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> ayCH
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleEntityTime -> Kvxs:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleEntityTime$1 -> Kvxs$1:
    react.sampler.SampleEntityTime this$0 -> AIDJ
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleEntityTimeLock -> JkfI:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleEntityTimeLock$1 -> JkfI$1:
    react.sampler.SampleEntityTimeLock this$0 -> QGOp
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleExplosionTime -> UkeP:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleExplosionTime$1 -> UkeP$1:
    react.sampler.SampleExplosionTime this$0 -> pIWe
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleFluidPerSecond -> mFvV:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleFluidPerSecond$1 -> mFvV$1:
    react.sampler.SampleFluidPerSecond this$0 -> yCPr
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleFluidPerTick -> fmVl:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    46:53:void sample() -> eqvt
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleFluidPerTick$1 -> fmVl$1:
    react.sampler.SampleFluidPerTick this$0 -> QPAR
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleFluidTickTime -> Hmow:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleFluidTickTime$1 -> Hmow$1:
    react.sampler.SampleFluidTickTime this$0 -> YWXL
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleFluidTickUtilization -> nRik:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    46:53:void sample() -> eqvt
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleFluidTickUtilization$1 -> nRik$1:
    react.sampler.SampleFluidTickUtilization this$0 -> VMnK
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleHopperPerSecond -> mGWA:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleHopperPerSecond$1 -> mGWA$1:
    react.sampler.SampleHopperPerSecond this$0 -> OtNb
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleHopperPerTick -> mPGl:
    react.graph.IFormatter formatter -> hQxR
    19:29:void <init>() -> <init>
    34:40:void construct() -> nkqL
    47:54:void sample() -> eqvt
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleHopperPerTick$1 -> mPGl$1:
    react.sampler.SampleHopperPerTick this$0 -> Obkq
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleHopperTickTime -> YobC:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleHopperTickTime$1 -> YobC$1:
    react.sampler.SampleHopperTickTime this$0 -> HoYp
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleHopperTickUtilization -> Hmro:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    46:53:void sample() -> eqvt
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleHopperTickUtilization$1 -> Hmro$1:
    react.sampler.SampleHopperTickUtilization this$0 -> MeWX
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleMemoryAllocated -> pHSO:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleMemoryAllocated$1 -> pHSO$1:
    react.sampler.SampleMemoryAllocated this$0 -> VNRB
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleMemoryAllocationPerSecond -> PShL:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleMemoryAllocationPerSecond$1 -> PShL$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> LIDn
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleMemoryFree -> HwDu:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleMemoryFree$1 -> HwDu$1:
    react.sampler.SampleMemoryFree this$0 -> xsVY
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleMemoryMax -> cmBB:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleMemoryMax$1 -> cmBB$1:
    react.sampler.SampleMemoryMax this$0 -> MeYm
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleMemoryUse -> TqUy:
    react.graph.IFormatter formatter -> hQxR
    18:27:void <init>() -> <init>
    32:38:void construct() -> nkqL
    43:44:void sample() -> eqvt
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleMemoryUse$1 -> TqUy$1:
    react.sampler.SampleMemoryUse this$0 -> NFYp
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> AFlD
react.sampler.SampleRedstonePerSecond -> Cwul:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleRedstonePerSecond$1 -> Cwul$1:
    react.sampler.SampleRedstonePerSecond this$0 -> XLHM
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleRedstonePerTick -> QyNs:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    46:53:void sample() -> eqvt
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleRedstonePerTick$1 -> QyNs$1:
    react.sampler.SampleRedstonePerTick this$0 -> WjgN
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleRedstoneTickTime -> HnSv:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleRedstoneTickTime$1 -> HnSv$1:
    react.sampler.SampleRedstoneTickTime this$0 -> qDMa
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleRedstoneTickUtilization -> KDYH:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    46:53:void sample() -> eqvt
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleRedstoneTickUtilization$1 -> KDYH$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> OAMK
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleSyncQueue -> uFaJ:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleSyncQueue$1 -> uFaJ$1:
    react.sampler.SampleSyncQueue this$0 -> tnyB
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleTickTime -> SmsD:
    react.graph.IFormatter formatter -> hQxR
    react.gmath.Average aa -> XnKT
    17:29:void <init>() -> <init>
    34:40:void construct() -> nkqL
    45:47:void sample() -> eqvt
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleTickTime$1 -> SmsD$1:
    react.sampler.SampleTickTime this$0 -> sdEw
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> AFlD
react.sampler.SampleTickUtilization -> dDnp:
    react.graph.IFormatter formatter -> hQxR
    react.gmath.Average aa -> XnKT
    17:29:void <init>() -> <init>
    34:40:void construct() -> nkqL
    45:47:void sample() -> eqvt
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleTickUtilization$1 -> dDnp$1:
    react.sampler.SampleTickUtilization this$0 -> mbUE
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> AFlD
react.sampler.SampleTicksPerSecond -> VDXO:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleTicksPerSecond$1 -> VDXO$1:
    react.sampler.SampleTicksPerSecond this$0 -> Vosk
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleTileDroppedTicks -> gViy:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleTileDroppedTicks$1 -> gViy$1:
    react.sampler.SampleTileDroppedTicks this$0 -> NNjg
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleTileTime -> aDXQ:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleTileTime$1 -> aDXQ$1:
    react.sampler.SampleTileTime this$0 -> Xdvw
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.sampler.SampleTileTimeLock -> SKok:
    react.graph.IFormatter formatter -> hQxR
    19:28:void <init>() -> <init>
    33:39:void construct() -> nkqL
    44:45:void sample() -> eqvt
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> lCcx
react.sampler.SampleTileTimeLock$1 -> SKok$1:
    react.sampler.SampleTileTimeLock this$0 -> RdFw
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> AFlD
react.security.checkpoints.SecurityCheckpointAlpha -> QFJk:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> YxXR
    78:148:void doScan(java.lang.Runnable) -> Jjvw
    152:181:byte[] readResource(java.io.File,java.lang.String) -> fmIR
    186:217:react.glang.GMap scan(java.io.File) -> Jjvw
    33:33:byte[] access$000(java.io.File,java.lang.String) -> Jjvw
react.security.checkpoints.SecurityCheckpointAlpha$1 -> QFJk$1:
    java.lang.Runnable val$r -> TYKu
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> QFJk$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> cTUh
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> pQCb:
    java.lang.String ip -> dEuv
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> qBct:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> qBct$1:
    java.io.File val$f -> MCUg
    react.security.locks.SecurityLockAlpha this$0 -> xrsn
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> dxUV:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> Nfal
react.slate.PhantomSlate -> cmAk:
    react.glang.GList lines -> loqm
    react.glang.GList viewers -> lgbC
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> msTo
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> qShM
    44:45:void set(int,java.lang.String) -> Jjvw
    50:51:void setLines(react.glang.GList) -> YoTO
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> jiDA
    91:95:void addViewer(org.bukkit.entity.Player) -> Nfal
    100:102:void removeViewer(org.bukkit.entity.Player) -> pHAe
    107:107:react.glang.GList getViewers() -> EJyg
    113:113:boolean isViewing(org.bukkit.entity.Player) -> eqsn
    119:120:void addLine(java.lang.String) -> kbgT
    125:126:void clearLines() -> XmDn
react.slate.Slate -> IyhW:
    void build() -> jiDA
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> qShM
    void set(int,java.lang.String) -> Jjvw
    void setLines(react.glang.GList) -> YoTO
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> Nfal
    void addLine(java.lang.String) -> kbgT
    void clearLines() -> XmDn
    void removeViewer(org.bukkit.entity.Player) -> pHAe
    react.glang.GList getViewers() -> EJyg
    boolean isViewing(org.bukkit.entity.Player) -> eqsn
    void update() -> update
react.slate.SlateUtil -> XuSK:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> XcsF
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> xaMd
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> fmIR
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> Jjvw
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> EKHL
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> fmIR
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> fmIR
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> Jjvw
    186:196:java.lang.String convertJSON(java.lang.String) -> VChy
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> Jjvw
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> fmIR
react.surge.Main -> Tyfv:
    react.glang.GList plugins -> jPYU
    react.glang.GMap pluginInstances -> FOcL
    react.glang.GList controllerSet -> FXSv
    react.glang.GMap anchors -> mare
    react.glang.GList classes -> jjLR
    java.lang.reflect.Field nsField -> UKNW
    java.lang.reflect.Field thField -> RdHS
    react.glang.GList tracks -> QFqT
    long nsf -> dNhN
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> upuf
    90:109:long getNanoSync() -> uyfo
    114:115:void requestResetNanos() -> NUuI
    119:127:void requestReload() -> RkPy
    131:134:void requestReload(java.lang.Runnable) -> EKHL
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> fmIR
    201:218:void onStop() -> Mtrl
    224:224:void onPostInit() -> nmBY
    230:230:void onPreInit() -> jNrb
    234:245:void shutDownAmps() -> psGv
    249:458:void initializeAmps() -> ymAl
    463:504:void doScan() -> yuRU
    508:530:void scanForPoolDefiners() -> CNEr
    534:550:void scanForRawEvents() -> VLhr
    554:570:void scanForDynamicTrack() -> MAoH
    574:595:void scanForAmps() -> CMdo
    600:611:void onTick() -> APCW
react.surge.Main$1 -> Tyfv$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> dMaK:
    react.surge.control.AmpedPlugin plugin -> WYfm
    boolean connected -> connected
    int masterTask -> maur
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> Ywtw
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> maNX
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> fmIR
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> fmIR
    113:114:void stopTask(int) -> YoUq
    57:57:void access$0(react.surge.PluginAmp) -> fmIR
react.surge.PluginAmp$1 -> dMaK$1:
    react.surge.PluginAmp this$0 -> cLIL
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> dMaK$2:
    react.surge.PluginAmp this$0 -> cLIL
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> impx:
    react.surge.PluginAmp amp -> RAgD
    react.glang.GList tickComponents -> apVN
    react.glang.GList atickComponents -> LQXA
    react.surge.sched.TaskManager taskmgr -> ySvh
    react.surge.hotload.HotloadManager hotloadmgr -> lpTt
    java.lang.Thread mainThread -> igLW
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> fmIR
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> Qona
    44:44:java.io.File folder() -> cuRa
    49:51:java.io.File getPluginJarFile() -> VDYc
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> HSpS
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> UQwR
    74:74:react.glang.GList getTickComponents() -> kkgh
    79:79:react.glang.GList getAsyncTickComponents() -> WrPq
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> fmIR
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> Jjvw
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> fmIR
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> BSRk
    126:126:boolean hasAmp() -> ghLv
    131:131:react.surge.PluginAmp getAmp() -> tKne
    136:136:react.surge.sched.TaskManager getTaskManager() -> nmAq
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> mrOX
react.surge.cluster.Cluster -> bOkQ:
    react.surge.cluster.ClusterType type -> cLHq
    java.lang.Object t -> vcpy
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> SwIK
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> OjWw:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> FFJJ:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> jiDV:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> aLfh:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> aLfg:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> HLOk:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> JlIL:
    react.surge.cluster.ClusterType INT -> hSHJ
    react.surge.cluster.ClusterType BOOLEAN -> oOJw
    react.surge.cluster.ClusterType STRING -> xauS
    react.surge.cluster.ClusterType STRING_LIST -> KhGf
    react.surge.cluster.ClusterType DOUBLE -> GAfM
    react.surge.cluster.ClusterType LONG -> lxeL
    react.surge.cluster.ClusterType[] ENUM$VALUES -> esoi
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> prdu:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> nLGd
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> fmIR
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> fmIR
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> rhOm
react.surge.cluster.ConfigurationDataOutput -> maKk:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> Jjvw
react.surge.cluster.DataCluster -> PeJB:
    react.glang.GMap clusters -> fCnX
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> NNFl
    29:33:void fromJson(react.json.JSONObject) -> IFSE
    37:44:react.json.JSONObject toJson() -> bOno
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> PSku
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> fmIR
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> RrrQ
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> RsPX
    194:195:void set(java.lang.String,int) -> IFSE
    199:200:void set(java.lang.String,boolean) -> EKHL
    204:205:void set(java.lang.String,double) -> EKHL
    209:210:void set(java.lang.String,long) -> EKHL
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> fmIR
react.surge.cluster.ICluster -> YgRd:
    react.surge.cluster.ClusterType getType() -> SwIK
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> baKl:
react.surge.cluster.IDataInput -> afYW:
    react.surge.cluster.DataCluster read(java.io.File) -> EKHL
react.surge.cluster.IDataOutput -> ghKh:
    void write(react.surge.cluster.DataCluster,java.io.File) -> fmIR
react.surge.cluster.Key -> JlIT:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> XuPy:
    int value() -> value
react.surge.cluster.KeyStore -> aMGw:
react.surge.cluster.ReflectedConfigurationException -> jydV:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> VMIO:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> EKHL
react.surge.cluster.YamlDataOutput -> lDVC:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> fmIR
react.surge.collection.GSound -> vQrX:
    java.lang.String sound -> XBul
    org.bukkit.Sound iSound -> QhvN
    java.lang.Float volume -> HDiU
    java.lang.Float pitch -> QrHS
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> aLUn
    61:72:void play(org.bukkit.Location) -> IFSE
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> fmIR
    93:93:java.lang.String getSound() -> Punx
    98:99:void setSound(java.lang.String) -> YoUq
    103:103:org.bukkit.Sound getiSound() -> PCLM
    108:109:void setiSound(org.bukkit.Sound) -> fmIR
    113:113:java.lang.Float getVolume() -> fCJh
    118:119:void setVolume(java.lang.Float) -> fmIR
    123:123:java.lang.Float getPitch() -> wnnE
    128:129:void setPitch(java.lang.Float) -> Jjvw
react.surge.control.AmpedPlugin -> vcTv:
    react.glang.GList controllers -> TYNV
    react.gconcurrent.ParallelPoolManager pp -> EoEe
    react.surge.server.CoreTickThread ctt -> lMot
    24:50:void <init>() -> <init>
    void doScan() -> yuRU
    long getNanoSync() -> uyfo
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> fTLR
    108:109:void registerController(react.surge.control.IController) -> fmIR
    114:125:void onTick() -> APCW
    130:130:java.lang.String getTickName() -> DXkT
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> LXar
    142:257:void destroyOldThreads() -> fvMq
    void onControllerRegistry() -> upuf
    void onStart(react.surge.util.Protocol) -> fmIR
    void onStop() -> Mtrl
    void onPostInit() -> nmBY
    void onPreInit() -> jNrb
react.surge.control.AmpedPlugin$1 -> vcTv$1:
    react.surge.control.AmpedPlugin this$0 -> PfTQ
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> CEKP
react.surge.control.AmpedPlugin$2 -> vcTv$2:
    react.surge.control.AmpedPlugin this$0 -> PfTQ
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> gEhA:
react.surge.control.Controller -> nAjf:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> Ihed:
react.surge.control.Enable -> ArQA:
react.surge.control.IController -> jiDS:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> TFdY:
react.surge.control.Plugin -> YDrR:
react.surge.control.SurgePlugin -> VoNa:
    void onStart(react.surge.util.Protocol) -> fmIR
    void onStop() -> Mtrl
    void onPostInit() -> nmBY
    void onPreInit() -> jNrb
    void onControllerRegistry() -> upuf
    void registerController(react.surge.control.IController) -> fmIR
    react.glang.GList getControllers() -> fTLR
    react.gconcurrent.ParallelPoolManager getThreadPool() -> LXar
react.surge.hotload.HotloadManager -> nuSb:
    react.glang.GMap filemods -> uXkI
    react.glang.GMap filesizes -> KMsL
    react.glang.GMap fileacts -> Bmlc
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> fmIR
    35:38:void untrack(java.io.File) -> HSpS
    42:45:void untrackall() -> iLRc
    50:86:void onTick() -> APCW
    91:91:java.lang.String getTickName() -> DXkT
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> fmIR
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> Jjvw
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> EKHL
react.surge.hotload.HotloadManager$1 -> nuSb$1:
    react.surge.hotload.HotloadManager this$0 -> pRLu
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> gyOt:
    boolean init -> XByW
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> IYRI
    java.lang.Class IChatBaseComponent -> xIFe
    java.lang.Class ChatSerializer -> FPIG
    java.lang.Class PacketPlayOutPlayerInfo -> fLcB
    java.lang.Class PlayerInfoData -> CNnX
    java.lang.Class EnumPlayerInfoAction -> VFEX
    java.lang.Class GameProfile -> OAQT
    java.lang.Class EnumGamemode -> JKTD
    java.lang.Class TileEntitySkull -> qDQa
    java.lang.Class LoadingCache -> fLcT
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> GHns:
    react.surge.nms.NMSX bountifulAPI -> NOPK
    boolean useOldMethods -> keDX
    java.lang.String nmsver -> RuNe
    java.lang.Object eTimes -> dOMP
    java.lang.Object eTitle -> Fhwv
    java.lang.Object eSubtitle -> ahGM
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> fmIR
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> pHCw
    75:89:java.lang.Class getCBClass(java.lang.String) -> upeV
    96:104:java.lang.Object serializeChat(java.lang.String) -> lLYB
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> Jjvw
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> fmIR
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> DXyK
    151:151:java.lang.String craftPackage() -> SnVj
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> fmIR
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> fmIR
    197:207:java.lang.Class getNMSClass(java.lang.String) -> WFlQ
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> fmIR
    279:280:void clearTitle(org.bukkit.entity.Player) -> JHsd
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> Jjvw
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> fmIR
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> fmIR
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> AGMG
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> RsPX
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> OPTg
    434:447:int ping(org.bukkit.entity.Player) -> dxBo
react.surge.nms.NMSX$1 -> GHns$1:
    org.bukkit.entity.Player val$player -> rGIB
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> GHns$2:
    org.bukkit.entity.Player val$player -> rGIB
    java.lang.String val$message -> kdbY
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> QqAO:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> ECKU
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> fmIR
    68:82:void clearTitle(org.bukkit.entity.Player) -> JHsd
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> fmIR
react.surge.nms.PacketUtil$V -> QqAO$fmIR:
    react.surge.nms.PacketUtil$V R17 -> GSKA
    react.surge.nms.PacketUtil$V R18 -> cmlO
    react.surge.nms.PacketUtil$V R19 -> wWCw
    react.surge.nms.PacketUtil$V R111 -> MKik
    react.surge.nms.PacketUtil$V R110 -> XLKC
    react.surge.nms.PacketUtil$V R112 -> VyIS
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> VyIU
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> XSPv:
    java.lang.String title -> title
    java.lang.String subTitle -> htkX
    java.lang.String action -> action
    java.lang.Integer fadeIn -> tEJV
    java.lang.Integer fadeOut -> mQVj
    java.lang.Integer stayTime -> EDTA
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> quWm
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> sHnX
    79:80:void setSubTitle(java.lang.String) -> iurt
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> tDBP
    99:100:void setFadeIn(java.lang.Integer) -> EKHL
    104:104:java.lang.Integer getFadeOut() -> TNvH
    109:110:void setFadeOut(java.lang.Integer) -> HSpS
    114:114:java.lang.Integer getStayTime() -> IGGR
    119:120:void setStayTime(java.lang.Integer) -> IFSE
react.surge.nms.VersionBukkit -> wMJS:
    react.surge.nms.VersionBukkit VU -> cnME
    react.surge.nms.VersionBukkit V7 -> Osrx
    react.surge.nms.VersionBukkit V8 -> ujOa
    react.surge.nms.VersionBukkit V9 -> stjM
    react.surge.nms.VersionBukkit V11 -> RIxV
    react.surge.nms.VersionBukkit V111 -> KNUi
    react.surge.nms.VersionBukkit V112 -> hBGS
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> ORQa
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> Tpxg
    27:32:boolean uc() -> hscV
    37:67:react.surge.nms.VersionBukkit get() -> jyhv
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> Gjqv:
    void burst(java.lang.Object) -> pHAe
    void setTimeLock(double) -> aLUn
    double getEstimatedTimeUse() -> OYYY
    int flush() -> BlgG
    int flush(react.gbench.Profiler) -> fmIR
    void queue(java.lang.Object) -> eqsn
    void queue(java.util.List) -> EKHL
    void queue(java.lang.Object[]) -> fmIR
react.surge.sched.ICancellable -> CwxN:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> STcN:
    void onTick() -> APCW
    java.lang.String getTickName() -> DXkT
react.surge.sched.ITask -> dUrf:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> xrQD
    java.lang.String getName() -> getName
    double getComputeTime() -> RHpJ
    double getTotalComputeTime() -> BArW
    double getActiveTime() -> eiyH
    boolean hasCompleted() -> Vnnj
react.surge.sched.Task -> FElY:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> OQqK
    double computeTime -> aVde
    double totalComputeTime -> kucg
    double activeTime -> igPc
    boolean completed -> completed
    react.gbench.Profiler profiler -> gWwy
    react.gbench.Profiler activeProfiler -> PUVt
    int ticks -> ObuD
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> HSpS
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> xrQD
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> RHpJ
    150:150:boolean hasCompleted() -> Vnnj
    156:156:double getTotalComputeTime() -> BArW
    162:162:double getActiveTime() -> eiyH
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> fmIR
    15:15:void access$1(react.surge.sched.Task,boolean) -> fmIR
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> Jjvw
    14:14:void access$3(react.surge.sched.Task,double) -> fmIR
    12:12:void access$4(react.surge.sched.Task,double) -> Jjvw
    14:14:double access$5(react.surge.sched.Task) -> EKHL
    13:13:void access$6(react.surge.sched.Task,double) -> EKHL
    13:13:double access$7(react.surge.sched.Task) -> HSpS
    12:12:double access$8(react.surge.sched.Task) -> IFSE
react.surge.sched.Task$1 -> FElY$1:
    react.surge.sched.Task this$0 -> JTGE
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> FElY$2:
    react.surge.sched.Task this$0 -> JTGE
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> FElY$3:
    react.surge.sched.Task this$0 -> JTGE
    int val$total -> HNAH
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> jNtN:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> OQqK
    double computeTime -> aVde
    double totalComputeTime -> kucg
    double activeTime -> igPc
    boolean completed -> completed
    react.gbench.Profiler profiler -> gWwy
    react.gbench.Profiler activeProfiler -> PUVt
    int ticks -> ObuD
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> HSpS
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> xrQD
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> RHpJ
    101:101:boolean hasCompleted() -> Vnnj
    107:107:double getTotalComputeTime() -> BArW
    113:113:double getActiveTime() -> eiyH
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> fmIR
    12:12:void access$1(react.surge.sched.TaskLater,double) -> fmIR
    13:13:double access$2(react.surge.sched.TaskLater) -> Jjvw
    12:12:double access$3(react.surge.sched.TaskLater) -> EKHL
    13:13:void access$4(react.surge.sched.TaskLater,double) -> Jjvw
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> HSpS
    14:14:double access$6(react.surge.sched.TaskLater) -> IFSE
    14:14:void access$7(react.surge.sched.TaskLater,double) -> EKHL
react.surge.sched.TaskLater$1 -> jNtN$1:
    react.surge.sched.TaskLater this$0 -> usDa
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> MBPo:
    react.glang.GList tasks -> eIGb
    react.glang.GMap taskProfiles -> NNpY
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> fmIR
    25:35:void onTick() -> APCW
    39:40:void putFinishingTask(react.surge.sched.ITask) -> Jjvw
    44:53:void putTask(react.surge.sched.ITask) -> EKHL
    58:58:java.lang.String getTickName() -> DXkT
    63:63:react.glang.GList getTasks() -> AYBj
    68:68:react.glang.GMap getTaskProfiles() -> sYns
react.surge.sched.TaskProfile -> loLl:
    double activeTime -> igPc
    double computeTickTime -> jiqw
    double computeTime -> aVde
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> eiyH
    23:24:void setActiveTime(double) -> JHsd
    28:28:double getComputeTickTime() -> dpKJ
    33:34:void setComputeTickTime(double) -> dxBo
    38:38:double getComputeTime() -> RHpJ
    43:44:void setComputeTime(double) -> quWm
react.surge.server.AsyncTick -> YxXR:
react.surge.server.CPS -> qShM:
    react.glang.GMap keys -> lNVY
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> IxwJ
    46:99:void scan() -> CpLg
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> EKHL
react.surge.server.CoreTickThread -> EJyg:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> XmDn:
    long memoryFree -> lNUx
    long memoryUsed -> EeyS
    long memoryMax -> SENy
    long lastMemoryUsed -> qMEX
    long memoryUsedAfterGC -> DARW
    long allocated -> dNnL
    long collected -> bQXt
    long collections -> BKmy
    long sms -> uiqY
    long memoryAllocatedPerTick -> cKkH
    long memoryCollectedPerTick -> Npqw
    long memoryFullyAllocatedPerTick -> JTFH
    long mah -> kJps
    long mahs -> jjQv
    22:39:void <init>() -> <init>
    void onAllocationSet() -> JuBA
    46:98:void run() -> run
    102:102:long getMemoryFree() -> jGII
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> CUwv
    117:117:long getLastMemoryUsed() -> dwyf
    122:122:long getMemoryUsedAfterGC() -> HUHn
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> ooiP
    137:137:long getCollections() -> dNHY
    142:142:long getSms() -> SCee
    147:147:long getMemoryAllocatedPerTick() -> hYsJ
    152:152:long getMemoryCollectedPerTick() -> dDui
    157:157:long getMemoryFullyAllocatedPerTick() -> AaTT
    162:162:long getMah() -> ncsq
    167:167:long getMahs() -> bHAH
react.surge.server.SuperSampler -> XcsF:
    react.gmath.Average ticksPerSecondL -> aMub
    react.gmath.Average tickTimeL -> lEdO
    react.gmath.Average mahL -> TacU
    double ticksPerSecond -> AYWm
    double ticksPerSecondRaw -> VyJw
    double tickTime -> uHNh
    double tickTimeRaw -> vmXX
    boolean running -> running
    boolean frozen -> Dsxi
    double tickUtilizationRaw -> oWal
    double tickUtilization -> aNYX
    double leftoverTickTime -> NheL
    long memoryUse -> Cpuq
    long memoryAllocated -> DbxE
    long memoryCollected -> qoJd
    long mahs -> jjQv
    int totalChunks -> LtBD
    int totalEntities -> smAB
    int totalDrops -> ECxI
    int totalTiles -> sAja
    int totalLiving -> HNCN
    int chunksLoaded -> EMJS
    int chunksUnloaded -> MTaQ
    react.surge.server.WorldMonitor worldMonitor -> RuRb
    react.surge.server.TPSMonitor tpsMonitor -> BmrR
    react.surge.server.MemoryMonitor memoryMonitor -> eRVB
    java.lang.StackTraceElement[] lockStack -> TrgY
    react.glang.GMap spikes -> EfAn
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> APCW
    154:154:java.lang.String getTickName() -> DXkT
    159:159:react.gmath.Average getTicksPerSecondL() -> ogXV
    164:164:double getTicksPerSecond() -> JcQh
    169:169:double getTicksPerSecondRaw() -> jFgA
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> ydTh
    184:184:react.gmath.Average getTickTimeL() -> yleC
    189:189:double getTickTime() -> fCKQ
    194:194:double getTickTimeRaw() -> cAqT
    199:199:double getTickUtilizationRaw() -> ccuS
    204:204:double getTickUtilization() -> KxCi
    209:209:double getLeftoverTickTime() -> HLWF
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> qvOK
    219:219:long getMemoryUse() -> Xlfq
    224:224:long getMemoryAllocated() -> YNGc
    229:229:long getMemoryCollected() -> ncsg
    234:234:react.gmath.Average getMahL() -> LYDV
    239:239:long getMahs() -> bHAH
    244:244:int getTotalChunks() -> INxq
    249:249:int getTotalEntities() -> wxAJ
    254:254:int getTotalDrops() -> skSf
    259:259:int getTotalTiles() -> MdVy
    264:264:int getTotalLiving() -> eQMN
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> gOBn
    274:274:int getChunksLoaded() -> MJgL
    279:279:int getChunksUnloaded() -> GtKH
    284:285:void setTicksPerSecondL(react.gmath.Average) -> fmIR
    289:290:void setTickTimeL(react.gmath.Average) -> Jjvw
    294:295:void setMahL(react.gmath.Average) -> EKHL
    299:300:void setTicksPerSecond(double) -> fmII
    304:305:void setTicksPerSecondRaw(double) -> PmIb
    309:310:void setTickTime(double) -> mhjO
    314:315:void setTickTimeRaw(double) -> KCgF
    319:320:void setRunning(boolean) -> paTN
    324:325:void setTickUtilizationRaw(double) -> ftvm
    329:330:void setTickUtilization(double) -> rUur
    334:335:void setLeftoverTickTime(double) -> DYFM
    339:340:void setMemoryUse(long) -> aLUn
    344:345:void setMemoryAllocated(long) -> JHsd
    349:350:void setMemoryCollected(long) -> dxBo
    354:355:void setMahs(long) -> quWm
    359:360:void setTotalChunks(int) -> pHCw
    364:365:void setTotalEntities(int) -> upeV
    369:370:void setTotalDrops(int) -> lLYB
    374:375:void setTotalTiles(int) -> WFlQ
    379:380:void setTotalLiving(int) -> AGMG
    384:385:void setChunksLoaded(int) -> iurt
    389:390:void setChunksUnloaded(int) -> IxwJ
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> fmIR
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> fmIR
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> fmIR
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> MSYA
    419:419:react.glang.GMap getSpikes() -> Suyr
    31:31:void access$0(react.surge.server.SuperSampler,int) -> fmIR
    33:33:void access$1(react.surge.server.SuperSampler,int) -> Jjvw
    34:34:void access$2(react.surge.server.SuperSampler,int) -> EKHL
    32:32:void access$3(react.surge.server.SuperSampler,int) -> HSpS
    35:35:void access$4(react.surge.server.SuperSampler,int) -> IFSE
    36:36:void access$5(react.surge.server.SuperSampler,int) -> RsPX
    37:37:void access$6(react.surge.server.SuperSampler,int) -> xXIp
    19:19:void access$7(react.surge.server.SuperSampler,double) -> fmIR
    21:21:void access$8(react.surge.server.SuperSampler,double) -> Jjvw
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> fmIR
    19:19:double access$10(react.surge.server.SuperSampler) -> Jjvw
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> EKHL
    21:21:double access$12(react.surge.server.SuperSampler) -> HSpS
    18:18:void access$13(react.surge.server.SuperSampler,double) -> EKHL
    20:20:void access$14(react.surge.server.SuperSampler,double) -> HSpS
    24:24:void access$15(react.surge.server.SuperSampler,double) -> IFSE
    20:20:double access$16(react.surge.server.SuperSampler) -> IFSE
    25:25:void access$17(react.surge.server.SuperSampler,double) -> RsPX
    25:25:double access$18(react.surge.server.SuperSampler) -> RsPX
    26:26:void access$19(react.surge.server.SuperSampler,double) -> xXIp
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> fmIR
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> xXIp
    27:27:void access$22(react.surge.server.SuperSampler,long) -> fmIR
    28:28:void access$23(react.surge.server.SuperSampler,long) -> Jjvw
    29:29:void access$24(react.surge.server.SuperSampler,long) -> EKHL
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> qJdO
    30:30:void access$26(react.surge.server.SuperSampler,long) -> HSpS
react.surge.server.SuperSampler$1 -> XcsF$1:
    react.surge.server.SuperSampler this$0 -> NNsP
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> fmIR
react.surge.server.SuperSampler$2 -> XcsF$2:
    react.surge.server.SuperSampler this$0 -> NNsP
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> RHtf
    106:107:void onSpike() -> oMhf
react.surge.server.SuperSampler$3 -> XcsF$3:
    react.surge.server.SuperSampler this$0 -> NNsP
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> JuBA
react.surge.server.TPSMonitor -> xaMd:
    double tickTimeMS -> UBeu
    double rawTicksPerSecond -> SVRk
    react.gbench.Profiler tickProfiler -> UTHe
    react.gbench.Profiler tickTimeProfiler -> lhJa
    boolean ticked -> fUVo
    java.lang.Thread$State lastState -> fUWL
    double actualTickTimeMS -> oqTK
    double ltt -> tUoF
    long lastTick -> AGnI
    boolean frozen -> Dsxi
    java.lang.StackTraceElement[] lockedStack -> QFyX
    double lmsx -> jHPt
    23:40:void <init>() -> <init>
    void onTicked() -> RHtf
    void onSpike() -> oMhf
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> fmIR
    160:160:double getTickTimeMS() -> CDyH
    165:165:double getRawTicksPerSecond() -> PutF
    170:170:react.gbench.Profiler getTickProfiler() -> gWRe
    175:175:boolean isTicked() -> rVqN
    180:181:void markTick() -> Xcxi
    185:185:react.gbench.Profiler getTickTimeProfiler() -> FNdS
    190:190:java.lang.Thread$State getLastState() -> Vfcr
    195:195:double getActualTickTimeMS() -> UInT
    200:200:double getLtt() -> iTgk
    205:205:long getLastTick() -> ivXf
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> UuBK
react.surge.server.WorldMonitor -> upuf:
    boolean chunksChanged -> Pexs
    boolean dropChanged -> tENL
    boolean tileChanged -> bkNY
    boolean livingChanged -> VgkN
    boolean totalChanged -> raKD
    boolean updated -> UCEo
    int totalChunks -> LtBD
    int totalDrops -> ECxI
    int totalTiles -> sAja
    int totalLiving -> HNCN
    int totalEntities -> smAB
    int chunksLoaded -> EMJS
    int chunksUnloaded -> MTaQ
    long ms -> WrPq
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> fmIR
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> Jjvw
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> fmIR
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> fmIR
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> fmIR
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> fmIR
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> fmIR
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> fmIR
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> fmIR
    130:131:void doUpdate() -> BBXT
    135:186:void sample() -> eqvt
    190:196:void sampleTotalCount() -> kuAH
    200:206:void sampleLivingCount() -> VnsG
    210:219:void sampleTileCount() -> xaTJ
    223:229:void sampleDropCount() -> fdoT
    233:239:void sampleChunkCount() -> brUg
react.surge.text.PhantomSpinner -> uyfo:
    react.surge.text.ProgressSpinner s -> UJuX
    react.surge.text.ProgressSpinner c -> VhOH
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> NUuI:
    java.lang.String[] chars -> yUBD
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> eIeh
    react.surge.text.ProgressSpinner NETWORK -> bHlj
    react.surge.text.ProgressSpinner CIRCLES -> dpvL
    react.surge.text.ProgressSpinner RANDOMS -> uYVJ
    react.surge.text.ProgressSpinner MERGERS -> KyPt
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> WGav
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> RkPy:
    int value() -> value
react.surge.util.Area -> Mtrl:
    org.bukkit.Location location -> kBes
    java.lang.Double radius -> urfj
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> fmIR
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> rEnu
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> RsPX
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> xXIp
    109:109:boolean isWithin(org.bukkit.Location) -> qJdO
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> HSpS
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> fmIR
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> QyUu
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> rySl
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> OPTg
    257:257:java.lang.Double getRadius() -> GIVK
    268:269:void setRadius(java.lang.Double) -> EKHL
    278:283:org.bukkit.Location random() -> rqCn
react.surge.util.Axis -> nmBY:
    react.surge.util.Axis X -> aVkg
    react.surge.util.Axis Y -> Bmsj
    react.surge.util.Axis Z -> hcpE
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> etYW
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> HThy
    29:29:org.bukkit.util.Vector negative() -> JksY
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> jNrb:
    react.surge.util.BlastResistance BARRIER -> ekhO
    react.surge.util.BlastResistance BEDROCK -> ynQw
    react.surge.util.BlastResistance COMMAND -> Okhr
    react.surge.util.BlastResistance ENDER_PORTAL -> IHTv
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> iEQI
    react.surge.util.BlastResistance ANVIL -> SUrS
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> cwCw
    react.surge.util.BlastResistance OBSIDIAN -> KVlF
    react.surge.util.BlastResistance ENDER_CHEST -> IXvR
    react.surge.util.BlastResistance WATER -> fTxO
    react.surge.util.BlastResistance LAVA -> kJvV
    react.surge.util.BlastResistance STATIONARY_WATER -> cKpF
    react.surge.util.BlastResistance DRAGON_EGG -> dXDm
    react.surge.util.BlastResistance ENDER_STONE -> IahF
    react.surge.util.BlastResistance COAL_BLOCK -> mkOU
    react.surge.util.BlastResistance DIAMOND_BLOCK -> hmAc
    react.surge.util.BlastResistance EMERALD_BLOCK -> QPMl
    react.surge.util.BlastResistance GOLD_BLOCK -> dXDe
    react.surge.util.BlastResistance IRON_BLOCK -> BTbq
    react.surge.util.BlastResistance REDSTONE_BLOCK -> ayNh
    react.surge.util.BlastResistance BRICK -> tDqu
    react.surge.util.BlastResistance BRICK_STAIRS -> RdTb
    react.surge.util.BlastResistance HARD_CLAY -> mIPI
    react.surge.util.BlastResistance STONE -> ywFY
    react.surge.util.BlastResistance SMOOTH_BRICK -> WsdH
    react.surge.util.BlastResistance SMOOTH_STAIRS -> jriy
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> lFLk
    react.surge.util.BlastResistance STONE_SLAB2 -> nDBj
    react.surge.util.BlastResistance IRON_DOOR -> JdnB
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> Xvgb
    react.surge.util.BlastResistance IRON_TRAPDOOR -> oyhb
    react.surge.util.BlastResistance MOB_SPAWNER -> WHpW
    react.surge.util.BlastResistance WEB -> XDCp
    react.surge.util.BlastResistance DISPENSER -> qoNW
    react.surge.util.BlastResistance DROPPER -> bsco
    react.surge.util.BlastResistance FURNACE -> pJHU
    react.surge.util.BlastResistance BURNING_FURNACE -> TXyH
    react.surge.util.BlastResistance BEACON -> dhgx
    react.surge.util.BlastResistance COAL_ORE -> DlNb
    react.surge.util.BlastResistance COCOA -> LIRR
    react.surge.util.BlastResistance DIAMOND_ORE -> FqtG
    react.surge.util.BlastResistance EMERALD_ORE -> pRXJ
    react.surge.util.BlastResistance FENCE -> Okjr
    react.surge.util.BlastResistance FENCE_GATE -> yfDP
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> Bmwi
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> iDrJ
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> Bvhm
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> CWiJ
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> sRoi
    react.surge.util.BlastResistance ACACIA_FENCE -> qnlg
    react.surge.util.BlastResistance BIRCH_FENCE -> opwO
    react.surge.util.BlastResistance DARK_OAK_FENCE -> kKYX
    react.surge.util.BlastResistance SPRUCE_FENCE -> ywEO
    react.surge.util.BlastResistance JUNGLE_FENCE -> BLUX
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> jQFd
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> RAor
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> TGvS
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> NOWS
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> MwHY
    react.surge.util.BlastResistance QUARTZ_STAIRS -> dWiC
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> pQyo
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> bbdN
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> cKtT
    react.surge.util.BlastResistance WOOD_STAIRS -> UupP
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> XDDy
    react.surge.util.BlastResistance ACACIA_DOOR -> foQb
    react.surge.util.BlastResistance BIRCH_DOOR -> Mvio
    react.surge.util.BlastResistance DARK_OAK_DOOR -> MCeY
    react.surge.util.BlastResistance SPRUCE_DOOR -> sKDG
    react.surge.util.BlastResistance JUNGLE_DOOR -> DkoW
    react.surge.util.BlastResistance GOLD_ORE -> ymvN
    react.surge.util.BlastResistance HOPPER -> VqEG
    react.surge.util.BlastResistance IRON_ORE -> MCfC
    react.surge.util.BlastResistance LAPIS_BLOCK -> RmIM
    react.surge.util.BlastResistance LAPIS_ORE -> SNIM
    react.surge.util.BlastResistance QUARTZ_ORE -> QXbv
    react.surge.util.BlastResistance REDSTONE_ORE -> XwJb
    react.surge.util.BlastResistance TRAP_DOOR -> XvjC
    react.surge.util.BlastResistance WOOD -> DlNf
    react.surge.util.BlastResistance CHEST -> jGvk
    react.surge.util.BlastResistance TRAPPED_CHEST -> qMLa
    react.surge.util.BlastResistance WORKBENCH -> JTMg
    react.surge.util.BlastResistance CAULDRON -> mcCa
    react.surge.util.BlastResistance LOG -> kBih
    react.surge.util.BlastResistance LOG_2 -> WbdG
    react.surge.util.BlastResistance BOOKSHELF -> ribH
    react.surge.util.BlastResistance BANNER -> YXHi
    react.surge.util.BlastResistance STANDING_BANNER -> jaio
    react.surge.util.BlastResistance WALL_BANNER -> YhjB
    react.surge.util.BlastResistance JACK_O_LANTERN -> SMev
    react.surge.util.BlastResistance MELON_BLOCK -> RcuL
    react.surge.util.BlastResistance SKULL -> PoQi
    react.surge.util.BlastResistance PUMPKIN -> dNvk
    react.surge.util.BlastResistance SIGN -> hSSM
    react.surge.util.BlastResistance SIGN_POST -> hRrN
    react.surge.util.BlastResistance WALL_SIGN -> rOmr
    react.surge.util.BlastResistance QUARTZ_BLOCK -> tofy
    react.surge.util.BlastResistance NOTE_BLOCK -> sSSB
    react.surge.util.BlastResistance RED_SANDSTONE -> Soij
    react.surge.util.BlastResistance SANDSTONE -> raPj
    react.surge.util.BlastResistance WOOL -> MDGt
    react.surge.util.BlastResistance MONSTER_EGG -> AtJU
    react.surge.util.BlastResistance RAILS -> NiNW
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> lEpJ
    react.surge.util.BlastResistance DETECTOR_RAIL -> RBUj
    react.surge.util.BlastResistance POWERED_RAIL -> NWlJ
    react.surge.util.BlastResistance CLAY -> hlhW
    react.surge.util.BlastResistance DIRT -> hJdw
    react.surge.util.BlastResistance GRASS -> VNav
    react.surge.util.BlastResistance GRAVEL -> iEXR
    react.surge.util.BlastResistance SPONGE -> bjvQ
    react.surge.util.BlastResistance BREWING_STAND -> dNyO
    react.surge.util.BlastResistance STONE_BUTTON -> gPTI
    react.surge.util.BlastResistance WOOD_BUTTON -> UeQy
    react.surge.util.BlastResistance CAKE_BLOCK -> CFiu
    react.surge.util.BlastResistance ICE -> RRvh
    react.surge.util.BlastResistance PACKED_ICE -> xsfX
    react.surge.util.BlastResistance LEVER -> TrpC
    react.surge.util.BlastResistance MYCEL -> KqGV
    react.surge.util.BlastResistance PISTON_BASE -> nUGi
    react.surge.util.BlastResistance PISTON_EXTENSION -> gOqu
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> JSqE
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> oGHc
    react.surge.util.BlastResistance GOLD_PLATE -> qLnH
    react.surge.util.BlastResistance IRON_PLATE -> JnCD
    react.surge.util.BlastResistance STONE_PLATE -> dFgm
    react.surge.util.BlastResistance WOOD_PLATE -> mkVQ
    react.surge.util.BlastResistance SAND -> KpeH
    react.surge.util.BlastResistance SOUL_SAND -> xRCb
    react.surge.util.BlastResistance CACTUS -> FjGQ
    react.surge.util.BlastResistance LADDER -> FPSw
    react.surge.util.BlastResistance NETHERRACK -> Kgsi
    react.surge.util.BlastResistance GLASS -> aFPd
    react.surge.util.BlastResistance THIN_GLASS -> uHYI
    react.surge.util.BlastResistance STAINED_GLASS -> bYtQ
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> BLXt
    react.surge.util.BlastResistance GLOWSTONE -> gPRU
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> IbNt
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> ribs
    react.surge.util.BlastResistance SEA_LANTERN -> xQbS
    react.surge.util.BlastResistance BED_BLOCK -> qgAT
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> QYGd
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> yLXa
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> MwOG
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> SMkQ
    react.surge.util.BlastResistance LEAVES -> vvSq
    react.surge.util.BlastResistance LEAVES_2 -> iDxx
    react.surge.util.BlastResistance SNOW -> IrrW
    int br -> hSXN
    react.surge.util.BlastResistance[] ENUM$VALUES -> yTgu
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> JlSx
    175:190:int get(org.bukkit.Material) -> fmIR
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> psGv:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> RsPX
react.surge.util.C -> ymAl:
    react.surge.util.C BLACK -> yKwO
    react.surge.util.C DARK_BLUE -> wWSV
    react.surge.util.C DARK_GREEN -> VyXq
    react.surge.util.C DARK_AQUA -> qnru
    react.surge.util.C DARK_RED -> RSYi
    react.surge.util.C DARK_PURPLE -> ORaP
    react.surge.util.C GOLD -> eJPA
    react.surge.util.C GRAY -> rrWc
    react.surge.util.C DARK_GRAY -> lFRa
    react.surge.util.C BLUE -> nejb
    react.surge.util.C GREEN -> DlTh
    react.surge.util.C AQUA -> jQMu
    react.surge.util.C RED -> RmJu
    react.surge.util.C LIGHT_PURPLE -> ayWK
    react.surge.util.C YELLOW -> TPmS
    react.surge.util.C WHITE -> KyWn
    react.surge.util.C MAGIC -> NiPA
    react.surge.util.C BOLD -> lgss
    react.surge.util.C STRIKETHROUGH -> MwNS
    react.surge.util.C UNDERLINE -> WtJO
    react.surge.util.C ITALIC -> FGdn
    react.surge.util.C RESET -> WsiR
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> QjGv
    char code -> wyUl
    boolean isFormat -> yUHV
    java.lang.String toString -> CXPH
    java.util.Map BY_ID -> bHtf
    java.util.Map BY_CHAR -> hmJJ
    java.util.Map dyeChatMap -> huYu
    java.util.Map chatHexMap -> PgFL
    java.util.Map dyeHexMap -> XwMe
    int[] $SWITCH_TABLE$surge$util$C -> drBc
    react.surge.util.C[] ENUM$VALUES -> JKcd
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> tDII
    378:378:java.lang.String hex() -> RcJY
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> qJdO
    434:442:react.surge.util.C getByChar(java.lang.String) -> ugrw
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> Jjvw
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> fmIR
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> Jjvw
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> EKHL
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> kkXO
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> Jsii
    560:578:java.lang.String generateColorTable() -> opNk
    588:588:org.bukkit.ChatColor chatColor() -> BBYL
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> xXIp
    632:679:byte getItemMeta() -> mqxS
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> hkYt
react.surge.util.C$1 -> ymAl$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> ymAl$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> ymAl$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> ymAl$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> ymAl$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> ymAl$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> ymAl$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> ymAl$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> ymAl$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> ymAl$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> ymAl$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> ymAl$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> ymAl$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> ymAl$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> ymAl$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> ymAl$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> ymAl$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> ymAl$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> ymAl$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> ymAl$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> ymAl$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> ymAl$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> yuRU:
    double number -> eJPx
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> RroH
    23:25:react.surge.util.CDou add(double) -> PKFf
    30:32:react.surge.util.CDou sub(double) -> QVYl
    37:37:double get() -> get
    42:48:void circ() -> fTRE
react.surge.util.CMD -> CNEr:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> UeUo
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> iLYu
    51:53:void execute(org.bukkit.command.CommandSender) -> IFSE
    60:77:void execute() -> execute
react.surge.util.CNum -> VLhr:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> ugrw
    23:25:react.surge.util.CNum add(int) -> kkXO
    30:32:react.surge.util.CNum sub(int) -> Jsii
    37:37:int get() -> get
    42:48:void circ() -> fTRE
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> ckok
react.surge.util.Chunks -> MAoH:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> qArl
    33:40:react.glang.GList getLoadedChunks() -> fdsS
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> Jjvw
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> fmIR
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> fmIR
    98:98:boolean unload(org.bukkit.Chunk) -> Ywcx
    114:124:int unload(react.glang.GList,boolean,boolean) -> fmIR
    138:138:int unload(react.glang.GList,boolean) -> fmIR
    150:150:int unload(react.glang.GList) -> qArl
    166:166:boolean isLoaded(java.lang.String,int,int) -> fmIR
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> Jjvw
    201:205:void load(react.glang.GList) -> paTN
react.surge.util.Cuboid -> CMdo:
    java.lang.String worldName -> YaBE
    int x1 -> fwgk
    int y1 -> BfOc
    int z1 -> CrEB
    int x2 -> LtNN
    int y2 -> KNfo
    int z2 -> TYas
    int[] $SWITCH_TABLE$surge$util$Axis -> Oktk
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> knEl
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> fmIR
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> EKHL
    93:93:boolean hasPlayers() -> Aihk
    98:110:react.glang.GList getPlayers() -> Aqft
    115:166:react.glang.GList getEntities() -> LYIR
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> cIli
    287:287:org.bukkit.Location getLowerNE() -> baWp
    298:298:org.bukkit.Location getUpperSW() -> sQev
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> EeVR
    348:348:int getSizeY() -> OkAi
    358:358:int getSizeZ() -> tejP
    368:368:int getLowerX() -> fnDN
    378:378:int getLowerY() -> Rbgy
    388:388:int getLowerZ() -> fnDQ
    398:398:int getUpperX() -> nSWg
    408:408:int getUpperY() -> afch
    418:418:int getUpperZ() -> bigG
    428:438:org.bukkit.block.Block[] corners() -> cRvn
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> fmIR
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> Jjvw
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> EKHL
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> HSpS
    546:546:boolean contains(int,int,int) -> IFSE
    558:558:boolean contains(org.bukkit.block.Block) -> xXIp
    570:570:boolean contains(org.bukkit.Location) -> cImA
    580:580:int volume() -> hkYQ
    591:601:byte averageLightLevel() -> KxHJ
    612:612:react.surge.util.Cuboid contract() -> hYwC
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> fmIR
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> Jjvw
    708:715:boolean containsOnly(org.bukkit.Material) -> Jjvw
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> fmIR
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> RsPX
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> fmIR
    786:800:java.util.List getChunks() -> iLXs
    815:819:void fill(int,byte) -> fmIR
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> UIoQ
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> axFn
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> nKGJ
react.surge.util.Cuboid$1 -> CMdo$1:
    react.surge.util.Cuboid this$0 -> ywMp
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> cImA
    1:1:java.lang.Object onAdapt(java.lang.Object) -> xXIp
react.surge.util.Cuboid$CuboidDirection -> CMdo$fmIR:
    react.surge.util.Cuboid$CuboidDirection North -> orBL
    react.surge.util.Cuboid$CuboidDirection East -> oqaI
    react.surge.util.Cuboid$CuboidDirection South -> mjyS
    react.surge.util.Cuboid$CuboidDirection West -> OteA
    react.surge.util.Cuboid$CuboidDirection Up -> VxyD
    react.surge.util.Cuboid$CuboidDirection Down -> HopQ
    react.surge.util.Cuboid$CuboidDirection Horizontal -> WIWi
    react.surge.util.Cuboid$CuboidDirection Vertical -> mcIq
    react.surge.util.Cuboid$CuboidDirection Both -> Ewhe
    react.surge.util.Cuboid$CuboidDirection Unknown -> eSAS
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> knEl
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> NrCI
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> FhXH
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> nKGJ
react.surge.util.Cuboid$CuboidIterator -> CMdo$Jjvw:
    org.bukkit.World w -> euDT
    int baseX -> yvmG
    int baseY -> rjHU
    int baseZ -> agvl
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> QYHt
    int sizeY -> wyWX
    int sizeZ -> uPnA
    react.surge.util.Cuboid this$0 -> ywMp
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> Ywtw:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> maNX:
    react.glang.GList buffer -> BUNa
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> HSpS
    37:38:void l(java.lang.Object,java.lang.String) -> Jjvw
    42:43:void s(java.lang.Object,java.lang.String) -> EKHL
    47:48:void v(java.lang.Object,java.lang.String) -> HSpS
    52:53:void w(java.lang.Object,java.lang.String) -> IFSE
    57:58:void f(java.lang.Object,java.lang.String) -> RsPX
    62:69:void l(java.lang.String) -> ckok
    73:80:void s(java.lang.String) -> cIli
    84:91:void v(java.lang.String) -> WWkp
    95:102:void w(java.lang.String) -> UAFQ
    106:113:void f(java.lang.String) -> Gaoe
react.surge.util.DMSRequire -> cuRa:
    react.surge.util.DMSRequirement value() -> iDHT
react.surge.util.DMSRequirement -> VDYc:
    react.surge.util.DMSRequirement SQL -> rYFn
    react.surge.util.DMSRequirement[] ENUM$VALUES -> PLso
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> UQwR:
    react.surge.util.Depend VAULT -> Dter
    react.surge.util.Depend FAWE -> nfMB
    react.surge.util.Depend WORLDEDIT -> XULe
    react.surge.util.Depend PROTOLIB -> usTh
    react.surge.util.Depend CITIZENS -> yfOa
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> HhDN
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> kkgh:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> LOvN
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> WrPq:
    react.surge.util.DimensionFace X -> slmq
    react.surge.util.DimensionFace Y -> uIBF
    react.surge.util.DimensionFace Z -> NWqs
    react.surge.util.DimensionFace[] ENUM$VALUES -> YOad
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> BSRk:
    react.surge.util.Direction U -> VWYp
    react.surge.util.Direction D -> sllw
    react.surge.util.Direction N -> Fily
    react.surge.util.Direction S -> ceoi
    react.surge.util.Direction E -> NiUQ
    react.surge.util.Direction W -> VqLk
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> OlWk
    int[] $SWITCH_TABLE$surge$util$Direction -> IsXE
    react.surge.util.Direction[] ENUM$VALUES -> aOIL
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> vuAq
    61:61:int x() -> qeQi
    66:66:int y() -> cljU
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> JBAA
    81:81:react.glang.GList news() -> sQeU
    86:86:react.glang.GList udnews() -> PuuM
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> PmIb
    115:147:react.surge.util.Direction fromByte(byte) -> qJdO
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> hshi
react.surge.util.DynamicConfiguration -> ghLv:
react.surge.util.DynamicTracker -> tKne:
react.surge.util.Embedded -> nmAq:
    react.glang.GList get() -> FFTq
    void add(java.lang.Object) -> add
react.surge.util.FU -> mrOX:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> fmIR
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> Jjvw
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> IFSE
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> RsPX
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> SwIK:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> IWUX
react.surge.util.Health -> rhOm:
    double hp -> ekvC
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> LPXw
    41:41:double getHearts() -> Qpiq
    51:51:double getHalfHearts() -> rhXV
    61:61:int getFlatHalfHearts() -> IhrS
react.surge.util.IO -> NNFl:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> bOno:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> fmIR
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> fmIR
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> fmIR
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> fmIR
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> fmIR
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> Jjvw
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> EKHL
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> HSpS
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> fmIR
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> fmIR
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> fmIR
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> fmIR
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> IFSE
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> RsPX
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> xXIp
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> qJdO
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> OPTg
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> fmIR
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> cImA
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> fmII
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> fmIR
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> fmIR
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> Jjvw
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> fmIR
react.surge.util.MSound -> PSku:
    react.surge.util.MSound AMBIENCE_CAVE -> Dkwl
    react.surge.util.MSound AMBIENCE_RAIN -> rYJK
    react.surge.util.MSound AMBIENCE_THUNDER -> kKdP
    react.surge.util.MSound ANVIL_BREAK -> mbkc
    react.surge.util.MSound ANVIL_LAND -> iMmx
    react.surge.util.MSound ANVIL_USE -> ExMX
    react.surge.util.MSound ARROW_HIT -> Vgxp
    react.surge.util.MSound BURP -> WblK
    react.surge.util.MSound CHEST_CLOSE -> Trsx
    react.surge.util.MSound CHEST_OPEN -> Menw
    react.surge.util.MSound CLICK -> aOHB
    react.surge.util.MSound DOOR_CLOSE -> Jdvg
    react.surge.util.MSound DOOR_OPEN -> BfSE
    react.surge.util.MSound DRINK -> yemT
    react.surge.util.MSound EAT -> jIAC
    react.surge.util.MSound EXPLODE -> MDNN
    react.surge.util.MSound FALL_BIG -> UStj
    react.surge.util.MSound FALL_SMALL -> Okui
    react.surge.util.MSound FIRE -> mskk
    react.surge.util.MSound FIRE_IGNITE -> LQka
    react.surge.util.MSound FIZZ -> Irud
    react.surge.util.MSound FUSE -> usSa
    react.surge.util.MSound GLASS -> jaqd
    react.surge.util.MSound HURT_FLESH -> FGic
    react.surge.util.MSound ITEM_BREAK -> LRLc
    react.surge.util.MSound ITEM_PICKUP -> TQRm
    react.surge.util.MSound LAVA -> huae
    react.surge.util.MSound LAVA_POP -> fEHW
    react.surge.util.MSound LEVEL_UP -> DBGE
    react.surge.util.MSound MINECART_BASE -> qVHs
    react.surge.util.MSound MINECART_INSIDE -> JSwu
    react.surge.util.MSound NOTE_BASS -> SWDA
    react.surge.util.MSound NOTE_PIANO -> iWBm
    react.surge.util.MSound NOTE_BASS_DRUM -> CXTu
    react.surge.util.MSound NOTE_STICKS -> hvBp
    react.surge.util.MSound NOTE_BASS_GUITAR -> ixeR
    react.surge.util.MSound NOTE_SNARE_DRUM -> COdC
    react.surge.util.MSound NOTE_PLING -> DtkP
    react.surge.util.MSound ORB_PICKUP -> TIEo
    react.surge.util.MSound PISTON_EXTEND -> oPBk
    react.surge.util.MSound PISTON_RETRACT -> msoS
    react.surge.util.MSound PORTAL -> pReQ
    react.surge.util.MSound PORTAL_TRAVEL -> CFrS
    react.surge.util.MSound PORTAL_TRIGGER -> veXT
    react.surge.util.MSound SHOOT_ARROW -> hubB
    react.surge.util.MSound SPLASH -> XoEC
    react.surge.util.MSound SPLASH2 -> dWsS
    react.surge.util.MSound STEP_GRASS -> XCnw
    react.surge.util.MSound STEP_GRAVEL -> Trws
    react.surge.util.MSound STEP_LADDER -> UTYR
    react.surge.util.MSound STEP_SAND -> vnHf
    react.surge.util.MSound STEP_SNOW -> coBa
    react.surge.util.MSound STEP_STONE -> wWYJ
    react.surge.util.MSound STEP_WOOD -> UvYy
    react.surge.util.MSound STEP_WOOL -> IbVh
    react.surge.util.MSound SWIM -> dPBX
    react.surge.util.MSound WATER -> aEvr
    react.surge.util.MSound WOOD_CLICK -> JCWJ
    react.surge.util.MSound BAT_DEATH -> uQRo
    react.surge.util.MSound BAT_HURT -> aFYQ
    react.surge.util.MSound BAT_IDLE -> QHKh
    react.surge.util.MSound BAT_LOOP -> aFXo
    react.surge.util.MSound BAT_TAKEOFF -> gPYq
    react.surge.util.MSound BLAZE_BREATH -> veWL
    react.surge.util.MSound BLAZE_DEATH -> HWDL
    react.surge.util.MSound BLAZE_HIT -> wEvJ
    react.surge.util.MSound CAT_HISS -> cnbO
    react.surge.util.MSound CAT_HIT -> EMYh
    react.surge.util.MSound CAT_MEOW -> ptfe
    react.surge.util.MSound CAT_PURR -> GJoE
    react.surge.util.MSound CAT_PURREOW -> yvpS
    react.surge.util.MSound CHICKEN_IDLE -> IPtg
    react.surge.util.MSound CHICKEN_HURT -> nfQC
    react.surge.util.MSound CHICKEN_EGG_POP -> Qimq
    react.surge.util.MSound CHICKEN_WALK -> xtNU
    react.surge.util.MSound COW_IDLE -> JBvW
    react.surge.util.MSound COW_HURT -> xHyS
    react.surge.util.MSound COW_WALK -> nepF
    react.surge.util.MSound CREEPER_HISS -> ReAg
    react.surge.util.MSound CREEPER_DEATH -> ReBH
    react.surge.util.MSound ENDERDRAGON_DEATH -> gYNn
    react.surge.util.MSound ENDERDRAGON_GROWL -> GltR
    react.surge.util.MSound ENDERDRAGON_HIT -> pJVm
    react.surge.util.MSound ENDERDRAGON_WINGS -> VqPb
    react.surge.util.MSound ENDERMAN_DEATH -> HMtV
    react.surge.util.MSound ENDERMAN_HIT -> qEJI
    react.surge.util.MSound ENDERMAN_IDLE -> FHNv
    react.surge.util.MSound ENDERMAN_TELEPORT -> hTAp
    react.surge.util.MSound ENDERMAN_SCREAM -> fwmx
    react.surge.util.MSound ENDERMAN_STARE -> cfSs
    react.surge.util.MSound GHAST_SCREAM -> TayC
    react.surge.util.MSound GHAST_SCREAM2 -> HVei
    react.surge.util.MSound GHAST_CHARGE -> MUTa
    react.surge.util.MSound GHAST_DEATH -> kCWc
    react.surge.util.MSound GHAST_FIREBALL -> qxMf
    react.surge.util.MSound GHAST_MOAN -> apny
    react.surge.util.MSound IRONGOLEM_DEATH -> SWGB
    react.surge.util.MSound IRONGOLEM_HIT -> Fiqh
    react.surge.util.MSound IRONGOLEM_THROW -> yncR
    react.surge.util.MSound IRONGOLEM_WALK -> AssA
    react.surge.util.MSound MAGMACUBE_WALK -> yCoL
    react.surge.util.MSound MAGMACUBE_WALK2 -> UCXQ
    react.surge.util.MSound MAGMACUBE_JUMP -> AAQO
    react.surge.util.MSound PIG_IDLE -> Beuo
    react.surge.util.MSound PIG_DEATH -> NaFt
    react.surge.util.MSound PIG_WALK -> SgeS
    react.surge.util.MSound SHEEP_IDLE -> UTXy
    react.surge.util.MSound SHEEP_SHEAR -> iVbm
    react.surge.util.MSound SHEEP_WALK -> FbAM
    react.surge.util.MSound SILVERFISH_HIT -> bALq
    react.surge.util.MSound SILVERFISH_KILL -> nwTd
    react.surge.util.MSound SILVERFISH_IDLE -> JLIo
    react.surge.util.MSound SILVERFISH_WALK -> bcOs
    react.surge.util.MSound SKELETON_IDLE -> xtQJ
    react.surge.util.MSound SKELETON_DEATH -> BCsD
    react.surge.util.MSound SKELETON_HURT -> YaFv
    react.surge.util.MSound SKELETON_WALK -> pAct
    react.surge.util.MSound SLIME_ATTACK -> yDNp
    react.surge.util.MSound SLIME_WALK -> edJE
    react.surge.util.MSound SLIME_WALK2 -> nUQN
    react.surge.util.MSound SPIDER_IDLE -> GKQc
    react.surge.util.MSound SPIDER_DEATH -> xAKq
    react.surge.util.MSound SPIDER_WALK -> TIFp
    react.surge.util.MSound WITHER_DEATH -> bANF
    react.surge.util.MSound WITHER_HURT -> LRQH
    react.surge.util.MSound WITHER_IDLE -> mlCw
    react.surge.util.MSound WITHER_SHOOT -> Bvwy
    react.surge.util.MSound WITHER_SPAWN -> nDSW
    react.surge.util.MSound WOLF_BARK -> iMtP
    react.surge.util.MSound WOLF_DEATH -> PENP
    react.surge.util.MSound WOLF_GROWL -> SoyO
    react.surge.util.MSound WOLF_HOWL -> BTtl
    react.surge.util.MSound WOLF_HURT -> FXqs
    react.surge.util.MSound WOLF_PANT -> WAQf
    react.surge.util.MSound WOLF_SHAKE -> CPID
    react.surge.util.MSound WOLF_WALK -> IYkV
    react.surge.util.MSound WOLF_WHINE -> YiYy
    react.surge.util.MSound ZOMBIE_METAL -> YPFw
    react.surge.util.MSound ZOMBIE_WOOD -> TkJx
    react.surge.util.MSound ZOMBIE_WOODBREAK -> nLbU
    react.surge.util.MSound ZOMBIE_IDLE -> CFwo
    react.surge.util.MSound ZOMBIE_DEATH -> RSbd
    react.surge.util.MSound ZOMBIE_HURT -> GCCN
    react.surge.util.MSound ZOMBIE_INFECT -> OuMi
    react.surge.util.MSound ZOMBIE_UNFECT -> bbqW
    react.surge.util.MSound ZOMBIE_REMEDY -> AIcO
    react.surge.util.MSound ZOMBIE_WALK -> OAhe
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> MCrq
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> jIGH
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> XDSf
    react.surge.util.MSound ZOMBIE_PIG_HURT -> jQWV
    react.surge.util.MSound DIG_WOOL -> hlsV
    react.surge.util.MSound DIG_GRASS -> Sxhs
    react.surge.util.MSound DIG_GRAVEL -> OdMT
    react.surge.util.MSound DIG_SAND -> Efog
    react.surge.util.MSound DIG_SNOW -> yoEQ
    react.surge.util.MSound DIG_STONE -> VNnI
    react.surge.util.MSound DIG_WOOD -> MDSu
    react.surge.util.MSound FIREWORK_BLAST -> ShHm
    react.surge.util.MSound FIREWORK_BLAST2 -> YPGf
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> gbCy
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> oFwR
    react.surge.util.MSound FIREWORK_TWINKLE -> gYRs
    react.surge.util.MSound FIREWORK_TWINKLE2 -> Lkfh
    react.surge.util.MSound FIREWORK_LAUNCH -> NWys
    react.surge.util.MSound SUCCESSFUL_HIT -> cMFb
    react.surge.util.MSound HORSE_ANGRY -> gGou
    react.surge.util.MSound HORSE_ARMOR -> aycr
    react.surge.util.MSound HORSE_BREATHE -> nevx
    react.surge.util.MSound HORSE_DEATH -> LtXX
    react.surge.util.MSound HORSE_GALLOP -> ihKH
    react.surge.util.MSound HORSE_HIT -> UfAU
    react.surge.util.MSound HORSE_IDLE -> oaKW
    react.surge.util.MSound HORSE_JUMP -> tFFo
    react.surge.util.MSound HORSE_LAND -> nvxS
    react.surge.util.MSound HORSE_SADDLE -> BUXT
    react.surge.util.MSound HORSE_SOFT -> cDVT
    react.surge.util.MSound HORSE_WOOD -> lqRm
    react.surge.util.MSound DONKEY_ANGRY -> tNVb
    react.surge.util.MSound DONKEY_DEATH -> GeJB
    react.surge.util.MSound DONKEY_HIT -> AQtM
    react.surge.util.MSound DONKEY_IDLE -> CrNv
    react.surge.util.MSound HORSE_SKELETON_DEATH -> mcTi
    react.surge.util.MSound HORSE_SKELETON_HIT -> nfXI
    react.surge.util.MSound HORSE_SKELETON_IDLE -> fDmd
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> aqTT
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> DdPn
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> xbsA
    react.surge.util.MSound VILLAGER_DEATH -> yfVb
    react.surge.util.MSound VILLAGER_HAGGLE -> iWHM
    react.surge.util.MSound VILLAGER_HIT -> rYRA
    react.surge.util.MSound VILLAGER_IDLE -> rXqA
    react.surge.util.MSound VILLAGER_NO -> fpBN
    react.surge.util.MSound VILLAGER_YES -> edLs
    java.lang.String pre19sound -> AcWi
    java.lang.String post19sound -> hufu
    org.bukkit.Sound resolvedSound -> mlEc
    react.surge.util.MSound[] ENUM$VALUES -> XCtO
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> Pdud
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> Punx:
    org.bukkit.Material material -> VOQQ
    java.lang.Byte data -> aydH
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> ghXo
    79:80:void setData(java.lang.Byte) -> fmIR
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> PCLM:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> gNJG
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> qvVm
    68:68:boolean isAnyOnline() -> PCSi
    80:80:react.glang.GList inWorld(org.bukkit.World) -> paTN
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> YoTO
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> fmIR
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> fmIR
    143:144:void disable(org.bukkit.entity.Player) -> mhjO
    154:155:void enable(org.bukkit.entity.Player) -> KCgF
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> fmIR
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> Jjvw
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> ftvm
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> fmIR
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> rUur
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> EKHL
    300:300:boolean canFindPlayer(java.lang.String) -> aThj
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> ktIK
    338:345:react.glang.GList onlinePlayers() -> QOHT
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> DYFM
    368:371:void clear(org.bukkit.entity.Player) -> RroH
    381:385:void clearEffects(org.bukkit.entity.Player) -> PKFf
    398:399:void heal(org.bukkit.entity.Player,double) -> fmIR
    409:410:void heal(org.bukkit.entity.Player) -> QVYl
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> lCcx
    432:433:void resetHunger(org.bukkit.entity.Player) -> mOYC
    443:444:void kill(org.bukkit.entity.Player) -> KULB
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> eqvt
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> nkqL
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> fmIR
react.surge.util.P$1 -> PCLM$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> cImA
    1:1:java.lang.Object onAdapt(java.lang.Object) -> xXIp
react.surge.util.P$2 -> PCLM$2:
    java.lang.Double val$doff -> Pfpp
    org.bukkit.entity.Player val$e -> KyeN
    org.bukkit.entity.Entity[] val$result -> SWIU
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> fmII
react.surge.util.PE -> fCJh:
    react.surge.util.PE ABSORPTION -> AtXm
    react.surge.util.PE BLINDNESS -> UwAr
    react.surge.util.PE CONFUSION -> bRST
    react.surge.util.PE DAMAGE_RESISTANCE -> OSND
    react.surge.util.PE FAST_DIGGING -> yfVP
    react.surge.util.PE FIRE_RESISTANCE -> dGXF
    react.surge.util.PE GLOWING -> LtYq
    react.surge.util.PE HARM -> VFbT
    react.surge.util.PE HEAL -> OAnK
    react.surge.util.PE HEALTH_BOOST -> ujmu
    react.surge.util.PE HUNGER -> OdRH
    react.surge.util.PE INCREASE_DAMAGE -> FHUf
    react.surge.util.PE INVISIBILITY -> EVSv
    react.surge.util.PE JUMP -> aFaw
    react.surge.util.PE LEVITATION -> lqUT
    react.surge.util.PE LUCK -> gHTK
    react.surge.util.PE NIGHT_VISION -> fEPh
    react.surge.util.PE POISON -> AsyN
    react.surge.util.PE REGENERATION -> GTJU
    react.surge.util.PE SATURATION -> cMIV
    react.surge.util.PE SLOW -> hCEx
    react.surge.util.PE SLOW_DIGGING -> fobj
    react.surge.util.PE SPEED -> ukNJ
    react.surge.util.PE UNLUCK -> huiS
    react.surge.util.PE WATER_BREATHING -> tEfg
    react.surge.util.PE WEAKNESS -> hKVP
    react.surge.util.PE WITHER -> vmpS
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> fmIR
    144:144:react.surge.util.PE d(int) -> WWkp
    156:156:react.surge.util.PE a(int) -> UAFQ
    166:166:org.bukkit.potion.PotionEffect c() -> yJiO
    177:178:void c(org.bukkit.entity.LivingEntity) -> RsPX
    182:183:void crm(org.bukkit.entity.LivingEntity) -> xXIp
    187:188:void rm(org.bukkit.entity.LivingEntity) -> qJdO
react.surge.util.ParticleEffect -> wnnE:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> UvcH
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> COlp
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> xQsA
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> sTFI
    react.surge.util.ParticleEffect WATER_BUBBLE -> OdPq
    react.surge.util.ParticleEffect WATER_SPLASH -> lhbl
    react.surge.util.ParticleEffect WATER_WAKE -> yDUW
    react.surge.util.ParticleEffect SUSPENDED -> HhMb
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> THkg
    react.surge.util.ParticleEffect CRIT -> cfYm
    react.surge.util.ParticleEffect CRIT_MAGIC -> KqVi
    react.surge.util.ParticleEffect SMOKE_NORMAL -> ShMT
    react.surge.util.ParticleEffect SMOKE_LARGE -> rGpj
    react.surge.util.ParticleEffect SPELL -> lNsb
    react.surge.util.ParticleEffect SPELL_INSTANT -> aNtU
    react.surge.util.ParticleEffect SPELL_MOB -> IIOv
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> OuTq
    react.surge.util.ParticleEffect SPELL_WITCH -> tyNy
    react.surge.util.ParticleEffect DRIP_WATER -> GTLE
    react.surge.util.ParticleEffect DRIP_LAVA -> AIgv
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> kDBA
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> sulF
    react.surge.util.ParticleEffect TOWN_AURA -> sSiG
    react.surge.util.ParticleEffect NOTE -> ItEH
    react.surge.util.ParticleEffect PORTAL -> xkiK
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> bQwK
    react.surge.util.ParticleEffect FLAME -> YrQr
    react.surge.util.ParticleEffect LAVA -> ecrQ
    react.surge.util.ParticleEffect FOOTSTEP -> YjBM
    react.surge.util.ParticleEffect CLOUD -> JCbc
    react.surge.util.ParticleEffect REDSTONE -> oaOL
    react.surge.util.ParticleEffect SNOWBALL -> QsLD
    react.surge.util.ParticleEffect SNOW_SHOVEL -> DBRS
    react.surge.util.ParticleEffect SLIME -> Eftt
    react.surge.util.ParticleEffect HEART -> rHTS
    react.surge.util.ParticleEffect BARRIER -> iVkN
    react.surge.util.ParticleEffect ITEM_CRACK -> Nqos
    react.surge.util.ParticleEffect BLOCK_CRACK -> KOUW
    react.surge.util.ParticleEffect BLOCK_DUST -> LlKL
    react.surge.util.ParticleEffect WATER_DROP -> tWLC
    react.surge.util.ParticleEffect ITEM_TAKE -> wqUu
    react.surge.util.ParticleEffect MOB_APPEARANCE -> BLlR
    react.surge.util.ParticleEffect DRAGON_BREATH -> DcsD
    react.surge.util.ParticleEffect END_ROD -> aOTe
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> qwss
    react.surge.util.ParticleEffect SWEEP_ATTACK -> ecqO
    java.util.Map NAME_MAP -> Fris
    java.util.Map ID_MAP -> QjXp
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> DdSk
    java.util.List properties -> AQxo
    react.surge.util.ParticleEffect[] ENUM$VALUES -> JnUj
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> cBYy
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> fmIR
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> jpeJ
    557:565:react.surge.util.ParticleEffect fromId(int) -> Gaoe
    577:578:boolean isWater(org.bukkit.Location) -> UcGj
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> fmIR
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> fmIR
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> fmIR
    665:681:void display(float,int,org.bukkit.Location,double) -> fmIR
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> fmIR
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIR
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> fmIR
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> fmIR
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIR
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> fmIR
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> fmIR
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIR
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> fmIR
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> fmIR
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIR
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> fmIR
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> fmIR
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> fmIR
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> wnnE$fmIR:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> wnnE$Jjvw:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> wnnE$EKHL:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> vIpA
    1594:1594:float getValueY() -> FEwN
    1605:1605:float getValueZ() -> dxbG
react.surge.util.ParticleEffect$OrdinaryColor -> wnnE$HSpS:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> vIpA
    1526:1526:float getValueY() -> FEwN
    1537:1537:float getValueZ() -> dxbG
react.surge.util.ParticleEffect$ParticleColor -> wnnE$IFSE:
    1383:1383:void <init>() -> <init>
    float getValueX() -> vIpA
    float getValueY() -> FEwN
    float getValueZ() -> dxbG
react.surge.util.ParticleEffect$ParticleColorException -> wnnE$RsPX:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> wnnE$xXIp:
    org.bukkit.Material material -> VOQQ
    byte data -> EpGv
    int[] packetData -> VqWp
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> XKLW
    1309:1309:java.lang.String getPacketDataString() -> fCSM
react.surge.util.ParticleEffect$ParticleDataException -> wnnE$qJdO:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> wnnE$OPTg:
    int version -> version
    java.lang.Class enumParticle -> oFyp
    java.lang.reflect.Constructor packetConstructor -> fVST
    java.lang.reflect.Method getHandle -> vnSD
    java.lang.reflect.Field playerConnection -> tqAW
    java.lang.reflect.Method sendPacket -> wXFv
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> humv
    float offsetX -> PEUm
    float offsetY -> euUk
    float offsetZ -> UnWc
    float speed -> PfxL
    int amount -> CyNS
    boolean longDistance -> COpQ
    react.surge.util.ParticleEffect$ParticleData data -> VFgS
    java.lang.Object packet -> iyQf
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> Ywcx
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> fmIR
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> Jjvw
    2004:2018:void sendTo(org.bukkit.Location,double) -> Jjvw
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> wnnE$OPTg$fmIR:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> wnnE$OPTg$Jjvw:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> wnnE$OPTg$EKHL:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> wnnE$cImA:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> eBRM
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> vKrK
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> gsKi
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> HEnn
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> GnAV
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> wnnE$fmII:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> fTLR:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> VfKn
react.surge.util.Persist -> LXar:
react.surge.util.PluginUtil -> fvMq:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> IFSE
    81:85:void enableAll() -> yAvo
    95:99:void disable(org.bukkit.plugin.Plugin) -> RsPX
    106:110:void disableAll() -> jyrK
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> xXIp
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> fmIR
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> xylo
    169:172:java.util.List getPluginNames(boolean) -> bGHp
    184:187:java.lang.String getPluginVersion(java.lang.String) -> CDbd
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> qJdO
    237:316:java.util.List findByCommand(java.lang.String) -> KLYw
    337:338:void load(org.bukkit.plugin.Plugin) -> OPTg
    342:364:java.lang.String getPluginFileName(java.lang.String) -> SCSJ
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> fmIR
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> cImA
    480:484:void reloadAll() -> XKJb
    496:622:void unload(org.bukkit.plugin.Plugin) -> fmII
react.surge.util.PoolCount -> iLRc:
react.surge.util.PoolDescriber -> DXyK:
react.surge.util.PoolNanoThrottle -> SnVj:
react.surge.util.PositionalSelector -> ECKU:
    react.glang.GSet allowedChunks -> WlNP
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> KDdR
    39:40:void addChunk(org.bukkit.Chunk) -> qArl
    44:44:react.glang.GSet getAllowedChunks() -> SULm
react.surge.util.Protocol -> sHnX:
    react.surge.util.Protocol LATEST -> jIQA
    react.surge.util.Protocol R1_12_2 -> wWfO
    react.surge.util.Protocol R1_12_2_PRE -> BoQD
    react.surge.util.Protocol R1_12_1 -> jQaH
    react.surge.util.Protocol R1_12 -> KGGK
    react.surge.util.Protocol R1_11_2 -> JDDN
    react.surge.util.Protocol R1_11_1 -> YYAO
    react.surge.util.Protocol R1_11 -> qgUr
    react.surge.util.Protocol R1_10_2 -> txpK
    react.surge.util.Protocol R1_10_1 -> txoe
    react.surge.util.Protocol R1_10 -> GSkk
    react.surge.util.Protocol R1_9_4 -> QQHq
    react.surge.util.Protocol R1_9_3 -> Dtux
    react.surge.util.Protocol R1_9_2 -> IQbP
    react.surge.util.Protocol R1_9_1 -> rsJK
    react.surge.util.Protocol R1_9 -> rahG
    react.surge.util.Protocol R1_8_9 -> HFOK
    react.surge.util.Protocol R1_8_8 -> MoPf
    react.surge.util.Protocol R1_8_7 -> vmtH
    react.surge.util.Protocol R1_8_6 -> SEmV
    react.surge.util.Protocol R1_8_5 -> hJxc
    react.surge.util.Protocol R1_8_4 -> Umut
    react.surge.util.Protocol R1_8_3 -> cLmr
    react.surge.util.Protocol R1_8_2 -> xlMr
    react.surge.util.Protocol R1_8_1 -> wNvu
    react.surge.util.Protocol R1_8 -> ecvE
    react.surge.util.Protocol R1_7_10 -> cLmo
    react.surge.util.Protocol R1_7_9 -> KFiS
    react.surge.util.Protocol R1_7_8 -> DtyR
    react.surge.util.Protocol R1_7_7 -> JeiX
    react.surge.util.Protocol R1_7_6 -> mIkL
    react.surge.util.Protocol R1_7_5 -> XgBY
    react.surge.util.Protocol R1_7_4 -> seOD
    react.surge.util.Protocol R1_7_3 -> RdpO
    react.surge.util.Protocol R1_7_2 -> LlQM
    react.surge.util.Protocol R1_7_1 -> nxBb
    react.surge.util.Protocol B1_6_4 -> UfJK
    react.surge.util.Protocol B1_6_3 -> MEAG
    react.surge.util.Protocol B1_6_2 -> XLoP
    react.surge.util.Protocol B1_6_1 -> tVoX
    react.surge.util.Protocol B1_5_2 -> IHss
    react.surge.util.Protocol B1_5_1 -> Vhkn
    react.surge.util.Protocol B1_5 -> TcGP
    react.surge.util.Protocol B1_4_7 -> vnXH
    react.surge.util.Protocol B1_4_6 -> kwIj
    react.surge.util.Protocol B1_4_5 -> iyRu
    react.surge.util.Protocol B1_4_4 -> QPjN
    react.surge.util.Protocol B1_4_2 -> pBRU
    react.surge.util.Protocol B1_3_2 -> nnoc
    react.surge.util.Protocol B1_3_1 -> BEAU
    react.surge.util.Protocol B1_2_5 -> Bfbt
    react.surge.util.Protocol B1_2_4 -> lhih
    react.surge.util.Protocol EARLIEST -> EEXA
    react.surge.util.Protocol UNKNOWN -> jRBr
    int version -> version
    java.lang.String packageVersion -> BEAR
    java.lang.String versionName -> rbKS
    boolean netty -> tqCA
    react.surge.util.Protocol[] ENUM$VALUES -> lhij
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> ETUJ
    118:118:java.lang.String getPackageVersion() -> ghXO
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> GYyo
    142:150:react.surge.util.Protocol getProtocolVersion() -> PLCs
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> Jjvw
    160:160:boolean isServerVersion() -> LYIf
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> QgxN
    175:175:boolean isActualVersion() -> uhoY
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> JRcD
    200:200:int getMetaVersion() -> eapX
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> tDBP:
    react.surge.util.Protocol from -> qUuU
    react.surge.util.Protocol to -> DAuG
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> RAHf
    21:21:react.surge.util.Protocol getTo() -> iKyu
    26:26:boolean contains(react.surge.util.Protocol) -> EKHL
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> TNvH:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> RcKc
    70:70:int randomNextInt() -> lECg
    80:80:long randomNextLong() -> AjLo
    92:92:boolean isWithin(double) -> lCcx
    104:104:boolean isWithin(int) -> IWUX
    116:116:boolean isWithin(long) -> PmIb
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> mOYC
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> eHBI
react.surge.util.RawEvent -> IGGR:
react.surge.util.RayTrace -> Tpxg:
    org.bukkit.Location start -> Yqst
    org.bukkit.util.Vector direction -> EEXL
    java.lang.Double maxDistance -> qETa
    java.lang.Double distanceCovered -> vvfu
    java.lang.Double step -> AuAr
    java.lang.Boolean stop -> AuBQ
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> rWUV
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> fmII
    89:89:org.bukkit.Location getStart() -> GAIa
    94:95:void setStart(org.bukkit.Location) -> YoTO
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> WHHG
    114:115:void setMaxDistance(java.lang.Double) -> HSpS
    119:119:java.lang.Double getDistanceCovered() -> qnET
    124:125:void setDistanceCovered(java.lang.Double) -> IFSE
    129:129:java.lang.Double getStep() -> Heni
    134:135:void setStep(java.lang.Double) -> RsPX
react.surge.util.ReflectionUtils -> hscV:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> fmIR
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> fmIR
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> fmIR
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> fmIR
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> fmIR
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> fmIR
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> fmIR
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> fmIR
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> fmIR
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> fmIR
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> fmIR
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> fmIR
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> fmIR
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> fmIR
react.surge.util.ReflectionUtils$DataType -> hscV$fmIR:
    react.surge.util.ReflectionUtils$DataType BYTE -> YaSb
    react.surge.util.ReflectionUtils$DataType SHORT -> oibR
    react.surge.util.ReflectionUtils$DataType INTEGER -> NGac
    react.surge.util.ReflectionUtils$DataType LONG -> SODO
    react.surge.util.ReflectionUtils$DataType CHARACTER -> TsiO
    react.surge.util.ReflectionUtils$DataType FLOAT -> YGdA
    react.surge.util.ReflectionUtils$DataType DOUBLE -> mkpB
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> gQLu
    java.util.Map CLASS_MAP -> OJgM
    java.lang.Class primitive -> Jeju
    java.lang.Class reference -> XMRK
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> TbhH
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> dMkw
    704:704:java.lang.Class getReference() -> KgHd
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> Jjvw
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> EKHL
    741:742:java.lang.Class getReference(java.lang.Class) -> HSpS
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> fmIR
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> Jjvw
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> Jjvw
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> EKHL
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> fmIR
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> hscV$Jjvw:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> MDaX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> SqGV
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> Ltbb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> wNxg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> WSAA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> VFkX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> drXB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> AlQj
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> oHCY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> MfeF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> whkP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> VynT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> XxDn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> YjFc
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> hePg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> SWSR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> CXfl
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> BxHL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> wOXr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> WIky
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> jcGF
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> jyhv:
    void refresh() -> refresh
react.surge.util.SQLOperation -> OYYY:
    react.surge.util.SQLOperation LOAD -> uYsl
    react.surge.util.SQLOperation SAVE -> RvRy
    react.surge.util.SQLOperation[] ENUM$VALUES -> GvSs
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> BlgG:
    react.surge.util.ServerState START -> ywbO
    react.surge.util.ServerState ENABLE -> LInA
    react.surge.util.ServerState DISABLE -> JLXl
    react.surge.util.ServerState STOP -> Frox
    react.surge.util.ServerState RUNNING -> GeRj
    react.surge.util.ServerState[] ENUM$VALUES -> vDEe
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> xrQD:
    org.bukkit.Location location -> kBes
    org.bukkit.util.Vector offset -> jRDe
    org.bukkit.util.Vector size -> rGxq
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> qArl
    90:94:org.bukkit.Location randomLocation() -> mYGh
    104:104:org.bukkit.Location randomSurface() -> Yoon
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> AjNb
    129:129:org.bukkit.util.Vector getSize() -> wfgl
react.surge.util.SnowLevel -> RHpJ:
    byte level -> iVpm
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> VVIU
    51:52:void setLevel(byte) -> OPTg
react.surge.util.SuperCaller -> BArW:
    void run() -> run
react.surge.util.T -> eiyH:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> Jjvw
    32:35:void stop() -> stop
react.surge.util.TXT -> Vnnj:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> xXIp
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> fmIR
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> fmIR
    99:99:java.lang.String line(react.surge.util.C,int) -> fmIR
    113:113:java.lang.String underline(react.surge.util.C,int) -> Jjvw
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> fmIR
react.surge.util.Tag -> AYBj:
    java.lang.String value() -> value
react.surge.util.Timer -> sYns:
    long tns -> kUGj
    long cns -> cgBp
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> mGhe
react.surge.util.VectorMath -> dpKJ:
    int[] $SWITCH_TABLE$surge$util$Axis -> Oktk
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> oaSo
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> fmIR
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> fmIR
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> Jjvw
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> EKHL
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> fmIR
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> Jjvw
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> Jjvw
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> EKHL
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> HSpS
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> IFSE
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> RsPX
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> xXIp
    111:111:double round(double,int) -> IFSE
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> fmIR
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> fmIR
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> fmIR
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> HSpS
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> IFSE
    268:268:org.bukkit.util.Vector toVector(float,float) -> fmIR
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> fmIR
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> fmIR
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> qJdO
    337:340:double getSpeed(org.bukkit.util.Vector) -> OPTg
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> fmIR
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> cImA
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> fmIR
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> Jjvw
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> EKHL
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> HSpS
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> fmII
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> axFn
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> IXTI
react.surge.util.VectorMath$1 -> dpKJ$1:
    org.bukkit.util.Vector val$vector -> LuBs
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> UcGj
    1:1:java.lang.Object onAdapt(java.lang.Object) -> xXIp
react.surge.util.W -> CpLg:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> qJdO
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> fmIR
    75:86:org.bukkit.entity.Entity getEntity(int) -> gNJG
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> fmIR
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> fmIR
    143:143:int getChunkX(org.bukkit.block.Block) -> OPTg
    155:155:int getChunkY(org.bukkit.block.Block) -> cImA
    168:169:void dropXp(org.bukkit.Location,int) -> Jjvw
    180:180:int getChunkZ(org.bukkit.block.Block) -> fmII
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> Jjvw
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> fmIR
    232:239:react.glang.GList news(org.bukkit.Location) -> paTN
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> fmIR
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> paTN
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> bGHp
    300:300:org.bukkit.World toSync(org.bukkit.World) -> AFlD
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> UcGj
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> bGHp
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> bGHp
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> TVux
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> fmIR
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> fmIR
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> fmIR
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> fmIR
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> fmIR
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> fmIR
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> fmIR
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> fmIR
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> AFlD
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> Ywcx
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> AFlD
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> EKHL
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> fmIR
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> fmIR
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> fmIR
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> fmIR
react.surge.util.W$1 -> CpLg$1:
    java.lang.Double val$doff -> Pfpp
    org.bukkit.entity.Entity val$e -> dquX
    org.bukkit.entity.Entity[] val$result -> SWIU
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> fmII
react.surge.util.Worlds -> JuBA:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> FElY
    33:33:boolean hasWorld(java.lang.String) -> dLrw
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> jGII:
react.text.ColoredString -> CUwv:
    react.surge.util.C c -> kelC
    java.lang.String s -> XLsL
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> RtOy
    42:43:void setC(react.surge.util.C) -> Jjvw
    47:47:java.lang.String getS() -> awiy
    52:53:void setS(java.lang.String) -> hkBr
react.text.RTEX -> dwyf:
    react.glang.GList extras -> ahnq
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> stOF
    44:58:react.json.JSONObject toJSON() -> DYFM
react.text.RTX -> HUHn:
    react.json.JSONArray base -> MLsW
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> RsPX
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> Jjvw
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> fmIR
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> fmIR
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> Jjvw
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> EKHL
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> fmIR
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> Jjvw
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> EKHL
    265:265:react.json.JSONArray toJSON() -> CMpR
    276:277:void tellRawTo(org.bukkit.entity.Player) -> jyWf
react.text.RawText -> ooiP:
    java.lang.String COLOR_BLACK -> jjxr
    java.lang.String COLOR_DARK_BLUE -> UCic
    java.lang.String COLOR_DARK_GREEN -> BoWY
    java.lang.String COLOR_DARK_AQUA -> DmNV
    java.lang.String COLOR_DARK_RED -> UwPH
    java.lang.String COLOR_DARK_PURPLE -> GTSx
    java.lang.String COLOR_GOLD -> wXLy
    java.lang.String COLOR_GRAY -> cVDe
    java.lang.String COLOR_DARK_GRAY -> kvlo
    java.lang.String COLOR_BLUE -> jjwh
    java.lang.String COLOR_GREEN -> pSXI
    java.lang.String COLOR_AQUA -> KiOs
    java.lang.String COLOR_RED -> IYxK
    java.lang.String COLOR_LIGHT_PURPLE -> TIWG
    java.lang.String COLOR_YELLOW -> bJNp
    java.lang.String COLOR_WHITE -> djHH
    java.lang.String COLOR_NONE -> KyqM
    java.lang.String HEAD_TEXT -> kfKi
    java.lang.String HEAD_COLOR -> cEBC
    java.lang.String HEAD_BOLD -> SqHT
    java.lang.String HEAD_ITALIC -> GuuS
    java.lang.String HEAD_UNDERLINED -> HEsg
    java.lang.String HEAD_STRIKETHROUGH -> MDcB
    java.lang.String HEAD_OBFUSCATED -> ShWW
    java.lang.String HEAD_CLICK_EVENT -> KGNB
    java.lang.String HEAD_HOVER_EVENT -> GnEs
    java.lang.String HEAD_ACTION -> qMhm
    java.lang.String HEAD_VALUE -> FkBt
    java.lang.String HEAD_EXTRA -> XxGe
    java.lang.String HEAD_ACTION_SHOW_TEXT -> LccI
    java.lang.String HEAD_ACTION_COMMAND -> PNMM
    java.util.ArrayList components -> BwhW
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> ogGA
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> IFSE
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIR
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> fmIR
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIR
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fmIR
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIR
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> fmIR
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> fmIR
    307:313:java.lang.String compile() -> wfgY
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> fmIR

react.Config -> FNKC:
    react.glang.GMap worldConfigs -> FNKC
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> VDGg
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> vtHI
    java.lang.String A_COMMANDOVERRIDE_TPS -> vACT
    java.lang.String A_REACT_REMOTE_PORT -> AGKY
    java.lang.String A_REACT_REMOTE_ENABLED -> srmk
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> ykmo
    java.lang.String A_POOL_MAXTHREADS -> OHDS
    java.lang.String A_POOL_SYNC_NANOS -> Usgo
    java.lang.String A_CULLING_ENABLED -> lwKC
    java.lang.String A_FASTLEAF_ENABLED -> FpNV
    java.lang.String A_FASTLEAF_ONDECAY -> UtIf
    java.lang.String A_FASTLEAF_INSTANT -> Gani
    java.lang.String A_FASTLEAF_DECAYPERIOD -> rDue
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> AhmN
    java.lang.String A_ENTITYSTACK_ENABLED -> eYEI
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> GrqA
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> HBoM
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> hsOP
    java.lang.String A_GLASS_SHOW_BLOCKS -> QNJe
    java.lang.String A_GLASS_SHOW_PARTICLES -> WNxk
    java.lang.String A_ALLOW_CULL -> lmxH
    java.lang.String A_ALLOW_PURGE -> OjEp
    java.lang.String A_ALLOW_STACKING -> TyTr
    java.lang.String A_CULL_RULES -> HTOq
    java.lang.String A_RAI_TPS_HIGH_TICK -> RsOY
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> OYEC
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> aviW
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> uyTI
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> VwKQ
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> Oidt
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> kcDn
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> uySU
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> YfbP
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> lnWu
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> HmbS
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> qlej
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> mWhc
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> CEBE
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> HBnP
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> uxrY
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> vjtI
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> Yfai
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> WWlt
    java.lang.String A_RAI_FLUID_TIME_CEIL -> MtdB
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> VUJt
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> JtLB
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> UQgN
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> OPVV
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> clQr
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> nInI
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> URGl
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> uOCY
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> tCNq
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> gNLB
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> CDar
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> dMRJ
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> xGKT
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> rNIq
    java.lang.String A_USE_WORLD_CONFIGS -> UYwl
    java.lang.String A_LANGUAGE -> jgtW
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> SvVI
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> rMiT
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> XRaF
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> EBYT
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> DXgm
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> vtIU
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> jEpf
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> ssOf
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> nlQI
    java.lang.String A_RAI_ENTITY_PROPIGATE -> FMjl
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> RbOi
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> pPSk
    double MAX_EXPLOSION_MS -> idpq
    boolean REDSTONE_DYNAMIC_CLOCK -> SCPW
    boolean COMMANDOVERRIDES_TPS -> lwLG
    int REACT_REMOTE_PORT -> EmKx
    boolean REACT_REMOTE_ENABLED -> kshF
    int ENTITY_STACK_MAX_COUNT -> Susp
    int POOL_MAXTHREADS -> lUHi
    long POOL_SYNC_NANOS -> wTgY
    boolean CULLING_ENABLED -> tdon
    boolean FASTLEAF_ENABLED -> uhTL
    boolean FASTLEAF_ONDECAY -> IFTS
    boolean FASTLEAF_INSTANT -> KKyV
    int FASTLEAF_DECAYPERIOD -> sQKw
    boolean COMMANDOVERRIDES_MEMORY -> bFmU
    boolean ENTITYSTACK_ENABLED -> WGNh
    int ENTITYSTACK_MINIMUM_GROUP -> LrDE
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> Btem
    int ENTITYSTACK_MAXIMUM_HEALTH -> EmOK
    boolean GLASS_SHOW_BLOCKS -> AhrC
    boolean GLASS_SHOW_PARTICLES -> maAH
    react.glang.GList ALLOW_CULL -> nccM
    react.glang.GList ALLOW_PURGE -> wfLw
    react.glang.GList ALLOW_STACKING -> MtfI
    react.glang.GList CULL_RULES -> KwPu
    double RAI_TPS_HIGH_TICK -> TWWi
    long RAI_REDSTONE_TIME_FLOOR -> SuwI
    long RAI_REDSTONE_TIME_CEIL -> BBBL
    long RAI_REDSTONE_TIME_MUDDING -> nuEC
    double RAI_REDSTONE_TIME_FUNCTION -> doWd
    double RAI_REDSTONE_TIME_OVERBLEED -> avoN
    int RAI_REDSTONE_TIME_RADIUS -> TVvr
    int RAI_REDSTONE_TIME_PROPIGATION -> uVuA
    long RAI_HOPPER_TIME_FLOOR -> OGhN
    long RAI_HOPPER_TIME_CEIL -> FpRe
    long RAI_HOPPER_TIME_MUDDING -> ctde
    double RAI_HOPPER_TIME_FUNCTION -> Ywha
    double RAI_HOPPER_TIME_OVERBLEED -> Rrsm
    int RAI_HOPPER_TIME_RADIUS -> MAbG
    int RAI_HOPPER_TIME_PROPIGATION -> fAwm
    int RAI_ENTITY_CHUNK_MULTIPLIER -> iuuW
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> kIWL
    int RAI_ENTITY_CHUNK_RADIUS -> Jjyy
    long RAI_FLUID_TIME_FLOOR -> clRv
    long RAI_FLUID_TIME_CEIL -> BuHN
    long RAI_FLUID_TIME_MUDDING -> oDae
    double RAI_FLUID_TIME_FUNCTION -> MuFM
    double RAI_FLUID_TIME_OVERBLEED -> iSrD
    int RAI_FLUID_TIME_RADIUS -> LWoQ
    int RAI_FLUID_TIME_PROPIGATION -> tusk
    double SMEAR_TICK_ENTITIES_MAX_TICK -> pXeb
    double SMEAR_TICK_TILES_MAX_TICK -> OXgo
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> turs
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> ksjI
    double SMEAR_TICK_ENTITIES_AMOUNT -> RaqR
    double SMEAR_TICK_TILES_AMOUNT -> YUcx
    boolean SMEAR_TICK_ENTITIES_ENABLE -> IEuS
    boolean SMEAR_TICK_TILES_ENABLE -> Btey
    boolean HOPPER_OVERTICK_ENABLE -> ykqA
    boolean USE_WORLD_CONFIGS -> eXgH
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> aelY
    long RAI_CHUNK_TIME_CEIL -> FyCM
    long RAI_CHUNK_TIME_MUDDING -> QxaS
    double RAI_CHUNK_TIME_FUNCTION -> oVDI
    double RAI_CHUNK_TIME_OVERBLEED -> HKfD
    int RAI_CHUNK_TIME_RADIUS -> EJmL
    int RAI_CHUNK_TIME_PROPIGATION -> oMVM
    boolean RAI_CHUNK_TIME_PROPIGATE -> dLtr
    boolean RAI_FLUID_TIME_PROPIGATE -> ogHo
    boolean RAI_ENTITY_PROPIGATE -> HdxE
    boolean RAI_HOPPER_TIME_PROPIGATE -> vtMi
    boolean RAI_REDSTONE_TIME_PROPIGATE -> eHIe
    boolean hrld -> gMmg
    boolean rns -> JcOG
    boolean rrl -> oUed
    39:654:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    659:676:void doTrack(org.bukkit.plugin.Plugin) -> FNKC
    681:703:void onRead(org.bukkit.plugin.Plugin) -> VDGg
    707:737:void read(java.io.File,boolean) -> FNKC
    741:758:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> FNKC
    763:771:void closeWorldConfig(org.bukkit.World) -> VDGg
    776:889:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> FNKC
    894:931:react.surge.cluster.DataCluster defaultConfig(boolean) -> FNKC
    936:1015:react.glang.GList getDefaultEntitiesForStacking() -> FNKC
    1020:1039:react.glang.GList getDefaultEntitiesForCulling() -> VDGg
    1044:1081:react.glang.GList getDefaultEntitiesForRemoval() -> vtHI
    1086:1127:react.glang.GList getDefaultCullRules() -> vACT
react.Config$1 -> FNKC$1:
    java.io.File val$fConfig -> HBtq
    java.io.File val$fConfigExperimental -> bhre
    org.bukkit.plugin.Plugin val$main -> avpp
    1:662:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    667:671:void run() -> run
react.Config$2 -> FNKC$2:
    react.api.WorldConfig val$wc -> KDON
    org.bukkit.World val$w -> YwkC
    1:748:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    753:754:void run() -> run
react.Gate -> VDGg:
    react.glang.GMap defaultSettings -> eGfs
    react.glang.GSet refresh -> jgwj
    react.glang.GSet destroy -> XdEh
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> IpkH
    42:44:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> FNKC
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> FNKC
    180:180:int getChunkCountForView() -> AGKY
    185:185:int getMaxChunksForView() -> srmk
    190:190:boolean hasFawe() -> ykmo
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> vtHI
    220:224:void resetEntityMaxTick(org.bukkit.World) -> vACT
    228:228:int getEntityTickMax(org.bukkit.World) -> AGKY
    233:233:int getTileTickMax(org.bukkit.World) -> srmk
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> FNKC
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> FNKC
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> FNKC
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> FNKC
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> VDGg
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> FNKC
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> ykmo
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> FNKC
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> VDGg
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> vtHI
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> vACT
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> AGKY
    377:377:boolean isBadForUnloading() -> OHDS
    382:382:boolean canUnload(org.bukkit.World,int,int) -> FNKC
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> VDGg
    426:442:void removeEntity(org.bukkit.entity.Entity) -> FNKC
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> VDGg
    466:487:void cullEntity(org.bukkit.entity.Entity) -> vtHI
    492:509:void updateBlock(org.bukkit.block.Block) -> FNKC
    513:517:java.lang.String header(java.lang.String,react.surge.util.C) -> FNKC
    522:522:java.lang.String header(react.surge.util.C) -> FNKC
    528:532:void updateFluid(org.bukkit.block.Block) -> VDGg
    536:537:void refresh(org.bukkit.Chunk) -> VDGg
    542:561:void refreshChunks() -> Usgo
    565:566:void sendBlockChange(org.bukkit.Location) -> FNKC
    40:40:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> lwKC
react.Gate$1 -> VDGg$1:
    react.api.SelectorPosition val$sel -> ThYe
    react.glang.Callback val$prog -> OPXy
    react.glang.Callback val$cb -> SvXd
    1:48:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> VDGg$1$1:
    react.Gate$1 this$1 -> oEEI
    java.lang.Object val$o -> INgj
    java.lang.reflect.Constructor val$vectorConstruct -> nSBv
    java.lang.reflect.Constructor val$cuboidConstruct -> eXgx
    java.lang.reflect.Method val$faweFixMethod -> hYbM
    java.lang.Integer[] val$total -> eXgw
    java.lang.Integer[] val$sof -> hrtI
    react.glang.Callback val$prog -> OPXy
    java.lang.Integer val$tot -> CDgV
    1:80:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> VDGg$1$2:
    react.Gate$1 this$1 -> oEEI
    react.glang.Callback val$prog -> OPXy
    react.glang.Callback val$cb -> SvXd
    java.lang.Integer[] val$total -> eXgw
    1:109:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> VDGg$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> MBCY
    290:290:void <clinit>() -> <clinit>
react.Info -> vtHI:
    java.lang.String CORE_REACT_DOT -> fJjd
    java.lang.String CORE_NAME -> fJjc
    java.lang.String CORE_CACHE -> lTkj
    java.lang.String WORLD_CONFIGS -> ntdb
    java.lang.String CORE_DOTYML -> tvWD
    java.lang.String COMMAND_REACT -> Xkts
    java.lang.String COMMAND_RAI -> QNPP
    java.lang.String COMMAND_ACT_DESCRIPTION -> hIAL
    java.lang.String COMMAND_ACT -> XlUw
    java.lang.String COMMAND_ACT_ALIAS_1 -> BSFU
    java.lang.String COMMAND_ACT_ALIAS_2 -> hYdf
    java.lang.String COMMAND_ACT_USAGE -> owjr
    java.lang.String COMMAND_HELP_DESCRIPTION -> SKgO
    java.lang.String COMMAND_HELP -> XlYE
    java.lang.String COMMAND_HELP_ALIAS_1 -> CwnE
    java.lang.String COMMAND_HELP_ALIAS_2 -> jEwv
    java.lang.String COMMAND_HELP_USAGE -> pilk
    java.lang.String COMMAND_STATUS_DESCRIPTION -> teYA
    java.lang.String COMMAND_STATUS -> dLvo
    java.lang.String COMMAND_STATUS_ALIAS_1 -> GIFT
    java.lang.String COMMAND_STATUS_ALIAS_2 -> iuxo
    java.lang.String COMMAND_STATUS_USAGE -> eHLF
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> vbla
    java.lang.String COMMAND_CPUSCORE -> vQkQ
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> KndU
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> UQmp
    java.lang.String COMMAND_CPUSCORE_USAGE -> mFpb
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> ESaM
    java.lang.String COMMAND_RELOAD -> mhrg
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> maDF
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> vHxy
    java.lang.String COMMAND_RELOAD_USAGE -> maDI
    java.lang.String COMMAND_CTP_DESCRIPTION -> SdxS
    java.lang.String COMMAND_CTP -> inJC
    java.lang.String COMMAND_CTP_ALIAS_1 -> GavL
    java.lang.String COMMAND_CTP_ALIAS_2 -> nSEB
    java.lang.String COMMAND_CTP_USAGE -> DYNK
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> VwSl
    java.lang.String COMMAND_MONITOR -> WaEW
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> tStX
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> hjeI
    java.lang.String COMMAND_MONITOR_USAGE -> VCnS
    java.lang.String COMMAND_ENV_DESCRIPTION -> CxMs
    java.lang.String COMMAND_ENV -> hkEn
    java.lang.String COMMAND_ENV_ALIAS_1 -> oLvH
    java.lang.String COMMAND_ENV_ALIAS_2 -> vAIi
    java.lang.String COMMAND_ENV_USAGE -> CgOL
    java.lang.String COMMAND_VERSION_DESCRIPTION -> EvEy
    java.lang.String COMMAND_VERSION -> Mtkr
    java.lang.String COMMAND_VERSION_ALIAS_1 -> ktRa
    java.lang.String COMMAND_VERSION_ALIAS_2 -> tKhJ
    java.lang.String COMMAND_VERSION_USAGE -> HBxj
    java.lang.String COMMAND_MAP_DESCRIPTION -> cdIk
    java.lang.String COMMAND_MAP -> tKgh
    java.lang.String COMMAND_MAP_ALIAS_1 -> XAgV
    java.lang.String COMMAND_MAP_ALIAS_2 -> UJAB
    java.lang.String COMMAND_MAP_USAGE -> VwVt
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> CDjP
    java.lang.String COMMAND_TOPCHUNK -> wnby
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> GayW
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> tCWT
    java.lang.String COMMAND_TOPCHUNK_USAGE -> XRiB
    java.lang.String COMMAND_GLASS_DESCRIPTION -> UJAH
    java.lang.String COMMAND_GLASS -> Rryr
    java.lang.String COMMAND_GLASS_ALIAS_1 -> oUiV
    java.lang.String COMMAND_GLASS_ALIAS_2 -> yRfE
    java.lang.String COMMAND_GLASS_USAGE -> JlBc
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> gFAm
    java.lang.String COMMAND_CBLAME -> EudX
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> pYLu
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> TqNr
    java.lang.String COMMAND_CBLAME_USAGE -> dMXv
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> Aqio
    java.lang.String COMMAND_ACTIONLOG -> kAMR
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> RryE
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> RsYn
    java.lang.String COMMAND_ACTIONLOG_USAGE -> nuJE
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> SmlN
    java.lang.String COMMAND_CAPABILITIES -> WGTY
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> dxNL
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> DjQj
    java.lang.String COMMAND_CAPABILITIES_USAGE -> kAPK
    java.lang.String MSG_PERMISSION -> aMDe
    java.lang.String MSG_MONITORING_STARTED -> MtnL
    java.lang.String MSG_MONITORING_STOPPED -> xiXb
    java.lang.String MSG_ACTIONLOGGING_STARTED -> nSIt
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> hbYs
    java.lang.String MSG_GLASS_STARTED -> EeGS
    java.lang.String MSG_GLASS_STOPPED -> XSJt
    org.bukkit.Color COLOR_HOPPER -> eGml
    org.bukkit.Color COLOR_BLOCK_UPDATE -> AXYQ
    org.bukkit.Color COLOR_BLOCK_FROMTO -> Kevn
    org.bukkit.Color COLOR_BLOCK_BURN -> cJYn
    org.bukkit.Color COLOR_BLOCK_DECAY -> ETFK
    org.bukkit.Color COLOR_BLOCK_FORM -> ofmV
    java.lang.String NAME_TICK -> SLLc
    java.lang.String NAME_MEMORY -> ndJy
    java.lang.String NAME_CHUNKS -> aUTu
    java.lang.String NAME_ENTITIES -> oVLo
    java.lang.String STATE_MONITORING_TAB -> UQrP
    java.lang.String STATE_MONITORING_ENABLED -> DPbT
    java.lang.String STATE_MONITORING_HIGH -> iLJW
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> klBw
    java.lang.String STATE_MAPPING_ENABLED -> wCpU
    java.lang.String STATE_SOUND_PLAYS -> tKiE
    java.lang.String STATE_MONITORING_POSTED -> KMDj
    java.lang.String STATE_MONITORING_LASTTAB -> DYRJ
    java.lang.String STATE_GLASSES_ENABLED -> JJBS
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> lUSN
    java.lang.String STATE_PLAYER_HOTBAR -> DjTD
    java.lang.String STATE_PLAYER_SHIFT -> oDhw
    java.lang.String STATE_PLAYER_SCROLL -> vQoB
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> XuNB
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> UtTf
    java.lang.String PERM_ACCESS -> ogMb
    java.lang.String PERM_TELEPORT -> hkJR
    java.lang.String PERM_MONITOR -> BcmP
    java.lang.String PERM_MONITOR_TITLE -> OXqF
    java.lang.String PERM_MONITOR_ACTIONLOG -> RPws
    java.lang.String PERM_MONITOR_MAP -> PJrP
    java.lang.String PERM_MONITOR_ENVIRONMENT -> FWGr
    java.lang.String PERM_MONITOR_GLASSES -> IXAN
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> MRll
    java.lang.String PERM_ACT -> dgQW
    java.lang.String PERM_RAI -> lDUR
    java.lang.String PERM_RAI_CONTROL -> qvIB
    java.lang.String PERM_RAI_ACCESS -> SwCI
    java.lang.String PERM_RAI_MONITOR -> imoi
    java.lang.String PERM_RELOAD -> QEgg
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> OiuO
    java.lang.String SAMPLER_REDSTONE_TICK -> nuOJ
    java.lang.String SAMPLER_ENTITY_TIME -> VoJj
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> Plwm
    java.lang.String SAMPLER_TILE_TIME_LOCK -> lvxT
    java.lang.String SAMPLER_TILE_TIME -> DivK
    java.lang.String SAMPLER_TILE_DROPTICK -> ArMa
    java.lang.String SAMPLER_ENTITY_DROPTICK -> Wqld
    java.lang.String SAMPLER_REDSTONE_SECOND -> qvGk
    java.lang.String SAMPLER_REDSTONE_TIME -> says
    java.lang.String SAMPLER_PHYSICS_TIME -> KUVo
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> NUoL
    java.lang.String SAMPLER_HOPPER_TICK -> GjmM
    java.lang.String SAMPLER_HOPPER_SECOND -> WOgo
    java.lang.String SAMPLER_HOPPER_TIME -> CgRY
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> jycS
    java.lang.String SAMPLER_FLUID_TICK -> bGVs
    java.lang.String SAMPLER_FLUID_SECOND -> ECDw
    java.lang.String SAMPLER_FLUID_TIME -> rFEW
    java.lang.String SAMPLER_TPS -> bGWp
    java.lang.String SAMPLER_TICK -> Plvl
    java.lang.String SAMPLER_TIU -> tnMv
    java.lang.String SAMPLER_MEM -> yAgl
    java.lang.String SAMPLER_FREEMEM -> JcUp
    java.lang.String SAMPLER_MAXMEM -> DPcP
    java.lang.String SAMPLER_ALLOCMEM -> pGnf
    java.lang.String SAMPLER_MAHS -> mqit
    java.lang.String SAMPLER_CHK -> nIxk
    java.lang.String SAMPLER_ATASK -> MtpB
    java.lang.String SAMPLER_STASK -> xPFw
    java.lang.String SAMPLER_CHK_TIME -> XdNX
    java.lang.String SAMPLER_EXPLOSION_TIME -> tmqM
    java.lang.String SAMPLER_CHKS -> rgkH
    java.lang.String SAMPLER_ENT -> GYnb
    java.lang.String SAMPLER_ENTLIV -> afYy
    java.lang.String SAMPLER_ENTDROP -> pXtI
    java.lang.String SAMPLER_ENTTILE -> MtrX
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> rgjt
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> DYWM
    java.lang.String ACTION_CULL_ENTITIES_NAME -> aCus
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> FhMy
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> LaOP
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> iKmm
    java.lang.String ACTION_UPDATE_FLUID_NAME -> VUYu
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> ObHF
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> sIKU
    java.lang.String ACTION_LOCK_FLUID_STATUS -> jFaI
    java.lang.String ACTION_LOCK_FLUID_NAME -> KCwy
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> sIKa
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> SmsU
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> prfS
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> LPLK
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> ebDu
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> DYVD
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> KUXs
    java.lang.String ACTION_LOCK_HOPPER_NAME -> JsxY
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> vARf
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> bPKD
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> gyLt
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> VeyQ
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> PvKX
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> QFJE
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> uOOv
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> LrOf
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> qSeR
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> URVS
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> mGXk
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> gVkn
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> Xtsf
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> jqWg
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> dEQv
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> NgVj
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> ogTy
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> yAmW
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> CpHh
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> hsbV
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> wCwc
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> fShx
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> pYVN
    java.lang.String ACTION_FIX_LIGHTING_NAME -> ntrP
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> Gjre
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> XSQg
    java.lang.String ACTION_COLLECT_GARBAGE -> ObIr
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> SCak
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> WOnJ
    6:6:void <init>() -> <init>
    8:254:void <clinit>() -> <clinit>
react.Lang -> vACT:
    java.lang.String BUNDLE_NAME -> VCya
    java.util.ResourceBundle RESOURCE_BUNDLE -> wUYd
    java.util.ResourceBundle PRIMARY_BUNDLE -> oDqI
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> AGKY:
    react.React instance -> QyRB
    react.controller.SampleController sampleController -> IqXP
    react.controller.PlayerController playerController -> uORj
    react.controller.MonitorController monitorController -> DahP
    react.controller.CommandController commandController -> RYoH
    react.controller.ActionController actionController -> wnjc
    react.controller.FastDecayController fastDecayController -> LPMr
    react.controller.EntityStackController entityStackController -> SUCN
    react.controller.GlassController glassController -> SLRD
    react.controller.EntityCullController entityCullController -> HTcC
    react.controller.SpikeController spikeController -> jGDF
    react.controller.SecurityController securityController -> Ubxc
    react.controller.RedstoneController redstoneController -> gEii
    react.controller.HopperController hopperController -> fCHI
    react.controller.PhysicsController physicsController -> lLgg
    react.controller.TickTimeController tickTimeController -> PeKm
    react.controller.RAIController raiController -> lnkO
    react.controller.FluidController fluidController -> lDXG
    react.controller.ChunkController chunkController -> QxpH
    react.controller.GraphController graphController -> AOng
    react.controller.ChronophyFluidController fluidChronophyController -> VMJe
    react.controller.EventController eventController -> CgWP
    react.controller.SmearTickController smearTickController -> Dahj
    react.controller.FeatureController featureController -> OYWg
    react.controller.HopperOvertickController hopperPlungeController -> jyfd
    react.controller.LanguageController languageController -> YUud
    react.controller.RemoteController remoteController -> Vnod
    react.controller.ExplosiveController explosiveController -> XuWF
    react.controller.WorldController worldController -> Thhv
    42:42:void <init>() -> <init>
    134:142:void enable() -> enable
    148:148:void disable() -> disable
react.React$1 -> AGKY$1:
    react.React this$0 -> qeMU
    135:135:void <init>(react.React) -> <init>
    139:140:void run() -> run
react.action.ActionCollectGarbage -> srmk:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionCollectGarbage$1 -> srmk$1:
    react.action.source.IActionSource val$source -> DsNI
    react.action.ActionCollectGarbage this$0 -> pYYO
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> srmk$1$1:
    long val$mbnex -> vRXv
    long val$mbmem -> PvPU
    react.action.ActionCollectGarbage$1 this$1 -> QEmc
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> ykmo:
    long ms -> DPjN
    int lcd -> WqsT
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
    25:25:long access$002(react.action.ActionCullEntities,long) -> FNKC
    25:25:int access$100(react.action.ActionCullEntities) -> FNKC
    25:25:long access$000(react.action.ActionCullEntities) -> VDGg
react.action.ActionCullEntities$1 -> ykmo$1:
    react.action.ActionCullEntities this$0 -> RcED
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> FpNV
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> ykmo$2:
    react.action.ActionCullEntities this$0 -> RcED
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> FpNV
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> ykmo$3:
    react.glang.FinalInteger val$completed -> anoX
    react.glang.FinalInteger val$total -> MApb
    react.glang.FinalInteger val$totalCulled -> qJxV
    react.glang.FinalInteger val$totalChunked -> DXxg
    react.action.source.IActionSource val$source -> DsNI
    react.action.ActionCullEntities this$0 -> RcED
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> ykmo$4:
    react.action.source.IActionSource val$source -> DsNI
    react.glang.FinalInteger val$totalCulled -> qJxV
    react.glang.FinalInteger val$totalChunked -> DXxg
    react.action.ActionCullEntities this$0 -> RcED
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> OHDS:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionFixLighting$1 -> OHDS$1:
    react.action.ActionFixLighting this$0 -> JIiO
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> FpNV
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> OHDS$2:
    react.action.source.IActionSource val$source -> DsNI
    int val$ch -> DPiD
    react.action.ActionFixLighting this$0 -> JIiO
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> FNKC
    78:78:void run(java.lang.Object) -> FNKC
react.action.ActionFixLighting$3 -> OHDS$3:
    react.action.ActionFixLighting this$0 -> JIiO
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> FNKC
    89:89:void run(java.lang.Object) -> FNKC
react.action.ActionLockFluid -> Usgo:
    int lcd -> WqsT
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionLockFluid$1 -> Usgo$1:
    react.action.ActionLockFluid this$0 -> MmFR
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> FpNV
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> Usgo$2:
    react.action.ActionLockFluid this$0 -> MmFR
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> FpNV
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> lwKC:
    int lcd -> WqsT
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionLockHopper$1 -> lwKC$1:
    react.action.ActionLockHopper this$0 -> Pumt
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> FpNV
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> lwKC$2:
    react.action.ActionLockHopper this$0 -> Pumt
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> FpNV
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> FpNV:
    int lcd -> WqsT
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionLockRedstone$1 -> FpNV$1:
    react.action.ActionLockRedstone this$0 -> sYoh
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> FpNV
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> FpNV$2:
    react.action.ActionLockRedstone this$0 -> sYoh
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> FpNV
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> UtIf:
    long ms -> DPjN
    int lcd -> WqsT
    boolean fail -> CNGk
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> VDGg
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> FNKC
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> FNKC
    23:23:int access$200(react.action.ActionPurgeChunks) -> VDGg
    23:23:long access$100(react.action.ActionPurgeChunks) -> vtHI
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> FNKC
react.action.ActionPurgeChunks$1 -> UtIf$1:
    react.action.ActionPurgeChunks this$0 -> GQbH
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> FpNV
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> UtIf$2:
    int val$dk -> XSSS
    java.lang.Object val$j -> ySPa
    react.glang.FinalInteger val$acompleted -> hIOT
    react.glang.FinalInteger val$completed -> anoX
    react.glang.FinalInteger val$total -> MApb
    react.glang.FinalInteger val$totalCulled -> qJxV
    react.glang.FinalInteger val$totalChunked -> DXxg
    react.action.source.IActionSource val$source -> DsNI
    react.api.ISelector[] val$selectors -> VLlU
    react.action.ActionPurgeChunks this$0 -> GQbH
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> UtIf$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> opFq
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> UtIf$3:
    react.action.source.IActionSource val$source -> DsNI
    react.glang.FinalInteger val$acompleted -> hIOT
    react.action.ActionPurgeChunks this$0 -> GQbH
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> UtIf$4:
    org.bukkit.Chunk val$chunk -> bjAm
    java.lang.Runnable val$cb -> APRG
    react.action.ActionPurgeChunks this$0 -> GQbH
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> Gani:
    long ms -> DPjN
    int lcd -> WqsT
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> VDGg
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> FNKC
    27:27:int access$100(react.action.ActionPurgeEntities) -> FNKC
    27:27:long access$000(react.action.ActionPurgeEntities) -> VDGg
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> FNKC
react.action.ActionPurgeEntities$1 -> Gani$1:
    react.action.ActionPurgeEntities this$0 -> jXGG
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> FpNV
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> Gani$2:
    react.action.ActionPurgeEntities this$0 -> jXGG
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> FpNV
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> Gani$3:
    react.glang.FinalInteger val$completed -> anoX
    react.glang.FinalInteger val$total -> MApb
    react.glang.FinalInteger val$totalCulled -> qJxV
    react.glang.FinalInteger val$totalChunked -> DXxg
    react.action.source.IActionSource val$source -> DsNI
    react.action.ActionPurgeEntities this$0 -> jXGG
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> Gani$4:
    react.action.source.IActionSource val$source -> DsNI
    react.glang.FinalInteger val$totalCulled -> qJxV
    react.glang.FinalInteger val$totalChunked -> DXxg
    react.action.ActionPurgeEntities this$0 -> jXGG
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> Gani$5:
    org.bukkit.entity.Entity val$i -> IykW
    react.glang.FinalInteger val$cu -> dwwT
    int val$k -> AOpc
    org.bukkit.Chunk val$chunk -> bjAm
    java.lang.Runnable val$cb -> APRG
    react.action.ActionPurgeEntities this$0 -> jXGG
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> rDue:
    int lcd -> WqsT
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionUnlockFluid$1 -> rDue$1:
    react.action.ActionUnlockFluid this$0 -> gpbj
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> FpNV
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> AhmN:
    int lcd -> WqsT
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionUnlockHopper$1 -> AhmN$1:
    react.action.ActionUnlockHopper this$0 -> bGaJ
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> FpNV
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> eYEI:
    int lcd -> WqsT
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.action.ActionUnlockRedstone$1 -> eYEI$1:
    react.action.ActionUnlockRedstone this$0 -> EvRf
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> FpNV
    30:30:java.lang.Object get() -> get
react.action.source.AccessActionSource -> GrqA:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> FNKC
    26:33:void sendResponseSuccess(java.lang.String) -> VDGg
    38:45:void sendResponseError(java.lang.String) -> vtHI
    50:57:void sendResponseActing(java.lang.String) -> vACT
react.action.source.ActionHandle -> HBoM:
    react.action.source.ActionHandle AUTOMATIC -> agBD
    react.action.source.ActionHandle MANUAL -> GshA
    react.action.source.ActionHandle MUTEX -> iLVJ
    react.action.source.ActionHandle[] $VALUES -> ylfR
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> hsOP:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> FNKC
    18:19:void sendResponseSuccess(java.lang.String) -> VDGg
    24:25:void sendResponseError(java.lang.String) -> vtHI
    30:31:void sendResponseActing(java.lang.String) -> vACT
react.action.source.EmptyActionSource -> QNJe:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> FNKC
    15:15:void sendResponseSuccess(java.lang.String) -> VDGg
    21:21:void sendResponseError(java.lang.String) -> vtHI
    27:27:void sendResponseActing(java.lang.String) -> vACT
react.action.source.IActionSource -> WNxk:
    void sendResponse(java.lang.String) -> FNKC
    void sendResponseSuccess(java.lang.String) -> VDGg
    void sendResponseError(java.lang.String) -> vtHI
    void sendResponseActing(java.lang.String) -> vACT
react.action.source.PlayerActionSource -> lmxH:
    org.bukkit.entity.Player p -> RcGD
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> FNKC
    30:31:void sendResponseSuccess(java.lang.String) -> VDGg
    36:37:void sendResponseError(java.lang.String) -> vtHI
    42:43:void sendResponseActing(java.lang.String) -> vACT
react.action.source.RAIActionSource -> OjEp:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> FNKC
    16:17:void sendResponseSuccess(java.lang.String) -> VDGg
    22:23:void sendResponseError(java.lang.String) -> vtHI
    28:29:void sendResponseActing(java.lang.String) -> vACT
react.api.Action -> TyTr:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> WidR
    java.lang.String[] nodes -> IWjj
    react.action.source.ActionHandle handle -> mOqM
    react.api.ActionState state -> gqDW
    react.api.ActionTargetType target -> qeOU
    react.api.ActionType type -> xYBH
    react.action.source.IActionSource currentSource -> YNIL
    double progress -> gEnj
    react.glang.GMap defaultSelectors -> NEXT
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> FNKC
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> FNKC
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> UtIf
    94:94:react.api.ActionState getState() -> Gani
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> AGKY
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> rDue
    130:130:react.api.ActionType getType() -> AhmN
    136:136:react.glang.GMap getDefaultSelectors() -> eYEI
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> VDGg
    189:190:void completeAction() -> GrqA
    195:195:react.action.source.IActionSource getCurrentSource() -> HBoM
    201:201:java.lang.String[] getNodes() -> hsOP
    207:208:void setNodes(java.lang.String[]) -> FNKC
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
react.api.ActionAlreadyRunningException -> HTOq:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> RsOY:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> OYEC:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> aviW:
    react.api.ActionState IDLE -> WOqi
    react.api.ActionState RUNNING -> Vnqk
    react.api.ActionState[] $VALUES -> psMR
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> uyTI:
    react.api.ActionTargetType POSITIONAL -> qTMR
    react.api.ActionTargetType SYSTEM -> GHtQ
    react.api.ActionTargetType[] $VALUES -> xYAW
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> VwKQ:
    react.api.ActionType FIX_LIGHTING -> KMOP
    react.api.ActionType UNLOCK_FLUID -> LPQn
    react.api.ActionType LOCK_FLUID -> HCdm
    react.api.ActionType UNLOCK_HOPPER -> BliU
    react.api.ActionType LOCK_HOPPER -> ycry
    react.api.ActionType UNLOCK_REDSTONE -> QqCp
    react.api.ActionType LOCK_REDSTONE -> rxqf
    react.api.ActionType CULL_ENTITIES -> FWRP
    react.api.ActionType COLLECT_GARBAGE -> LXbi
    react.api.ActionType PURGE_ENTITIES -> MuXd
    react.api.ActionType PURGE_CHUNKS -> tCcA
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> mOqM
    react.api.ActionTargetType target -> qeOU
    react.api.ActionType[] $VALUES -> cmGT
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> QNJe
    50:50:react.api.ActionTargetType getTarget() -> rDue
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> Oidt:
    react.api.ActivationRangeType ANIMALS -> mYAd
    react.api.ActivationRangeType MONSTERS -> xidk
    react.api.ActivationRangeType MISC -> LHEK
    react.api.ActivationRangeType[] $VALUES -> qCNS
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> kcDn:
    int value() -> value
react.api.Async -> uySU:
react.api.CPUBenchmark -> YfbP:
    org.bukkit.command.CommandSender sender -> sender
    int score -> GHvB
    java.lang.Runnable onFinish -> gpeX
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> WNxk
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> FNKC
    10:10:int access$100(react.api.CPUBenchmark) -> VDGg
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> vtHI
react.api.CPUBenchmark$1 -> YfbP$1:
    react.api.CPUBenchmark this$0 -> UInE
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> YfbP$2:
    react.api.CPUBenchmark this$0 -> UInE
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> lnWu:
    react.api.CPUResult ULTRA_SLOW -> Nols
    react.api.CPUResult VERY_SLOW -> mHCd
    react.api.CPUResult SLOW -> CDyI
    react.api.CPUResult AVERAGE -> IiPF
    react.api.CPUResult GOOD -> uFgv
    react.api.CPUResult FAST -> RcHh
    react.api.CPUResult VERY_FAST -> teiG
    react.api.CPUResult ULTRA_FAST -> WaWD
    java.lang.String m -> uXKQ
    react.api.CPUResult[] $VALUES -> vknO
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> FNKC
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> HmbS:
    react.glang.GMap cache -> yArc
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> VDGg
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> vtHI
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> lmxH
    54:54:boolean has(java.lang.Object) -> vACT
react.api.Capability -> qlej:
    react.api.Capability DUAL_WEILD -> PCNa
    react.api.Capability SCOREBOARD -> GITv
    react.api.Capability SCOREBOARD_ADVANCED -> rOAW
    react.api.Capability HOPPER -> hRER
    react.api.Capability ENTITY_ATTRIBUTES -> EmcC
    react.api.Capability ENTITY_AI -> ctxK
    react.api.Capability ACTION_BAR -> AGeT
    react.api.Capability ENTITY_NAMES -> sYtF
    react.api.Capability TITLE_BAR -> WXch
    react.api.Capability CHUNK_RELIGHTING -> cAtQ
    react.api.Capability MONITOR_SUBMISSIVENESS -> htGa
    react.api.Capability ACCELERATED_PING -> IXMX
    react.api.Capability ENTITY_THROTTLING -> gFQH
    react.api.Capability TILE_THROTTLING -> KVCW
    react.api.Capability PASSENGERS -> Gbiq
    react.glang.GList capabilities -> skXv
    react.surge.util.Protocol version -> EKcA
    react.api.Flavor flavor -> nmLD
    java.lang.String plugin -> Svml
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> OjEp
    100:100:boolean isFlavorCapable() -> TyTr
    105:105:boolean isVersionCapable() -> HTOq
    110:110:boolean isCapable() -> RsOY
    115:115:react.surge.util.Protocol getVersion() -> OYEC
    120:120:react.api.Flavor getFlavor() -> aviW
    125:125:java.lang.String getPlugin() -> uyTI
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> FNKC
    153:167:void sendNotCapable(react.action.source.IActionSource) -> FNKC
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> mWhc:
    react.api.CapabilityBasis VERSION -> Blkv
    react.api.CapabilityBasis FLAVOR -> JccY
    react.api.CapabilityBasis PLUGIN -> CNMT
    react.api.CapabilityBasis[] $VALUES -> PTRv
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> CEBE:
    react.api.ChunkIssue ENTITY -> LGfY
    react.api.ChunkIssue HOPPER -> kuDW
    react.api.ChunkIssue TNT -> JccV
    react.api.ChunkIssue REDSTONE -> esRb
    react.api.ChunkIssue FLUID -> wMRA
    react.api.ChunkIssue PHYSICS -> GtMQ
    react.api.ChunkIssue[] $VALUES -> dDyq
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> VwKQ
    3:10:void <clinit>() -> <clinit>
react.api.ChunkIssue$1 -> CEBE$1:
    int[] $SwitchMap$react$api$ChunkIssue -> aoWD
    14:14:void <clinit>() -> <clinit>
react.api.Clip -> HBnP:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> uxrY:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> FNKC
    31:32:void sendResponseSuccess(java.lang.String) -> VDGg
    37:38:void sendResponseError(java.lang.String) -> vtHI
    43:44:void sendResponseActing(java.lang.String) -> vACT
react.api.CullList -> vjtI:
    react.glang.GSet toCull -> Gskw
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> vACT
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> Oidt
react.api.DTest -> Yfai:
    6:6:void <init>() -> <init>
    11:62:int test() -> kcDn
react.api.EntityFlag -> WWlt:
    react.api.EntityFlag NAMED -> mOsy
    react.api.EntityFlag TAMED -> AYHR
    react.api.EntityFlag STACKED -> PTTH
    react.api.EntityFlag RIDDEN -> cBXL
    react.api.EntityFlag LIVING -> IGON
    react.api.EntityFlag NON_LIVING -> KgFM
    react.api.EntityFlag PASSIVE -> kdAX
    react.api.EntityFlag HOSTILE -> uFil
    react.api.EntityFlag MATURE -> FyXg
    react.api.EntityFlag YOUNG -> rNau
    react.api.EntityFlag UNDERWATER -> dDyA
    react.api.EntityFlag GROUNDED -> mqwL
    react.api.EntityFlag AIRBORNE -> ghVP
    react.api.EntityFlag PROJECTILES -> xqvP
    react.api.EntityFlag CAVES -> xrVq
    react.api.EntityFlag NEARBY -> VMSB
    react.api.EntityFlag LIT -> wLor
    react.api.EntityFlag LEASHED -> Sekp
    java.lang.String m -> uXKQ
    react.api.EntityFlag[] $VALUES -> xHCY
    12:12:react.api.EntityFlag[] values() -> values
    12:12:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    36:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:52:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> AGKY
    57:152:boolean is(org.bukkit.entity.Entity) -> srmk
    158:158:java.lang.String toString() -> toString
    12:31:void <clinit>() -> <clinit>
react.api.EntityGroup -> MtdB:
    react.glang.GSet entityTypes -> oEYE
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> uySU
react.api.EntitySample -> VUJt:
    react.glang.GMap counts -> AHGl
    react.glang.GMap sets -> WrXw
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> YfbP
    45:45:react.glang.GList getTypes() -> lnWu
    50:57:int total() -> HmbS
    62:67:int get(org.bukkit.entity.EntityType) -> FNKC
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> VDGg
    84:96:void add(org.bukkit.entity.Entity) -> vACT
react.api.Experimental -> JtLB:
react.api.Flavor -> UQgN:
    react.api.Flavor ANY -> ytyK
    react.api.Flavor SAFE_MODE -> HDKH
    react.api.Flavor CRAFT_BUKKIT -> UlSO
    react.api.Flavor BUKKIT -> GHwP
    react.api.Flavor SPIGOT -> UlRp
    react.api.Flavor SOGGY_SPIGOT -> VfhB
    react.api.Flavor PAPER_SPIGOT -> rxyJ
    react.api.Flavor TACO_SPIGOT -> lLtJ
    react.api.Flavor TORCH_SPIGOT -> QOGl
    react.api.Flavor FORGE_HACK -> JuHH
    react.api.Flavor SPONGE_HACK -> kJQk
    react.api.Flavor[] $VALUES -> stLj
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> qlej
    74:79:boolean compatableWith(react.api.Flavor) -> FNKC
    84:84:java.lang.String fancyName() -> mWhc
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> OPVV:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> UtIf
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> VDGg
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
    react.api.ActionState getState() -> Gani
    react.api.ActionTargetType getTarget() -> rDue
    void setNodes(java.lang.String[]) -> FNKC
    java.lang.String[] getNodes() -> hsOP
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> AGKY
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> AhmN
    react.glang.GMap getDefaultSelectors() -> eYEI
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> FNKC
    react.api.ISelector[] biselect(react.api.ISelector[]) -> FNKC
    react.action.source.IActionSource getCurrentSource() -> HBoM
    void completeAction() -> GrqA
react.api.ICache -> clQr:
    react.glang.GSet get(java.lang.Object) -> VDGg
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> vtHI
    void clear() -> clear
    boolean has(java.lang.Object) -> vACT
    react.glang.GList k() -> lmxH
react.api.ICommand -> nInI:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> CEBE
    java.lang.String[] getPermissions() -> HBnP
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> srmk
    react.api.SideGate getSideGate() -> uxrY
    void registerParameterDescription(java.lang.String,java.lang.String) -> FNKC
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.api.IRecord -> URGl:
    java.lang.String getRecordType() -> vjtI
    long getRecordTime() -> Yfai
    react.json.JSONObject toJSON() -> WWlt
    java.lang.Object getRecordObject() -> MtdB
    void fromJSON(react.json.JSONObject) -> FNKC
react.api.IRecordBook -> uOCY:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> FNKC
    long getOldestRecordTime() -> VUJt
    void addRecord(react.api.IRecord) -> FNKC
    long getLatestRecordTime() -> JtLB
    int countRecords(long,long) -> FNKC
    react.glang.GMap getRecords(long,long) -> VDGg
    int purgeRecordsBefore(long) -> VDGg
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> tCNq:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> UQgN
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> OPVV
    react.surge.util.C getAltColor() -> clQr
    void setColor(react.surge.util.C,react.surge.util.C) -> FNKC
    int getInterval() -> getInterval
    void setInterval(int) -> VDGg
    void sample() -> nInI
    java.lang.String get() -> get
    void construct() -> URGl
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> gNLB:
    react.api.SelectionMode getMode() -> uOCY
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> AGKY
    react.glang.GSet getList() -> tCNq
    react.glang.GSet getPossibilities() -> gNLB
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> srmk
    java.lang.String getName() -> getName
react.api.Injection -> CDar:
    react.api.InjectionMethod value() -> CDar
react.api.InjectionMethod -> dMRJ:
    react.api.InjectionMethod SWAP -> DQRo
    react.api.InjectionMethod SUBSTRATE -> BJjv
    react.api.InjectionMethod RELOAD -> mHFn
    react.api.InjectionMethod[] $VALUES -> YMnT
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> xGKT:
    java.lang.String value() -> value
react.api.MSampler -> rNIq:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> dMRJ
react.api.MonitorHeading -> UYwl:
    react.api.ISampler head -> nAxJ
    react.glang.GList children -> MAyw
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> FNKC
    27:27:react.api.ISampler getHead() -> xGKT
    32:33:void setHead(react.api.ISampler) -> VDGg
    37:37:react.glang.GList getChildren() -> rNIq
    42:42:java.lang.String getHeadText() -> UYwl
    47:60:java.lang.String getChildText() -> jgtW
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> FNKC
react.api.NoiseGenerator -> jgtW:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> SvVI:
    react.api.NoiseGenerator[] octaves -> bjJx
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> SvVI
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> rMiT:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> ECTn
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> rMiT
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> XRaF:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> FNKC
react.api.Permissable -> EBYT:
    react.api.Permissable ACCESS -> Ortm
    react.api.Permissable TELEPORT -> dMmX
    react.api.Permissable MONITOR -> bYJC
    react.api.Permissable MONITOR_TITLE -> TGOC
    react.api.Permissable MONITOR_ACTIONLOG -> xPUq
    react.api.Permissable MONITOR_MAP -> ObRe
    react.api.Permissable MONITOR_ENVIRONMENT -> iTjs
    react.api.Permissable MONITOR_GLASSES -> lwfo
    react.api.Permissable MONITOR_CHUNK_BLAME -> yJgu
    react.api.Permissable RAI_MONITOR -> GtMe
    react.api.Permissable RAI_CONTROL -> hHvn
    react.api.Permissable RAI_ACCESS -> vdCS
    react.api.Permissable RAI -> xGds
    react.api.Permissable ACT -> afea
    react.api.Permissable RELOAD -> cBWy
    java.lang.String node -> PCRs
    react.api.Permissable[] $VALUES -> WXha
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    28:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:42:boolean has(org.bukkit.command.CommandSender) -> FNKC
    47:47:java.lang.String getNode() -> XRaF
    7:23:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> DXgm:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> hYwn
    java.lang.Runnable r -> ymJw
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> FNKC
react.api.ReactCommand -> vtIU:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> fuuO
    java.lang.String usage -> HUMx
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> qeTO
    react.api.SideGate sideGate -> xHEa
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> srmk
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> FNKC
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> CEBE
    47:47:java.lang.String[] getPermissions() -> HBnP
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> uxrY
react.api.ReactException -> jEpf:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> ssOf:
    react.glang.GMap keystore -> gWUs
    boolean monitoring -> monitoring
    boolean highMonitor -> fCRF
    boolean actionlogging -> sbiE
    boolean glasses -> EuxG
    boolean mapping -> VfgN
    int monitorSelection -> scLs
    int plays -> kIrm
    boolean monitorPosted -> OYeH
    int monitorLastSelection -> kcee
    int switchNotification -> tfOx
    int hotbarSlot -> ivrC
    boolean shift -> lEEp
    int scroll -> VgKJ
    double lastHeight -> fKcm
    boolean heightMovement -> JBDO
    org.bukkit.entity.Player p -> RcGD
    42:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> EBYT
    128:128:boolean isMapping() -> DXgm
    133:133:org.bukkit.entity.Player getP() -> vtIU
    138:140:void setMonitoring(boolean) -> VDGg
    144:146:void setMapping(boolean) -> vtHI
    150:150:int getMonitorSelection() -> jEpf
    155:157:void setMonitorSelection(int) -> vtHI
    161:161:int getHotbarSlot() -> ssOf
    166:168:void setHotbarSlot(int) -> vACT
    172:172:boolean isShifting() -> nlQI
    177:179:void setShifting(boolean) -> vACT
    183:183:boolean isShift() -> FMjl
    188:190:void setShift(boolean) -> AGKY
    194:194:int getScroll() -> RbOi
    199:201:void setScroll(int) -> AGKY
    205:205:int getMonitorLastSelection() -> pPSk
    210:212:void setMonitorLastSelection(int) -> srmk
    216:217:void setP(org.bukkit.entity.Player) -> VDGg
    221:221:double getLastHeight() -> idpq
    226:228:void setLastHeight(double) -> FNKC
    232:232:boolean isHeightMovement() -> SCPW
    237:239:void setHeightMovement(boolean) -> srmk
    243:243:int getSwitchNotification() -> lwLG
    248:250:void setSwitchNotification(int) -> ykmo
    254:254:boolean getMonitorPosted() -> EmKx
    259:261:void setMonitorPosted(boolean) -> ykmo
    265:265:int getPlays() -> kshF
    270:272:void setPlays(int) -> OHDS
    276:276:boolean isGlasses() -> Susp
    281:283:void setGlasses(boolean) -> OHDS
    287:287:boolean isActionlogging() -> lUHi
    292:294:void setActionlogging(boolean) -> Usgo
    24:40:void <clinit>() -> <clinit>
react.api.Record -> nlQI:
    java.lang.String recordType -> afgn
    long recordTime -> oopf
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> vjtI
    32:32:long getRecordTime() -> Yfai
    38:38:java.lang.Object getRecordObject() -> MtdB
    react.json.JSONObject toJSON() -> WWlt
    void fromJSON(react.json.JSONObject) -> FNKC
react.api.RecordBook -> FMjl:
    java.io.File recordFile -> bHHq
    react.json.JSONObject js -> vAaK
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> FNKC
    79:87:react.api.IRecord getRecord(long) -> FNKC
    react.api.IRecord createDummyRecord(long,java.lang.String) -> FNKC
    95:107:long getOldestRecordTime() -> VUJt
    113:125:long getLatestRecordTime() -> JtLB
    130:130:boolean within(long,long,long) -> FNKC
    136:144:int countRecords(long,long) -> FNKC
    150:162:react.glang.GMap getRecords(long,long) -> VDGg
    168:181:int purgeRecordsBefore(long) -> VDGg
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> RbOi:
react.api.SampledChunk -> pPSk:
    org.bukkit.Chunk c -> AHLb
    react.glang.GMap counts -> AHGl
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> wTgY
    26:38:void hit(react.api.ChunkIssue,int) -> FNKC
    42:42:org.bukkit.Chunk getC() -> tdon
    47:47:react.glang.GMap getCounts() -> uhTL
react.api.SampledType -> idpq:
    react.api.SampledType ENTITY_TIME_LOCK -> ekDf
    react.api.SampledType TILE_TIME_LOCK -> IWqm
    react.api.SampledType ENTITY_TIME -> IPBc
    react.api.SampledType TILE_TIME -> Ukub
    react.api.SampledType ENTITY_DROPTICK -> AjNv
    react.api.SampledType TILE_DROPTICK -> lUey
    react.api.SampledType REDSTONE_TICK_USAGE -> TXRV
    react.api.SampledType REDSTONE_TICK -> UBDL
    react.api.SampledType REDSTONE_SECOND -> MmPf
    react.api.SampledType REDSTONE_TIME -> fdvS
    react.api.SampledType PHYSICS_TIME -> VfiU
    react.api.SampledType HOPPER_TICK_USAGE -> YpRn
    react.api.SampledType HOPPER_TICK -> miiu
    react.api.SampledType HOPPER_SECOND -> UdGK
    react.api.SampledType HOPPER_TIME -> Ojee
    react.api.SampledType FLUID_TICK_USAGE -> feWI
    react.api.SampledType FLUID_TICK -> iUNP
    react.api.SampledType FLUID_SECOND -> UJVg
    react.api.SampledType FLUID_TIME -> JSHe
    react.api.SampledType TPS -> SDQA
    react.api.SampledType TICK -> NFBm
    react.api.SampledType TIU -> uqfH
    react.api.SampledType MEM -> kAdh
    react.api.SampledType FREEMEM -> fCUy
    react.api.SampledType MAXMEM -> lLxT
    react.api.SampledType ALLOCMEM -> vSGB
    react.api.SampledType MAHS -> ObXY
    react.api.SampledType CHK_TIME -> wxLP
    react.api.SampledType EXPLOSION_TIME -> lgKW
    react.api.SampledType CHK -> KEKL
    react.api.SampledType ATASK -> Pmkm
    react.api.SampledType STASK -> WGlM
    react.api.SampledType CHKS -> bXlj
    react.api.SampledType ENT -> vtgv
    react.api.SampledType ENTLIV -> Rkae
    react.api.SampledType ENTDROP -> LXna
    react.api.SampledType ENTTILE -> IiXT
    java.lang.String node -> PCRs
    react.api.SampledType[] $VALUES -> qeXX
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    50:50:react.api.ISampler get() -> IFTS
    56:56:java.lang.String toString() -> toString
    60:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> XRaF
    6:44:void <clinit>() -> <clinit>
react.api.Sampler -> SCPW:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> PeYk
    react.surge.util.C altColor -> JSGd
    int interval -> fTVs
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> OPVV
    49:49:react.surge.util.C getAltColor() -> clQr
    55:55:int getInterval() -> getInterval
    void sample() -> nInI
    void construct() -> URGl
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> FNKC
    107:108:void setInterval(int) -> VDGg
react.api.Sector -> lwLG:
    int value() -> value
react.api.SelectionException -> EmKx:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> kshF:
    react.api.SelectionMode WHITELIST -> HoDa
    react.api.SelectionMode BLACKLIST -> ChFH
    react.api.SelectionMode[] $VALUES -> fuyb
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> Susp:
    java.lang.Class objectType -> dNQM
    react.api.SelectionMode mode -> OYeg
    react.glang.GSet list -> Snbr
    react.glang.GSet possibilities -> JtjO
    int popoff -> Nxec
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> uOCY
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> AGKY
    43:43:react.glang.GSet getList() -> tCNq
    49:49:react.glang.GSet getPossibilities() -> gNLB
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> srmk
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> ykmo
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> lUHi:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> vtHI
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> srmk
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> OHDS
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> wTgY:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> tdon:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> vtHI
    29:30:void add(org.bukkit.Chunk,int) -> FNKC
    34:38:void add(org.bukkit.World) -> OHDS
    42:46:void addAll() -> KKyV
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> srmk
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> OHDS
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> uhTL:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> srmk
    87:87:java.lang.String getName() -> getName
react.api.Side -> IFTS:
    react.api.Side PLAYERS -> lgJk
    react.api.Side CONSOLE -> AXoI
    java.lang.String ss -> wMVf
    react.api.Side[] $VALUES -> lEFs
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> sQKw
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> VDGg
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> KKyV:
    react.api.SideGate PLAYERS_ONLY -> XeBR
    react.api.SideGate CONSOLES_ONLY -> eICu
    react.api.SideGate ANYTHING -> HoEY
    react.api.SideGate[] $VALUES -> kReF
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> FNKC
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> KKyV$1:
    int[] $SwitchMap$react$api$SideGate -> VMYS
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> sQKw:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> xYJw
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> bFmU
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> bFmU:
    double wScale -> quxb
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> FNKC
react.api.SpecializedTickLimiter -> WGNh:
    double rMaxTime -> pbUK
    long rStartTime -> xHJE
    double rLastTime -> ivrQ
    long rMark -> KflO
    double tMaxTime -> urHa
    react.gmath.Average atimes -> nJod
    react.gmath.Average adropped -> YNTd
    int droppedTicks -> eYgU
    boolean entityTick -> DjkU
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> LrDE:
    react.glang.GList sources -> VxPg
    react.glang.GList splooge -> dyHn
    react.glang.GSet destroy -> XdEh
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> FNKC
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> VDGg
    void clipped(org.bukkit.Location) -> VDGg
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> vtHI
    boolean isAllowedSource(org.bukkit.Location) -> vACT
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> FNKC
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> VDGg
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> vtHI
react.api.SploogeCounter$1 -> LrDE$1:
    react.api.SploogeCounter this$0 -> TFtr
    java.util.Iterator val$it -> pryC
    org.bukkit.Location val$start -> dMsa
    int val$maxDistance -> BmTn
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> FNKC
react.api.SploogeCounter$1$1 -> LrDE$1$1:
    react.api.SploogeCounter$1 this$1 -> VDjn
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> Btem:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> EmOK:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> WWlt
    38:49:void fromJSON(react.json.JSONObject) -> FNKC
react.api.StackTraceRecordBook -> AhrC:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> VDGg
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> FNKC
react.api.StackedEntity -> maAH:
    org.bukkit.entity.LivingEntity entity -> nlrc
    int count -> count
    double rmx -> FXAK
    org.bukkit.entity.Entity damager -> oMrD
    22:34:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    39:44:double getMaxHealth(org.bukkit.entity.LivingEntity) -> FNKC
    49:49:int getAbsoluteMaxCount() -> WGNh
    54:54:int getMaxCount(org.bukkit.entity.LivingEntity) -> VDGg
    59:61:void update() -> update
    65:71:void signalSize() -> LrDE
    75:76:void setDamager(org.bukkit.entity.Entity) -> ykmo
    80:140:void updateHealth() -> Btem
    144:145:void heal(double) -> VDGg
    149:150:void setHealth(double) -> setHealth
    154:154:int getEffectiveCount() -> EmOK
    159:159:int getEffectiveCount(double) -> vtHI
    164:164:double getEffectiveMaxHealth(int) -> Usgo
    169:169:double getRealMaxHealth() -> AhrC
    174:174:double getHealth() -> getHealth
    179:185:void setMaxHealth(double) -> setMaxHealth
    190:199:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> FNKC
    203:203:double getMaxHealth() -> getMaxHealth
    208:208:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    213:213:int getCount() -> getCount
react.api.TitleMonitor -> nccM:
    react.glang.GList headings -> jrGs
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> FNKC
    24:24:int getMaxSelection() -> maAH
    29:37:int left(int) -> lwKC
    42:50:int right(int) -> FpNV
    55:55:react.api.MonitorHeading getHeadFor(int) -> UtIf
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> FNKC
    83:100:java.lang.String getHotbarFor(int,boolean) -> FNKC
react.api.Unused -> wfLw:
react.api.WorldConfig -> MtfI:
    boolean allowRai -> BlvB
    boolean allowActions -> RQny
    boolean allowRelighting -> ESyw
    boolean allowTileThrottling -> HwWU
    boolean allowEntityThrottling -> QOLw
    boolean allowFastLeafDecay -> FONV
    java.util.List assumeNoSideEffectsEntities -> dNSg
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> Usgo
    48:62:void save(org.bukkit.World) -> lwKC
    66:80:void load(org.bukkit.World) -> FpNV
react.cache.CachedEntity -> KwPu:
    java.util.UUID uid -> KVMT
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> oxeb
    double x -> x
    double y -> y
    double z -> z
    double vx -> hcPW
    double vy -> jaEr
    double vz -> DPwc
    double dx -> Hvvc
    double dy -> uaEa
    double dz -> CEdb
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> OHDS
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> nccM
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> wfLw
    120:121:void setVx(double) -> vACT
    125:125:double getVy() -> MtfI
    130:131:void setVy(double) -> AGKY
    135:135:double getVz() -> KwPu
    140:141:void setVz(double) -> srmk
    145:145:double getDx() -> TWWi
    150:151:void setDx(double) -> ykmo
    155:155:double getDy() -> SuwI
    160:161:void setDy(double) -> OHDS
    165:165:double getDz() -> BBBL
    170:171:void setDz(double) -> Usgo
    175:175:java.util.UUID getUid() -> nuEC
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> TWWi:
    int age -> TOgs
    boolean ageLock -> Rbsj
    boolean breed -> jhyQ
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> OHDS
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> doWd
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> avoN
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> SuwI:
    org.bukkit.DyeColor dye -> ifWS
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> OHDS
    30:30:org.bukkit.DyeColor getDye() -> TVvr
    35:36:void setDye(org.bukkit.DyeColor) -> FNKC
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> BBBL:
    react.glang.GList potionEffects -> XSch
    boolean canPickupItems -> IWxr
    org.bukkit.inventory.ItemStack[] armorContents -> ylsr
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> jWwg
    double maxHealth -> maxHealth
    int maxAir -> wDkX
    int air -> qnOM
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> OHDS
    63:63:react.glang.GList getPotionEffects() -> uVuA
    68:69:void setPotionEffects(react.glang.GList) -> VDGg
    73:73:boolean isCanPickupItems() -> OGhN
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> FpRe
    138:139:void setMaxAir(int) -> Gani
    143:143:int getAir() -> ctde
    148:149:void setAir(int) -> rDue
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> nuEC:
    boolean sheared -> CVhF
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> OHDS
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> doWd:
    org.bukkit.inventory.ItemStack is -> BJsY
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> OHDS
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> avoN:
    7:7:void <init>() -> <init>
react.command.CommandAct -> TVvr:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> FNKC
    186:192:react.text.RTX getBeginningRTX() -> Ywha
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> FNKC
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> VDGg
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> vtHI
    331:346:react.glang.GList getSortedCommands() -> Rrsm
    351:358:int getPageSize(int) -> AhmN
    363:363:boolean isValidPage(int,int) -> FNKC
    368:377:react.glang.GList getPage(int,int) -> VDGg
react.command.CommandActionLog -> uVuA:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandBoom -> OGhN:
    17:24:void <init>() -> <init>
    29:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandCPUScore -> FpRe:
    17:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandCapabilities -> ctde:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandChunkBlame -> Ywha:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandChunkBlame$1 -> Ywha$1:
    org.bukkit.command.CommandSender val$sender -> SniB
    react.command.CommandChunkBlame this$0 -> mYPe
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> Ywha$1$1:
    java.lang.String val$i -> kSJg
    react.glang.GMap val$top -> IaLJ
    int val$totalx -> Jcmp
    react.command.CommandChunkBlame$1 this$1 -> tvvJ
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandChunkTP -> Rrsm:
    19:26:void <init>() -> <init>
    33:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandEnvironment -> MAbG:
    25:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandGlasses -> fAwm:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandHelp -> iuuW:
    29:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> FNKC
    81:87:react.text.RTX getBeginningRTX() -> Ywha
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> FNKC
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> VDGg
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> vtHI
    208:215:react.glang.GList getSortedCommands() -> Rrsm
    220:227:int getPageSize(int) -> AhmN
    232:232:boolean isValidPage(int,int) -> FNKC
    237:246:react.glang.GList getPage(int,int) -> VDGg
react.command.CommandHighMonitor -> kIWL:
    17:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandMap -> Jjyy:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandMonitor -> clRv:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandReload -> BuHN:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandReload$1 -> BuHN$1:
    org.bukkit.command.CommandSender val$sender -> SniB
    react.command.CommandReload this$0 -> uqha
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> BuHN$1$1:
    react.command.CommandReload$1 this$1 -> awog
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> oDae:
    29:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
    54:63:org.bukkit.inventory.ItemStack makeBook() -> MAbG
    68:94:void addSpikePages(react.glang.GList) -> vtHI
    98:108:void addStatusPages(react.glang.GList) -> vACT
    112:129:int findSlot(org.bukkit.entity.Player) -> vtHI
react.command.CommandTopChunk -> MuFM:
    28:36:void <init>() -> <init>
    41:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.command.CommandVersion -> iSrD:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> FNKC
react.controller.ActionController -> LWoQ:
    int kiv -> SoHO
    react.glang.GMap actions -> cvEx
    react.glang.GMap pending -> FXAW
    react.glang.GList tasks -> APcF
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> FNKC
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> VDGg
    141:141:react.api.IAction getAction(react.api.ActionType) -> FNKC
    146:147:void registerAction(react.api.IAction) -> FNKC
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> fAwm
    241:248:react.glang.GList getActionNames() -> iuuW
react.controller.ChronophyFluidController -> tusk:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> pXeb:
    boolean firstTickList -> IGXF
    long firstTick -> FNnu
    long lastTick -> pbYM
    react.gmath.Average aCSMS -> lgMr
    react.glang.GMap pluginLoads -> ndbl
    react.glang.GMap playerLoads -> Kfok
    int serverLoads -> NyJp
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> kIWL
    63:73:void tickNextTickList() -> Jjyy
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNKC
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> FNKC
    171:171:boolean isFirstTickList() -> clRv
    176:176:long getFirstTick() -> BuHN
    181:181:long getLastTick() -> oDae
    186:186:react.gmath.Average getaCSMS() -> MuFM
    191:191:react.glang.GMap getPluginLoads() -> iSrD
    196:196:react.glang.GMap getPlayerLoads() -> LWoQ
    201:201:int getServerLoads() -> tusk
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> FNKC
    21:21:int access$108(react.controller.ChunkController) -> VDGg
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> vtHI
react.controller.ChunkController$1 -> pXeb$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> Iqka
    react.controller.ChunkController this$0 -> cJpy
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> vtHI
    131:131:void run(java.lang.Object) -> FNKC
react.controller.CommandController -> OXgo:
    react.glang.GList commands -> LHPp
    boolean k -> GtXm
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> Usgo
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> lwKC
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> FNKC
    317:317:react.glang.GList getCommands() -> pXeb
    322:323:void setCommands(react.glang.GList) -> AGKY
    327:327:boolean isK() -> OXgo
    332:333:void setK(boolean) -> lwKC
react.controller.EntityCullController -> turs:
    react.glang.GSet flags -> BSgT
    react.glang.GSet defer -> OHjx
    react.glang.GSet prefer -> Lrfo
    react.glang.GMap maxs -> htVk
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> turs
    204:217:int cull(org.bukkit.Chunk) -> vACT
    222:346:int partialCull(org.bukkit.Chunk) -> AGKY
react.controller.EntityStackController -> ksjI:
    react.glang.GList stacks -> brfU
    21:23:void <init>() -> <init>
    28:29:void start() -> start
    34:35:void stop() -> stop
    40:55:void tick() -> tick
    60:113:void stack(react.glang.GList) -> srmk
    117:122:boolean isStacked(org.bukkit.entity.LivingEntity) -> vtHI
    127:140:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> vACT
    146:164:void on(org.bukkit.event.entity.EntityDamageEvent) -> FNKC
    169:188:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> FNKC
    192:207:void merge(react.api.StackedEntity,react.api.StackedEntity) -> FNKC
    211:277:void checkNear(org.bukkit.entity.LivingEntity) -> AGKY
    282:322:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FNKC
react.controller.EntityStackController$1 -> ksjI$1:
    react.controller.EntityStackController this$0 -> EwDb
    org.bukkit.event.entity.EntitySpawnEvent val$e -> nvIE
    1:289:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    294:319:void run() -> run
react.controller.EventController -> RaqR:
    react.lagmap.LagMap map -> YWJj
    react.glang.GMap slots -> Cxmq
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> FNKC
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNKC
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FNKC
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> FNKC
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> FNKC
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> FNKC
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNKC
react.controller.ExplosiveController -> YUcx:
    boolean firstTickList -> IGXF
    long firstTick -> FNnu
    long lastTick -> pbYM
    react.gmath.Average aCSMS -> lgMr
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> kIWL
    51:61:void tickNextTickList() -> Jjyy
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> VDGg
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> FNKC
    98:98:boolean isFirstTickList() -> clRv
    103:103:long getFirstTick() -> BuHN
    108:108:long getLastTick() -> oDae
    113:113:react.gmath.Average getaCSMS() -> MuFM
react.controller.FastDecayController -> IEuS:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> kcnA
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> FNKC
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> FNKC
    74:155:void checkBreak(org.bukkit.block.Block) -> vtHI
    159:190:void decay(org.bukkit.block.Block) -> vACT
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> AGKY
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> ksjI
react.controller.FastDecayController$1 -> IEuS$1:
    react.controller.FastDecayController this$0 -> nSeJ
    react.glang.GMap val$locs -> OkOo
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> vtHI
    99:99:boolean isAllowedSource(org.bukkit.Location) -> vACT
    105:124:void clipped(org.bukkit.Location) -> VDGg
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> FNKC
react.controller.FastDecayController$1$1 -> IEuS$1$1:
    react.controller.FastDecayController$1 this$1 -> YNXv
    react.glang.GMap val$locs -> OkOo
    int val$i -> AjVR
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> IEuS$2:
    react.controller.FastDecayController this$0 -> nSeJ
    org.bukkit.block.Block val$b -> dViL
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> IEuS$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> aobe
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> Btey:
    react.feature.INMSBinding trueBinding -> nvHo
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> RaqR
    85:85:java.lang.String getPackageVersion() -> YUcx
    90:90:boolean hasBinding() -> IEuS
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> FNKC
react.controller.FluidController -> ykqA:
    react.glang.GSet ignore -> BSfV
    int flowsPerTick -> LGsU
    int flowsPerSecond -> fmpW
    react.gmath.Average aFST -> URmi
    react.gmath.Average aFSS -> SoIs
    react.gmath.Average aFSMS -> RJDN
    boolean firstTickList -> IGXF
    long firstTick -> FNnu
    long lastTick -> pbYM
    react.glang.GSet frozen -> SvyY
    react.glang.GMap queue -> VpCV
    react.glang.GMap freezeTimes -> hbso
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> srmk
    68:76:void checkChunks() -> Btey
    80:97:void checkChunk(org.bukkit.Chunk) -> ykmo
    101:107:void queue(org.bukkit.block.Block) -> srmk
    111:111:boolean isFrozen(org.bukkit.Chunk) -> OHDS
    116:117:void freeze(org.bukkit.Chunk) -> Usgo
    121:127:void unfreeze(org.bukkit.Chunk) -> lwKC
    131:138:void freeze(org.bukkit.Chunk,long) -> FNKC
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> kIWL
    172:182:void tickNextTickList() -> Jjyy
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNKC
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> FNKC
    248:248:react.glang.GSet getIgnore() -> ykqA
    253:253:int getTransfersPerTick() -> eXgH
    258:258:int getTransfersPerSecond() -> aelY
    263:263:react.gmath.Average getaFST() -> FyCM
    268:268:react.gmath.Average getaFSS() -> QxaS
    273:273:react.gmath.Average getaFSMS() -> oVDI
    278:278:boolean isFirstTickList() -> clRv
    283:283:long getFirstTick() -> BuHN
    288:288:long getLastTick() -> oDae
    293:293:react.glang.GSet getFrozen() -> HKfD
    298:298:react.glang.GMap getQueue() -> EJmL
    303:303:react.glang.GMap getFreezeTimes() -> oMVM
react.controller.GlassController -> eXgH:
    react.glang.GMap q -> twXt
    react.glang.GList g -> XJtD
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> vACT
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> AGKY
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> srmk
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNKC
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> FNKC
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> FNKC
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> FNKC
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> FNKC
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> FNKC
    36:36:react.glang.GList access$0(react.controller.GlassController) -> FNKC
react.controller.GlassController$1 -> eXgH$1:
    react.controller.GlassController this$0 -> hRTG
    react.glang.GMap val$cc -> WHRG
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> eXgH$1$1:
    react.controller.GlassController$1 this$1 -> BvKh
    org.bukkit.Location val$i -> paym
    org.bukkit.entity.Player val$j -> Ngjh
    1:108:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> aelY:
    react.glang.GMap g -> jrKh
    react.glang.GMap gr -> VxTO
    react.glang.GMap gra -> oghQ
    41:41:void <init>() -> <init>
    50:83:void start() -> start
    88:94:void stop() -> stop
    99:126:void tick() -> tick
    131:148:void on(org.bukkit.event.player.PlayerJoinEvent) -> FNKC
    152:174:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> FNKC
    178:181:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> FNKC
    185:189:void addTick(org.bukkit.entity.Player,react.glang.GList) -> VDGg
    193:197:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> vtHI
    201:202:void addEod(org.bukkit.entity.Player,react.glang.GList) -> vACT
    206:215:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> AGKY
    219:222:void addReact(org.bukkit.entity.Player,react.glang.GList) -> srmk
    226:272:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> FNKC
    277:317:void on(org.bukkit.event.player.PlayerMoveEvent) -> FNKC
    323:323:void on(react.event.ReactScrollEvent) -> FNKC
    327:358:void toggleMapping(org.bukkit.entity.Player) -> ykmo
    362:394:void toggleMappingEod(org.bukkit.entity.Player) -> OHDS
    398:398:react.glang.GMap getG() -> dLtr
    403:403:react.glang.GMap getGr() -> ogHo
    41:41:react.glang.GMap access$000(react.controller.GraphController) -> FNKC
    41:41:react.glang.GMap access$100(react.controller.GraphController) -> VDGg
react.controller.GraphController$1 -> aelY$1:
    react.controller.GraphController this$0 -> AGsU
    64:64:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    68:81:void run() -> run
react.controller.GraphController$2 -> aelY$2:
    react.controller.GraphController this$0 -> AGsU
    100:100:void <init>(react.controller.GraphController) -> <init>
    104:108:void run() -> run
react.controller.GraphController$3 -> aelY$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> Ngjc
    react.controller.GraphController this$0 -> AGsU
    132:132:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    136:146:void run() -> run
react.controller.HopperController -> FyCM:
    react.glang.GSet ignore -> BSfV
    int transfersPerTick -> Ngjm
    int transfersPerSecond -> cTFL
    react.gmath.Average aHST -> rycE
    react.gmath.Average aHSS -> LYUF
    react.gmath.Average aHSMS -> Aium
    boolean firstTickList -> IGXF
    long firstTick -> FNnu
    long lastTick -> pbYM
    react.glang.GSet frozen -> SvyY
    react.glang.GMap queue -> VpCV
    react.glang.GMap freezeTimes -> hbso
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> srmk
    65:73:void checkChunks() -> Btey
    77:94:void checkChunk(org.bukkit.Chunk) -> ykmo
    98:104:void queue(org.bukkit.block.Block) -> srmk
    108:108:boolean isFrozen(org.bukkit.Chunk) -> OHDS
    113:114:void freeze(org.bukkit.Chunk) -> Usgo
    118:124:void unfreeze(org.bukkit.Chunk) -> lwKC
    128:135:void freeze(org.bukkit.Chunk,long) -> FNKC
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> kIWL
    169:179:void tickNextTickList() -> Jjyy
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> FNKC
    207:207:react.glang.GSet getIgnore() -> ykqA
    212:212:int getTransfersPerTick() -> eXgH
    217:217:int getTransfersPerSecond() -> aelY
    222:222:react.gmath.Average getaHST() -> HdxE
    227:227:react.gmath.Average getaHSS() -> vtMi
    232:232:react.gmath.Average getaHSMS() -> eHIe
    237:237:boolean isFirstTickList() -> clRv
    242:242:long getFirstTick() -> BuHN
    247:247:long getLastTick() -> oDae
    252:252:react.glang.GSet getFrozen() -> HKfD
    257:257:react.glang.GMap getQueue() -> EJmL
    262:262:react.glang.GMap getFreezeTimes() -> oMVM
react.controller.HopperOvertickController -> QxaS:
    react.glang.GList possiblePlunge -> pILj
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> FNKC
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> FNKC
react.controller.LanguageController -> oVDI:
    java.io.File languageFolder -> xrgH
    int oldVersion -> NxoG
    java.io.File dlf -> Bukp
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> gMmg
    160:221:void downloadAll(boolean) -> FpNV
    225:261:void downloadLanguage(java.lang.String) -> ykmo
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> OHDS
    315:315:java.io.File getFileForLanguage(java.lang.String) -> Usgo
    320:332:void writeDefaults() -> JcOG
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> FNKC
    263:263:void access$1(react.controller.LanguageController) -> FNKC
react.controller.LanguageController$1 -> oVDI$1:
    react.controller.LanguageController this$0 -> WrhN
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> oVDI$2:
    react.controller.LanguageController this$0 -> WrhN
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> FNKC
react.controller.LanguageController$2$1 -> oVDI$2$1:
    react.controller.LanguageController$2 this$1 -> QNtF
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> FNKC
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> FNKC
    121:121:void onDownloadStarted(react.gnet.download.Download) -> FNKC
    126:128:void onDownloadFinished(react.gnet.download.Download) -> VDGg
    134:134:void onDownloadFailed(react.gnet.download.Download) -> vtHI
react.controller.LanguageController$3 -> oVDI$3:
    react.controller.LanguageController this$0 -> WrhN
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> oVDI$3$1:
    react.controller.LanguageController$3 this$1 -> yCEl
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> oVDI$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> RRWf
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> oVDI$4:
    react.controller.LanguageController this$0 -> WrhN
    java.io.File val$dld -> aodW
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> FNKC
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> FNKC
    245:245:void onDownloadStarted(react.gnet.download.Download) -> FNKC
    250:251:void onDownloadFinished(react.gnet.download.Download) -> VDGg
    257:257:void onDownloadFailed(react.gnet.download.Download) -> vtHI
react.controller.MonitorController -> HKfD:
    int maxCooldown -> USOy
    react.api.TitleMonitor titleMonitor -> gheD
    react.glang.GMap posts -> LahH
    react.slate.PhantomSlate sb -> YFKV
    boolean ready -> eINH
    44:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> oUed
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> Usgo
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> lwKC
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> HBtq
    179:184:float calcVolume(react.api.ReactPlayer) -> FNKC
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> FpNV
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> UtIf
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> Gani
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> rDue
    219:223:void startMonitoring(org.bukkit.entity.Player) -> AhmN
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> eYEI
    242:247:void startActionLogging(org.bukkit.entity.Player) -> GrqA
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> HBoM
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> VDGg
    279:291:void processPlayer(react.api.ReactPlayer) -> vtHI
    296:296:void handleActionLog(org.bukkit.entity.Player) -> hsOP
    300:324:void handleTriggers(react.api.ReactPlayer) -> vACT
    328:367:void handleScrolling(react.api.ReactPlayer) -> AGKY
    371:399:void handleShifting(react.api.ReactPlayer) -> srmk
    403:425:void handlePosting(react.api.ReactPlayer) -> ykmo
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> FNKC
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> FNKC
    471:501:void tickMonitor(react.api.ReactPlayer) -> OHDS
    505:505:react.api.TitleMonitor getTitleMonitor() -> bhre
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> FNKC
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> FNKC
    539:552:void onTick() -> avpp
    556:578:void updateActionBoard() -> KDON
    583:583:java.lang.String getTickName() -> YwkC
    35:35:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> FNKC
    35:35:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> FNKC
    35:35:boolean access$202(react.controller.MonitorController,boolean) -> FNKC
    35:35:boolean access$200(react.controller.MonitorController) -> VDGg
    35:35:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> vtHI
    37:37:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> HKfD$1:
    react.controller.MonitorController this$0 -> ySfU
    69:69:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> HKfD$2:
    react.controller.MonitorController this$0 -> ySfU
    557:557:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> EJmL:
    react.glang.GMap samples -> lEOw
    int redstonePerTick -> xYSt
    int redstonePerSecond -> giEh
    boolean firstTickList -> IGXF
    long firstTick -> FNnu
    long lastTick -> pbYM
    react.gmath.Average aRSMS -> FqYE
    react.gmath.Average aRST -> mXsr
    react.gmath.Average aRSS -> Snlo
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNKC
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> FNKC
    72:79:void flushTickList() -> kIWL
    83:93:void tickNextTickList() -> Jjyy
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> FpNV
    121:122:void onPhysics(org.bukkit.Chunk) -> UtIf
    126:127:void onHopper(org.bukkit.Chunk) -> Gani
    131:132:void onFluid(org.bukkit.Chunk) -> rDue
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FNKC
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> FNKC
    156:176:void onTick() -> avpp
    181:181:java.lang.String getTickName() -> YwkC
    186:186:react.glang.GMap getSamples() -> eGfs
    191:191:int getRedstonePerTick() -> jgwj
    196:196:int getRedstonePerSecond() -> XdEh
    201:201:boolean isFirstTickList() -> clRv
    206:206:long getFirstTick() -> BuHN
    211:211:long getLastTick() -> oDae
    216:216:react.gmath.Average getaRSMS() -> IpkH
    221:221:react.gmath.Average getaRST() -> ThYe
    226:226:react.gmath.Average getaRSS() -> OPXy
react.controller.PhysicsController$1 -> EJmL$1:
    react.controller.PhysicsController this$0 -> BKWt
    169:169:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> oMVM:
    react.glang.GList players -> FqYI
    react.glang.GSet save -> OcAe
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> QNJe
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> FNKC
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> WNxk
    113:113:react.glang.GList getPlayers() -> SvXd
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNKC
react.controller.PlayerController$1 -> oMVM$1:
    react.glang.GList val$toSave -> XSft
    react.controller.PlayerController this$0 -> Laet
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> dLtr:
    react.rai.IRAI rai -> QXDc
    boolean raiEnabled -> IrPH
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> FNKC
react.controller.RAIController$1 -> dLtr$1:
    react.controller.RAIController this$0 -> Wiur
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> ogHo:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> vtHI
react.controller.ReactServerInfo -> HdxE:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> oEEI
    27:27:int dgetGameProtocol() -> INgj
    33:33:java.lang.String dgetGameVersion() -> nSBv
    39:39:java.lang.String dgetReactVersion() -> eXgx
    45:45:int dgetMaxPlayers() -> hYbM
    51:58:react.glang.GList dgetConnectedPlayers() -> eXgw
    64:64:int dgetViewDistance() -> hrtI
    70:70:int dgetGamePort() -> CDgV
    76:76:java.lang.String dgetGameAddress() -> MBCY
    82:89:react.glang.GList dgetRemotePlugins() -> fJjd
    95:102:react.glang.GList dgetWorlds() -> fJjc
    108:108:react.glang.GList dgetActions() -> lTkj
    114:114:react.glang.GList dgetSamplers() -> ntdb
react.controller.RedstoneController -> vtMi:
    react.glang.GSet ignore -> BSfV
    react.glang.GSet frozen -> SvyY
    react.glang.GMap queue -> VpCV
    react.glang.GMap freezeTimes -> hbso
    int redstonePerTick -> xYSt
    int redstonePerSecond -> giEh
    react.gmath.Average aRST -> mXsr
    react.gmath.Average aRSS -> Snlo
    react.gmath.Average aRSMS -> FqYE
    boolean firstTickList -> IGXF
    long firstTick -> FNnu
    long lastTick -> pbYM
    react.glang.GMap trackers -> toKL
    27:27:void <init>() -> <init>
    46:82:void start() -> start
    87:88:void on(org.bukkit.event.world.WorldLoadEvent) -> FNKC
    93:95:void on(org.bukkit.event.world.WorldUnloadEvent) -> FNKC
    100:106:void stop() -> stop
    110:115:void releaseChunk(org.bukkit.Chunk) -> srmk
    120:126:void tick() -> tick
    130:138:void checkChunks() -> Btey
    142:159:void checkChunk(org.bukkit.Chunk) -> ykmo
    163:169:void queue(org.bukkit.block.Block) -> srmk
    173:173:boolean isFrozen(org.bukkit.Chunk) -> OHDS
    178:179:void freeze(org.bukkit.Chunk) -> Usgo
    183:190:void flushTickList() -> kIWL
    194:204:void tickNextTickList() -> Jjyy
    208:214:void unfreeze(org.bukkit.Chunk) -> lwKC
    218:225:void freeze(org.bukkit.Chunk,long) -> FNKC
    230:231:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FNKC
    236:249:void on(org.bukkit.event.block.BlockPhysicsEvent) -> FNKC
    254:267:void on(org.bukkit.event.block.BlockFromToEvent) -> FNKC
    271:271:react.glang.GSet getIgnore() -> ykqA
    276:276:react.glang.GSet getFrozen() -> HKfD
    281:281:react.glang.GMap getQueue() -> EJmL
    286:286:react.glang.GMap getFreezeTimes() -> oMVM
    291:291:int getRedstonePerTick() -> jgwj
    296:296:int getRedstonePerSecond() -> XdEh
    301:301:react.gmath.Average getaRST() -> ThYe
    306:306:react.gmath.Average getaRSS() -> OPXy
    311:311:react.gmath.Average getaRSMS() -> IpkH
    316:316:boolean isFirstTickList() -> clRv
    321:321:long getFirstTick() -> BuHN
    326:326:long getLastTick() -> oDae
react.controller.RemoteController -> eHIe:
    react.remote.server.RemoteServer remoteServer -> mXsg
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> tvWD
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> FNKC
react.controller.RemoteController$1 -> eHIe$1:
    react.controller.RemoteController this$0 -> aocW
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> eHIe$2:
    react.controller.RemoteController this$0 -> aocW
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> Xkts
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> QNPP
react.controller.SampleController -> gMmg:
    react.glang.GMap samplers -> gptK
    react.surge.server.SuperSampler ss -> xacb
    int cd -> RJGD
    28:33:void <init>() -> <init>
    37:63:boolean checkThreads() -> hIAL
    68:73:void restartSuperSampler() -> XlUw
    77:78:void registerSampler(react.api.ISampler) -> vtHI
    82:82:react.api.ISampler getSampler(java.lang.String) -> lwKC
    87:130:void constructSamplers() -> BSFU
    135:138:void start() -> start
    143:146:void stop() -> stop
    152:152:void tick() -> tick
    156:156:react.surge.server.SuperSampler getSuperSampler() -> hYdf
    162:184:void onTick() -> avpp
    189:189:java.lang.String getTickName() -> YwkC
    194:194:react.glang.GMap getSamplers() -> owjr
    199:199:react.surge.server.SuperSampler getSs() -> SKgO
    204:204:int getCd() -> XlYE
    209:216:react.glang.GList getSamplerNames() -> CwnE
react.controller.SecurityController -> JcOG:
    java.lang.String ipa -> XJva
    react.glang.GList failures -> vtnr
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> FpNV
    41:74:void checkForIP() -> jEwv
    78:91:void scan(java.lang.Runnable) -> FNKC
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> JcOG$1:
    react.controller.SecurityController this$0 -> afsF
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> JcOG$2:
    java.lang.String val$ip -> eILa
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> JcOG$3:
    java.lang.Thread val$t -> vtoR
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> oUed:
    react.glang.GMap etl -> MBgE
    react.glang.GMap ttl -> SUYv
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> FNKC
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> FNKC
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> UtIf
    143:160:void releaseWorld(org.bukkit.World) -> Gani
    164:181:double getUniversalEntityTick() -> pilk
    186:203:double getUniversalEntityLimit() -> teYA
    208:225:double getUniversalTileLimit() -> dLvo
    230:247:double getUniversalTileTick() -> GIFT
    252:264:double getUniversalEntityDroppedTicks() -> iuxo
    269:281:double getUniversalTileDroppedTicks() -> eHLF
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> FNKC
    301:312:void setTileTickLimit(org.bukkit.World,double) -> VDGg
    316:321:double getEntityTickLimit(org.bukkit.World) -> rDue
    326:331:double getTileTickLimit(org.bukkit.World) -> AhmN
    336:341:double getLastEntityTick(org.bukkit.World) -> eYEI
    346:351:double getLastTileTick(org.bukkit.World) -> GrqA
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> HBoM
    366:371:double getTileDroppedTicks(org.bukkit.World) -> hsOP
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> FNKC
react.controller.SpikeController -> HBtq:
    react.glang.GMap spikes -> uGYV
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> avpp
    111:111:java.lang.String getTickName() -> YwkC
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> vbla
    128:165:void whoFuckingDidThis(react.glang.Callback) -> FNKC
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> FNKC
react.controller.SpikeController$1 -> HBtq$1:
    react.controller.SpikeController this$0 -> QqWS
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> HBtq$1$1:
    react.controller.SpikeController$1 this$1 -> LiwY
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> HBtq$2:
    react.glang.GMap val$vv -> JBNo
    react.controller.SpikeController this$0 -> QqWS
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> HBtq$3:
    java.lang.Thread val$t -> vtoR
    react.glang.Callback val$callback -> kcoE
    react.controller.SpikeController this$0 -> QqWS
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:163:void run() -> run
react.controller.TickTimeController -> bhre:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> avpp:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> FNKC
react.event.ReactEvent -> KDON:
    org.bukkit.event.HandlerList handlers -> cdhW
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> YwkC:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> eGfs:
    react.event.ScrollDirection direction -> dxpK
    boolean cancellled -> JSRl
    int amount -> Bumx
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> vQkQ
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> KndU
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> jgwj:
    react.event.ScrollDirection DOWN -> NWOK
    react.event.ScrollDirection UP -> DQaY
    react.event.ScrollDirection[] $VALUES -> sQvh
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> XdEh:
    java.lang.String getPackageVersion() -> YUcx
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> FNKC
react.feature.NMSBinding -> IpkH:
    java.lang.String packageVersion -> ORBL
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> YUcx
react.feature.NMSBinding10 -> ThYe:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> FNKC
react.feature.NMSBinding11 -> OPXy:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> FNKC
react.feature.NMSBinding12 -> SvXd:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> FNKC
react.feature.NMSBinding8 -> oEEI:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> FNKC
react.feature.NMSBinding9 -> INgj:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> FNKC
react.gbench.Profiler -> nSBv:
    long nanos -> Liyh
    long startNano -> Gkkq
    long millis -> XBhv
    long startMillis -> JmFU
    double time -> bPgX
    boolean profiling -> PnWN
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> eYEI
    78:78:double getTicks() -> UQmp
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> mFpb
    93:93:double getHours() -> ESaM
    98:98:double getMilliseconds() -> mhrg
    103:103:long getNanoseconds() -> maDF
    108:108:long getNanos() -> vHxy
    113:113:long getStartNano() -> maDI
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> SdxS
    128:128:double getTime() -> inJC
    133:133:boolean isProfiling() -> GavL
react.gconcurrent.A -> eXgx:
    react.gconcurrent.ParallelPoolManager mgr -> woeO
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> eXgx$1:
    react.gconcurrent.A this$0 -> IOpD
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> hYbM:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> eXgw:
    react.gconcurrent.QueueMode mode -> rqXA
    react.glang.GList threads -> qmsL
    int next -> Ygmj
    int threadCount -> KfvA
    java.util.Queue squeue -> rWdO
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> Xdjj
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> OYot
    22:23:void syncQueue(react.gconcurrent.Execution) -> FNKC
    long getNanoGate() -> nSEB
    29:42:void tickSyncQueue() -> DYNK
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> VwSl
    93:100:int getTotalQueueSize() -> WaEW
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> VDGg
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> tStX
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> hjeI
    152:179:void updateThreadInformation() -> VCnS
    183:215:react.gconcurrent.ParallelThread nextThread() -> CxMs
    220:226:void createThreads(int) -> GrqA
    230:230:react.gconcurrent.QueueMode getMode() -> hkEn
    235:235:int getNext() -> oLvH
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> vAIi
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> CgOL
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> EvEy
react.gconcurrent.ParallelThread -> hrtI:
    java.util.Queue queue -> gGDE
    react.gconcurrent.ThreadInformation info -> Xdjj
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> lwKC
    68:75:void execute(react.gconcurrent.Execution) -> vtHI
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> VDGg
    97:97:java.util.Queue getQueue() -> Mtkr
    102:102:react.gconcurrent.ThreadInformation getInfo() -> ktRa
react.gconcurrent.QueueMode -> CDgV:
    react.gconcurrent.QueueMode ROUND_ROBIN -> uqoK
    react.gconcurrent.QueueMode SMALLEST -> kBMv
    react.gconcurrent.QueueMode[] ENUM$VALUES -> jOkf
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> MBCY:
    react.gconcurrent.ParallelPoolManager mgr -> woeO
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> MBCY$1:
    react.gconcurrent.S this$0 -> mbGR
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> fJjd:
    long tick -> OkRh
    long atick -> lpFG
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> fJjc:
    double ticksPerSecond -> pHmA
    int queuedSize -> UAoa
    boolean processing -> lNBh
    double utilization -> OtCw
    react.gmath.Average ticksPerSecondAverage -> mHTh
    long tick -> OkRh
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> tKhJ
    33:35:void setTicksPerSecond(double) -> FpNV
    39:39:int getQueuedSize() -> HBxj
    44:45:void setQueuedSize(int) -> HBoM
    49:49:boolean isProcessing() -> cdIk
    54:55:void setProcessing(boolean) -> UtIf
    59:59:double getUtilization() -> tKgh
    64:65:void setUtilization(double) -> UtIf
    69:69:double getTicksPerSecondAverage() -> XAgV
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> UJAB
    89:89:int getId() -> getId
react.gformat.F -> lTkj:
    java.text.NumberFormat NF -> kSPW
    java.text.DecimalFormat DF -> FFfE
    java.lang.String[] NAMES -> kldu
    java.math.BigInteger THOUSAND -> dWPL
    java.util.NavigableMap MAP -> kSTA
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> UtIf
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> FNKC
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> FNKC
    201:221:java.lang.String timeLong(long,int) -> FNKC
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> vtHI
    236:236:java.lang.String b(double) -> Gani
    241:258:java.lang.String b(java.math.BigInteger) -> FNKC
    263:267:void instantiate() -> VwVt
    279:279:java.lang.String fileSize(long) -> vACT
    292:292:java.lang.String memSize(long) -> AGKY
    297:297:java.lang.String memSize(long,int) -> VDGg
    310:311:java.lang.String stamp(long) -> srmk
    327:361:java.lang.String ofSize(long,int) -> vtHI
    367:394:java.lang.String ofSize(long,int,int) -> FNKC
    408:413:java.lang.String trim(java.lang.String,int) -> VDGg
    426:446:java.lang.String cname(java.lang.String) -> Gani
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> ykmo
    504:522:java.lang.String memx(long) -> OHDS
    536:537:java.lang.String f(long) -> Usgo
    549:550:java.lang.String f(int) -> hsOP
    564:573:java.lang.String f(double,int) -> VDGg
    589:598:java.lang.String fd(double,int) -> vtHI
    612:621:java.lang.String f(float,int) -> FNKC
    632:632:java.lang.String f(double) -> rDue
    643:643:java.lang.String f(float) -> FNKC
    658:658:java.lang.String pc(double,int) -> vACT
    673:673:java.lang.String pc(float,int) -> VDGg
    686:686:java.lang.String pc(double) -> AhmN
    699:699:java.lang.String pc(float) -> VDGg
    715:715:java.lang.String pc(int,int,int) -> FNKC
    729:729:java.lang.String pc(int,int) -> vtHI
    745:745:java.lang.String pc(long,long,int) -> FNKC
    759:759:java.lang.String pc(long,long) -> vACT
    771:771:java.lang.String msSeconds(long) -> lwKC
    785:785:java.lang.String msSeconds(long,int) -> vACT
    797:797:java.lang.String nsMs(long) -> FpNV
    811:811:java.lang.String nsMs(long,int) -> AGKY
    825:825:java.lang.String nsMsd(long,int) -> srmk
react.glang.AccessCallback -> ntdb:
    java.lang.Object get() -> get
react.glang.Adapter -> tvWD:
    java.lang.Object adapt(java.lang.Object) -> srmk
    java.lang.Object onAdapt(java.lang.Object) -> ykmo
react.glang.Callback -> Xkts:
    java.lang.Object t -> hQye
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> FNKC
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> QNPP:
    double i -> qnVv
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> eYEI
react.glang.FinalFloat -> hIAL:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> vtHI
react.glang.FinalInteger -> XlUw:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> QNJe
react.glang.FinalLong -> BSFU:
    long i -> WHXh
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> UtIf
react.glang.FinalString -> hYdf:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> owjr:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> srmk
    java.lang.Object onAdapt(java.lang.Object) -> ykmo
react.glang.GBiset -> SKgO:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> dySC
    java.lang.Object b -> JSTt
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> CDjP
    53:54:void setA(java.lang.Object) -> OHDS
    63:63:java.lang.Object getB() -> wnby
    73:74:void setB(java.lang.Object) -> Usgo
react.glang.GList -> XlYE:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> vACT
    45:52:react.glang.GList grepDistance(int,int) -> AGKY
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> VDGg
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> GayW
    188:190:react.glang.GList shuffleCopy() -> tCWT
    198:199:void shuffle() -> XRiB
    210:236:react.glang.GList split() -> UJAH
    248:248:boolean hasIndex(int) -> WNxk
    258:259:java.lang.Object pickRandom() -> Rryr
    270:277:react.glang.GList stringList() -> oUiV
    288:292:void forEach(react.glang.Callback) -> VDGg
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> lmxH
    336:336:react.glang.GList cropFrom(int) -> OjEp
    341:373:react.glang.GList split(int) -> TyTr
    389:389:react.glang.GList cropTo(int) -> HTOq
    406:416:react.glang.GList crop(int,int) -> srmk
    427:431:react.glang.GList removeDuplicates() -> yRfE
    442:446:void removeAll(java.lang.Object) -> lwKC
    455:455:boolean hasDuplicates() -> JlBc
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> gFAm
    484:490:void push(java.lang.Object,int) -> FNKC
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> FpNV
    528:532:void add(java.util.List) -> FNKC
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> EudX
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> pYLu
    626:627:react.glang.GList qdel(java.lang.Object) -> UtIf
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> TqNr
    662:669:java.lang.Object popLast() -> dMXv
    674:683:java.lang.Object popRandom() -> Aqio
react.glang.GListAdapter -> CwnE:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> VDGg
    java.lang.Object onAdapt(java.lang.Object) -> ykmo
react.glang.GMap -> jEwv:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> kAMR
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> FNKC
    64:81:react.glang.GMap flip() -> RryE
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> FNKC
    121:121:react.glang.GList k() -> lmxH
    131:131:react.glang.GSet kset() -> RsYn
    141:141:react.glang.GList v() -> nuJE
    151:151:react.glang.GSet vset() -> SmlN
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> VDGg
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> ykmo
    209:219:react.glang.GMap removeDuplicateValues() -> WGTY
    233:242:void put(react.glang.GList,react.glang.GList) -> FNKC
    251:267:react.glang.GList sortK() -> dxNL
    277:293:react.glang.GList sortV() -> DjQj
react.glang.GQuadraset -> pilk:
    java.lang.Object a -> dySC
    java.lang.Object b -> JSTt
    java.lang.Object c -> fDCf
    java.lang.Object d -> NySr
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> CDjP
    25:26:void setA(java.lang.Object) -> OHDS
    30:30:java.lang.Object getB() -> wnby
    35:36:void setB(java.lang.Object) -> Usgo
    40:40:java.lang.Object getC() -> kAPK
    45:46:void setC(java.lang.Object) -> Gani
    50:50:java.lang.Object getD() -> aMDe
    55:56:void setD(java.lang.Object) -> rDue
react.glang.GSet -> teYA:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> dLvo:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> dySC
    java.lang.Object b -> JSTt
    java.lang.Object c -> fDCf
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> CDjP
    26:27:void setA(java.lang.Object) -> OHDS
    31:31:java.lang.Object getB() -> wnby
    36:37:void setB(java.lang.Object) -> Usgo
    41:41:java.lang.Object getC() -> kAPK
    46:47:void setC(java.lang.Object) -> Gani
react.gmath.Average -> GIFT:
    double[] values -> hQxo
    double average -> sIgv
    boolean dirty -> TYBt
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> GrqA
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> MtnL
react.gmath.DoubleArrayUtils -> iuxo:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> FNKC
    17:19:void wrapRight(double[]) -> FNKC
    23:27:void fill(double[],double) -> fill
react.gmath.M -> eHLF:
    int precision -> TGaD
    int modulus -> WsMi
    float[] sin -> rXHF
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> FNKC
    31:36:boolean r(java.lang.Double) -> VDGg
    51:51:double tps(long,int) -> ykmo
    63:63:double ticksFromNS(long) -> Gani
    75:101:java.lang.String toRoman(int) -> RsOY
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> ykmo
    144:216:int fromRoman(java.lang.String) -> rDue
    226:226:long ns() -> xiXb
    236:236:long ms() -> nSIt
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> VDGg
    333:333:float sinLookup(int) -> OYEC
react.gnet.client.Client -> vbla:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> FiKx
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> FNKC
    74:74:react.gnet.packet.PacketHandler getHandler() -> hbYs
react.gnet.client.IClient -> vQkQ:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> FNKC
    react.gnet.packet.PacketHandler getHandler() -> hbYs
react.gnet.download.Download -> KndU:
    react.gnet.download.DownloadState state -> NhRo
    react.gnet.download.DownloadType type -> wxXY
    react.gnet.download.DownloadStatus status -> ktuW
    react.gnet.download.DownloadMonitor monitor -> jjCK
    java.net.URL url -> url
    java.io.File file -> inoR
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> EeGS
    92:92:react.gnet.download.DownloadType getType() -> XSJt
    97:97:react.gnet.download.DownloadStatus getStatus() -> eGml
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> AXYQ
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> UQmp:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> FNKC
    void onDownloadStarted(react.gnet.download.Download) -> FNKC
    void onDownloadFinished(react.gnet.download.Download) -> VDGg
    void onDownloadFailed(react.gnet.download.Download) -> vtHI
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> FNKC
react.gnet.download.DownloadState -> mFpb:
    react.gnet.download.DownloadState IDLE -> mYXu
    react.gnet.download.DownloadState DOWNLOADING -> PfHp
    react.gnet.download.DownloadState FAILED -> ORCy
    react.gnet.download.DownloadState FINISHED -> DQdS
    react.gnet.download.DownloadState[] ENUM$VALUES -> sIgy
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> ESaM:
    long bytesDownloaded -> XdmL
    long bytesTotal -> SMMU
    long bytesPerSecond -> GJJl
    long timeElapsed -> dhPW
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> Kevn
    25:25:long getBytesDownloaded() -> cJYn
    30:31:void setBytesDownloaded(long) -> rDue
    35:35:long getBytesTotal() -> ETFK
    40:41:void setBytesTotal(long) -> AhmN
    45:45:long getBytesPerSecond() -> ofmV
    50:51:void setBytesPerSecond(long) -> eYEI
    55:55:long getTimeElapsed() -> SLLc
    60:61:void setTimeElapsed(long) -> GrqA
react.gnet.download.DownloadType -> mhrg:
    react.gnet.download.DownloadType DETERMINATE -> OYqj
    react.gnet.download.DownloadType INDETERMINATE -> gGFL
    react.gnet.download.DownloadType[] ENUM$VALUES -> QWgv
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> maDF:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> ndJy
    java.lang.String getPacketName() -> aUTu
react.gnet.packet.IncompatablePacketException -> vHxy:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> maDI:
    react.gnet.packet.PacketBinding SERVER_BOUND -> XuoL
    react.gnet.packet.PacketBinding CLIENT_BOUND -> USSe
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> dpaK
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> SdxS:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> inJC:
    react.glang.GList accept -> TPPr
    react.gnet.packet.PacketBinding side -> WajS
    react.gnet.streams.OSS out -> IGaA
    react.gnet.streams.ISS in -> FGID
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> FNKC
    28:34:void accept(react.gnet.packet.IPacket) -> VDGg
    38:46:react.gnet.packet.IPacket findPacket(int) -> aviW
    51:66:react.gnet.packet.IPacket read() -> oVLo
    71:77:void write(react.gnet.packet.IPacket) -> vtHI
react.gnet.packet.UnhandledPacketException -> GavL:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> nSEB:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> hbYs
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> vACT
react.gnet.server.Server -> DYNK:
    int port -> port
    java.net.ServerSocket socket -> GknF
    react.gnet.packet.PacketHandler handler -> FiKx
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> hbYs
    37:84:void run() -> run
    88:91:void pstart() -> UQrP
    95:96:void pstop() -> DPbT
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> vACT
react.gnet.streams.ISS -> VwSl:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> WsLg
    boolean built -> FiNO
    byte[] readBuffer -> YEoo
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> uyTI
    64:72:react.glang.GList readStringList() -> iLJW
    77:85:react.glang.GList readDoubleList() -> klBw
    90:98:react.glang.GList readLongList() -> wCpU
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> FNKC
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> FNKC
    136:137:react.gnet.streams.ISS gzip() -> tKiE
    142:147:void build() -> KMDj
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> VDGg
    435:436:void close() -> close
react.gnet.streams.OSS -> WaEW:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> qTfV
    react.gnet.streams.StreamBuilder bu -> WsLg
    boolean built -> FiNO
    byte[] writeBuffer -> GJNT
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> VwKQ
    41:42:react.gnet.streams.OSS gzip(int) -> Oidt
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> VDGg
    53:58:void build() -> KMDj
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> OHDS
    102:108:void writeDoubleList(react.glang.GList) -> Usgo
    112:118:void writeLongList(react.glang.GList) -> lwKC
    122:128:void writeStreamableList(react.glang.GList) -> FpNV
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> DYRJ
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> vtHI
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> tStX:
    react.glang.GList constructors -> SxDm
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> FNKC
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNKC
    49:50:void bind(react.gnet.streams.StreamConstructor) -> FNKC
    54:55:void bindGZIP(int) -> kcDn
    59:60:void bindGZIP() -> JJBS
    64:65:void bindCipher(javax.crypto.Cipher) -> vtHI
    69:70:void bindBuffer(int) -> uySU
    74:75:void bindBuffer() -> lUSN
react.gnet.streams.StreamConstructor -> hjeI:
    java.io.InputStream constructInput(java.io.InputStream) -> FNKC
    java.io.OutputStream constructOutput(java.io.OutputStream) -> FNKC
react.gnet.streams.constructors.BufferedStreamConstructor -> VCnS:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> VDGg
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> VDGg
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> FNKC
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNKC
react.gnet.streams.constructors.CipherStreamConstructor -> CxMs:
    javax.crypto.Cipher cipher -> Lamf
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> vtHI
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> vtHI
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> FNKC
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNKC
react.gnet.streams.constructors.GZipStreamConstructor -> hkEn:
    int compressionLevel -> yeOV
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> vACT
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> vACT
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> FNKC
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> FNKC
react.gnet.streams.overlays.CGZIPInputStream -> oLvH:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> vAIi:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> CgOL:
    void toBytes(react.gnet.streams.OSS) -> FNKC
    void fromBytes(react.gnet.streams.ISS) -> FNKC
react.graph.ColossalView -> EvEy:
    react.papyrus.BufferedFrame view -> cupc
    react.glang.GMap buffers -> JKFs
    react.glang.GMap graphs -> ETiG
    double level -> KEYM
    double targetLevel -> NFRE
    int maxX -> HEAT
    int maxY -> bamJ
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> DjTD
    51:77:void render() -> oDhw
    81:98:void scroll(int) -> YfbP
    102:112:void recompile() -> vQoB
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> FNKC
    122:122:react.papyrus.BufferedFrame getView() -> XuNB
    127:127:react.glang.GMap getBuffers() -> UtTf
    132:132:react.glang.GMap getGraphs() -> ogMb
    137:137:double getLevel() -> hkJR
    142:142:double getTargetLevel() -> BcmP
    147:147:int getMaxX() -> OXqF
    152:152:int getMaxY() -> RPws
react.graph.ColossalView$Builder -> EvEy$FNKC:
    react.glang.GList graphs -> cBmJ
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> FNKC
    171:191:react.graph.ColossalView compute() -> PJrP
react.graph.CubicleIterator -> Mtkr:
    int[][] mapping -> uXac
    int xCubes -> YxuO
    int yCubes -> DcID
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> lnWu
    47:130:void insert(react.graph.GraphSize,int) -> FNKC
    134:145:void print() -> print
react.graph.Graph2D -> ktRa:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> FNKC
react.graph.GraphCPUArc -> tKhJ:
    byte fontColor -> yCKd
    byte backgroundColor -> inpu
    double pct -> cdpA
    react.gmath.Average aax -> BnCt
    react.gmath.Average aay -> gWiL
    react.gmath.Average aaz -> tLmK
    long msx -> sJJf
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> nInI
    52:90:void onRender(react.papyrus.BufferedFrame) -> FNKC
    94:94:byte getFontColor() -> FWGr
    99:100:void setFontColor(byte) -> FNKC
    104:104:byte getBackgroundColor() -> IXAN
    109:110:void setBackgroundColor(byte) -> VDGg
react.graph.GraphLagMap -> HBxj:
    int grid -> hAYy
    org.bukkit.entity.Player viewer -> fwJS
    org.bukkit.util.Vector lastVector -> wNFh
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> MRll
    49:55:void zoomOut() -> dgQW
    60:164:void onRender(react.papyrus.BufferedFrame) -> FNKC
react.graph.GraphLagMap$1 -> HBxj$1:
    int[] $SwitchMap$react$api$ChunkIssue -> aoWD
    107:107:void <clinit>() -> <clinit>
react.graph.GraphMemoryArc -> cdIk:
    byte fontColor -> yCKd
    byte backgroundColor -> inpu
    double pct -> cdpA
    react.gmath.Average aax -> BnCt
    long msx -> sJJf
    long of -> mPjD
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> nInI
    52:79:void onRender(react.papyrus.BufferedFrame) -> FNKC
    83:83:byte getFontColor() -> FWGr
    88:89:void setFontColor(byte) -> FNKC
    93:93:byte getBackgroundColor() -> IXAN
    98:99:void setBackgroundColor(byte) -> VDGg
react.graph.GraphMode -> tKgh:
    react.graph.GraphMode NORMAL -> RuAF
    react.graph.GraphMode ITEMFRAME -> TYCu
    react.graph.GraphMode EOD -> wgXL
    react.graph.GraphMode[] $VALUES -> AQNH
    3:3:react.graph.GraphMode[] values() -> values
    3:3:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> XAgV:
    double lx -> PfJF
    double ly -> GuAm
    react.api.ISampler sampler -> AsPb
    react.graph.IFormatter formatter -> nBkE
    byte graphColor -> cSll
    byte backgroundColor -> inpu
    byte borderColor -> SVAV
    byte textColor -> YWTb
    int ticksLeftTitle -> JKHn
    int ticksOutTitle -> fwLr
    double nextPoint -> ecGo
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> nInI
    51:183:void onRender(react.papyrus.BufferedFrame) -> FNKC
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> VDGg
    226:254:int getHue(int,int,int) -> vtHI
    259:281:void scaleFor(react.glang.GList) -> UtIf
    285:285:react.graph.IFormatter getFormatter() -> UQgN
    290:291:void setFormatter(react.graph.IFormatter) -> FNKC
    295:295:byte getGraphColor() -> lDUR
    300:301:void setGraphColor(byte) -> vtHI
    305:305:byte getBackgroundColor() -> IXAN
    310:311:void setBackgroundColor(byte) -> VDGg
    315:315:byte getBorderColor() -> qvIB
    320:321:void setBorderColor(byte) -> vACT
    325:325:byte getTextColor() -> SwCI
    330:331:void setTextColor(byte) -> AGKY
    335:335:react.api.ISampler getSampler() -> imoi
react.graph.GraphSize -> UJAB:
    react.graph.GraphSize WIDE -> DRID
    react.graph.GraphSize FULL -> tLov
    react.graph.GraphSize SQUARE -> TPUa
    react.graph.GraphSize[] $VALUES -> ioTQ
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> QEgg
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> UJAB$1:
    int[] $SwitchMap$react$graph$GraphSize -> woju
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> VwVt:
    java.lang.String text -> text
    byte fontColor -> yCKd
    byte backgroundColor -> inpu
    boolean wrote -> esiS
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> FNKC
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> FWGr
    68:69:void setFontColor(byte) -> FNKC
    73:73:byte getBackgroundColor() -> IXAN
    78:79:void setBackgroundColor(byte) -> VDGg
react.graph.GraphingInstance -> CDjP:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> cBmJ
    react.graph.ColossalView view -> fekC
    react.papyrus.Papyrus papyrus -> yCMd
    react.papyrus.IRenderer renderer -> EDKE
    boolean mapping -> VfgN
    react.glang.GList msgs -> IXfv
    react.surge.sched.Task waiter -> Xusj
    react.surge.sched.Task waiter2 -> ogtF
    int shift -> SxFy
    int iv -> aMiJ
    boolean notif -> pHsX
    boolean doScrolling -> Eejs
    50:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> OiuO
    127:128:void setDoScrolling(boolean) -> Gani
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> FNKC
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> FNKC
    151:155:void send(java.lang.String) -> AhmN
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> FNKC
    166:205:void on(react.event.ReactScrollEvent) -> FNKC
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> FNKC
    219:227:void destroy() -> destroy
    231:240:void toggle() -> nuOJ
    244:245:void setGraphs(react.glang.GList) -> Gani
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> VoJj
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> Plwm
    298:298:react.graph.ColossalView getView() -> lvxT
    303:303:react.papyrus.Papyrus getPapyrus() -> DivK
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> FNKC
    323:324:void setPapyrus(react.papyrus.Papyrus) -> FNKC
    328:329:void setRenderer(react.papyrus.IRenderer) -> FNKC
    333:334:void setMapping(boolean) -> vtHI
    338:339:void setMsgs(react.glang.GList) -> rDue
    343:344:void setWaiter(react.surge.sched.Task) -> FNKC
    348:349:void setWaiter2(react.surge.sched.Task) -> VDGg
    353:354:void setShift(int) -> HmbS
    358:359:void setNotif(boolean) -> rDue
    363:363:react.papyrus.IRenderer getRenderer() -> ArMa
    368:368:boolean isMapping() -> DXgm
    373:373:react.glang.GList getMsgs() -> Wqld
    378:378:react.surge.sched.Task getWaiter() -> qvGk
    383:383:react.surge.sched.Task getWaiter2() -> says
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> KUVo
    398:414:void compile() -> NUoL
    418:433:void enableSly() -> GjmM
    437:445:void disableSly() -> WOgo
    32:32:boolean access$000(react.graph.GraphingInstance) -> FNKC
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> VDGg
    32:32:boolean access$200(react.graph.GraphingInstance) -> vtHI
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> FNKC
    32:32:int access$300(react.graph.GraphingInstance) -> vACT
    32:32:int access$310(react.graph.GraphingInstance) -> AGKY
    32:32:int access$302(react.graph.GraphingInstance,int) -> FNKC
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> srmk
react.graph.GraphingInstance$1 -> CDjP$1:
    org.bukkit.entity.Player val$player -> MLAP
    react.graph.GraphingInstance this$0 -> WbNi
    55:55:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> CDjP$2:
    react.graph.GraphingInstance this$0 -> WbNi
    80:80:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> CDjP$3:
    react.graph.GraphingInstance this$0 -> WbNi
    110:110:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> FNKC
react.graph.IFormatter -> wnby:
    java.lang.String from(double) -> HBoM
react.graph.IGraph -> GayW:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> CgRY
    long getTimeViewport() -> jycS
    void render(react.papyrus.BufferedFrame) -> vtHI
    double getMax() -> getMax
    void setMax(double) -> hsOP
react.graph.NormalGraph -> tCWT:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> wpJx
    long timeViewport -> OjxT
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> CgRY
    35:35:long getTimeViewport() -> jycS
    41:42:void render(react.papyrus.BufferedFrame) -> vtHI
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> hsOP
    void onRender(react.papyrus.BufferedFrame) -> FNKC
react.graph.PlotBoard -> XRiB:
    react.glang.GMap plots -> jieH
    int maxRecordings -> TGdA
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> bGVs
    33:33:long getAccurateTimeSpan() -> ECDw
    38:50:long getMedian(long,long) -> AGKY
    55:55:long getMinimumAccuracyRange() -> rFEW
    60:70:double getMaxValue() -> bGWp
    75:85:double getMinValue() -> Plvl
    90:90:react.glang.GList sort(react.glang.GMap) -> VDGg
    95:105:long earilestRecording() -> tnMv
    110:120:long latestRecording() -> yAgl
    125:126:void reduceBefore(long) -> HBoM
    130:156:void reduceBetween(long,long) -> srmk
    160:160:boolean before(long,long) -> ykmo
    165:165:boolean after(long,long) -> OHDS
    170:170:boolean within(long,long,long) -> FNKC
    175:193:react.glang.GMap getBetween(long,long) -> Usgo
    198:200:void plot(long,double) -> FNKC
    204:204:boolean hasAt(long) -> hsOP
    209:209:double getAt(long) -> QNJe
    214:214:int getSize() -> getSize
react.graph.Point -> UJAH:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> Rryr:
    int iid -> eYuX
    react.graph.IGraph graph -> dFRD
    react.graph.GraphSize size -> OcHr
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> JcUp
    24:25:void setGraph(react.graph.IGraph) -> FNKC
    29:29:react.graph.GraphSize getSize() -> DPcP
    34:35:void setSize(react.graph.GraphSize) -> FNKC
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> oUiV:
    react.graph.RenderMaxType UNLIMITED -> gGLu
    react.graph.RenderMaxType LIMITED -> AQQW
    react.graph.RenderMaxType[] $VALUES -> Ngwm
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> yRfE:
    java.lang.String CRLF -> gypy
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> eYEI
    162:198:java.lang.String toString(react.json.JSONObject) -> VDGg
react.json.HTTPTokener -> JlBc:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> gFAm:
    java.util.ArrayList myArrayList -> YVty
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> FNKC
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> qlej
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> mWhc
    394:399:react.json.JSONObject getJSONObject(int) -> CEBE
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> GrqA
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> HBnP
    515:515:boolean optBoolean(int) -> uxrY
    533:536:boolean optBoolean(int,boolean) -> VDGg
    551:551:double optDouble(int) -> vjtI
    569:572:double optDouble(int,double) -> FNKC
    587:587:int optInt(int) -> Yfai
    605:608:int optInt(int,int) -> OHDS
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> VDGg
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> FNKC
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> FNKC
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> FNKC
    722:723:react.json.JSONArray optJSONArray(int) -> WWlt
    737:738:react.json.JSONObject optJSONObject(int) -> MtdB
    752:752:long optLong(int) -> VUJt
    770:773:long optLong(int,long) -> FNKC
    788:788:java.lang.String optString(int) -> JtLB
    803:804:java.lang.String optString(int,java.lang.String) -> FNKC
    816:817:react.json.JSONArray put(boolean) -> AhmN
    830:831:react.json.JSONArray put(java.util.Collection) -> FNKC
    845:848:react.json.JSONArray put(double) -> QNJe
    860:861:react.json.JSONArray put(int) -> UQgN
    873:874:react.json.JSONArray put(long) -> WNxk
    887:888:react.json.JSONArray put(java.util.Map) -> FNKC
    902:903:react.json.JSONArray put(java.lang.Object) -> AhmN
    921:922:react.json.JSONArray put(int,boolean) -> vtHI
    939:940:react.json.JSONArray put(int,java.util.Collection) -> FNKC
    958:959:react.json.JSONArray put(int,double) -> VDGg
    977:978:react.json.JSONArray put(int,int) -> Usgo
    996:997:react.json.JSONArray put(int,long) -> VDGg
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> FNKC
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> FNKC
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> eYEI
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> FNKC
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> FNKC
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> FNKC
react.json.JSONException -> EudX:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> Swgo
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> pYLu:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> FNKC
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> HBoM
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> FNKC
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> VDGg
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> eYEI
    379:456:java.lang.String toString(react.json.JSONArray) -> VDGg
    472:552:java.lang.String toString(react.json.JSONObject) -> VDGg
react.json.JSONObject -> TqNr:
    java.util.Map map -> map
    java.lang.Object NULL -> yCPO
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> FNKC
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> VDGg
    480:499:java.lang.String doubleToString(double) -> WNxk
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> hsOP
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> QNJe
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> WNxk
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> vtHI
    751:767:java.lang.String[] getNames(java.lang.Object) -> GrqA
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> lmxH
    855:855:boolean isNull(java.lang.String) -> OjEp
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> pGnf
    917:937:java.lang.String numberToString(java.lang.Number) -> FNKC
    949:949:java.lang.Object opt(java.lang.String) -> TyTr
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> FNKC
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> FNKC
    1018:1018:boolean optBoolean(java.lang.String) -> HTOq
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> FNKC
    1054:1054:double optDouble(java.lang.String) -> RsOY
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> FNKC
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> FNKC
    1116:1119:double optDouble(java.lang.String,double) -> FNKC
    1134:1134:int optInt(java.lang.String) -> OYEC
    1152:1155:int optInt(java.lang.String,int) -> vtHI
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> aviW
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> uyTI
    1198:1198:long optLong(java.lang.String) -> VwKQ
    1216:1219:long optLong(java.lang.String,long) -> FNKC
    1234:1234:java.lang.String optString(java.lang.String) -> Oidt
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> VDGg
    1255:1305:void populateMap(java.lang.Object) -> HBoM
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> VDGg
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> FNKC
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> VDGg
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> vACT
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> VDGg
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> FNKC
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> vtHI
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> vACT
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> AGKY
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> FNKC
    1590:1590:java.lang.Object remove(java.lang.String) -> kcDn
    1605:1640:boolean similar(java.lang.Object) -> eYEI
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> hsOP
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> vtHI
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> FNKC
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> FNKC
    2000:2004:void indent(java.io.Writer,int) -> FNKC
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> FNKC
react.json.JSONObject$Null -> TqNr$FNKC:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> dMXv:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> Aqio:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> kAMR:
    long character -> WkDH
    boolean eof -> eof
    long index -> ndsD
    long line -> RdDd
    char previous -> APok
    java.io.Reader reader -> reader
    boolean usePrevious -> skpx
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> mqit
    119:131:int dehexchar(char) -> FNKC
    136:136:boolean end() -> nIxk
    147:153:boolean more() -> MtpB
    164:198:char next() -> next
    213:218:char next(char) -> VDGg
    233:250:java.lang.String next(int) -> OPVV
    263:266:char nextClean() -> xPFw
    287:334:java.lang.String nextString(char) -> vtHI
    349:361:java.lang.String nextTo(char) -> vACT
    376:388:java.lang.String nextTo(java.lang.String) -> uySU
    403:441:java.lang.Object nextValue() -> XdNX
    458:479:char skipTo(char) -> AGKY
    491:491:react.json.JSONException syntaxError(java.lang.String) -> YfbP
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> RryE:
    int maxdepth -> htdC
    boolean comma -> IXiS
    char mode -> NVwJ
    react.json.JSONObject[] stack -> eAEx
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> lnWu
    157:164:react.json.JSONWriter array() -> tmqM
    180:193:react.json.JSONWriter end(char,char) -> FNKC
    206:206:react.json.JSONWriter endArray() -> rgkH
    219:219:react.json.JSONWriter endObject() -> GYnb
    235:258:react.json.JSONWriter key(java.lang.String) -> HmbS
    274:285:react.json.JSONWriter object() -> afYy
    299:310:void pop(char) -> srmk
    322:329:void push(react.json.JSONObject) -> vACT
    342:342:react.json.JSONWriter value(boolean) -> eYEI
    356:356:react.json.JSONWriter value(double) -> lmxH
    369:369:react.json.JSONWriter value(long) -> lmxH
    385:385:react.json.JSONWriter value(java.lang.Object) -> QNJe
react.json.XML -> RsYn:
    java.lang.Character AMP -> Npgk
    java.lang.Character APOS -> FiQP
    java.lang.Character BANG -> xrpT
    java.lang.Character EQ -> PChw
    java.lang.Character GT -> jOte
    java.lang.Character LT -> SMTH
    java.lang.Character QUEST -> QFmD
    java.lang.Character QUOT -> ujGo
    java.lang.Character SLASH -> NxxV
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> qlej
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> FNKC
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> eYEI
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> nuJE:
    java.util.HashMap entity -> BLEL
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> pXtI
    108:133:java.lang.Object nextContent() -> MtrX
    149:166:java.lang.Object nextEntity(char) -> ykmo
    186:239:java.lang.Object nextMeta() -> rgjt
    261:334:java.lang.Object nextToken() -> DYWM
    354:420:boolean skipPast(java.lang.String) -> mWhc
react.lagmap.LagMap -> SmlN:
    react.glang.GMap chunks -> XnDt
    14:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> aCus
    32:47:react.glang.GMap getGrandTotal() -> FhMy
    52:61:void pump() -> LaOP
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> FNKC
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> FNKC
    85:85:react.glang.GMap getChunks() -> iKmm
react.lagmap.LagMapChunk -> WGTY:
    react.glang.GMap hits -> qekR
    org.bukkit.Chunk c -> AHLb
    16:19:void <init>(org.bukkit.Chunk) -> <init>
    23:37:react.glang.GMap getMS() -> VUYu
    42:66:double totalMS() -> ObHF
    71:78:double getMS(react.api.ChunkIssue) -> FNKC
    83:89:void hit(react.api.ChunkIssue,double) -> FNKC
    93:94:void hit(react.api.ChunkIssue) -> VDGg
    98:98:int getX() -> getX
    103:103:int getZ() -> getZ
    108:115:double totalScore() -> sIKU
    120:120:react.glang.GMap getHits() -> jFaI
    125:134:void pump() -> LaOP
    139:139:int compareTo(react.lagmap.LagMapChunk) -> FNKC
    144:144:org.bukkit.Chunk getC() -> tdon
    149:149:org.bukkit.World getWorld() -> getWorld
    10:10:int compareTo(java.lang.Object) -> compareTo
react.papyrus.BufferedFrame -> dxNL:
    byte[][] frame -> FrCE
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> FNKC
    90:97:void write(byte) -> srmk
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> FNKC
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> FNKC
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> FNKC
    153:167:java.awt.image.BufferedImage toBufferedImage() -> KCwy
    175:182:void writeRainbowMul() -> sIKa
    189:196:void writeRainbowAdd() -> SmsU
    203:213:void writeSparks() -> prfS
    217:223:boolean write(int,int,byte) -> FNKC
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> FNKC
    255:272:void write(react.papyrus.BufferedFrame) -> vACT
    276:276:byte[][] getRawFrame() -> LPLK
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> DjQj:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> vACT
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> FNKC
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> kAPK:
    org.bukkit.map.MapView getView() -> ebDu
    react.papyrus.BufferedFrame getFrameBuffer() -> DYVD
    void addRenderer(react.papyrus.IRenderer) -> VDGg
    void clearRenderers() -> KUXs
    react.glang.GList getRenderers() -> JsxY
    void removeRenderer(react.papyrus.IRenderer) -> vtHI
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> vARf
react.papyrus.IRenderer -> aMDe:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> FNKC
react.papyrus.Papyrus -> MtnL:
    org.bukkit.map.MapView map -> VpPO
    react.papyrus.BufferedFrame frameBuffer -> wMiX
    react.papyrus.BufferedFrame lastFrameBuffer -> JRyb
    react.glang.GList renderers -> fvld
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> ebDu
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> DYVD
    51:52:void addRenderer(react.papyrus.IRenderer) -> VDGg
    57:58:void clearRenderers() -> KUXs
    63:63:react.glang.GList getRenderers() -> JsxY
    69:70:void removeRenderer(react.papyrus.IRenderer) -> vtHI
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> vARf
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> VDGg
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> vtHI
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> vACT
react.papyrus.Papyrus$1 -> MtnL$1:
    org.bukkit.map.MapCanvas val$c -> aomt
    org.bukkit.map.MapView val$v -> ndrG
    react.papyrus.Papyrus this$0 -> FWoV
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> xiXb:
    int spaceSize -> Waow
    java.lang.String fontChars -> ixGB
    int[][] fontData -> Gkut
    react.papyrus.ReactFont Font -> nBrS
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> nSIt:
    react.glang.GList subgoals -> qfOV
    java.lang.String tag -> OsnV
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> bPKD
    26:44:void propigate() -> gyLt
    49:50:void addGoal(react.rai.IGoal) -> FNKC
    55:65:react.glang.GList getFailingSubgoals() -> VeyQ
    71:71:boolean isFailing() -> PvKX
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> QFJE
    void onPropigated() -> uOOv
react.rai.Goal$1 -> nSIt$1:
    react.rai.IGoal val$i -> WIAp
    react.rai.Goal this$0 -> pRKG
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> hbYs:
    react.glang.GList getSubgoals() -> bPKD
    void propigate() -> gyLt
    void onPropigated() -> uOOv
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> VeyQ
    boolean isFailing() -> PvKX
    boolean onCheckFailing() -> QFJE
    void update() -> update
    void addGoal(react.rai.IGoal) -> FNKC
react.rai.IRAI -> EeGS:
    react.glang.GList getGoals() -> LrOf
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> FNKC
    react.glang.GList getEvents() -> qSeR
    void callEvent(react.rai.RAIEvent) -> FNKC
    react.glang.GList getListeners() -> URVS
react.rai.RAI -> XSJt:
    react.glang.GList goals -> lyCO
    react.glang.GList events -> XeVk
    react.glang.GList logEvents -> BmhP
    react.glang.GList listeners -> GAcU
    long since -> gWoa
    react.rai.RAI instance -> AjeE
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> LrOf
    41:42:void addGoal(react.rai.IGoal) -> FNKC
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> qSeR
    88:95:void callEvent(react.rai.RAIEvent) -> FNKC
    100:100:react.glang.GList getListeners() -> URVS
react.rai.RAIEvent -> eGml:
    react.rai.RAIEventType type -> uHGT
    java.lang.String[] pars -> iwiD
    java.lang.String ovt -> ujKD
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> mGXk
    29:29:java.lang.String[] getPars() -> gVkn
    34:34:java.lang.String getOvt() -> Xtsf
react.rai.RAIEventType -> AXYQ:
    react.rai.RAIEventType FIRE_ACTION -> xPoe
    react.rai.RAIEventType NOTE_GOAL_FAILING -> ryqv
    react.rai.RAIEventType NOTE_GOAL_FIXED -> sdEC
    java.lang.String[] msgs -> tUdp
    react.rai.RAIEventType[] $VALUES -> Dbmj
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> jqWg
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> FNKC
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> Kevn:
    boolean failing -> pIXg
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> QFJE
    91:134:void onPropigated() -> uOOv
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> FNKC
react.rai.goals.GoalReducedEntityCounts$1 -> Kevn$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> VxbH
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> Kevn$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> VxbH
    org.bukkit.Chunk val$lx -> rhon
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> cJYn:
    boolean failing -> pIXg
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> QFJE
    72:76:void onPropigated() -> uOOv
react.rai.goals.GoalStableChunkTime$1 -> cJYn$1:
    react.rai.goals.GoalStableChunkTime this$0 -> KMnO
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> ETFK:
    boolean failing -> pIXg
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> uOOv
    35:35:void letUp() -> dEQv
    40:77:boolean onCheckFailing() -> QFJE
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> FNKC
react.rai.goals.GoalStableEntityTime$1 -> ETFK$1:
    react.rai.goals.GoalStableEntityTime this$0 -> RdDy
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> ofmV:
    boolean failing -> pIXg
    react.glang.GMap reocc -> XBrS
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> uOOv
    88:125:boolean onCheckFailing() -> QFJE
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> FNKC
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> VDGg
react.rai.goals.GoalStableFluidTime$1 -> ofmV$1:
    react.rai.goals.GoalStableFluidTime this$0 -> fCjX
    org.bukkit.Chunk val$lx -> rhon
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> ofmV$2:
    react.rai.goals.GoalStableFluidTime this$0 -> fCjX
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> SLLc:
    boolean failing -> pIXg
    react.glang.GMap reocc -> XBrS
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> uOOv
    89:125:boolean onCheckFailing() -> QFJE
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> FNKC
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> VDGg
react.rai.goals.GoalStableHopperTime$1 -> SLLc$1:
    react.rai.goals.GoalStableHopperTime this$0 -> IHIQ
    org.bukkit.Chunk val$lx -> rhon
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> SLLc$2:
    react.rai.goals.GoalStableHopperTime this$0 -> IHIQ
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> ndJy:
    int d -> d
    boolean failing -> pIXg
    react.glang.GMap reocc -> XBrS
    32:37:void <init>() -> <init>
    42:86:void onPropigated() -> uOOv
    91:128:boolean onCheckFailing() -> QFJE
    28:28:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> FNKC
    27:27:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> VDGg
react.rai.goals.GoalStableRedstoneTime$1 -> ndJy$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> mbRR
    org.bukkit.Chunk val$lx -> rhon
    1:68:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    73:83:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> ndJy$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> mbRR
    1:110:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    115:124:void run() -> run
react.rai.goals.GoalStableTickTime -> aUTu:
    boolean failing -> pIXg
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> uOOv
    34:58:boolean onCheckFailing() -> QFJE
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> FNKC
react.rai.goals.GoalStableTickTime$1 -> aUTu$1:
    react.rai.goals.GoalStableTickTime this$0 -> aMlj
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> oVLo:
    react.surge.util.MaterialBlock block -> BmiS
    org.bukkit.util.Vector vector -> SMUr
    byte from -> dVwB
    byte to -> GlWD
    17:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:react.surge.util.MaterialBlock getBlock() -> NgVj
    31:32:void setBlock(react.surge.util.MaterialBlock) -> FNKC
    36:36:org.bukkit.util.Vector getVector() -> ogTy
    41:42:void setVector(org.bukkit.util.Vector) -> FNKC
    46:46:byte getFrom() -> yAmW
    51:52:void setFrom(byte) -> ykmo
    56:56:byte getTo() -> CpHh
    61:62:void setTo(byte) -> OHDS
react.redstone.RedstoneTracker -> UQrP:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> TPYP
    react.glang.GList events -> XeVk
    boolean ticking -> pQhG
    react.surge.sched.Task task -> yvVG
    boolean nms -> oNeO
    int tr -> bsSv
    react.gmath.Average aav -> hRbD
    boolean handleTicking -> cdtf
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,react.surge.util.MaterialBlock) -> VDGg
    131:152:void enact(react.redstone.RedstoneEvent) -> FNKC
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> FNKC
react.redstone.RedstoneTracker$1 -> UQrP$1:
    react.redstone.RedstoneTracker this$0 -> LQRj
    1:47:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.remote.client.RemoteClient -> DPbT:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> SgIM
    boolean authenticated -> BuyF
    react.remote.server.ServerInfo info -> HDhL
    react.glang.GMap frems -> mrvC
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> clQr
    51:51:react.glang.GMap getFrames() -> hsbV
    56:75:int computeFrames() -> wCwc
    80:92:boolean clearToken() -> fShx
    97:110:boolean updateServerInfo() -> pYVN
    115:129:boolean refreshToken() -> ntrP
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> vtHI
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> Gjre
    165:165:boolean isAuthenticated() -> XSQg
    170:170:react.remote.server.ServerInfo getInfo() -> ObIr
react.remote.client.packet.CPacketClearToken -> iLJW:
    java.lang.String token -> SgIM
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNKC
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNKC
    38:38:java.lang.String getToken() -> Gjre
    43:44:void setToken(java.lang.String) -> CEBE
react.remote.client.packet.CPacketComputeFrames -> klBw:
    java.lang.String token -> SgIM
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNKC
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNKC
    38:38:java.lang.String getToken() -> Gjre
    43:44:void setToken(java.lang.String) -> CEBE
react.remote.client.packet.CPacketGetInfo -> wCpU:
    java.lang.String token -> SgIM
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNKC
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNKC
    38:38:java.lang.String getToken() -> Gjre
    43:44:void setToken(java.lang.String) -> CEBE
react.remote.client.packet.CPacketGetToken -> tKiE:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> FNKC
    36:38:void fromBytes(react.gnet.streams.ISS) -> FNKC
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> KMDj:
    java.lang.String token -> SgIM
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNKC
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNKC
    38:38:java.lang.String getToken() -> Gjre
    43:44:void setToken(java.lang.String) -> CEBE
react.remote.client.packet.ClientPacket -> DYRJ:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> FNKC
    void fromBytes(react.gnet.streams.ISS) -> FNKC
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> ndJy
    42:42:java.lang.String getPacketName() -> aUTu
react.remote.client.packet.ClientPacketType -> JJBS:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> cKfJ
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> uilK
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> etOi
    react.remote.client.packet.ClientPacketType GET_INFO -> jGie
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> PerK
    react.remote.client.packet.ClientPacketType[] $VALUES -> DRNn
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> lUSN:
    react.glang.GMap compute(long,long) -> vtHI
react.remote.server.KnownUser -> DjTD:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> oDhw:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> FNKC
    38:41:void fromBytes(react.gnet.streams.ISS) -> FNKC
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> vQoB:
    react.glang.GList users -> WbUp
    react.glang.GMap session -> KWDD
    react.glang.GMap lastCompute -> ECob
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> Xkts
    44:45:void registerUser(react.remote.server.KnownUser) -> FNKC
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> VDGg
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> HBnP
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> vACT
    react.remote.server.IFrameComputer getFrameComputer() -> QNPP
    170:171:void markLastCompute(react.remote.server.KnownUser) -> vtHI
    175:180:long getLastCompute(react.remote.server.KnownUser) -> vACT
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> FNKC
    190:191:void deleteSession(react.remote.server.KnownUser) -> AGKY
    195:195:java.lang.String createToken() -> SCak
react.remote.server.ServerInfo -> XuNB:
    java.lang.String motd -> VpUU
    int gameProtocol -> OboS
    java.lang.String gameVersion -> WIDn
    java.lang.String reactVersion -> UlqY
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> FGSi
    int viewDistance -> viewDistance
    int gamePort -> nmgs
    java.lang.String gameAddress -> loqy
    react.glang.GList remotePlugins -> fDOA
    react.glang.GList worlds -> MKfL
    react.glang.GList actions -> TXjl
    react.glang.GList samplers -> tgIM
    26:26:react.remote.server.ServerInfo empty() -> WOnJ
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> FNKC
    146:159:void fromBytes(react.gnet.streams.ISS) -> FNKC
    java.lang.String dgetMotd() -> oEEI
    int dgetGameProtocol() -> INgj
    java.lang.String dgetGameVersion() -> nSBv
    java.lang.String dgetReactVersion() -> eXgx
    int dgetMaxPlayers() -> hYbM
    react.glang.GList dgetConnectedPlayers() -> eXgw
    int dgetViewDistance() -> hrtI
    int dgetGamePort() -> CDgV
    java.lang.String dgetGameAddress() -> MBCY
    react.glang.GList dgetRemotePlugins() -> fJjd
    react.glang.GList dgetWorlds() -> fJjc
    react.glang.GList dgetActions() -> lTkj
    react.glang.GList dgetSamplers() -> ntdb
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> VCya
    199:199:java.lang.String getGameVersion() -> wUYd
    204:204:java.lang.String getReactVersion() -> oDqI
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> QyRB
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> IqXP
    229:229:java.lang.String getGameAddress() -> uORj
    234:234:react.glang.GList getRemotePlugins() -> DahP
    239:239:react.glang.GList getWorlds() -> RYoH
    244:244:react.glang.GList getActions() -> fAwm
    249:249:react.glang.GList getSamplers() -> wnjc
react.remote.server.ServerInfo$1 -> XuNB$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> fJjc
    37:37:int dgetViewDistance() -> hrtI
    43:43:react.glang.GList dgetRemotePlugins() -> fJjd
    49:49:java.lang.String dgetReactVersion() -> eXgx
    55:55:java.lang.String dgetMotd() -> oEEI
    61:61:int dgetMaxPlayers() -> hYbM
    67:67:java.lang.String dgetGameVersion() -> nSBv
    73:73:int dgetGameProtocol() -> INgj
    79:79:int dgetGamePort() -> CDgV
    85:85:java.lang.String dgetGameAddress() -> MBCY
    91:91:react.glang.GList dgetConnectedPlayers() -> eXgw
    97:97:react.glang.GList dgetActions() -> lTkj
    103:103:react.glang.GList dgetSamplers() -> ntdb
react.remote.server.packet.ComputedFrame -> UtTf:
    react.glang.GMap values -> EToa
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> FNKC
    28:36:void fromBytes(react.gnet.streams.ISS) -> FNKC
    40:40:react.glang.GMap getValues() -> LPMr
    45:46:void setValues(react.glang.GMap) -> vtHI
react.remote.server.packet.SPacketOk -> ogMb:
    boolean ok -> ndvQ
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNKC
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNKC
    38:38:boolean isOk() -> SUCN
    43:44:void setOk(boolean) -> GrqA
react.remote.server.packet.SPacketSendFrames -> hkJR:
    react.glang.GMap frames -> hSDl
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> FNKC
    36:44:void fromBytes(react.gnet.streams.ISS) -> FNKC
    48:48:react.glang.GMap getFrames() -> hsbV
    53:54:void setFrames(react.glang.GMap) -> vACT
react.remote.server.packet.SPacketSendInfo -> BcmP:
    react.remote.server.ServerInfo info -> HDhL
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNKC
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNKC
    38:38:react.remote.server.ServerInfo getInfo() -> ObIr
    43:44:void setInfo(react.remote.server.ServerInfo) -> FNKC
react.remote.server.packet.SPacketSendToken -> OXqF:
    java.lang.String token -> SgIM
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> FNKC
    33:34:void fromBytes(react.gnet.streams.ISS) -> FNKC
    38:38:java.lang.String getToken() -> Gjre
    43:44:void setToken(java.lang.String) -> CEBE
react.remote.server.packet.ServerPacket -> RPws:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> FNKC
    void fromBytes(react.gnet.streams.ISS) -> FNKC
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> ndJy
    42:42:java.lang.String getPacketName() -> aUTu
react.remote.server.packet.ServerPacketType -> PJrP:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> bHad
    react.remote.server.packet.ServerPacketType SEND_INFO -> hRcm
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> feny
    react.remote.server.packet.ServerPacketType OK -> xrtX
    react.remote.server.packet.ServerPacketType[] $VALUES -> DcNu
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> FWGr:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleAsyncQueue$1 -> FWGr$1:
    react.sampler.SampleAsyncQueue this$0 -> LHbq
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleChunkTime -> IXAN:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleChunkTime$1 -> IXAN$1:
    react.sampler.SampleChunkTime this$0 -> ffPV
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleChunksLoaded -> MRll:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleChunksLoaded$1 -> MRll$1:
    react.sampler.SampleChunksLoaded this$0 -> WbTl
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleChunksLoadedPerSecond -> dgQW:
    react.gmath.Average a -> loqg
    react.graph.IFormatter formatter -> nBkE
    16:29:void <init>() -> <init>
    34:40:void construct() -> URGl
    45:47:void sample() -> nInI
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleChunksLoadedPerSecond$1 -> dgQW$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> OtOu
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> HBoM
react.sampler.SampleEntitiesDrops -> lDUR:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleEntitiesDrops$1 -> lDUR$1:
    react.sampler.SampleEntitiesDrops this$0 -> LYdj
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleEntitiesLiving -> qvIB:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleEntitiesLiving$1 -> qvIB$1:
    react.sampler.SampleEntitiesLiving this$0 -> EoCi
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleEntitiesTiles -> SwCI:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleEntitiesTiles$1 -> SwCI$1:
    react.sampler.SampleEntitiesTiles this$0 -> sRbi
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleEntitiesTotal -> imoi:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleEntitiesTotal$1 -> imoi$1:
    react.sampler.SampleEntitiesTotal this$0 -> IjOB
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleEntityDroppedTicks -> QEgg:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleEntityDroppedTicks$1 -> QEgg$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> yBrX
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleEntityTime -> OiuO:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleEntityTime$1 -> OiuO$1:
    react.sampler.SampleEntityTime this$0 -> cmgt
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleEntityTimeLock -> nuOJ:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleEntityTimeLock$1 -> nuOJ$1:
    react.sampler.SampleEntityTimeLock this$0 -> UJmS
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleExplosionTime -> VoJj:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleExplosionTime$1 -> VoJj$1:
    react.sampler.SampleExplosionTime this$0 -> bPqt
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleFluidPerSecond -> Plwm:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleFluidPerSecond$1 -> Plwm$1:
    react.sampler.SampleFluidPerSecond this$0 -> cSwu
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleFluidPerTick -> lvxT:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    46:53:void sample() -> nInI
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleFluidPerTick$1 -> lvxT$1:
    react.sampler.SampleFluidPerTick this$0 -> wEaI
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleFluidTickTime -> DivK:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleFluidTickTime$1 -> DivK$1:
    react.sampler.SampleFluidTickTime this$0 -> MBwh
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleFluidTickUtilization -> ArMa:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    46:53:void sample() -> nInI
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleFluidTickUtilization$1 -> ArMa$1:
    react.sampler.SampleFluidTickUtilization this$0 -> grHR
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleHopperPerSecond -> Wqld:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleHopperPerSecond$1 -> Wqld$1:
    react.sampler.SampleHopperPerSecond this$0 -> lyGQ
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleHopperPerTick -> qvGk:
    react.graph.IFormatter formatter -> nBkE
    19:29:void <init>() -> <init>
    34:40:void construct() -> URGl
    47:54:void sample() -> nInI
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleHopperPerTick$1 -> qvGk$1:
    react.sampler.SampleHopperPerTick this$0 -> tUhw
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleHopperTickTime -> says:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleHopperTickTime$1 -> says$1:
    react.sampler.SampleHopperTickTime this$0 -> kKOh
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleHopperTickUtilization -> KUVo:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    46:53:void sample() -> nInI
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleHopperTickUtilization$1 -> KUVo$1:
    react.sampler.SampleHopperTickUtilization this$0 -> FXVm
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleMemoryAllocated -> NUoL:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleMemoryAllocated$1 -> NUoL$1:
    react.sampler.SampleMemoryAllocated this$0 -> MBxP
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleMemoryAllocationPerSecond -> GjmM:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleMemoryAllocationPerSecond$1 -> GjmM$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> WkIX
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleMemoryFree -> WOgo:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleMemoryFree$1 -> WOgo$1:
    react.sampler.SampleMemoryFree this$0 -> rqgG
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleMemoryMax -> CgRY:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleMemoryMax$1 -> CgRY$1:
    react.sampler.SampleMemoryMax this$0 -> veBN
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleMemoryUse -> jycS:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleMemoryUse$1 -> jycS$1:
    react.sampler.SampleMemoryUse this$0 -> Qhvg
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SamplePhysicsTickTime -> bGVs:
    react.graph.IFormatter formatter -> nBkE
    18:27:void <init>() -> <init>
    32:38:void construct() -> URGl
    43:44:void sample() -> nInI
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SamplePhysicsTickTime$1 -> bGVs$1:
    react.sampler.SamplePhysicsTickTime this$0 -> FOem
    20:20:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> HBoM
react.sampler.SampleRedstonePerSecond -> ECDw:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleRedstonePerSecond$1 -> ECDw$1:
    react.sampler.SampleRedstonePerSecond this$0 -> wFAX
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleRedstonePerTick -> rFEW:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    46:53:void sample() -> nInI
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleRedstonePerTick$1 -> rFEW$1:
    react.sampler.SampleRedstonePerTick this$0 -> lhEL
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleRedstoneTickTime -> bGWp:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleRedstoneTickTime$1 -> bGWp$1:
    react.sampler.SampleRedstoneTickTime this$0 -> JJqB
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleRedstoneTickUtilization -> Plvl:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    46:53:void sample() -> nInI
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleRedstoneTickUtilization$1 -> Plvl$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> twki
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleSyncQueue -> tnMv:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleSyncQueue$1 -> tnMv$1:
    react.sampler.SampleSyncQueue this$0 -> SVLh
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleTickTime -> yAgl:
    react.graph.IFormatter formatter -> nBkE
    react.gmath.Average aa -> Bmkf
    17:29:void <init>() -> <init>
    34:40:void construct() -> URGl
    45:47:void sample() -> nInI
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleTickTime$1 -> yAgl$1:
    react.sampler.SampleTickTime this$0 -> BLJE
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> HBoM
react.sampler.SampleTickUtilization -> JcUp:
    react.graph.IFormatter formatter -> nBkE
    react.gmath.Average aa -> Bmkf
    17:29:void <init>() -> <init>
    34:40:void construct() -> URGl
    45:47:void sample() -> nInI
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleTickUtilization$1 -> JcUp$1:
    react.sampler.SampleTickUtilization this$0 -> Ajhd
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> HBoM
react.sampler.SampleTicksPerSecond -> DPcP:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleTicksPerSecond$1 -> DPcP$1:
    react.sampler.SampleTicksPerSecond this$0 -> aEan
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleTileDroppedTicks -> pGnf:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleTileDroppedTicks$1 -> pGnf$1:
    react.sampler.SampleTileDroppedTicks this$0 -> VWCk
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleTileTime -> mqit:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleTileTime$1 -> mqit$1:
    react.sampler.SampleTileTime this$0 -> bbVb
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.sampler.SampleTileTimeLock -> nIxk:
    react.graph.IFormatter formatter -> nBkE
    19:28:void <init>() -> <init>
    33:39:void construct() -> URGl
    44:45:void sample() -> nInI
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> UQgN
react.sampler.SampleTileTimeLock$1 -> nIxk$1:
    react.sampler.SampleTileTimeLock this$0 -> dOKM
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> HBoM
react.security.checkpoints.SecurityCheckpointAlpha -> MtpB:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> SLRD
    78:148:void doScan(java.lang.Runnable) -> VDGg
    152:181:byte[] readResource(java.io.File,java.lang.String) -> FNKC
    186:217:react.glang.GMap scan(java.io.File) -> VDGg
    33:33:byte[] access$000(java.io.File,java.lang.String) -> VDGg
react.security.checkpoints.SecurityCheckpointAlpha$1 -> MtpB$1:
    java.lang.Runnable val$r -> Iino
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> MtpB$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> Uubn
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> xPFw:
    java.lang.String ip -> Xdxq
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> XdNX:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> XdNX$1:
    java.io.File val$f -> hdGm
    react.security.locks.SecurityLockAlpha this$0 -> HxNn
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> tmqM:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> lmxH
react.slate.PhantomSlate -> rgkH:
    react.glang.GList lines -> lpSu
    react.glang.GList viewers -> cdxp
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> IjPi
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> HTcC
    44:45:void set(int,java.lang.String) -> VDGg
    50:51:void setLines(react.glang.GList) -> AhmN
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> KMDj
    91:95:void addViewer(org.bukkit.entity.Player) -> lmxH
    100:102:void removeViewer(org.bukkit.entity.Player) -> OjEp
    107:107:react.glang.GList getViewers() -> jGDF
    113:113:boolean isViewing(org.bukkit.entity.Player) -> TyTr
    119:120:void addLine(java.lang.String) -> uxrY
    125:126:void clearLines() -> Ubxc
react.slate.Slate -> GYnb:
    void build() -> KMDj
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> HTcC
    void set(int,java.lang.String) -> VDGg
    void setLines(react.glang.GList) -> AhmN
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> lmxH
    void addLine(java.lang.String) -> uxrY
    void clearLines() -> Ubxc
    void removeViewer(org.bukkit.entity.Player) -> OjEp
    react.glang.GList getViewers() -> jGDF
    boolean isViewing(org.bukkit.entity.Player) -> TyTr
    void update() -> update
react.slate.SlateUtil -> afYy:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> gEii
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> fCHI
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> FNKC
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> VDGg
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> vtHI
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> FNKC
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> FNKC
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> VDGg
    186:196:java.lang.String convertJSON(java.lang.String) -> vjtI
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> VDGg
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> FNKC
react.surge.Main -> pXtI:
    react.glang.GList plugins -> cnJu
    react.glang.GMap pluginInstances -> lVbB
    react.glang.GList controllerSet -> esov
    react.glang.GMap anchors -> oVya
    react.glang.GList classes -> XCXD
    java.lang.reflect.Field nsField -> mHbt
    java.lang.reflect.Field thField -> fTsT
    react.glang.GList tracks -> riXR
    long nsf -> xIGI
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> lLgg
    62:81:long getNanoSync() -> PeKm
    86:87:void requestResetNanos() -> lnkO
    91:99:void requestReload() -> lDXG
    105:114:void requestReload(java.lang.Runnable) -> vtHI
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> FNKC
    210:252:void onStop() -> QxpH
    258:258:void onPostInit() -> AOng
    264:264:void onPreInit() -> VMJe
    268:279:void shutDownAmps() -> CgWP
    283:492:void initializeAmps() -> Dahj
    497:538:void doScan() -> OYWg
    542:564:void scanForPoolDefiners() -> jyfd
    568:584:void scanForRawEvents() -> YUud
    588:604:void scanForDynamicTrack() -> Vnod
    608:629:void scanForAmps() -> XuWF
    634:645:void onTick() -> avpp
react.surge.Main$1 -> pXtI$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> MtrX:
    react.surge.control.AmpedPlugin plugin -> kmUJ
    boolean connected -> connected
    int masterTask -> NqRQ
    java.lang.Runnable onReload -> fLbd
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> Thhv
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> qeMU
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> FNKC
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> FNKC
    123:124:void stopTask(int) -> nInI
    128:128:react.surge.control.AmpedPlugin getPlugin() -> DsNI
    133:133:int getMasterTask() -> pYYO
    138:138:java.lang.Runnable getOnReload() -> vRXv
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> FNKC
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> URGl
    158:159:void setOnReload(java.lang.Runnable) -> vACT
    67:67:void access$0(react.surge.PluginAmp) -> FNKC
react.surge.PluginAmp$1 -> MtrX$1:
    react.surge.PluginAmp this$0 -> vudd
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> MtrX$2:
    react.surge.PluginAmp this$0 -> vudd
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> MtrX$3:
    react.surge.PluginAmp this$0 -> vudd
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> rgjt:
    react.surge.PluginAmp amp -> XLJy
    react.glang.GList tickComponents -> HELy
    react.glang.GList atickComponents -> IPaH
    react.surge.sched.TaskManager taskmgr -> xrxs
    react.surge.hotload.HotloadManager hotloadmgr -> UBbK
    java.lang.Thread mainThread -> lWFA
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> FNKC
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> Yfai
    44:44:java.io.File folder() -> PvPU
    49:51:java.io.File getPluginJarFile() -> QEmc
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> vACT
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> DPjN
    74:74:react.glang.GList getTickComponents() -> WqsT
    79:79:react.glang.GList getAsyncTickComponents() -> RcED
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> FNKC
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> VDGg
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> VDGg
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> anoX
    126:126:boolean hasAmp() -> MApb
    131:131:react.surge.PluginAmp getAmp() -> qJxV
    136:136:react.surge.sched.TaskManager getTaskManager() -> DXxg
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> JIiO
react.surge.cluster.Cluster -> DYWM:
    react.surge.cluster.ClusterType type -> GIyk
    java.lang.Object t -> hQye
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> DPiD
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> aCus:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> FhMy:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> LaOP:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> iKmm:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> VUYu:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> ObHF:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> sIKU:
    react.surge.cluster.ClusterType INT -> nnMX
    react.surge.cluster.ClusterType BOOLEAN -> jsBd
    react.surge.cluster.ClusterType STRING -> PvxL
    react.surge.cluster.ClusterType STRING_LIST -> mPwC
    react.surge.cluster.ClusterType DOUBLE -> KFFg
    react.surge.cluster.ClusterType LONG -> QFuD
    react.surge.cluster.ClusterType[] ENUM$VALUES -> BwBG
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> jFaI:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> sIvS
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> FNKC
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> FNKC
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> MmFR
react.surge.cluster.ConfigurationDataOutput -> KCwy:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> VDGg
react.surge.cluster.DataCluster -> sIKa:
    react.glang.GMap clusters -> rXUb
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> Pumt
    29:33:void fromJson(react.json.JSONObject) -> AGKY
    37:44:react.json.JSONObject toJson() -> sYoh
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> CNGk
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> FNKC
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> WWlt
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> srmk
    194:195:void set(java.lang.String,int) -> AGKY
    199:200:void set(java.lang.String,boolean) -> vtHI
    204:205:void set(java.lang.String,double) -> vtHI
    209:210:void set(java.lang.String,long) -> vtHI
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> FNKC
react.surge.cluster.ICluster -> SmsU:
    react.surge.cluster.ClusterType getType() -> DPiD
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> prfS:
react.surge.cluster.IDataInput -> LPLK:
    react.surge.cluster.DataCluster read(java.io.File) -> vtHI
react.surge.cluster.IDataOutput -> ebDu:
    void write(react.surge.cluster.DataCluster,java.io.File) -> FNKC
react.surge.cluster.Key -> DYVD:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> KUXs:
    int value() -> value
react.surge.cluster.KeyStore -> JsxY:
react.surge.cluster.ReflectedConfigurationException -> vARf:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> bPKD:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> vtHI
react.surge.cluster.YamlDataOutput -> gyLt:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> FNKC
react.surge.collection.GSound -> VeyQ:
    java.lang.String sound -> wNRy
    org.bukkit.Sound iSound -> OlDO
    java.lang.Float volume -> vdbM
    java.lang.Float pitch -> lxgX
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> HTOq
    61:72:void play(org.bukkit.Location) -> AGKY
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> FNKC
    93:93:java.lang.String getSound() -> GQbH
    98:99:void setSound(java.lang.String) -> MtdB
    103:103:org.bukkit.Sound getiSound() -> XSSS
    108:109:void setiSound(org.bukkit.Sound) -> FNKC
    113:113:java.lang.Float getVolume() -> ySPa
    118:119:void setVolume(java.lang.Float) -> FNKC
    123:123:java.lang.Float getPitch() -> hIOT
    128:129:void setPitch(java.lang.Float) -> VDGg
react.surge.control.AmpedPlugin -> PvKX:
    react.glang.GList controllers -> bHfX
    react.gconcurrent.ParallelPoolManager pp -> suJw
    react.surge.server.CoreTickThread ctt -> JTDU
    24:27:void <init>() -> <init>
    void doScan() -> OYWg
    long getNanoSync() -> PeKm
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> VLlU
    107:108:void registerController(react.surge.control.IController) -> FNKC
    113:124:void onTick() -> avpp
    129:129:java.lang.String getTickName() -> YwkC
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> opFq
    141:256:void destroyOldThreads() -> bjAm
    void onControllerRegistry() -> lLgg
    void onStart(react.surge.util.Protocol) -> FNKC
    void onStop() -> QxpH
    void onPostInit() -> AOng
    void onPreInit() -> VMJe
react.surge.control.AmpedPlugin$1 -> PvKX$1:
    react.surge.control.AmpedPlugin this$0 -> JKRi
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> nSEB
react.surge.control.AmpedPlugin$2 -> PvKX$2:
    react.surge.control.AmpedPlugin this$0 -> JKRi
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> QFJE:
react.surge.control.Controller -> uOOv:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> LrOf:
react.surge.control.Enable -> qSeR:
react.surge.control.IController -> URVS:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> mGXk:
react.surge.control.Plugin -> gVkn:
react.surge.control.SurgePlugin -> Xtsf:
    void onStart(react.surge.util.Protocol) -> FNKC
    void onStop() -> QxpH
    void onPostInit() -> AOng
    void onPreInit() -> VMJe
    void onControllerRegistry() -> lLgg
    void registerController(react.surge.control.IController) -> FNKC
    react.glang.GList getControllers() -> VLlU
    react.gconcurrent.ParallelPoolManager getThreadPool() -> opFq
react.surge.hotload.HotloadManager -> jqWg:
    react.glang.GMap filemods -> XLJk
    react.glang.GMap filesizes -> GBIk
    react.glang.GMap fileacts -> raIn
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> FNKC
    35:38:void untrack(java.io.File) -> vACT
    42:45:void untrackall() -> APRG
    50:86:void onTick() -> avpp
    91:91:java.lang.String getTickName() -> YwkC
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> FNKC
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> VDGg
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> vtHI
react.surge.hotload.HotloadManager$1 -> jqWg$1:
    react.surge.hotload.HotloadManager this$0 -> xHhI
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> dEQv:
    boolean init -> IjTw
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> oybt
    java.lang.Class IChatBaseComponent -> VhJX
    java.lang.Class ChatSerializer -> TPbR
    java.lang.Class PacketPlayOutPlayerInfo -> ioaU
    java.lang.Class PlayerInfoData -> qngh
    java.lang.Class EnumPlayerInfoAction -> mkLm
    java.lang.Class GameProfile -> KNXa
    java.lang.Class EnumGamemode -> tfoA
    java.lang.Class TileEntitySkull -> FaME
    java.lang.Class LoadingCache -> huOG
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> NgVj:
    react.surge.nms.NMSX bountifulAPI -> Sfpn
    boolean useOldMethods -> hRjj
    java.lang.String nmsver -> sRiy
    java.lang.Object eTimes -> DtYD
    java.lang.Object eTitle -> HfrR
    java.lang.Object eSubtitle -> lxjM
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> FNKC
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> VUJt
    75:89:java.lang.Class getCBClass(java.lang.String) -> JtLB
    96:104:java.lang.Object serializeChat(java.lang.String) -> UQgN
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> FNKC
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> FNKC
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> jXGG
    151:151:java.lang.String craftPackage() -> IykW
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> FNKC
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> FNKC
    197:207:java.lang.Class getNMSClass(java.lang.String) -> OPVV
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> FNKC
    279:280:void clearTitle(org.bukkit.entity.Player) -> RsOY
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> VDGg
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> FNKC
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> FNKC
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> clQr
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> srmk
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> Usgo
    434:447:int ping(org.bukkit.entity.Player) -> OYEC
react.surge.nms.NMSX$1 -> NgVj$1:
    org.bukkit.entity.Player val$player -> MLAP
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> NgVj$2:
    org.bukkit.entity.Player val$player -> MLAP
    java.lang.String val$message -> ptTf
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> ogTy:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> dwwT
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> FNKC
    68:82:void clearTitle(org.bukkit.entity.Player) -> RsOY
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> FNKC
react.surge.nms.PacketUtil$V -> ogTy$FNKC:
    react.surge.nms.PacketUtil$V R17 -> FPJD
    react.surge.nms.PacketUtil$V R18 -> HpCB
    react.surge.nms.PacketUtil$V R19 -> riXt
    react.surge.nms.PacketUtil$V R111 -> IHQW
    react.surge.nms.PacketUtil$V R110 -> RtnY
    react.surge.nms.PacketUtil$V R112 -> kBbF
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> IbCr
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> yAmW:
    java.lang.String title -> title
    java.lang.String subTitle -> lxiV
    java.lang.String action -> action
    java.lang.Integer fadeIn -> EUWS
    java.lang.Integer fadeOut -> Ypqt
    java.lang.Integer stayTime -> wgey
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> aviW
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> AOpc
    79:80:void setSubTitle(java.lang.String) -> nInI
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> gpbj
    99:100:void setFadeIn(java.lang.Integer) -> vtHI
    104:104:java.lang.Integer getFadeOut() -> bGaJ
    109:110:void setFadeOut(java.lang.Integer) -> vACT
    114:114:java.lang.Integer getStayTime() -> EvRf
    119:120:void setStayTime(java.lang.Integer) -> AGKY
react.surge.nms.VersionBukkit -> CpHh:
    react.surge.nms.VersionBukkit VU -> GtoV
    react.surge.nms.VersionBukkit V7 -> fCrm
    react.surge.nms.VersionBukkit V8 -> UCCe
    react.surge.nms.VersionBukkit V9 -> LIKH
    react.surge.nms.VersionBukkit V11 -> xawq
    react.surge.nms.VersionBukkit V111 -> AYlV
    react.surge.nms.VersionBukkit V112 -> UlvT
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> VEiB
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> agBD
    27:32:boolean uc() -> GshA
    37:67:react.surge.nms.VersionBukkit get() -> iLVJ
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> hsbV:
    void burst(java.lang.Object) -> WNxk
    void setTimeLock(double) -> OjEp
    double getEstimatedTimeUse() -> ylfR
    int flush() -> RcGD
    int flush(react.gbench.Profiler) -> FNKC
    void queue(java.lang.Object) -> lmxH
    void queue(java.util.List) -> vtHI
    void queue(java.lang.Object[]) -> FNKC
react.surge.sched.ICancellable -> wCwc:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> fShx:
    void onTick() -> avpp
    java.lang.String getTickName() -> YwkC
react.surge.sched.ITask -> pYVN:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> WidR
    java.lang.String getName() -> getName
    double getComputeTime() -> IWjj
    double getTotalComputeTime() -> mOqM
    double getActiveTime() -> gqDW
    boolean hasCompleted() -> qeOU
react.surge.sched.Task -> ntrP:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> oWbK
    double computeTime -> agjr
    double totalComputeTime -> lEhF
    double activeTime -> jaeD
    boolean completed -> completed
    react.gbench.Profiler profiler -> dqUO
    react.gbench.Profiler activeProfiler -> WYlj
    int ticks -> SodU
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> vACT
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> WidR
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> IWjj
    150:150:boolean hasCompleted() -> qeOU
    156:156:double getTotalComputeTime() -> mOqM
    162:162:double getActiveTime() -> gqDW
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> vtHI
    15:15:void access$1(react.surge.sched.Task,boolean) -> FNKC
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> vACT
    14:14:void access$3(react.surge.sched.Task,double) -> FNKC
    12:12:void access$4(react.surge.sched.Task,double) -> VDGg
    14:14:double access$5(react.surge.sched.Task) -> AGKY
    13:13:void access$6(react.surge.sched.Task,double) -> vtHI
    13:13:double access$7(react.surge.sched.Task) -> srmk
    12:12:double access$8(react.surge.sched.Task) -> ykmo
react.surge.sched.Task$1 -> ntrP$1:
    react.surge.sched.Task this$0 -> oXBq
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> ntrP$2:
    react.surge.sched.Task this$0 -> oXBq
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> ntrP$3:
    react.surge.sched.Task this$0 -> oXBq
    int val$total -> hmAX
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> Gjre:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> oWbK
    double computeTime -> agjr
    double totalComputeTime -> lEhF
    double activeTime -> jaeD
    boolean completed -> completed
    react.gbench.Profiler profiler -> dqUO
    react.gbench.Profiler activeProfiler -> WYlj
    int ticks -> SodU
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> vACT
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> WidR
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> IWjj
    101:101:boolean hasCompleted() -> qeOU
    107:107:double getTotalComputeTime() -> mOqM
    113:113:double getActiveTime() -> gqDW
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> FNKC
    12:12:void access$1(react.surge.sched.TaskLater,double) -> FNKC
    13:13:double access$2(react.surge.sched.TaskLater) -> VDGg
    12:12:double access$3(react.surge.sched.TaskLater) -> vtHI
    13:13:void access$4(react.surge.sched.TaskLater,double) -> VDGg
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> vACT
    14:14:double access$6(react.surge.sched.TaskLater) -> AGKY
    14:14:void access$7(react.surge.sched.TaskLater,double) -> vtHI
react.surge.sched.TaskLater$1 -> Gjre$1:
    react.surge.sched.TaskLater this$0 -> oNqQ
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> XSQg:
    react.glang.GList tasks -> APcF
    react.glang.GMap taskProfiles -> ifqq
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> FNKC
    25:35:void onTick() -> avpp
    39:40:void putFinishingTask(react.surge.sched.ITask) -> VDGg
    44:53:void putTask(react.surge.sched.ITask) -> vtHI
    58:58:java.lang.String getTickName() -> YwkC
    63:63:react.glang.GList getTasks() -> xYBH
    68:68:react.glang.GMap getTaskProfiles() -> YNIL
react.surge.sched.TaskProfile -> ObIr:
    double activeTime -> jaeD
    double computeTickTime -> kJuT
    double computeTime -> agjr
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> gqDW
    23:24:void setActiveTime(double) -> TyTr
    28:28:double getComputeTickTime() -> gEnj
    33:34:void setComputeTickTime(double) -> HTOq
    38:38:double getComputeTime() -> IWjj
    43:44:void setComputeTime(double) -> RsOY
react.surge.server.AsyncTick -> SCak:
react.surge.server.CPS -> WOnJ:
    react.glang.GMap keys -> rXYx
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> URGl
    46:99:void scan() -> NEXT
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> vtHI
react.surge.server.CoreTickThread -> VCya:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> wUYd:
    long memoryFree -> jXre
    long memoryUsed -> ebvX
    long memoryMax -> dyfK
    long lastMemoryUsed -> Cpvb
    long memoryUsedAfterGC -> diDt
    long allocated -> LHmM
    long collected -> jGqb
    long collections -> IHRu
    long sms -> foIq
    long memoryAllocatedPerTick -> iDmc
    long memoryCollectedPerTick -> pARR
    long memoryFullyAllocatedPerTick -> IjVV
    long mah -> raJq
    long mahs -> PnjQ
    22:39:void <init>() -> <init>
    void onAllocationSet() -> WOqi
    46:107:void run() -> run
    111:111:long getMemoryFree() -> Vnqk
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> psMR
    126:126:long getLastMemoryUsed() -> qTMR
    131:131:long getMemoryUsedAfterGC() -> GHtQ
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> xYAW
    146:146:long getCollections() -> KMOP
    151:151:long getSms() -> LPQn
    156:156:long getMemoryAllocatedPerTick() -> HCdm
    161:161:long getMemoryCollectedPerTick() -> BliU
    166:166:long getMemoryFullyAllocatedPerTick() -> ycry
    171:171:long getMah() -> QqCp
    176:176:long getMahs() -> rxqf
react.surge.server.SuperSampler -> oDqI:
    react.gmath.Average ticksPerSecondL -> PCvF
    react.gmath.Average tickTimeL -> nLMd
    react.gmath.Average mahL -> MnQr
    double ticksPerSecond -> pHmA
    double ticksPerSecondRaw -> ahKI
    double tickTime -> PDWP
    double tickTimeRaw -> AsbG
    boolean running -> running
    boolean frozen -> hdOL
    double tickUtilizationRaw -> JBdt
    double tickUtilization -> lhKH
    double leftoverTickTime -> ywAV
    long memoryUse -> lFHG
    long memoryAllocated -> iwsB
    long memoryCollected -> IsGk
    long mahs -> PnjQ
    int totalChunks -> qMFc
    int totalEntities -> JBeY
    int totalDrops -> tUnS
    int totalTiles -> uQAl
    int totalLiving -> yLMF
    int chunksLoaded -> iwqj
    int chunksUnloaded -> SocX
    react.surge.server.WorldMonitor worldMonitor -> qDTd
    react.surge.server.TPSMonitor tpsMonitor -> XfAd
    react.surge.server.MemoryMonitor memoryMonitor -> kSeH
    java.lang.StackTraceElement[] lockStack -> Iium
    react.glang.GMap spikes -> uGYV
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> avpp
    154:154:java.lang.String getTickName() -> YwkC
    159:159:react.gmath.Average getTicksPerSecondL() -> FWRP
    164:164:double getTicksPerSecond() -> tKhJ
    169:169:double getTicksPerSecondRaw() -> LXbi
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> MuXd
    184:184:react.gmath.Average getTickTimeL() -> tCcA
    189:189:double getTickTime() -> cmGT
    194:194:double getTickTimeRaw() -> mYAd
    199:199:double getTickUtilizationRaw() -> xidk
    204:204:double getTickUtilization() -> LHEK
    209:209:double getLeftoverTickTime() -> qCNS
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> GHvB
    219:219:long getMemoryUse() -> gpeX
    224:224:long getMemoryAllocated() -> UInE
    229:229:long getMemoryCollected() -> Nols
    234:234:react.gmath.Average getMahL() -> mHCd
    239:239:long getMahs() -> rxqf
    244:244:int getTotalChunks() -> CDyI
    249:249:int getTotalEntities() -> IiPF
    254:254:int getTotalDrops() -> uFgv
    259:259:int getTotalTiles() -> RcHh
    264:264:int getTotalLiving() -> teiG
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> WaWD
    274:274:int getChunksLoaded() -> uXKQ
    279:279:int getChunksUnloaded() -> vknO
    284:285:void setTicksPerSecondL(react.gmath.Average) -> FNKC
    289:290:void setTickTimeL(react.gmath.Average) -> VDGg
    294:295:void setMahL(react.gmath.Average) -> vtHI
    299:300:void setTicksPerSecond(double) -> FpNV
    304:305:void setTicksPerSecondRaw(double) -> OYEC
    309:310:void setTickTime(double) -> aviW
    314:315:void setTickTimeRaw(double) -> uyTI
    319:320:void setRunning(boolean) -> HBoM
    324:325:void setTickUtilizationRaw(double) -> VwKQ
    329:330:void setTickUtilization(double) -> Oidt
    334:335:void setLeftoverTickTime(double) -> kcDn
    339:340:void setMemoryUse(long) -> OjEp
    344:345:void setMemoryAllocated(long) -> TyTr
    349:350:void setMemoryCollected(long) -> HTOq
    354:355:void setMahs(long) -> RsOY
    359:360:void setTotalChunks(int) -> uOCY
    364:365:void setTotalEntities(int) -> tCNq
    369:370:void setTotalDrops(int) -> gNLB
    374:375:void setTotalTiles(int) -> CDar
    379:380:void setTotalLiving(int) -> dMRJ
    384:385:void setChunksLoaded(int) -> xGKT
    389:390:void setChunksUnloaded(int) -> rNIq
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> FNKC
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> FNKC
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> FNKC
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> yArc
    419:419:react.glang.GMap getSpikes() -> vbla
    31:31:void access$0(react.surge.server.SuperSampler,int) -> FNKC
    33:33:void access$1(react.surge.server.SuperSampler,int) -> VDGg
    34:34:void access$2(react.surge.server.SuperSampler,int) -> vtHI
    32:32:void access$3(react.surge.server.SuperSampler,int) -> vACT
    35:35:void access$4(react.surge.server.SuperSampler,int) -> AGKY
    36:36:void access$5(react.surge.server.SuperSampler,int) -> srmk
    37:37:void access$6(react.surge.server.SuperSampler,int) -> ykmo
    19:19:void access$7(react.surge.server.SuperSampler,double) -> FNKC
    21:21:void access$8(react.surge.server.SuperSampler,double) -> VDGg
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> FNKC
    19:19:double access$10(react.surge.server.SuperSampler) -> VDGg
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> vtHI
    21:21:double access$12(react.surge.server.SuperSampler) -> vACT
    18:18:void access$13(react.surge.server.SuperSampler,double) -> vtHI
    20:20:void access$14(react.surge.server.SuperSampler,double) -> vACT
    24:24:void access$15(react.surge.server.SuperSampler,double) -> AGKY
    20:20:double access$16(react.surge.server.SuperSampler) -> AGKY
    25:25:void access$17(react.surge.server.SuperSampler,double) -> srmk
    25:25:double access$18(react.surge.server.SuperSampler) -> srmk
    26:26:void access$19(react.surge.server.SuperSampler,double) -> ykmo
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> FNKC
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> ykmo
    27:27:void access$22(react.surge.server.SuperSampler,long) -> FNKC
    28:28:void access$23(react.surge.server.SuperSampler,long) -> VDGg
    29:29:void access$24(react.surge.server.SuperSampler,long) -> vtHI
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> OHDS
    30:30:void access$26(react.surge.server.SuperSampler,long) -> vACT
react.surge.server.SuperSampler$1 -> oDqI$1:
    react.surge.server.SuperSampler this$0 -> gFwl
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> FNKC
react.surge.server.SuperSampler$2 -> oDqI$2:
    react.surge.server.SuperSampler this$0 -> gFwl
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> PCNa
    106:107:void onSpike() -> GITv
react.surge.server.SuperSampler$3 -> oDqI$3:
    react.surge.server.SuperSampler this$0 -> gFwl
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> WOqi
react.surge.server.TPSMonitor -> QyRB:
    double tickTimeMS -> JdiN
    double rawTicksPerSecond -> ekeq
    react.gbench.Profiler tickProfiler -> XLQe
    react.gbench.Profiler tickTimeProfiler -> mHlb
    boolean ticked -> Soev
    java.lang.Thread$State lastState -> veJT
    double actualTickTimeMS -> strI
    double ltt -> GuUY
    long lastTick -> pbYM
    boolean frozen -> hdOL
    java.lang.StackTraceElement[] lockedStack -> Npwl
    double lmsx -> UBhP
    23:40:void <init>() -> <init>
    void onTicked() -> PCNa
    void onSpike() -> GITv
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> FNKC
    160:160:double getTickTimeMS() -> rOAW
    165:165:double getRawTicksPerSecond() -> hRER
    170:170:react.gbench.Profiler getTickProfiler() -> EmcC
    175:175:boolean isTicked() -> ctxK
    180:181:void markTick() -> AGeT
    185:185:react.gbench.Profiler getTickTimeProfiler() -> sYtF
    190:190:java.lang.Thread$State getLastState() -> WXch
    195:195:double getActualTickTimeMS() -> cAtQ
    200:200:double getLtt() -> htGa
    205:205:long getLastTick() -> oDae
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> IXMX
react.surge.server.WorldMonitor -> IqXP:
    boolean chunksChanged -> EnnX
    boolean dropChanged -> YFcr
    boolean tileChanged -> gqoK
    boolean livingChanged -> AkRM
    boolean totalChanged -> XnUT
    boolean updated -> HDsT
    int totalChunks -> qMFc
    int totalDrops -> tUnS
    int totalTiles -> uQAl
    int totalLiving -> yLMF
    int totalEntities -> JBeY
    int chunksLoaded -> iwqj
    int chunksUnloaded -> SocX
    long ms -> DPjN
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> FNKC
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> VDGg
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> FNKC
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> FNKC
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> FNKC
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> FNKC
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> FNKC
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> FNKC
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> FNKC
    135:136:void doUpdate() -> gFQH
    140:191:void sample() -> nInI
    195:201:void sampleTotalCount() -> KVCW
    205:211:void sampleLivingCount() -> Gbiq
    215:251:void sampleTileCount() -> skXv
    255:261:void sampleDropCount() -> EKcA
    265:271:void sampleChunkCount() -> nmLD
react.surge.text.PhantomSpinner -> uORj:
    react.surge.text.ProgressSpinner s -> hRnp
    react.surge.text.ProgressSpinner c -> MnVN
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> DahP:
    java.lang.String[] chars -> NWfV
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> CWdr
    react.surge.text.ProgressSpinner NETWORK -> pJFU
    react.surge.text.ProgressSpinner CIRCLES -> Irha
    react.surge.text.ProgressSpinner RANDOMS -> Yyfp
    react.surge.text.ProgressSpinner MERGERS -> oqUd
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> Svml
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> RYoH:
    react.surge.util.Amounts SINGLE -> XwDh
    react.surge.util.Amounts DUAL -> vSgG
    react.surge.util.Amounts TRI -> jjVp
    react.surge.util.Amounts QUAD -> cmrK
    react.surge.util.Amounts HEX -> whLT
    react.surge.util.Amounts OCTA -> OJGV
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> rPJp
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> UYwl
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> wnjc:
    int value() -> value
react.surge.util.Area -> LPMr:
    org.bukkit.Location location -> IixH
    java.lang.Double radius -> vSel
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> FNKC
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> Blkv
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> srmk
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> ykmo
    109:109:boolean isWithin(org.bukkit.Location) -> OHDS
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> vACT
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> FNKC
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> JccY
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> CNMT
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> Usgo
    257:257:java.lang.Double getRadius() -> PTRv
    268:269:void setRadius(java.lang.Double) -> vtHI
    278:283:org.bukkit.Location random() -> LGfY
react.surge.util.Axis -> SUCN:
    react.surge.util.Axis X -> dWcm
    react.surge.util.Axis Y -> kBeS
    react.surge.util.Axis Z -> qeyR
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> YGDI
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> kuDW
    29:29:org.bukkit.util.Vector negative() -> JccV
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> SLRD:
    react.surge.util.BlastResistance BARRIER -> pRUa
    react.surge.util.BlastResistance BEDROCK -> xYlW
    react.surge.util.BlastResistance COMMAND -> XnSo
    react.surge.util.BlastResistance ENDER_PORTAL -> SxVk
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> AjrJ
    react.surge.util.BlastResistance ANVIL -> BKqh
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> cTca
    react.surge.util.BlastResistance OBSIDIAN -> FXaQ
    react.surge.util.BlastResistance ENDER_CHEST -> eAWh
    react.surge.util.BlastResistance WATER -> igWP
    react.surge.util.BlastResistance LAVA -> oWer
    react.surge.util.BlastResistance STATIONARY_WATER -> XTcu
    react.surge.util.BlastResistance DRAGON_EGG -> uHVa
    react.surge.util.BlastResistance ENDER_STONE -> dGFG
    react.surge.util.BlastResistance COAL_BLOCK -> BfFw
    react.surge.util.BlastResistance DIAMOND_BLOCK -> aWNY
    react.surge.util.BlastResistance EMERALD_BLOCK -> rOnJ
    react.surge.util.BlastResistance GOLD_BLOCK -> htuH
    react.surge.util.BlastResistance IRON_BLOCK -> Fqru
    react.surge.util.BlastResistance REDSTONE_BLOCK -> AIPw
    react.surge.util.BlastResistance BRICK -> tpFl
    react.surge.util.BlastResistance BRICK_STAIRS -> MUEm
    react.surge.util.BlastResistance HARD_CLAY -> Qibh
    react.surge.util.BlastResistance STONE -> GtwC
    react.surge.util.BlastResistance SMOOTH_BRICK -> NNwP
    react.surge.util.BlastResistance SMOOTH_STAIRS -> PLlk
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> ujYM
    react.surge.util.BlastResistance STONE_SLAB2 -> JSja
    react.surge.util.BlastResistance IRON_DOOR -> cDAm
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> sdRR
    react.surge.util.BlastResistance IRON_TRAPDOOR -> ymro
    react.surge.util.BlastResistance MOB_SPAWNER -> SNEV
    react.surge.util.BlastResistance WEB -> qDYe
    react.surge.util.BlastResistance DISPENSER -> stsJ
    react.surge.util.BlastResistance DROPPER -> mkQV
    react.surge.util.BlastResistance FURNACE -> tVSW
    react.surge.util.BlastResistance BURNING_FURNACE -> raOF
    react.surge.util.BlastResistance BEACON -> CGGo
    react.surge.util.BlastResistance COAL_ORE -> vlyf
    react.surge.util.BlastResistance COCOA -> QrRa
    react.surge.util.BlastResistance DIAMOND_ORE -> LRBP
    react.surge.util.BlastResistance EMERALD_ORE -> YFeI
    react.surge.util.BlastResistance FENCE -> SNFJ
    react.surge.util.BlastResistance FENCE_GATE -> jagX
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> KgpN
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> HwyG
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> WRDU
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> HpKj
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> xHoo
    react.surge.util.BlastResistance ACACIA_FENCE -> WRDP
    react.surge.util.BlastResistance BIRCH_FENCE -> gicC
    react.surge.util.BlastResistance DARK_OAK_FENCE -> BTgB
    react.surge.util.BlastResistance SPRUCE_FENCE -> VOBC
    react.surge.util.BlastResistance JUNGLE_FENCE -> GmIU
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> Ajtw
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> aqDR
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> vTKo
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> yKsM
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> UTNn
    react.surge.util.BlastResistance QUARTZ_STAIRS -> GRvD
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> GcwT
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> NOYv
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> cCdV
    react.surge.util.BlastResistance WOOD_STAIRS -> kTKr
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> SEVF
    react.surge.util.BlastResistance ACACIA_DOOR -> RmGN
    react.surge.util.BlastResistance BIRCH_DOOR -> dFek
    react.surge.util.BlastResistance DARK_OAK_DOOR -> WcCx
    react.surge.util.BlastResistance SPRUCE_DOOR -> BwLM
    react.surge.util.BlastResistance JUNGLE_DOOR -> DIjo
    react.surge.util.BlastResistance GOLD_ORE -> rPOo
    react.surge.util.BlastResistance HOPPER -> aySA
    react.surge.util.BlastResistance IRON_ORE -> eIiG
    react.surge.util.BlastResistance LAPIS_BLOCK -> AISy
    react.surge.util.BlastResistance LAPIS_ORE -> ifuy
    react.surge.util.BlastResistance QUARTZ_ORE -> apao
    react.surge.util.BlastResistance REDSTONE_ORE -> YGGt
    react.surge.util.BlastResistance TRAP_DOOR -> gibB
    react.surge.util.BlastResistance WOOD -> xIOb
    react.surge.util.BlastResistance CHEST -> Glfw
    react.surge.util.BlastResistance TRAPPED_CHEST -> twwa
    react.surge.util.BlastResistance WORKBENCH -> XLTt
    react.surge.util.BlastResistance CAULDRON -> iDvk
    react.surge.util.BlastResistance LOG -> cvjf
    react.surge.util.BlastResistance LOG_2 -> aOCD
    react.surge.util.BlastResistance BOOKSHELF -> sdVu
    react.surge.util.BlastResistance BANNER -> IPlp
    react.surge.util.BlastResistance STANDING_BANNER -> UnBk
    react.surge.util.BlastResistance WALL_BANNER -> xkVV
    react.surge.util.BlastResistance JACK_O_LANTERN -> XThR
    react.surge.util.BlastResistance MELON_BLOCK -> negr
    react.surge.util.BlastResistance SKULL -> OlQk
    react.surge.util.BlastResistance PUMPKIN -> ipKg
    react.surge.util.BlastResistance SIGN -> kBlW
    react.surge.util.BlastResistance SIGN_POST -> CypP
    react.surge.util.BlastResistance WALL_SIGN -> huXq
    react.surge.util.BlastResistance QUARTZ_BLOCK -> nTgE
    react.surge.util.BlastResistance NOTE_BLOCK -> KFPx
    react.surge.util.BlastResistance RED_SANDSTONE -> JTOh
    react.surge.util.BlastResistance SANDSTONE -> DlPj
    react.surge.util.BlastResistance WOOL -> bYsk
    react.surge.util.BlastResistance MONSTER_EGG -> VhTM
    react.surge.util.BlastResistance RAILS -> KyVL
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> JvRq
    react.surge.util.BlastResistance DETECTOR_RAIL -> Vpcj
    react.surge.util.BlastResistance POWERED_RAIL -> NhmA
    react.surge.util.BlastResistance CLAY -> urkt
    react.surge.util.BlastResistance DIRT -> kdmt
    react.surge.util.BlastResistance GRASS -> KFRG
    react.surge.util.BlastResistance GRAVEL -> ynWm
    react.surge.util.BlastResistance SPONGE -> XfJV
    react.surge.util.BlastResistance BREWING_STAND -> ubLA
    react.surge.util.BlastResistance STONE_BUTTON -> mcET
    react.surge.util.BlastResistance WOOD_BUTTON -> stwD
    react.surge.util.BlastResistance CAKE_BLOCK -> ELqB
    react.surge.util.BlastResistance ICE -> VyUd
    react.surge.util.BlastResistance PACKED_ICE -> BChK
    react.surge.util.BlastResistance LEVER -> BKwr
    react.surge.util.BlastResistance MYCEL -> grUW
    react.surge.util.BlastResistance PISTON_BASE -> AcIH
    react.surge.util.BlastResistance PISTON_EXTENSION -> cwNH
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> IsRj
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> TQOW
    react.surge.util.BlastResistance GOLD_PLATE -> JKag
    react.surge.util.BlastResistance IRON_PLATE -> dypE
    react.surge.util.BlastResistance STONE_PLATE -> AtLR
    react.surge.util.BlastResistance WOOD_PLATE -> UeTD
    react.surge.util.BlastResistance SAND -> FqyW
    react.surge.util.BlastResistance SOUL_SAND -> RJgy
    react.surge.util.BlastResistance CACTUS -> cLYS
    react.surge.util.BlastResistance LADDER -> fUbU
    react.surge.util.BlastResistance NETHERRACK -> nvla
    react.surge.util.BlastResistance GLASS -> OdCX
    react.surge.util.BlastResistance THIN_GLASS -> MwNo
    react.surge.util.BlastResistance STAINED_GLASS -> HNMX
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> mYul
    react.surge.util.BlastResistance GLOWSTONE -> FXhI
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> hKGm
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> cvmN
    react.surge.util.BlastResistance SEA_LANTERN -> cLYd
    react.surge.util.BlastResistance BED_BLOCK -> MKyt
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> NrAx
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> LYyH
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> yDGT
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> dhmV
    react.surge.util.BlastResistance LEAVES -> pIlj
    react.surge.util.BlastResistance LEAVES_2 -> MwMf
    react.surge.util.BlastResistance SNOW -> GRxU
    int br -> MKxh
    react.surge.util.BlastResistance[] ENUM$VALUES -> iEXv
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> esRb
    175:190:int get(org.bukkit.Material) -> FNKC
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> HTcC:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> ykmo
react.surge.util.C -> jGDF:
    react.surge.util.C BLACK -> EgEn
    react.surge.util.C DARK_BLUE -> Yynt
    react.surge.util.C DARK_GREEN -> mITv
    react.surge.util.C DARK_AQUA -> bjwR
    react.surge.util.C DARK_RED -> TbOk
    react.surge.util.C DARK_PURPLE -> QXeg
    react.surge.util.C GOLD -> FihV
    react.surge.util.C GRAY -> elRI
    react.surge.util.C DARK_GRAY -> cwLr
    react.surge.util.C BLUE -> xHre
    react.surge.util.C GREEN -> ExGk
    react.surge.util.C AQUA -> ARIa
    react.surge.util.C RED -> VNcj
    react.surge.util.C LIGHT_PURPLE -> rrVc
    react.surge.util.C YELLOW -> sdWu
    react.surge.util.C WHITE -> etae
    react.surge.util.C MAGIC -> rXce
    react.surge.util.C BOLD -> JnHG
    react.surge.util.C STRIKETHROUGH -> qffF
    react.surge.util.C UNDERLINE -> jPpA
    react.surge.util.C ITALIC -> mQhY
    react.surge.util.C RESET -> gXgn
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> PUfN
    char code -> FGgp
    boolean isFormat -> elSq
    java.lang.String toString -> bIWv
    java.util.Map BY_ID -> OBAw
    java.util.Map BY_CHAR -> IYba
    java.util.Map dyeChatMap -> PoYC
    java.util.Map chatHexMap -> gqyO
    java.util.Map dyeHexMap -> cUMV
    int[] $SWITCH_TABLE$surge$util$C -> xtJo
    react.surge.util.C[] ENUM$VALUES -> CFmn
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> wMRA
    378:378:java.lang.String hex() -> GtMQ
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> OHDS
    434:442:react.surge.util.C getByChar(java.lang.String) -> uOCY
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> VDGg
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> FNKC
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> VDGg
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> vtHI
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> tCNq
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> gNLB
    560:578:java.lang.String generateColorTable() -> dDyq
    588:588:org.bukkit.ChatColor chatColor() -> aoWD
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> Usgo
    632:679:byte getItemMeta() -> Gskw
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> mOsy
react.surge.util.C$1 -> jGDF$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> jGDF$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> jGDF$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> jGDF$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> jGDF$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> jGDF$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> jGDF$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> jGDF$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> jGDF$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> jGDF$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> jGDF$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> jGDF$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> jGDF$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> jGDF$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> jGDF$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> jGDF$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> jGDF$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> jGDF$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> jGDF$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> jGDF$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> jGDF$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> jGDF$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> Ubxc:
    double number -> EVHS
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> uySU
    23:25:react.surge.util.CDou add(double) -> YfbP
    30:32:react.surge.util.CDou sub(double) -> lnWu
    37:37:double get() -> get
    42:48:void circ() -> AYHR
react.surge.util.CMD -> gEii:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> YGOV
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> PTTH
    51:53:void execute(org.bukkit.command.CommandSender) -> vtHI
    60:77:void execute() -> execute
react.surge.util.CNum -> fCHI:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> jgtW
    23:25:react.surge.util.CNum add(int) -> SvVI
    30:32:react.surge.util.CNum sub(int) -> rMiT
    37:37:int get() -> get
    42:48:void circ() -> AYHR
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> XRaF
react.surge.util.Chunks -> lLgg:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> QNJe
    33:40:react.glang.GList getLoadedChunks() -> cBXL
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> VDGg
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> FNKC
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> FNKC
    98:98:boolean unload(org.bukkit.Chunk) -> AhmN
    114:124:int unload(react.glang.GList,boolean,boolean) -> FNKC
    138:138:int unload(react.glang.GList,boolean) -> FNKC
    150:150:int unload(react.glang.GList) -> eYEI
    166:166:boolean isLoaded(java.lang.String,int,int) -> FNKC
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> vtHI
    201:205:void load(react.glang.GList) -> GrqA
react.surge.util.Cuboid -> PeKm:
    java.lang.String worldName -> yKxj
    int x1 -> PVEc
    int y1 -> PVFG
    int z1 -> BoBQ
    int x2 -> JKcC
    int y2 -> gOvB
    int z2 -> vdqv
    int[] $SWITCH_TABLE$surge$util$Axis -> PgFr
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> HyAu
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> FNKC
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> vtHI
    93:93:boolean hasPlayers() -> IGON
    98:110:react.glang.GList getPlayers() -> SvXd
    115:166:react.glang.GList getEntities() -> KgFM
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> EBYT
    287:287:org.bukkit.Location getLowerNE() -> kdAX
    298:298:org.bukkit.Location getUpperSW() -> uFil
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> FyXg
    348:348:int getSizeY() -> rNau
    358:358:int getSizeZ() -> dDyA
    368:368:int getLowerX() -> mqwL
    378:378:int getLowerY() -> ghVP
    388:388:int getLowerZ() -> xqvP
    398:398:int getUpperX() -> xrVq
    408:408:int getUpperY() -> VMSB
    418:418:int getUpperZ() -> wLor
    428:438:org.bukkit.block.Block[] corners() -> Sekp
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> FNKC
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> VDGg
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> vtHI
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> vACT
    546:546:boolean contains(int,int,int) -> AGKY
    558:558:boolean contains(org.bukkit.block.Block) -> OHDS
    570:570:boolean contains(org.bukkit.Location) -> lwKC
    580:580:int volume() -> xHCY
    591:601:byte averageLightLevel() -> oEYE
    612:612:react.surge.util.Cuboid contract() -> AHGl
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> FNKC
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> VDGg
    708:715:boolean containsOnly(org.bukkit.Material) -> VDGg
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> FNKC
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> srmk
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> FNKC
    786:800:java.util.List getChunks() -> WrXw
    815:819:void fill(int,byte) -> FNKC
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> ytyK
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> HDKH
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> UlSO
react.surge.util.Cuboid$1 -> PeKm$1:
    react.surge.util.Cuboid this$0 -> bYxE
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> lwKC
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ykmo
react.surge.util.Cuboid$CuboidDirection -> PeKm$FNKC:
    react.surge.util.Cuboid$CuboidDirection North -> cekp
    react.surge.util.Cuboid$CuboidDirection East -> Wbia
    react.surge.util.Cuboid$CuboidDirection South -> vvUQ
    react.surge.util.Cuboid$CuboidDirection West -> Fiir
    react.surge.util.Cuboid$CuboidDirection Up -> bIWS
    react.surge.util.Cuboid$CuboidDirection Down -> VNeh
    react.surge.util.Cuboid$CuboidDirection Horizontal -> nvmL
    react.surge.util.Cuboid$CuboidDirection Vertical -> TbQv
    react.surge.util.Cuboid$CuboidDirection Both -> eSBN
    react.surge.util.Cuboid$CuboidDirection Unknown -> aWVU
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> HyAu
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> fnuU
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> GHwP
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> UlSO
react.surge.util.Cuboid$CuboidIterator -> PeKm$VDGg:
    org.bukkit.World w -> gjIS
    int baseX -> nwMq
    int baseY -> HoqF
    int baseZ -> orDW
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> oXPw
    int sizeY -> HyDt
    int sizeZ -> OReB
    react.surge.util.Cuboid this$0 -> bYxE
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> lnkO:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> lDXG:
    react.glang.GList buffer -> fMUw
    boolean dbg -> UBtU
    int kf -> wVvt
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> vACT
    41:49:void l(java.lang.Object,java.lang.String) -> VDGg
    53:54:void s(java.lang.Object,java.lang.String) -> vtHI
    58:69:void cdb() -> UlRp
    73:79:void v(java.lang.Object,java.lang.String) -> vACT
    83:84:void w(java.lang.Object,java.lang.String) -> AGKY
    88:89:void f(java.lang.Object,java.lang.String) -> srmk
    93:106:void l(java.lang.String) -> CDar
    110:117:void s(java.lang.String) -> dMRJ
    121:135:void v(java.lang.String) -> xGKT
    139:146:void w(java.lang.String) -> rNIq
    150:157:void f(java.lang.String) -> UYwl
react.surge.util.DMSRequire -> QxpH:
    react.surge.util.DMSRequirement value() -> VfhB
react.surge.util.DMSRequirement -> AOng:
    react.surge.util.DMSRequirement SQL -> Cyui
    react.surge.util.DMSRequirement[] ENUM$VALUES -> Umgs
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> VMJe:
    react.surge.util.Depend VAULT -> rijW
    react.surge.util.Depend FAWE -> orCa
    react.surge.util.Depend WORLDEDIT -> xcLN
    react.surge.util.Depend PROTOLIB -> XToH
    react.surge.util.Depend CITIZENS -> KNjC
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> WRJw
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> CgWP:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> rxyJ
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> Dahj:
    react.surge.util.DimensionFace X -> sRyq
    react.surge.util.DimensionFace Y -> KNgk
    react.surge.util.DimensionFace Z -> hAxt
    react.surge.util.DimensionFace[] ENUM$VALUES -> xYyI
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> OYWg:
    react.surge.util.Direction U -> OJSd
    react.surge.util.Direction D -> iMnD
    react.surge.util.Direction N -> XDLb
    react.surge.util.Direction S -> yemU
    react.surge.util.Direction E -> FXkE
    react.surge.util.Direction W -> jQPj
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> BwTL
    int[] $SWITCH_TABLE$surge$util$Direction -> sJht
    react.surge.util.Direction[] ENUM$VALUES -> ywNp
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> lLtJ
    61:61:int x() -> QOGl
    66:66:int y() -> JuHH
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> kJQk
    81:81:react.glang.GList news() -> stLj
    86:86:react.glang.GList udnews() -> DQRo
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> uyTI
    115:147:react.surge.util.Direction fromByte(byte) -> lwKC
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> BJjv
react.surge.util.DynamicConfiguration -> jyfd:
react.surge.util.DynamicTracker -> YUud:
react.surge.util.Embedded -> Vnod:
    react.glang.GList get() -> mHFn
    void add(java.lang.Object) -> add
react.surge.util.FU -> XuWF:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> FNKC
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> VDGg
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> AGKY
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> srmk
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> Thhv:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> jgtW
react.surge.util.Health -> qeMU:
    double hp -> FXjp
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> YMnT
    41:41:double getHearts() -> nAxJ
    51:51:double getHalfHearts() -> MAyw
    61:61:int getFlatHalfHearts() -> bjJx
react.surge.util.IO -> DsNI:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> pYYO:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> FNKC
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> FNKC
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> FNKC
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> FNKC
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> FNKC
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> VDGg
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> vtHI
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> vACT
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> FNKC
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> FNKC
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> FNKC
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> FNKC
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> AGKY
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> srmk
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> ykmo
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> OHDS
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> Usgo
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> FNKC
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> lwKC
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> FpNV
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> FNKC
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> FNKC
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> VDGg
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> FNKC
react.surge.util.MSound -> vRXv:
    react.surge.util.MSound AMBIENCE_CAVE -> HpSc
    react.surge.util.MSound AMBIENCE_RAIN -> wqIW
    react.surge.util.MSound AMBIENCE_THUNDER -> qVHx
    react.surge.util.MSound ANVIL_BREAK -> Yhtn
    react.surge.util.MSound ANVIL_LAND -> NiWB
    react.surge.util.MSound ANVIL_USE -> HhEk
    react.surge.util.MSound ARROW_HIT -> MDOx
    react.surge.util.MSound BURP -> yToQ
    react.surge.util.MSound CHEST_CLOSE -> WQnC
    react.surge.util.MSound CHEST_OPEN -> oGRT
    react.surge.util.MSound CLICK -> tosT
    react.surge.util.MSound DOOR_CLOSE -> usWV
    react.surge.util.MSound DOOR_OPEN -> mRNG
    react.surge.util.MSound DRINK -> NOcl
    react.surge.util.MSound EAT -> MTpt
    react.surge.util.MSound EXPLODE -> AQmj
    react.surge.util.MSound FALL_BIG -> ReBa
    react.surge.util.MSound FALL_SMALL -> qEGV
    react.surge.util.MSound FIRE -> cMAP
    react.surge.util.MSound FIRE_IGNITE -> gXkf
    react.surge.util.MSound FIZZ -> txdK
    react.surge.util.MSound FUSE -> rPYp
    react.surge.util.MSound GLASS -> ffhq
    react.surge.util.MSound HURT_FLESH -> gHIp
    react.surge.util.MSound ITEM_BREAK -> PUiP
    react.surge.util.MSound ITEM_PICKUP -> vmgn
    react.surge.util.MSound LAVA -> XCnC
    react.surge.util.MSound LAVA_POP -> gGhm
    react.surge.util.MSound LEVEL_UP -> jQSg
    react.surge.util.MSound MINECART_BASE -> cDMp
    react.surge.util.MSound MINECART_INSIDE -> WbnJ
    react.surge.util.MSound NOTE_BASS -> dyuA
    react.surge.util.MSound NOTE_PIANO -> LRNX
    react.surge.util.MSound NOTE_BASS_DRUM -> Jdxn
    react.surge.util.MSound NOTE_STICKS -> BfSx
    react.surge.util.MSound NOTE_BASS_GUITAR -> TbWG
    react.surge.util.MSound NOTE_SNARE_DRUM -> jIBk
    react.surge.util.MSound NOTE_PLING -> oysw
    react.surge.util.MSound ORB_PICKUP -> HgeE
    react.surge.util.MSound PISTON_EXTEND -> iVdG
    react.surge.util.MSound PISTON_RETRACT -> yesF
    react.surge.util.MSound PORTAL -> sJoJ
    react.surge.util.MSound PORTAL_TRAVEL -> GvGB
    react.surge.util.MSound PORTAL_TRIGGER -> iyHQ
    react.surge.util.MSound SHOOT_ARROW -> KqQW
    react.surge.util.MSound SPLASH -> RmTo
    react.surge.util.MSound SPLASH2 -> iFBi
    react.surge.util.MSound STEP_GRASS -> PgOJ
    react.surge.util.MSound STEP_GRAVEL -> YGTw
    react.surge.util.MSound STEP_LADDER -> lqNt
    react.surge.util.MSound STEP_SAND -> PVMe
    react.surge.util.MSound STEP_SNOW -> FQAT
    react.surge.util.MSound STEP_STONE -> eIvb
    react.surge.util.MSound STEP_WOOD -> QXml
    react.surge.util.MSound STEP_WOOL -> uHdC
    react.surge.util.MSound SWIM -> iNRb
    react.surge.util.MSound WATER -> rimh
    react.surge.util.MSound WOOD_CLICK -> cCnt
    react.surge.util.MSound BAT_DEATH -> pAeM
    react.surge.util.MSound BAT_HURT -> JmlX
    react.surge.util.MSound BAT_IDLE -> fgLh
    react.surge.util.MSound BAT_LOOP -> lEyA
    react.surge.util.MSound BAT_TAKEOFF -> ekxk
    react.surge.util.MSound BLAZE_BREATH -> YPFN
    react.surge.util.MSound BLAZE_DEATH -> LAOU
    react.surge.util.MSound BLAZE_HIT -> iMpt
    react.surge.util.MSound CAT_HISS -> veXu
    react.surge.util.MSound CAT_HIT -> TIFm
    react.surge.util.MSound CAT_MEOW -> pItc
    react.surge.util.MSound CAT_PURR -> XvuN
    react.surge.util.MSound CAT_PURREOW -> gsAD
    react.surge.util.MSound CHICKEN_IDLE -> SEeY
    react.surge.util.MSound CHICKEN_HURT -> Absn
    react.surge.util.MSound CHICKEN_EGG_POP -> tFDh
    react.surge.util.MSound CHICKEN_WALK -> MwXo
    react.surge.util.MSound COW_IDLE -> hScP
    react.surge.util.MSound COW_HURT -> qVMf
    react.surge.util.MSound COW_WALK -> BnhN
    react.surge.util.MSound CREEPER_HISS -> NWwx
    react.surge.util.MSound CREEPER_DEATH -> blEX
    react.surge.util.MSound ENDERDRAGON_DEATH -> SWHV
    react.surge.util.MSound ENDERDRAGON_GROWL -> qxOk
    react.surge.util.MSound ENDERDRAGON_HIT -> WlFO
    react.surge.util.MSound ENDERDRAGON_WINGS -> qfnE
    react.surge.util.MSound ENDERMAN_DEATH -> kKiq
    react.surge.util.MSound ENDERMAN_HIT -> MTvM
    react.surge.util.MSound ENDERMAN_IDLE -> hufD
    react.surge.util.MSound ENDERMAN_TELEPORT -> GvIX
    react.surge.util.MSound ENDERMAN_SCREAM -> GvHx
    react.surge.util.MSound ENDERMAN_STARE -> cUUS
    react.surge.util.MSound GHAST_SCREAM -> slrn
    react.surge.util.MSound GHAST_SCREAM2 -> XnfY
    react.surge.util.MSound GHAST_CHARGE -> MCsB
    react.surge.util.MSound GHAST_DEATH -> rbAH
    react.surge.util.MSound GHAST_FIREBALL -> dqhg
    react.surge.util.MSound GHAST_MOAN -> mANp
    react.surge.util.MSound IRONGOLEM_DEATH -> WRRE
    react.surge.util.MSound IRONGOLEM_HIT -> Xetv
    react.surge.util.MSound IRONGOLEM_THROW -> WstF
    react.surge.util.MSound IRONGOLEM_WALK -> msrf
    react.surge.util.MSound MAGMACUBE_WALK -> ORiq
    react.surge.util.MSound MAGMACUBE_WALK2 -> NaJG
    react.surge.util.MSound MAGMACUBE_JUMP -> HhJA
    react.surge.util.MSound PIG_IDLE -> ecje
    react.surge.util.MSound PIG_DEATH -> AtWL
    react.surge.util.MSound PIG_WALK -> BLfC
    react.surge.util.MSound SHEEP_IDLE -> diXh
    react.surge.util.MSound SHEEP_SHEAR -> cwWS
    react.surge.util.MSound SHEEP_WALK -> mcTp
    react.surge.util.MSound SILVERFISH_HIT -> nMFW
    react.surge.util.MSound SILVERFISH_KILL -> NqmP
    react.surge.util.MSound SILVERFISH_IDLE -> puPB
    react.surge.util.MSound SILVERFISH_WALK -> xbtF
    react.surge.util.MSound SKELETON_IDLE -> hJsf
    react.surge.util.MSound SKELETON_DEATH -> eSLh
    react.surge.util.MSound SKELETON_HURT -> gQBr
    react.surge.util.MSound SKELETON_WALK -> Nqlr
    react.surge.util.MSound SLIME_ATTACK -> MoKR
    react.surge.util.MSound SLIME_WALK -> THjk
    react.surge.util.MSound SLIME_WALK2 -> QXsa
    react.surge.util.MSound SPIDER_IDLE -> FYTv
    react.surge.util.MSound SPIDER_DEATH -> iNWW
    react.surge.util.MSound SPIDER_WALK -> Wbuh
    react.surge.util.MSound WITHER_DEATH -> mJCP
    react.surge.util.MSound WITHER_HURT -> fUnt
    react.surge.util.MSound WITHER_IDLE -> bRSy
    react.surge.util.MSound WITHER_SHOOT -> QbEn
    react.surge.util.MSound WITHER_SPAWN -> OBMR
    react.surge.util.MSound WOLF_BARK -> DdQO
    react.surge.util.MSound WOLF_DEATH -> gXrP
    react.surge.util.MSound WOLF_GROWL -> LlFm
    react.surge.util.MSound WOLF_HOWL -> sKSL
    react.surge.util.MSound WOLF_HURT -> mQrE
    react.surge.util.MSound WOLF_PANT -> rGnk
    react.surge.util.MSound WOLF_SHAKE -> jPxj
    react.surge.util.MSound WOLF_WALK -> eIyY
    react.surge.util.MSound WOLF_WHINE -> Yqjx
    react.surge.util.MSound ZOMBIE_METAL -> hKTP
    react.surge.util.MSound ZOMBIE_WOOD -> daKL
    react.surge.util.MSound ZOMBIE_WOODBREAK -> pJYc
    react.surge.util.MSound ZOMBIE_IDLE -> vnNX
    react.surge.util.MSound ZOMBIE_DEATH -> BLhG
    react.surge.util.MSound ZOMBIE_HURT -> VNpI
    react.surge.util.MSound ZOMBIE_INFECT -> towi
    react.surge.util.MSound ZOMBIE_UNFECT -> OtrQ
    react.surge.util.MSound ZOMBIE_REMEDY -> HhNO
    react.surge.util.MSound ZOMBIE_WALK -> emBE
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> rsGX
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> IkQY
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> JKox
    react.surge.util.MSound ZOMBIE_PIG_HURT -> OmBq
    react.surge.util.MSound DIG_WOOL -> gbGE
    react.surge.util.MSound DIG_GRASS -> hBed
    react.surge.util.MSound DIG_GRAVEL -> TtBP
    react.surge.util.MSound DIG_SAND -> CrQQ
    react.surge.util.MSound DIG_SNOW -> PVTC
    react.surge.util.MSound DIG_STONE -> oqlo
    react.surge.util.MSound DIG_WOOD -> TcAD
    react.surge.util.MSound FIREWORK_BLAST -> fVQx
    react.surge.util.MSound FIREWORK_BLAST2 -> sCEb
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> TIMv
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> xbuM
    react.surge.util.MSound FIREWORK_TWINKLE -> PMcD
    react.surge.util.MSound FIREWORK_TWINKLE2 -> svJQ
    react.surge.util.MSound FIREWORK_LAUNCH -> lGBV
    react.surge.util.MSound SUCCESSFUL_HIT -> rGrH
    react.surge.util.MSound HORSE_ANGRY -> THjv
    react.surge.util.MSound HORSE_ARMOR -> rrec
    react.surge.util.MSound HORSE_BREATHE -> VFaV
    react.surge.util.MSound HORSE_DEATH -> tFGp
    react.surge.util.MSound HORSE_GALLOP -> qoaj
    react.surge.util.MSound HORSE_HIT -> RJvP
    react.surge.util.MSound HORSE_IDLE -> mkem
    react.surge.util.MSound HORSE_JUMP -> rYRm
    react.surge.util.MSound HORSE_LAND -> ReIp
    react.surge.util.MSound HORSE_SADDLE -> iVhj
    react.surge.util.MSound HORSE_SOFT -> etpQ
    react.surge.util.MSound HORSE_WOOD -> mcUk
    react.surge.util.MSound DONKEY_ANGRY -> VqXe
    react.surge.util.MSound DONKEY_DEATH -> RJyE
    react.surge.util.MSound DONKEY_HIT -> wNsP
    react.surge.util.MSound DONKEY_IDLE -> gPfP
    react.surge.util.MSound HORSE_SKELETON_DEATH -> pRod
    react.surge.util.MSound HORSE_SKELETON_HIT -> HFMS
    react.surge.util.MSound HORSE_SKELETON_IDLE -> JmuW
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> coMj
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> tglw
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> rsId
    react.surge.util.MSound VILLAGER_DEATH -> lGDa
    react.surge.util.MSound VILLAGER_HAGGLE -> kmso
    react.surge.util.MSound VILLAGER_HIT -> PogS
    react.surge.util.MSound VILLAGER_IDLE -> KGEu
    react.surge.util.MSound VILLAGER_NO -> Ewws
    react.surge.util.MSound VILLAGER_YES -> XMKq
    java.lang.String pre19sound -> COmn
    java.lang.String post19sound -> GvOW
    org.bukkit.Sound resolvedSound -> KGGA
    react.surge.util.MSound[] ENUM$VALUES -> ayiF
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> ECTn
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> PvPU:
    org.bukkit.Material material -> XLkH
    java.lang.Byte data -> ORrK
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> Ortm
    79:80:void setData(java.lang.Byte) -> FNKC
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> QEmc:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> SvVI
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> dMmX
    68:68:boolean isAnyOnline() -> bYJC
    80:80:react.glang.GList inWorld(org.bukkit.World) -> WNxk
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> eYEI
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> FNKC
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> FNKC
    143:144:void disable(org.bukkit.entity.Player) -> VwKQ
    154:155:void enable(org.bukkit.entity.Player) -> Oidt
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> FNKC
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> VDGg
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> kcDn
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> FNKC
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> uySU
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> vtHI
    300:300:boolean canFindPlayer(java.lang.String) -> rMiT
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> XRaF
    338:345:react.glang.GList onlinePlayers() -> TGOC
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> YfbP
    368:371:void clear(org.bukkit.entity.Player) -> lnWu
    381:385:void clearEffects(org.bukkit.entity.Player) -> HmbS
    398:399:void heal(org.bukkit.entity.Player,double) -> FNKC
    409:410:void heal(org.bukkit.entity.Player) -> qlej
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> mWhc
    432:433:void resetHunger(org.bukkit.entity.Player) -> CEBE
    443:444:void kill(org.bukkit.entity.Player) -> HBnP
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> uxrY
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> vjtI
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> FNKC
react.surge.util.P$1 -> QEmc$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> lwKC
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ykmo
react.surge.util.P$2 -> QEmc$2:
    java.lang.Double val$doff -> HyQy
    org.bukkit.entity.Player val$e -> aqXX
    org.bukkit.entity.Entity[] val$result -> DSSa
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> FpNV
react.surge.util.PE -> DPjN:
    react.surge.util.PE ABSORPTION -> GBij
    react.surge.util.PE BLINDNESS -> bJHS
    react.surge.util.PE CONFUSION -> LQwR
    react.surge.util.PE DAMAGE_RESISTANCE -> sCGH
    react.surge.util.PE FAST_DIGGING -> XoNC
    react.surge.util.PE FIRE_RESISTANCE -> ULPy
    react.surge.util.PE GLOWING -> FHWF
    react.surge.util.PE HARM -> PESR
    react.surge.util.PE HEAL -> Uvea
    react.surge.util.PE HEALTH_BOOST -> bAVQ
    react.surge.util.PE HUNGER -> rivA
    react.surge.util.PE INCREASE_DAMAGE -> sTGs
    react.surge.util.PE INVISIBILITY -> Dlcw
    react.surge.util.PE JUMP -> Khgi
    react.surge.util.PE LEVITATION -> lGBs
    react.surge.util.PE LUCK -> wOVR
    react.surge.util.PE NIGHT_VISION -> mlMB
    react.surge.util.PE POISON -> BxCC
    react.surge.util.PE REGENERATION -> TRBr
    react.surge.util.PE SATURATION -> Tsds
    react.surge.util.PE SLOW -> rrji
    react.surge.util.PE SLOW_DIGGING -> SqCN
    react.surge.util.PE SPEED -> PEVV
    react.surge.util.PE UNLUCK -> XMNT
    react.surge.util.PE WATER_BREATHING -> qwwX
    react.surge.util.PE WEAKNESS -> mbyd
    react.surge.util.PE WITHER -> qogI
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> FNKC
    144:144:react.surge.util.PE d(int) -> DXgm
    156:156:react.surge.util.PE a(int) -> vtIU
    166:166:org.bukkit.potion.PotionEffect c() -> xPUq
    177:178:void c(org.bukkit.entity.LivingEntity) -> srmk
    182:183:void crm(org.bukkit.entity.LivingEntity) -> ykmo
    187:188:void rm(org.bukkit.entity.LivingEntity) -> OHDS
react.surge.util.ParticleEffect -> WqsT:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> wXFf
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> yCxn
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> kCbR
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> EDvV
    react.surge.util.ParticleEffect WATER_BUBBLE -> Vpxf
    react.surge.util.ParticleEffect WATER_SPLASH -> jHnc
    react.surge.util.ParticleEffect WATER_WAKE -> xkjQ
    react.surge.util.ParticleEffect SUSPENDED -> gjYr
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> wNtD
    react.surge.util.ParticleEffect CRIT -> iEjo
    react.surge.util.ParticleEffect CRIT_MAGIC -> xJGX
    react.surge.util.ParticleEffect SMOKE_NORMAL -> GCKc
    react.surge.util.ParticleEffect SMOKE_LARGE -> nMKQ
    react.surge.util.ParticleEffect SPELL -> mIfo
    react.surge.util.ParticleEffect SPELL_INSTANT -> rHVL
    react.surge.util.ParticleEffect SPELL_MOB -> HEmh
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> Sgoy
    react.surge.util.ParticleEffect SPELL_WITCH -> kUCd
    react.surge.util.ParticleEffect DRIP_WATER -> GCLJ
    react.surge.util.ParticleEffect DRIP_LAVA -> lXGD
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> CXdN
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> THrc
    react.surge.util.ParticleEffect TOWN_AURA -> XxDQ
    react.surge.util.ParticleEffect NOTE -> DAtQ
    react.surge.util.ParticleEffect PORTAL -> SOAs
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> qMff
    react.surge.util.ParticleEffect FLAME -> OAsn
    react.surge.util.ParticleEffect LAVA -> Qalk
    react.surge.util.ParticleEffect FOOTSTEP -> SFQI
    react.surge.util.ParticleEffect CLOUD -> hBlP
    react.surge.util.ParticleEffect REDSTONE -> FbOB
    react.surge.util.ParticleEffect SNOWBALL -> Hgsd
    react.surge.util.ParticleEffect SNOW_SHOVEL -> RvRc
    react.surge.util.ParticleEffect SLIME -> qVVw
    react.surge.util.ParticleEffect HEART -> XLno
    react.surge.util.ParticleEffect BARRIER -> oaSN
    react.surge.util.ParticleEffect ITEM_CRACK -> hdma
    react.surge.util.ParticleEffect BLOCK_CRACK -> lOXE
    react.surge.util.ParticleEffect BLOCK_DUST -> eKCg
    react.surge.util.ParticleEffect WATER_DROP -> jABB
    react.surge.util.ParticleEffect ITEM_TAKE -> tVoG
    react.surge.util.ParticleEffect MOB_APPEARANCE -> Eojq
    react.surge.util.ParticleEffect DRAGON_BREATH -> NYDN
    react.surge.util.ParticleEffect END_ROD -> Xnpr
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> fwyI
    react.surge.util.ParticleEffect SWEEP_ATTACK -> GBlf
    java.util.Map NAME_MAP -> pJag
    java.util.Map ID_MAP -> EokY
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> GCNJ
    java.util.List properties -> CrWB
    react.surge.util.ParticleEffect[] ENUM$VALUES -> IACi
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> ObRe
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> FNKC
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> EBYT
    557:565:react.surge.util.ParticleEffect fromId(int) -> jEpf
    577:578:boolean isWater(org.bukkit.Location) -> UtIf
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> FNKC
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> FNKC
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> FNKC
    665:681:void display(float,int,org.bukkit.Location,double) -> FNKC
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> FNKC
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNKC
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> FNKC
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> FNKC
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNKC
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> FNKC
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> FNKC
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNKC
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> FNKC
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> FNKC
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNKC
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> FNKC
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> FNKC
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> FNKC
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> WqsT$FNKC:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> WqsT$VDGg:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> WqsT$vtHI:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> iTjs
    1594:1594:float getValueY() -> lwfo
    1605:1605:float getValueZ() -> yJgu
react.surge.util.ParticleEffect$OrdinaryColor -> WqsT$vACT:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> iTjs
    1526:1526:float getValueY() -> lwfo
    1537:1537:float getValueZ() -> yJgu
react.surge.util.ParticleEffect$ParticleColor -> WqsT$AGKY:
    1383:1383:void <init>() -> <init>
    float getValueX() -> iTjs
    float getValueY() -> lwfo
    float getValueZ() -> yJgu
react.surge.util.ParticleEffect$ParticleColorException -> WqsT$srmk:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> WqsT$ykmo:
    org.bukkit.Material material -> XLkH
    byte data -> bkpT
    int[] packetData -> XntK
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> GtMe
    1309:1309:java.lang.String getPacketDataString() -> hHvn
react.surge.util.ParticleEffect$ParticleDataException -> WqsT$OHDS:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> WqsT$Usgo:
    int version -> version
    java.lang.Class enumParticle -> IRGe
    java.lang.reflect.Constructor packetConstructor -> rsPB
    java.lang.reflect.Method getHandle -> ucGJ
    java.lang.reflect.Field playerConnection -> kCgH
    java.lang.reflect.Method sendPacket -> aGJh
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> ReSO
    float offsetX -> GvUN
    float offsetY -> FQNn
    float offsetZ -> ygCG
    float speed -> QbPJ
    int amount -> Bumx
    boolean longDistance -> oqvO
    react.surge.util.ParticleEffect$ParticleData data -> JfLb
    java.lang.Object packet -> vUHP
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> Gani
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> FNKC
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> VDGg
    2004:2018:void sendTo(org.bukkit.Location,double) -> VDGg
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> WqsT$Usgo$FNKC:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> WqsT$Usgo$VDGg:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> WqsT$Usgo$vtHI:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> WqsT$lwKC:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> Khng
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> mkoV
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> vegx
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> MfeI
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> BMRM
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> WqsT$FpNV:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> RcED:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> DXgm
react.surge.util.Persist -> anoX:
react.surge.util.Platform -> MApb:
    boolean ENABLE -> WkqP
    double PROC_CPU -> BVBs
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> vdCS
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> xGds
react.surge.util.Platform$CPU -> MApb$FNKC:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> afea
    222:227:double getProcessCPULoad() -> cBWy
    232:237:double getLiveProcessCPULoad() -> PCRs
    242:247:java.lang.String getArchitecture() -> WXha
react.surge.util.Platform$ENVIRONMENT -> MApb$VDGg:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> hYwn
    23:28:java.lang.String getJavaHome() -> ymJw
    33:38:java.lang.String getJavaVendor() -> fuuO
    43:48:java.lang.String getJavaVersion() -> HUMx
react.surge.util.Platform$MEMORY -> MApb$vtHI:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> MApb$vtHI$FNKC:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> qeTO
    135:140:long getFreeMemory() -> xHEa
    145:150:long getUsedMemory() -> gWUs
react.surge.util.Platform$MEMORY$VIRTUAL -> MApb$vtHI$VDGg:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> qeTO
    168:173:long getFreeMemory() -> xHEa
    178:183:long getUsedMemory() -> gWUs
    188:193:long getCommittedVirtualMemory() -> fCRF
react.surge.util.Platform$STORAGE -> MApb$vACT:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> sbiE
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> ykmo
    78:85:long getAbsoluteFreeSpace() -> EuxG
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> OHDS
    100:100:long getUsedSpace() -> VfgN
    105:105:long getUsedSpace(java.io.File) -> Usgo
    110:110:long getAbsoluteUsedSpace() -> scLs
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> qJxV:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> AGKY
    78:88:void enable(java.lang.String) -> vtIU
    95:99:void enableAll() -> kIrm
    109:113:void disable(org.bukkit.plugin.Plugin) -> srmk
    120:124:void disableAll() -> OYeH
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> ykmo
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> FNKC
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> jEpf
    183:186:java.util.List getPluginNames(boolean) -> hsOP
    198:201:java.lang.String getPluginVersion(java.lang.String) -> ssOf
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> OHDS
    251:330:java.util.List findByCommand(java.lang.String) -> nlQI
    351:352:void load(org.bukkit.plugin.Plugin) -> Usgo
    356:378:java.lang.String getPluginFileName(java.lang.String) -> FMjl
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> FNKC
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> lwKC
    494:498:void reloadAll() -> kcee
    510:636:void unload(org.bukkit.plugin.Plugin) -> FpNV
react.surge.util.PoolCount -> DXxg:
react.surge.util.PoolDescriber -> JIiO:
react.surge.util.PoolNanoThrottle -> DPiD:
react.surge.util.PositionalSelector -> MmFR:
    react.glang.GSet allowedChunks -> QrqJ
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> tfOx
    39:40:void addChunk(org.bukkit.Chunk) -> GrqA
    44:44:react.glang.GSet getAllowedChunks() -> ivrC
react.surge.util.Protocol -> Pumt:
    react.surge.util.Protocol LATEST -> GCPs
    react.surge.util.Protocol R1_12_2 -> FsPd
    react.surge.util.Protocol R1_12_2_PRE -> ahkm
    react.surge.util.Protocol R1_12_1 -> SOCH
    react.surge.util.Protocol R1_12 -> Uvjk
    react.surge.util.Protocol R1_11_2 -> Dlil
    react.surge.util.Protocol R1_11_1 -> qfyH
    react.surge.util.Protocol R1_11 -> liKr
    react.surge.util.Protocol R1_10_2 -> sePL
    react.surge.util.Protocol R1_10_1 -> nwbe
    react.surge.util.Protocol R1_10 -> LdDP
    react.surge.util.Protocol R1_9_4 -> Xnuj
    react.surge.util.Protocol R1_9_3 -> ABAX
    react.surge.util.Protocol R1_9_2 -> CYIK
    react.surge.util.Protocol R1_9_1 -> XUcg
    react.surge.util.Protocol R1_9 -> bJPO
    react.surge.util.Protocol R1_8_9 -> UCjG
    react.surge.util.Protocol R1_8_8 -> SqHt
    react.surge.util.Protocol R1_8_7 -> dXer
    react.surge.util.Protocol R1_8_6 -> dGeC
    react.surge.util.Protocol R1_8_5 -> qNKS
    react.surge.util.Protocol R1_8_4 -> bIoa
    react.surge.util.Protocol R1_8_3 -> LBAb
    react.surge.util.Protocol R1_8_2 -> vKwp
    react.surge.util.Protocol R1_8_1 -> eKIU
    react.surge.util.Protocol R1_8 -> YPVv
    react.surge.util.Protocol R1_7_10 -> UelD
    react.surge.util.Protocol R1_7_9 -> HNeB
    react.surge.util.Protocol R1_7_8 -> SVtS
    react.surge.util.Protocol R1_7_7 -> TcHy
    react.surge.util.Protocol R1_7_6 -> XVCf
    react.surge.util.Protocol R1_7_5 -> pmJj
    react.surge.util.Protocol R1_7_4 -> kfKh
    react.surge.util.Protocol R1_7_3 -> BgGw
    react.surge.util.Protocol R1_7_2 -> MDas
    react.surge.util.Protocol R1_7_1 -> ukWg
    react.surge.util.Protocol B1_6_4 -> Mnue
    react.surge.util.Protocol B1_6_3 -> seRB
    react.surge.util.Protocol B1_6_2 -> EyBF
    react.surge.util.Protocol B1_6_1 -> nxEd
    react.surge.util.Protocol B1_5_2 -> NOvT
    react.surge.util.Protocol B1_5_1 -> ynsB
    react.surge.util.Protocol B1_5 -> QapY
    react.surge.util.Protocol B1_4_7 -> eSWy
    react.surge.util.Protocol B1_4_6 -> qyBQ
    react.surge.util.Protocol B1_4_5 -> SEvG
    react.surge.util.Protocol B1_4_4 -> dGfl
    react.surge.util.Protocol B1_4_2 -> RvYB
    react.surge.util.Protocol B1_3_2 -> hStC
    react.surge.util.Protocol B1_3_1 -> LRcf
    react.surge.util.Protocol B1_2_5 -> gbSV
    react.surge.util.Protocol B1_2_4 -> ucJt
    react.surge.util.Protocol EARLIEST -> liRR
    react.surge.util.Protocol UNKNOWN -> jtMC
    int version -> version
    java.lang.String packageVersion -> ORBL
    java.lang.String versionName -> yoWL
    boolean netty -> DKLy
    react.surge.util.Protocol[] ENUM$VALUES -> THxv
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> lEEp
    118:118:java.lang.String getPackageVersion() -> YUcx
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> VgKJ
    142:150:react.surge.util.Protocol getProtocolVersion() -> fKcm
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> VDGg
    160:160:boolean isServerVersion() -> JBDO
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> afgn
    175:175:boolean isActualVersion() -> oopf
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> bHHq
    200:200:int getMetaVersion() -> vAaK
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> sYoh:
    react.surge.util.Protocol from -> SVwf
    react.surge.util.Protocol to -> mtda
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> AHLb
    21:21:react.surge.util.Protocol getTo() -> ekDf
    26:26:boolean contains(react.surge.util.Protocol) -> vtHI
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> CNGk:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> IWqm
    70:70:int randomNextInt() -> IPBc
    80:80:long randomNextLong() -> Ukub
    92:92:boolean isWithin(double) -> HmbS
    104:104:boolean isWithin(int) -> ssOf
    116:116:boolean isWithin(long) -> OYEC
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> qlej
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> hsOP
react.surge.util.RawEvent -> GQbH:
react.surge.util.RayTrace -> XSSS:
    org.bukkit.Location start -> IAKM
    org.bukkit.util.Vector direction -> oHFx
    java.lang.Double maxDistance -> IcNL
    java.lang.Double distanceCovered -> WIrT
    java.lang.Double step -> PMnk
    java.lang.Boolean stop -> PxbA
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> AjNv
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> FpNV
    89:89:org.bukkit.Location getStart() -> lUey
    94:95:void setStart(org.bukkit.Location) -> rDue
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> TXRV
    114:115:void setMaxDistance(java.lang.Double) -> vACT
    119:119:java.lang.Double getDistanceCovered() -> UBDL
    124:125:void setDistanceCovered(java.lang.Double) -> AGKY
    129:129:java.lang.Double getStep() -> MmPf
    134:135:void setStep(java.lang.Double) -> srmk
react.surge.util.ReflectionUtils -> ySPa:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> FNKC
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> FNKC
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> FNKC
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> FNKC
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> FNKC
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> FNKC
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> FNKC
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> FNKC
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> FNKC
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> FNKC
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> FNKC
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> FNKC
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> FNKC
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> FNKC
react.surge.util.ReflectionUtils$DataType -> ySPa$FNKC:
    react.surge.util.ReflectionUtils$DataType BYTE -> vfLr
    react.surge.util.ReflectionUtils$DataType SHORT -> QjcN
    react.surge.util.ReflectionUtils$DataType INTEGER -> Qrrv
    react.surge.util.ReflectionUtils$DataType LONG -> Spho
    react.surge.util.ReflectionUtils$DataType CHARACTER -> FIAa
    react.surge.util.ReflectionUtils$DataType FLOAT -> ucJX
    react.surge.util.ReflectionUtils$DataType DOUBLE -> GTUR
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> UenB
    java.util.Map CLASS_MAP -> XxIP
    java.lang.Class primitive -> pljr
    java.lang.Class reference -> huuM
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> BEGO
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> fdvS
    704:704:java.lang.Class getReference() -> VfiU
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> VDGg
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> vtHI
    741:742:java.lang.Class getReference(java.lang.Class) -> vACT
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> FNKC
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> VDGg
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> VDGg
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> vtHI
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> FNKC
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> ySPa$VDGg:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> XxJI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> sLAu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> PxbY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> Atfv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> ubiG
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> gsRt
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> UfNt
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> LdGs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> NXlF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> LJTx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> QICo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> qgbB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> emPR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> oOxm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> iEwR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> xBBv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> vUOM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> EpTx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> hnIF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> aGQf
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> KFrL
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> hIOT:
    void refresh() -> refresh
react.surge.util.SQLOperation -> VLlU:
    react.surge.util.SQLOperation LOAD -> GCVp
    react.surge.util.SQLOperation SAVE -> FQUb
    react.surge.util.SQLOperation[] ENUM$VALUES -> Rmij
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> opFq:
    react.surge.util.ServerState START -> LRew
    react.surge.util.ServerState ENABLE -> whrL
    react.surge.util.ServerState DISABLE -> RKfh
    react.surge.util.ServerState STOP -> yxJC
    react.surge.util.ServerState RUNNING -> mIrF
    react.surge.util.ServerState[] ENUM$VALUES -> emOT
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> bjAm:
    org.bukkit.Location location -> IixH
    org.bukkit.util.Vector offset -> qpQi
    org.bukkit.util.Vector size -> buHA
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> AhmN
    90:94:org.bukkit.Location randomLocation() -> YpRn
    104:104:org.bukkit.Location randomSurface() -> miiu
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> UdGK
    129:129:org.bukkit.util.Vector getSize() -> Ojee
react.surge.util.SnowLevel -> APRG:
    byte level -> pJjg
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> feWI
    51:52:void setLevel(byte) -> FpNV
react.surge.util.SuperCaller -> jXGG:
    void run() -> run
react.surge.util.T -> IykW:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> VDGg
    32:35:void stop() -> stop
react.surge.util.TXT -> dwwT:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> ykmo
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> FNKC
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> FNKC
    99:99:java.lang.String line(react.surge.util.C,int) -> FNKC
    113:113:java.lang.String underline(react.surge.util.C,int) -> VDGg
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> FNKC
react.surge.util.Tag -> AOpc:
    java.lang.String value() -> value
react.surge.util.Timer -> gpbj:
    long tns -> jQjU
    long cns -> GKfI
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> iUNP
react.surge.util.VectorMath -> bGaJ:
    int[] $SWITCH_TABLE$surge$util$Axis -> PgFr
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> JoBa
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> FNKC
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> FNKC
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> VDGg
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> vtHI
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> VDGg
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> VDGg
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> vtHI
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> vACT
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> AGKY
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> srmk
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> ykmo
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> OHDS
    111:111:double round(double,int) -> AGKY
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> FNKC
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> FNKC
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> FNKC
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> vACT
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> AGKY
    268:268:org.bukkit.util.Vector toVector(float,float) -> FNKC
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> FNKC
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> FNKC
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> Usgo
    337:340:double getSpeed(org.bukkit.util.Vector) -> lwKC
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> FNKC
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> FpNV
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> FNKC
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> VDGg
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> vtHI
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> vACT
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> UtIf
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> HDKH
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> UJVg
react.surge.util.VectorMath$1 -> bGaJ$1:
    org.bukkit.util.Vector val$vector -> sKch
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> Gani
    1:1:java.lang.Object onAdapt(java.lang.Object) -> ykmo
react.surge.util.W -> EvRf:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> Usgo
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> FNKC
    75:86:org.bukkit.entity.Entity getEntity(int) -> nlQI
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> FNKC
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> FNKC
    143:143:int getChunkX(org.bukkit.block.Block) -> lwKC
    155:155:int getChunkY(org.bukkit.block.Block) -> FpNV
    168:169:void dropXp(org.bukkit.Location,int) -> VDGg
    180:180:int getChunkZ(org.bukkit.block.Block) -> UtIf
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> VDGg
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> FNKC
    232:239:react.glang.GList news(org.bukkit.Location) -> eYEI
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> FNKC
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> HBoM
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> lmxH
    300:300:org.bukkit.World toSync(org.bukkit.World) -> OjEp
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> Gani
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> GrqA
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> hsOP
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> RbOi
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> FNKC
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> FNKC
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> FNKC
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> FNKC
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> FNKC
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> FNKC
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> FNKC
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> FNKC
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> QNJe
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> rDue
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> HBoM
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> vtHI
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> FNKC
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> FNKC
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> FNKC
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> FNKC
react.surge.util.W$1 -> EvRf$1:
    java.lang.Double val$doff -> HyQy
    org.bukkit.entity.Entity val$e -> sLDi
    org.bukkit.entity.Entity[] val$result -> DSSa
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> FpNV
react.surge.util.Worlds -> agBD:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> RYoH
    33:33:boolean hasWorld(java.lang.String) -> pPSk
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> GshA:
react.text.ColoredString -> iLVJ:
    react.surge.util.C c -> SqLX
    java.lang.String s -> JfQb
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> JSHe
    42:43:void setC(react.surge.util.C) -> VDGg
    47:47:java.lang.String getS() -> SDQA
    52:53:void setS(java.lang.String) -> idpq
react.text.RTEX -> ylfR:
    react.glang.GList extras -> garw
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> NFBm
    44:58:react.json.JSONObject toJSON() -> WWlt
react.text.RTX -> RcGD:
    react.json.JSONArray base -> VPBa
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> srmk
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> VDGg
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> FNKC
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> FNKC
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> VDGg
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> vtHI
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> FNKC
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> VDGg
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> vtHI
    265:265:react.json.JSONArray toJSON() -> uqfH
    276:277:void tellRawTo(org.bukkit.entity.Player) -> Yfai
react.text.RawText -> WidR:
    java.lang.String COLOR_BLACK -> lFmt
    java.lang.String COLOR_DARK_BLUE -> UDNQ
    java.lang.String COLOR_DARK_GREEN -> Frva
    java.lang.String COLOR_DARK_AQUA -> RCTt
    java.lang.String COLOR_DARK_RED -> gYav
    java.lang.String COLOR_DARK_PURPLE -> mBBW
    java.lang.String COLOR_GOLD -> mccv
    java.lang.String COLOR_GRAY -> Exdk
    java.lang.String COLOR_DARK_GRAY -> RCUa
    java.lang.String COLOR_BLUE -> EyFQ
    java.lang.String COLOR_GREEN -> VaCo
    java.lang.String COLOR_AQUA -> xRea
    java.lang.String COLOR_RED -> IQoG
    java.lang.String COLOR_LIGHT_PURPLE -> veqW
    java.lang.String COLOR_YELLOW -> TROT
    java.lang.String COLOR_WHITE -> lGRr
    java.lang.String COLOR_NONE -> KGTa
    java.lang.String HEAD_TEXT -> OmSc
    java.lang.String HEAD_COLOR -> gQUh
    java.lang.String HEAD_BOLD -> gHcd
    java.lang.String HEAD_ITALIC -> wPBp
    java.lang.String HEAD_UNDERLINED -> SNlC
    java.lang.String HEAD_STRIKETHROUGH -> qgcN
    java.lang.String HEAD_OBFUSCATED -> bSGn
    java.lang.String HEAD_CLICK_EVENT -> NYOU
    java.lang.String HEAD_HOVER_EVENT -> JfUN
    java.lang.String HEAD_ACTION -> hCVd
    java.lang.String HEAD_VALUE -> CjRE
    java.lang.String HEAD_EXTRA -> qWBj
    java.lang.String HEAD_ACTION_SHOW_TEXT -> SNki
    java.lang.String HEAD_ACTION_COMMAND -> NHLV
    java.util.ArrayList components -> Dlqj
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> SCPW
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> AGKY
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNKC
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> FNKC
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNKC
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> FNKC
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNKC
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> FNKC
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> FNKC
    307:313:java.lang.String compile() -> kAdh
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> FNKC

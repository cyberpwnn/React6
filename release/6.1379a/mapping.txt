react.Config -> BJNe:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> BJNe
    java.lang.String A_ENTITYCACHE_INTERVAL -> AGKd
    java.lang.String A_COMMANDOVERRIDE_TPS -> NEAQ
    java.lang.String A_REACT_REMOTE_PORT -> TFRB
    java.lang.String A_REACT_REMOTE_ENABLED -> iBmJ
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> lDGI
    java.lang.String A_POOL_MAXTHREADS -> IWTN
    java.lang.String A_POOL_SYNC_NANOS -> vtGe
    java.lang.String A_ENTITYCACHE_ENABLED -> iCNQ
    java.lang.String A_FASTLEAF_ENABLED -> aeiG
    java.lang.String A_FASTLEAF_ONDECAY -> eXcm
    java.lang.String A_FASTLEAF_INSTANT -> pPQx
    java.lang.String A_FASTLEAF_DECAYPERIOD -> iBkv
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> Cfcu
    java.lang.String A_ENTITYSTACK_ENABLED -> jEoX
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> rMfk
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> NoTf
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> MuBm
    java.lang.String A_GLASS_SHOW_BLOCKS -> eaUN
    java.lang.String A_GLASS_SHOW_PARTICLES -> OHEE
    java.lang.String A_ALLOW_CULL -> PmKF
    java.lang.String A_ALLOW_PURGE -> GPmc
    java.lang.String A_ALLOW_CACHE -> mXJl
    java.lang.String A_CULL_RULES -> dLnT
    java.lang.String A_RAI_TPS_HIGH_TICK -> bGHq
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> XIkf
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> JbfS
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> lUFw
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> tCKx
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> FDwc
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> OHCR
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> jhRp
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> DaUf
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> yklq
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> UcGR
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> QpME
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> JbgA
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> BJOT
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> wTdl
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> wUEl
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> WGJY
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> yQya
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> GsRh
    java.lang.String A_RAI_FLUID_TIME_CEIL -> vQfB
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> fJfj
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> pYEy
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> aCgk
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> IyYW
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> KUKo
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> rpNJ
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> IyYU
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> kAEP
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> HeUI
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> WXNh
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> wvjn
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> TEsU
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> PAvx
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> ugsb
    java.lang.String A_LANGUAGE -> dUcD
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> cdAr
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> IFTv
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> OOup
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> DGfb
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> sPkx
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> FMkE
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> lfKA
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> IpgA
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> pOsK
    java.lang.String A_RAI_ENTITY_PROPIGATE -> GsRQ
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> sPkl
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> eHCc
    int ENTITYCACHE_CHUNK_RADIUS -> PJft
    int ENTITYCACHE_INTERVAL -> jgrv
    boolean COMMANDOVERRIDES_TPS -> QMjd
    int REACT_REMOTE_PORT -> CMSr
    boolean REACT_REMOTE_ENABLED -> vcEx
    int ENTITY_STACK_MAX_COUNT -> lDGY
    int POOL_MAXTHREADS -> aeiy
    long POOL_SYNC_NANOS -> onra
    boolean ENTITYCACHE_ENABLED -> BBAE
    boolean FASTLEAF_ENABLED -> uhTL
    boolean FASTLEAF_ONDECAY -> gDxL
    boolean FASTLEAF_INSTANT -> IVuE
    int FASTLEAF_DECAYPERIOD -> RIAP
    boolean COMMANDOVERRIDES_MEMORY -> qKJE
    boolean ENTITYSTACK_ENABLED -> ccbo
    int ENTITYSTACK_MINIMUM_GROUP -> IWXP
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> GkEE
    int ENTITYSTACK_MAXIMUM_HEALTH -> OPWy
    boolean GLASS_SHOW_BLOCKS -> tnEj
    boolean GLASS_SHOW_PARTICLES -> XktD
    react.glang.GList ALLOW_CULL -> Aqbg
    react.glang.GList ALLOW_PURGE -> dfeg
    react.glang.GList ALLOW_CACHE -> wDIu
    react.glang.GList CULL_RULES -> pjJK
    double RAI_TPS_HIGH_TICK -> kbhs
    long RAI_REDSTONE_TIME_FLOOR -> lTkD
    long RAI_REDSTONE_TIME_CEIL -> AaAl
    long RAI_REDSTONE_TIME_MUDDING -> yuDV
    double RAI_REDSTONE_TIME_FUNCTION -> awPP
    double RAI_REDSTONE_TIME_OVERBLEED -> HBrw
    int RAI_REDSTONE_TIME_RADIUS -> IVwf
    int RAI_REDSTONE_TIME_PROPIGATION -> dfdp
    long RAI_HOPPER_TIME_FLOOR -> UtLV
    long RAI_HOPPER_TIME_CEIL -> Cwgv
    long RAI_HOPPER_TIME_MUDDING -> RPoV
    double RAI_HOPPER_TIME_FUNCTION -> INef
    double RAI_HOPPER_TIME_OVERBLEED -> pYGP
    int RAI_HOPPER_TIME_RADIUS -> Rjaj
    int RAI_HOPPER_TIME_PROPIGATION -> KUMN
    int RAI_ENTITY_CHUNK_MULTIPLIER -> eqwp
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> uxvp
    int RAI_ENTITY_CHUNK_RADIUS -> UAHH
    long RAI_FLUID_TIME_FLOOR -> hapT
    long RAI_FLUID_TIME_CEIL -> JHwe
    long RAI_FLUID_TIME_MUDDING -> ndBO
    double RAI_FLUID_TIME_FUNCTION -> pqvy
    double RAI_FLUID_TIME_OVERBLEED -> BRdC
    int RAI_FLUID_TIME_RADIUS -> wTiR
    int RAI_FLUID_TIME_PROPIGATION -> CUgA
    double SMEAR_TICK_ENTITIES_MAX_TICK -> bypt
    double SMEAR_TICK_TILES_MAX_TICK -> Jbjg
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> vHuK
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> BdGb
    double SMEAR_TICK_ENTITIES_AMOUNT -> XIsN
    double SMEAR_TICK_TILES_AMOUNT -> bFnr
    boolean SMEAR_TICK_ENTITIES_ENABLE -> tTTg
    boolean SMEAR_TICK_TILES_ENABLE -> CLvg
    boolean HOPPER_OVERTICK_ENABLE -> LiSx
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> iduq
    long RAI_CHUNK_TIME_CEIL -> oVFs
    long RAI_CHUNK_TIME_MUDDING -> HCVC
    double RAI_CHUNK_TIME_FUNCTION -> WhsD
    double RAI_CHUNK_TIME_OVERBLEED -> jNgD
    int RAI_CHUNK_TIME_RADIUS -> bPBP
    int RAI_CHUNK_TIME_PROPIGATION -> MlXN
    boolean RAI_CHUNK_TIME_PROPIGATE -> CMVx
    boolean RAI_FLUID_TIME_PROPIGATE -> sYaa
    boolean RAI_ENTITY_PROPIGATE -> Grva
    boolean RAI_HOPPER_TIME_PROPIGATE -> WOag
    boolean RAI_REDSTONE_TIME_PROPIGATE -> Fxdi
    boolean hrld -> jWWr
    boolean rns -> RbVA
    boolean rrl -> APBS
    34:34:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> BJNe
    675:697:void onRead(org.bukkit.plugin.Plugin) -> AGKd
    701:731:void read(java.io.File,boolean) -> BJNe
    736:849:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> BJNe
    854:891:react.surge.cluster.DataCluster defaultConfig(boolean) -> BJNe
    896:971:react.glang.GList getDefaultEntitiesForCaching() -> BJNe
    976:1051:react.glang.GList getDefaultEntitiesForCulling() -> AGKd
    1056:1093:react.glang.GList getDefaultEntitiesForRemoval() -> NEAQ
    1098:1127:react.glang.GList getDefaultCullRules() -> TFRB
    258:648:void <clinit>() -> <clinit>
react.Config$1 -> BJNe$1:
    java.io.File val$fConfig -> RkFe
    java.io.File val$fConfigExperimental -> tTSg
    org.bukkit.plugin.Plugin val$main -> bGOU
    657:657:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Gate -> AGKd:
    react.glang.GMap defaultSettings -> SvWt
    35:35:void <init>() -> <init>
    41:127:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> BJNe
    131:156:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> BJNe
    161:161:int getChunkCountForView() -> iBmJ
    166:166:int getMaxChunksForView() -> lDGI
    171:171:boolean hasFawe() -> IWTN
    176:197:void tickEntityNextTickListTick(org.bukkit.World) -> BJNe
    201:205:void resetEntityMaxTick(org.bukkit.World) -> AGKd
    209:209:int getEntityTickMax(org.bukkit.World) -> NEAQ
    214:214:int getTileTickMax(org.bukkit.World) -> TFRB
    219:237:void tweakEntityTickMax(org.bukkit.World,int) -> BJNe
    241:258:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> BJNe
    263:267:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> BJNe
    271:283:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> BJNe
    288:292:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> AGKd
    296:314:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> BJNe
    318:322:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> iBmJ
    327:330:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> BJNe
    335:338:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> AGKd
    343:343:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> NEAQ
    348:348:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> TFRB
    353:353:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> iBmJ
    360:366:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    372:373:void unloadChunk(org.bukkit.World,int,int) -> BJNe
    377:383:void removeEntity(org.bukkit.entity.Entity) -> BJNe
    387:393:void purgeEntity(org.bukkit.entity.Entity) -> AGKd
    397:403:void cullEntity(org.bukkit.entity.Entity) -> NEAQ
    407:413:void cachedEntity(org.bukkit.entity.Entity) -> TFRB
    418:435:void updateBlock(org.bukkit.block.Block) -> BJNe
    439:443:java.lang.String header(java.lang.String,react.surge.util.C) -> BJNe
    448:448:java.lang.String header(react.surge.util.C) -> BJNe
    454:458:void updateFluid(org.bukkit.block.Block) -> AGKd
    37:37:void <clinit>() -> <clinit>
react.Gate$1 -> AGKd$1:
    react.api.SelectorPosition val$sel -> uqIk
    react.glang.Callback val$prog -> tuuq
    react.glang.Callback val$cb -> cteV
    42:42:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:125:void run() -> run
react.Gate$1$1 -> AGKd$1$1:
    java.lang.Object val$o -> xhpT
    java.lang.reflect.Constructor val$vectorConstruct -> xGNY
    java.lang.reflect.Constructor val$cuboidConstruct -> cIpm
    java.lang.reflect.Method val$faweFixMethod -> LrEH
    java.lang.Integer[] val$total -> dMUM
    java.lang.Integer[] val$sof -> Wysj
    java.lang.Integer val$tot -> SnHc
    react.Gate$1 this$0 -> WXRJ
    74:74:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    80:94:void run() -> run
react.Gate$1$2 -> AGKd$1$2:
    java.lang.Integer[] val$total -> dMUM
    react.Gate$1 this$0 -> WXRJ
    99:99:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    105:113:void run() -> run
react.Gate$2 -> AGKd$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> VfOx
    271:271:void <clinit>() -> <clinit>
react.Info -> NEAQ:
    java.lang.String CORE_REACT_DOT -> bWpV
    java.lang.String CORE_NAME -> Wqby
    java.lang.String CORE_CACHE -> ydCY
    java.lang.String CORE_DOTYML -> dVGI
    java.lang.String COMMAND_REACT -> tmeV
    java.lang.String COMMAND_RAI -> Ywia
    java.lang.String COMMAND_ACT_DESCRIPTION -> OPYs
    java.lang.String COMMAND_ACT -> XBBo
    java.lang.String COMMAND_ACT_ALIAS_1 -> WiSX
    java.lang.String COMMAND_ACT_ALIAS_2 -> QyGC
    java.lang.String COMMAND_ACT_USAGE -> BRgS
    java.lang.String COMMAND_HELP_DESCRIPTION -> xXRf
    java.lang.String COMMAND_HELP -> HKhO
    java.lang.String COMMAND_HELP_ALIAS_1 -> vQlK
    java.lang.String COMMAND_HELP_ALIAS_2 -> kRMd
    java.lang.String COMMAND_HELP_USAGE -> KndM
    java.lang.String COMMAND_STATUS_DESCRIPTION -> gpTK
    java.lang.String COMMAND_STATUS -> biUj
    java.lang.String COMMAND_STATUS_ALIAS_1 -> EudK
    java.lang.String COMMAND_STATUS_ALIAS_2 -> uVxW
    java.lang.String COMMAND_STATUS_USAGE -> mqdk
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> ETAj
    java.lang.String COMMAND_CPUSCORE -> MBFn
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> kRLq
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> NDft
    java.lang.String COMMAND_CPUSCORE_USAGE -> mWqY
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> FotK
    java.lang.String COMMAND_RELOAD -> EubT
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> ggax
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> VToR
    java.lang.String COMMAND_RELOAD_USAGE -> JRNQ
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> VeqG
    java.lang.String COMMAND_MONITOR -> Btjj
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> gNPh
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> YUhe
    java.lang.String COMMAND_MONITOR_USAGE -> afQh
    java.lang.String COMMAND_VERSION_DESCRIPTION -> PeAb
    java.lang.String COMMAND_VERSION -> XJUb
    java.lang.String COMMAND_VERSION_ALIAS_1 -> Yfin
    java.lang.String COMMAND_VERSION_ALIAS_2 -> NLwv
    java.lang.String COMMAND_VERSION_USAGE -> tSuB
    java.lang.String COMMAND_MAP_DESCRIPTION -> xGPN
    java.lang.String COMMAND_MAP -> imgm
    java.lang.String COMMAND_MAP_ALIAS_1 -> XcgP
    java.lang.String COMMAND_MAP_ALIAS_2 -> BIwm
    java.lang.String COMMAND_MAP_USAGE -> WPFX
    java.lang.String COMMAND_GLASS_DESCRIPTION -> oxNW
    java.lang.String COMMAND_GLASS -> JQom
    java.lang.String COMMAND_GLASS_ALIAS_1 -> Knem
    java.lang.String COMMAND_GLASS_ALIAS_2 -> JAPA
    java.lang.String COMMAND_GLASS_USAGE -> JcRa
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> eHLi
    java.lang.String COMMAND_CBLAME -> IppY
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> Yflx
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> AXVl
    java.lang.String COMMAND_CBLAME_USAGE -> AFtY
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> EScJ
    java.lang.String COMMAND_ACTIONLOG -> DsDK
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> gpUs
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> mGTB
    java.lang.String COMMAND_ACTIONLOG_USAGE -> lwUV
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> LWuM
    java.lang.String COMMAND_CAPABILITIES -> lCoK
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> FhGL
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> xXTD
    java.lang.String COMMAND_CAPABILITIES_USAGE -> NgLu
    java.lang.String MSG_PERMISSION -> gNSC
    java.lang.String MSG_MONITORING_STARTED -> xFqS
    java.lang.String MSG_MONITORING_STOPPED -> jEyV
    java.lang.String MSG_ACTIONLOGGING_STARTED -> owla
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> Wyvv
    java.lang.String MSG_GLASS_STARTED -> QVck
    java.lang.String MSG_GLASS_STOPPED -> gNSK
    org.bukkit.Color COLOR_HOPPER -> mrGD
    org.bukkit.Color COLOR_BLOCK_UPDATE -> LiXN
    org.bukkit.Color COLOR_BLOCK_FROMTO -> xXTA
    org.bukkit.Color COLOR_BLOCK_BURN -> oxMS
    org.bukkit.Color COLOR_BLOCK_DECAY -> LiWs
    org.bukkit.Color COLOR_BLOCK_FORM -> NgMl
    java.lang.String NAME_TICK -> QpWP
    java.lang.String NAME_MEMORY -> upky
    java.lang.String NAME_CHUNKS -> VfWP
    java.lang.String NAME_ENTITIES -> cSKG
    java.lang.String STATE_MONITORING_TAB -> pHNm
    java.lang.String STATE_MONITORING_ENABLED -> gVfK
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> OGnv
    java.lang.String STATE_MAPPING_ENABLED -> dEKq
    java.lang.String STATE_SOUND_PLAYS -> lLcF
    java.lang.String STATE_MONITORING_POSTED -> uNlW
    java.lang.String STATE_MONITORING_LASTTAB -> gggL
    java.lang.String STATE_GLASSES_ENABLED -> LXYh
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> XIxw
    java.lang.String STATE_PLAYER_HOTBAR -> JQrh
    java.lang.String STATE_PLAYER_SHIFT -> ejQY
    java.lang.String STATE_PLAYER_SCROLL -> MAgy
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> AGXj
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> VUTd
    java.lang.String PERM_ACCESS -> Wqhn
    java.lang.String PERM_MONITOR -> mhvs
    java.lang.String PERM_MONITOR_TITLE -> hHfb
    java.lang.String PERM_MONITOR_ACTIONLOG -> CxRJ
    java.lang.String PERM_MONITOR_MAP -> VMDS
    java.lang.String PERM_MONITOR_ENVIRONMENT -> owoA
    java.lang.String PERM_MONITOR_GLASSES -> qJpQ
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> DabT
    java.lang.String PERM_ACT -> pGlp
    java.lang.String PERM_RAI -> wDPj
    java.lang.String PERM_RAI_CONTROL -> ArLi
    java.lang.String PERM_RAI_ACCESS -> lTrJ
    java.lang.String PERM_RAI_MONITOR -> fSbP
    java.lang.String PERM_RELOAD -> esCP
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> rotx
    java.lang.String SAMPLER_REDSTONE_TICK -> WWvf
    java.lang.String SAMPLER_ENTITY_TIME -> mrHq
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> ryGk
    java.lang.String SAMPLER_TILE_TIME_LOCK -> OXrj
    java.lang.String SAMPLER_TILE_TIME -> ECEm
    java.lang.String SAMPLER_TILE_DROPTICK -> dfpV
    java.lang.String SAMPLER_ENTITY_DROPTICK -> Kexb
    java.lang.String SAMPLER_REDSTONE_SECOND -> gFGO
    java.lang.String SAMPLER_REDSTONE_TIME -> xOhJ
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> SKmk
    java.lang.String SAMPLER_HOPPER_TICK -> rFFW
    java.lang.String SAMPLER_HOPPER_SECOND -> goxr
    java.lang.String SAMPLER_HOPPER_TIME -> MAkg
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> DjWH
    java.lang.String SAMPLER_FLUID_TICK -> RkNs
    java.lang.String SAMPLER_FLUID_SECOND -> vAPt
    java.lang.String SAMPLER_FLUID_TIME -> VDUx
    java.lang.String SAMPLER_TPS -> RjnR
    java.lang.String SAMPLER_TICK -> xXXd
    java.lang.String SAMPLER_TIU -> PdhL
    java.lang.String SAMPLER_MEM -> lvwy
    java.lang.String SAMPLER_FREEMEM -> gFGY
    java.lang.String SAMPLER_MAXMEM -> tLKh
    java.lang.String SAMPLER_ALLOCMEM -> xFty
    java.lang.String SAMPLER_MAHS -> NDnD
    java.lang.String SAMPLER_CHK -> BmAm
    java.lang.String SAMPLER_ATASK -> YxRV
    java.lang.String SAMPLER_STASK -> CVQo
    java.lang.String SAMPLER_CHK_TIME -> jppl
    java.lang.String SAMPLER_EXPLOSION_TIME -> XSLn
    java.lang.String SAMPLER_CHKS -> nSKJ
    java.lang.String SAMPLER_ENT -> UJDK
    java.lang.String SAMPLER_ENTLIV -> DjVN
    java.lang.String SAMPLER_ENTDROP -> EeKM
    java.lang.String SAMPLER_ENTTILE -> TXEE
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> rhKh
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> WOlC
    java.lang.String ACTION_CULL_ENTITIES_NAME -> JJFr
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> oVRG
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> WOlM
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> uprw
    java.lang.String ACTION_UPDATE_FLUID_NAME -> Qglg
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> TpvJ
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> eYTv
    java.lang.String ACTION_LOCK_FLUID_STATUS -> oEPC
    java.lang.String ACTION_LOCK_FLUID_NAME -> pjUc
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> wvyd
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> Xlad
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> aoJi
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> fdfu
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> OYTk
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> rhJd
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> WFxw
    java.lang.String ACTION_LOCK_HOPPER_NAME -> VTwg
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> DQFB
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> ArQV
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> rWJA
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> EeIs
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> pPba
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> YDnh
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> nBLW
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> MRnS
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> vIcI
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> tLLt
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> dUov
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> PlyX
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> SebH
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> VMHh
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> QyPj
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> PSif
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> sjpR
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> UkjY
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> jhff
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> pjXB
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> uXDh
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> IXGi
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> CVUK
    java.lang.String ACTION_FIX_LIGHTING_NAME -> Rjqq
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> GsdT
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> kAVN
    java.lang.String ACTION_COLLECT_GARBAGE -> IhiG
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> aLhj
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> Xtrc
    6:6:void <init>() -> <init>
    8:232:void <clinit>() -> <clinit>
react.Lang -> TFRB:
    java.lang.String BUNDLE_NAME -> IWea
    java.util.ResourceBundle RESOURCE_BUNDLE -> LPMt
    java.util.ResourceBundle PRIMARY_BUNDLE -> ThgA
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> iBmJ:
    react.React instance -> ECHt
    react.controller.SampleController sampleController -> kkha
    react.controller.PlayerController playerController -> NfuK
    react.controller.MonitorController monitorController -> oEPr
    react.controller.CommandController commandController -> YDpi
    react.controller.ActionController actionController -> dpFY
    react.controller.FastDecayController fastDecayController -> teaT
    react.controller.EntityStackController entityStackController -> qKVb
    react.controller.GlassController glassController -> vbvK
    react.controller.EntityCullController entityCullController -> PBhH
    react.controller.SpikeController spikeController -> wTwg
    react.controller.SecurityController securityController -> esIM
    react.controller.RedstoneController redstoneController -> Gsdx
    react.controller.HopperController hopperController -> wLkK
    react.controller.PhysicsController physicsController -> uiIE
    react.controller.TickTimeController tickTimeController -> PdnG
    react.controller.RAIController raiController -> wLkS
    react.controller.FluidController fluidController -> hcDC
    react.controller.ChunkController chunkController -> Nfwg
    react.controller.GraphController graphController -> tDCM
    react.controller.ChronophyFluidController fluidChronophyController -> XKDI
    react.controller.EventController eventController -> Uklp
    react.controller.BlockInjectController blockInjectController -> dDtQ
    react.controller.SmearTickController smearTickController -> BJbe
    react.controller.FeatureController featureController -> iDCN
    react.controller.HopperOvertickController hopperPlungeController -> DbMH
    react.controller.BenchmarkController benchmarkController -> sHoF
    react.controller.LanguageController languageController -> DbMJ
    react.controller.RemoteController remoteController -> IhkE
    react.controller.ExplosiveController explosiveController -> qTJo
    41:41:void <init>() -> <init>
    137:137:void enable() -> enable
    143:143:void disable() -> disable
react.action.ActionCollectGarbage -> lDGI:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionCollectGarbage$1 -> lDGI$1:
    react.api.IActionSource val$source -> FyUA
    react.action.ActionCollectGarbage this$0 -> NETa
    30:30:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> lDGI$1$1:
    long val$mbnex -> kbyS
    long val$mbmem -> ncqw
    react.action.ActionCollectGarbage$1 this$1 -> qBgu
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> IWTN:
    long ms -> IGFv
    int lcd -> vlKO
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> BJNe
    25:25:long access$002(react.action.ActionCullEntities,long) -> BJNe
    25:25:int access$100(react.action.ActionCullEntities) -> BJNe
    25:25:long access$000(react.action.ActionCullEntities) -> AGKd
react.action.ActionCullEntities$1 -> IWTN$1:
    react.action.ActionCullEntities this$0 -> IFfV
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> vtGe
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> IWTN$2:
    react.action.ActionCullEntities this$0 -> IFfV
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> vtGe
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> IWTN$3:
    react.glang.FinalInteger val$completed -> PCKN
    react.glang.FinalInteger val$total -> CxYw
    react.glang.FinalInteger val$totalCulled -> CNGg
    react.glang.FinalInteger val$totalChunked -> Mcsm
    react.api.IActionSource val$source -> FyUA
    react.action.ActionCullEntities this$0 -> IFfV
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> IWTN$4:
    react.api.IActionSource val$source -> FyUA
    react.glang.FinalInteger val$totalCulled -> CNGg
    react.glang.FinalInteger val$totalChunked -> Mcsm
    react.action.ActionCullEntities this$0 -> IFfV
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> vtGe:
    24:38:void <init>() -> <init>
    43:95:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionFixLighting$1 -> vtGe$1:
    react.action.ActionFixLighting this$0 -> ETLu
    28:28:void <init>(react.action.ActionFixLighting) -> <init>
    32:35:react.api.ISelector get() -> vtGe
    28:28:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> vtGe$2:
    react.api.IActionSource val$source -> FyUA
    int val$ch -> eGvK
    react.action.ActionFixLighting this$0 -> ETLu
    70:70:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    74:79:void run(java.lang.Integer) -> BJNe
    70:70:void run(java.lang.Object) -> BJNe
react.action.ActionFixLighting$3 -> vtGe$3:
    react.action.ActionFixLighting this$0 -> ETLu
    81:81:void <init>(react.action.ActionFixLighting) -> <init>
    85:90:void run(java.lang.Double) -> BJNe
    81:81:void run(java.lang.Object) -> BJNe
react.action.ActionLockFluid -> iCNQ:
    int lcd -> vlKO
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionLockFluid$1 -> iCNQ$1:
    react.action.ActionLockFluid this$0 -> SCcR
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> vtGe
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> iCNQ$2:
    react.action.ActionLockFluid this$0 -> SCcR
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> vtGe
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> aeiG:
    int lcd -> vlKO
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionLockHopper$1 -> aeiG$1:
    react.action.ActionLockHopper this$0 -> YgVy
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> vtGe
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> aeiG$2:
    react.action.ActionLockHopper this$0 -> YgVy
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> vtGe
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> eXcm:
    int lcd -> vlKO
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionLockRedstone$1 -> eXcm$1:
    react.action.ActionLockRedstone this$0 -> PeNR
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> vtGe
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> eXcm$2:
    react.action.ActionLockRedstone this$0 -> PeNR
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> vtGe
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> pPQx:
    long ms -> IGFv
    int lcd -> vlKO
    boolean fail -> PvQm
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> AGKd
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> BJNe
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> BJNe
    23:23:int access$200(react.action.ActionPurgeChunks) -> AGKd
    23:23:long access$100(react.action.ActionPurgeChunks) -> NEAQ
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> BJNe
react.action.ActionPurgeChunks$1 -> pPQx$1:
    react.action.ActionPurgeChunks this$0 -> IOYy
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> vtGe
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> pPQx$2:
    int val$dk -> hseu
    java.lang.Object val$j -> dVWi
    react.glang.FinalInteger val$acompleted -> iLVN
    react.glang.FinalInteger val$completed -> PCKN
    react.glang.FinalInteger val$total -> CxYw
    react.glang.FinalInteger val$totalCulled -> CNGg
    react.glang.FinalInteger val$totalChunked -> Mcsm
    react.api.IActionSource val$source -> FyUA
    react.api.ISelector[] val$selectors -> fSmA
    react.action.ActionPurgeChunks this$0 -> IOYy
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> pPQx$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> XRta
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> pPQx$3:
    react.api.IActionSource val$source -> FyUA
    react.glang.FinalInteger val$acompleted -> iLVN
    react.action.ActionPurgeChunks this$0 -> IOYy
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> pPQx$4:
    org.bukkit.Chunk val$chunk -> uXHk
    java.lang.Runnable val$cb -> VLoQ
    react.action.ActionPurgeChunks this$0 -> IOYy
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> iBkv:
    long ms -> IGFv
    int lcd -> vlKO
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> AGKd
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> BJNe
    27:27:int access$100(react.action.ActionPurgeEntities) -> BJNe
    27:27:long access$000(react.action.ActionPurgeEntities) -> AGKd
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> BJNe
react.action.ActionPurgeEntities$1 -> iBkv$1:
    react.action.ActionPurgeEntities this$0 -> Fpdk
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> vtGe
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> iBkv$2:
    react.action.ActionPurgeEntities this$0 -> Fpdk
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> vtGe
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> iBkv$3:
    react.glang.FinalInteger val$completed -> PCKN
    react.glang.FinalInteger val$total -> CxYw
    react.glang.FinalInteger val$totalCulled -> CNGg
    react.glang.FinalInteger val$totalChunked -> Mcsm
    react.api.IActionSource val$source -> FyUA
    react.action.ActionPurgeEntities this$0 -> Fpdk
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> iBkv$4:
    react.api.IActionSource val$source -> FyUA
    react.glang.FinalInteger val$totalCulled -> CNGg
    react.glang.FinalInteger val$totalChunked -> Mcsm
    react.action.ActionPurgeEntities this$0 -> Fpdk
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> iBkv$5:
    org.bukkit.entity.Entity val$i -> aoQt
    react.glang.FinalInteger val$cu -> iwHk
    int val$k -> pbJm
    org.bukkit.Chunk val$chunk -> uXHk
    java.lang.Runnable val$cb -> VLoQ
    react.action.ActionPurgeEntities this$0 -> Fpdk
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> Cfcu:
    int lcd -> vlKO
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionUnlockFluid$1 -> Cfcu$1:
    react.action.ActionUnlockFluid this$0 -> JIjn
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> vtGe
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> jEoX:
    int lcd -> vlKO
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionUnlockHopper$1 -> jEoX$1:
    react.action.ActionUnlockHopper this$0 -> xOnj
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> vtGe
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> rMfk:
    int lcd -> vlKO
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.action.ActionUnlockRedstone$1 -> rMfk$1:
    react.action.ActionUnlockRedstone this$0 -> Gbdn
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> vtGe
    30:30:java.lang.Object get() -> get
react.api.Action -> NoTf:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> axBP
    java.lang.String[] nodes -> HTgE
    react.api.ActionHandle handle -> Gsfc
    react.api.ActionState state -> LjEP
    react.api.ActionTargetType target -> TNwq
    react.api.ActionType type -> ytth
    react.api.IActionSource currentSource -> kkkp
    double progress -> GQdT
    react.glang.GMap defaultSelectors -> gOCN
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> BJNe
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> BJNe
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> iCNQ
    89:89:react.api.ActionState getState() -> aeiG
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> BJNe
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> eXcm
    125:125:react.api.ActionType getType() -> pPQx
    131:131:react.glang.GMap getDefaultSelectors() -> iBkv
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> AGKd
    151:152:void completeAction() -> Cfcu
    157:157:react.api.IActionSource getCurrentSource() -> jEoX
    163:163:java.lang.String[] getNodes() -> rMfk
    169:170:void setNodes(java.lang.String[]) -> BJNe
    void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
react.api.ActionAlreadyRunningException -> MuBm:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> eaUN:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> OHEE:
    react.api.ActionHandle AUTOMATIC -> YUyg
    react.api.ActionHandle MANUAL -> dNIh
    react.api.ActionHandle MUTEX -> AjHT
    react.api.ActionHandle[] $VALUES -> Utad
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> PmKF:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> GPmc:
    react.api.ActionState IDLE -> vkoT
    react.api.ActionState RUNNING -> HKyF
    react.api.ActionState[] $VALUES -> ryTs
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> mXJl:
    react.api.ActionTargetType POSITIONAL -> Drpu
    react.api.ActionTargetType SYSTEM -> GRHR
    react.api.ActionTargetType[] $VALUES -> TFkU
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> dLnT:
    react.api.ActionType FIX_LIGHTING -> sYsv
    react.api.ActionType UNLOCK_FLUID -> tUHR
    react.api.ActionType LOCK_FLUID -> ggsa
    react.api.ActionType UNLOCK_HOPPER -> rgqq
    react.api.ActionType LOCK_HOPPER -> XcwU
    react.api.ActionType UNLOCK_REDSTONE -> jNyM
    react.api.ActionType LOCK_REDSTONE -> oVXj
    react.api.ActionType CULL_ENTITIES -> Gshe
    react.api.ActionType COLLECT_GARBAGE -> ymGh
    react.api.ActionType PURGE_ENTITIES -> WHCm
    react.api.ActionType PURGE_CHUNKS -> pGyB
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> Gsfc
    react.api.ActionTargetType target -> TNwq
    react.api.ActionType[] $VALUES -> agBt
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    25:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> NoTf
    49:49:react.api.ActionTargetType getTarget() -> eXcm
    5:17:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> bGHq:
    react.api.ActivationRangeType ANIMALS -> JdAb
    react.api.ActivationRangeType MONSTERS -> DaoM
    react.api.ActivationRangeType MISC -> SUIc
    react.api.ActivationRangeType[] $VALUES -> imxa
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> XIkf:
    int value() -> value
react.api.Async -> JbfS:
react.api.CPUBenchmark -> lUFw:
    org.bukkit.command.CommandSender sender -> sender
    int score -> cRuY
    java.lang.Runnable onFinish -> uiOR
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> MuBm
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> BJNe
    10:10:int access$100(react.api.CPUBenchmark) -> AGKd
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> NEAQ
react.api.CPUBenchmark$1 -> lUFw$1:
    react.api.CPUBenchmark this$0 -> fusv
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> lUFw$2:
    react.api.CPUBenchmark this$0 -> fusv
    73:73:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> tCKx:
    react.api.CPUResult ULTRA_SLOW -> ymKR
    react.api.CPUResult VERY_SLOW -> WqyI
    react.api.CPUResult SLOW -> fnES
    react.api.CPUResult AVERAGE -> AYHh
    react.api.CPUResult GOOD -> kuDT
    react.api.CPUResult FAST -> JJQY
    react.api.CPUResult VERY_FAST -> aUcU
    react.api.CPUResult ULTRA_FAST -> RYxY
    java.lang.String m -> HwOr
    react.api.CPUResult[] $VALUES -> cAwW
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> BJNe
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> FDwc:
    react.glang.GMap cache -> GRIq
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> AGKd
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> NEAQ
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> eaUN
    54:54:boolean has(java.lang.Object) -> TFRB
react.api.Capabilities -> OHCR:
    react.api.Capabilities DUAL_WIELD -> bPVf
    react.api.Capabilities SCOREBOARD -> xrWh
    react.api.Capabilities HOPPERS -> qSom
    react.api.Capabilities ATTRIBUTES -> eaon
    react.api.Capabilities ENTITY_AI -> xGcT
    react.api.Capabilities ACTION_BAR -> vuBp
    react.api.Capabilities ENTITY_NAMES -> iTih
    react.surge.util.ProtocolRange r -> qmcU
    java.lang.String n -> NNMf
    react.api.Capabilities[] $VALUES -> IGON
    10:10:react.api.Capabilities[] values() -> values
    10:10:react.api.Capabilities valueOf(java.lang.String) -> valueOf
    24:27:void <init>(java.lang.String,int,java.lang.String,react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:boolean isCapable() -> OHEE
    42:43:void sendNotCapable(org.bukkit.command.CommandSender) -> BJNe
    47:48:void sendCapable(org.bukkit.command.CommandSender) -> AGKd
    10:18:void <clinit>() -> <clinit>
react.api.ChunkIssue -> jhRp:
    react.api.ChunkIssue ENTITY -> dNKr
    react.api.ChunkIssue HOPPER -> brXR
    react.api.ChunkIssue REDSTONE -> gqGQ
    react.api.ChunkIssue FLUID -> WPUh
    react.api.ChunkIssue PHYSICS -> HDIt
    react.api.ChunkIssue[] $VALUES -> Drqi
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.api.Clip -> DaUf:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> yklq:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> AGKd
    30:31:void sendResponseSuccess(java.lang.String) -> NEAQ
    36:37:void sendResponseError(java.lang.String) -> TFRB
    42:43:void sendResponseActing(java.lang.String) -> iBmJ
react.api.ConsoleActionSource -> UcGR:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> AGKd
    18:19:void sendResponseSuccess(java.lang.String) -> NEAQ
    24:25:void sendResponseError(java.lang.String) -> TFRB
    30:31:void sendResponseActing(java.lang.String) -> iBmJ
react.api.CullList -> QpME:
    react.glang.GSet toCull -> Yomd
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> iBmJ
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> PmKF
react.api.DTest -> JbgA:
    3:3:void <init>() -> <init>
    7:58:int test() -> GPmc
react.api.EntityFlag -> BJOT:
    react.api.EntityFlag NAMED -> sYvM
    react.api.EntityFlag TAMED -> PnDu
    react.api.EntityFlag STACKED -> iDII
    react.api.EntityFlag RIDDEN -> XmJy
    react.api.EntityFlag LEASHED -> lweV
    java.lang.String m -> HwOr
    react.api.EntityFlag[] $VALUES -> oMih
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> lDGI
    40:60:boolean is(org.bukkit.entity.Entity) -> IWTN
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> wTdl:
    react.glang.GSet entityTypes -> hAEk
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> mXJl
react.api.EntitySample -> wUEl:
    react.glang.GMap counts -> OapH
    react.glang.GMap sets -> nKGf
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> dLnT
    45:45:react.glang.GList getTypes() -> bGHq
    50:57:int total() -> XIkf
    62:67:int get(org.bukkit.entity.EntityType) -> BJNe
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> AGKd
    84:96:void add(org.bukkit.entity.Entity) -> iBmJ
react.api.Experimental -> WGJY:
react.api.IAction -> yQya:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> iCNQ
    void act(react.api.IActionSource,react.api.ISelector[]) -> AGKd
    void enact(react.api.IActionSource,react.api.ISelector[]) -> BJNe
    react.api.ActionState getState() -> aeiG
    react.api.ActionTargetType getTarget() -> eXcm
    void setNodes(java.lang.String[]) -> BJNe
    java.lang.String[] getNodes() -> rMfk
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> BJNe
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> pPQx
    react.glang.GMap getDefaultSelectors() -> iBkv
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> BJNe
    react.api.ISelector[] biselect(react.api.ISelector[]) -> BJNe
    react.api.IActionSource getCurrentSource() -> jEoX
    void completeAction() -> Cfcu
react.api.IActionSource -> GsRh:
    void sendResponse(java.lang.String) -> AGKd
    void sendResponseSuccess(java.lang.String) -> NEAQ
    void sendResponseError(java.lang.String) -> TFRB
    void sendResponseActing(java.lang.String) -> iBmJ
react.api.ICache -> vQfB:
    react.glang.GSet get(java.lang.Object) -> AGKd
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> NEAQ
    void clear() -> clear
    boolean has(java.lang.Object) -> TFRB
    react.glang.GList k() -> eaUN
react.api.ICommand -> fJfj:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> JbfS
    java.lang.String[] getPermissions() -> lUFw
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> lDGI
    react.api.SideGate getSideGate() -> tCKx
    void registerParameterDescription(java.lang.String,java.lang.String) -> BJNe
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.api.IRecord -> pYEy:
    java.lang.String getRecordType() -> FDwc
    long getRecordTime() -> OHCR
    react.json.JSONObject toJSON() -> jhRp
    java.lang.Object getRecordObject() -> DaUf
    void fromJSON(react.json.JSONObject) -> BJNe
react.api.IRecordBook -> aCgk:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> BJNe
    long getOldestRecordTime() -> yklq
    void addRecord(react.api.IRecord) -> BJNe
    long getLatestRecordTime() -> UcGR
    int countRecords(long,long) -> BJNe
    react.glang.GMap getRecords(long,long) -> AGKd
    int purgeRecordsBefore(long) -> AGKd
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> IyYW:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> QpME
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> JbgA
    react.surge.util.C getAltColor() -> BJOT
    void setColor(react.surge.util.C,react.surge.util.C) -> BJNe
    int getInterval() -> getInterval
    void setInterval(int) -> AGKd
    void sample() -> wTdl
    java.lang.String get() -> get
    void construct() -> wUEl
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> KUKo:
    react.api.SelectionMode getMode() -> WGJY
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> iBmJ
    react.glang.GSet getList() -> yQya
    react.glang.GSet getPossibilities() -> GsRh
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> lDGI
    java.lang.String getName() -> getName
react.api.Injection -> rpNJ:
    react.api.InjectionMethod value() -> vQfB
react.api.InjectionMethod -> IyYU:
    react.api.InjectionMethod SWAP -> cRxH
    react.api.InjectionMethod SUBSTRATE -> hIUV
    react.api.InjectionMethod RELOAD -> kkou
    react.api.InjectionMethod[] $VALUES -> QVuA
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> kAEP:
    java.lang.String value() -> value
react.api.MSampler -> HeUI:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> fJfj
react.api.MonitorHeading -> WXNh:
    react.api.ISampler head -> cBVm
    react.glang.GList children -> baVk
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> BJNe
    27:27:react.api.ISampler getHead() -> pYEy
    32:33:void setHead(react.api.ISampler) -> AGKd
    37:37:react.glang.GList getChildren() -> aCgk
    42:42:java.lang.String getHeadText() -> IyYW
    47:60:java.lang.String getChildText() -> KUKo
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> BJNe
react.api.NoiseGenerator -> wvjn:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> TEsU:
    react.api.NoiseGenerator[] octaves -> VMRn
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> rpNJ
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> PAvx:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> Wqwt
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> IyYU
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> ugsb:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> BJNe
react.api.Permissable -> dUcD:
    react.api.Permissable ACCESS -> twLQ
    react.api.Permissable MONITOR -> fSrt
    react.api.Permissable MONITOR_TITLE -> FWYM
    react.api.Permissable MONITOR_ACTIONLOG -> OYax
    react.api.Permissable MONITOR_MAP -> LGhQ
    react.api.Permissable MONITOR_ENVIRONMENT -> gVvb
    react.api.Permissable MONITOR_GLASSES -> TWpY
    react.api.Permissable MONITOR_CHUNK_BLAME -> KUfj
    react.api.Permissable RAI_MONITOR -> URbo
    react.api.Permissable RAI_CONTROL -> qLCc
    react.api.Permissable RAI_ACCESS -> wnvW
    react.api.Permissable RAI -> QWYG
    react.api.Permissable ACT -> fvWL
    react.api.Permissable RELOAD -> rqIM
    java.lang.String node -> jXPH
    react.api.Permissable[] $VALUES -> nlkx
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> NEAQ
    46:46:java.lang.String getNode() -> kAEP
    7:22:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> cdAr:
    org.bukkit.entity.Player p -> SnaD
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> AGKd
    30:31:void sendResponseSuccess(java.lang.String) -> NEAQ
    36:37:void sendResponseError(java.lang.String) -> TFRB
    42:43:void sendResponseActing(java.lang.String) -> iBmJ
react.api.PluginSelfDeleter -> IFTv:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> wUdT
    java.lang.Runnable r -> LilN
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> BJNe
react.api.RAIActionSource -> OOup:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> AGKd
    16:17:void sendResponseSuccess(java.lang.String) -> NEAQ
    22:23:void sendResponseError(java.lang.String) -> TFRB
    28:29:void sendResponseActing(java.lang.String) -> iBmJ
react.api.ReactCommand -> DGfb:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> ePow
    java.lang.String usage -> uiQG
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> DYdK
    react.api.SideGate sideGate -> QVwm
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> lDGI
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> BJNe
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> JbfS
    47:47:java.lang.String[] getPermissions() -> lUFw
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> tCKx
react.api.ReactException -> sPkx:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> FMkE:
    react.glang.GMap keystore -> PvXm
    boolean monitoring -> monitoring
    boolean actionlogging -> oyAa
    boolean glasses -> sHwM
    boolean mapping -> Euvg
    int monitorSelection -> nmMA
    int plays -> hcKB
    boolean monitorPosted -> UBAY
    int monitorLastSelection -> xihQ
    int switchNotification -> nRyK
    int hotbarSlot -> wfdf
    boolean shift -> lMTM
    int scroll -> XRya
    double lastHeight -> FOHI
    boolean heightMovement -> XBXp
    org.bukkit.entity.Player p -> SnaD
    41:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> HeUI
    124:124:boolean isMapping() -> WXNh
    129:129:org.bukkit.entity.Player getP() -> wvjn
    134:136:void setMonitoring(boolean) -> AGKd
    140:142:void setMapping(boolean) -> NEAQ
    146:146:int getMonitorSelection() -> TEsU
    151:153:void setMonitorSelection(int) -> NEAQ
    157:157:int getHotbarSlot() -> PAvx
    162:164:void setHotbarSlot(int) -> TFRB
    168:168:boolean isShifting() -> ugsb
    173:175:void setShifting(boolean) -> TFRB
    179:179:boolean isShift() -> dUcD
    184:186:void setShift(boolean) -> iBmJ
    190:190:int getScroll() -> cdAr
    195:197:void setScroll(int) -> iBmJ
    201:201:int getMonitorLastSelection() -> IFTv
    206:208:void setMonitorLastSelection(int) -> lDGI
    212:213:void setP(org.bukkit.entity.Player) -> BJNe
    217:217:double getLastHeight() -> OOup
    222:224:void setLastHeight(double) -> BJNe
    228:228:boolean isHeightMovement() -> DGfb
    233:235:void setHeightMovement(boolean) -> lDGI
    239:239:int getSwitchNotification() -> sPkx
    244:246:void setSwitchNotification(int) -> IWTN
    250:250:boolean getMonitorPosted() -> FMkE
    255:257:void setMonitorPosted(boolean) -> IWTN
    261:261:int getPlays() -> lfKA
    266:268:void setPlays(int) -> vtGe
    272:272:boolean isGlasses() -> IpgA
    277:279:void setGlasses(boolean) -> vtGe
    283:283:boolean isActionlogging() -> pOsK
    288:290:void setActionlogging(boolean) -> iCNQ
    24:39:void <clinit>() -> <clinit>
react.api.Record -> lfKA:
    java.lang.String recordType -> WHFy
    long recordTime -> hAGk
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> FDwc
    32:32:long getRecordTime() -> OHCR
    38:38:java.lang.Object getRecordObject() -> DaUf
    react.json.JSONObject toJSON() -> jhRp
    void fromJSON(react.json.JSONObject) -> BJNe
react.api.RecordBook -> IpgA:
    java.io.File recordFile -> oNMK
    react.json.JSONObject js -> UuFa
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> BJNe
    79:87:react.api.IRecord getRecord(long) -> BJNe
    react.api.IRecord createDummyRecord(long,java.lang.String) -> BJNe
    95:107:long getOldestRecordTime() -> yklq
    113:125:long getLatestRecordTime() -> UcGR
    130:130:boolean within(long,long,long) -> BJNe
    136:144:int countRecords(long,long) -> BJNe
    150:162:react.glang.GMap getRecords(long,long) -> AGKd
    168:181:int purgeRecordsBefore(long) -> AGKd
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> pOsK:
react.api.SampledChunk -> GsRQ:
    org.bukkit.Chunk c -> ryXR
    react.glang.GMap counts -> OapH
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> GsRQ
    26:38:void hit(react.api.ChunkIssue,int) -> BJNe
    42:42:org.bukkit.Chunk getC() -> sPkl
    47:47:react.glang.GMap getCounts() -> eHCc
react.api.SampledType -> sPkl:
    react.api.SampledType ENTITY_TIME_LOCK -> iUKi
    react.api.SampledType TILE_TIME_LOCK -> VEDi
    react.api.SampledType ENTITY_TIME -> RQie
    react.api.SampledType TILE_TIME -> XAxf
    react.api.SampledType ENTITY_DROPTICK -> FOKC
    react.api.SampledType TILE_DROPTICK -> xGhK
    react.api.SampledType REDSTONE_TICK_USAGE -> SCmk
    react.api.SampledType REDSTONE_TICK -> NyEc
    react.api.SampledType REDSTONE_SECOND -> mOyU
    react.api.SampledType REDSTONE_TIME -> YpTX
    react.api.SampledType HOPPER_TICK_USAGE -> XJlu
    react.api.SampledType HOPPER_TICK -> woXb
    react.api.SampledType HOPPER_SECOND -> htOI
    react.api.SampledType HOPPER_TIME -> Orvl
    react.api.SampledType FLUID_TICK_USAGE -> XmQQ
    react.api.SampledType FLUID_TICK -> quwH
    react.api.SampledType FLUID_SECOND -> BvDK
    react.api.SampledType FLUID_TIME -> TFpM
    react.api.SampledType TPS -> CpTQ
    react.api.SampledType TICK -> twPj
    react.api.SampledType TIU -> Hnad
    react.api.SampledType MEM -> lgHO
    react.api.SampledType FREEMEM -> UdFp
    react.api.SampledType MAXMEM -> MuaO
    react.api.SampledType ALLOCMEM -> TiSr
    react.api.SampledType MAHS -> vBAX
    react.api.SampledType CHK_TIME -> VDfU
    react.api.SampledType EXPLOSION_TIME -> rOGM
    react.api.SampledType CHK -> NNPm
    react.api.SampledType ATASK -> bXjE
    react.api.SampledType STASK -> afkS
    react.api.SampledType CHKS -> EKhb
    react.api.SampledType ENT -> fnKU
    react.api.SampledType ENTLIV -> dotV
    react.api.SampledType ENTDROP -> HesW
    react.api.SampledType ENTTILE -> bYNA
    java.lang.String node -> jXPH
    react.api.SampledType[] $VALUES -> MlsC
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    49:49:react.api.ISampler get() -> PJft
    55:55:java.lang.String toString() -> toString
    59:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> kAEP
    6:43:void <clinit>() -> <clinit>
react.api.Sampler -> eHCc:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> WXnG
    react.surge.util.C altColor -> incE
    int interval -> USHi
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> JbgA
    49:49:react.surge.util.C getAltColor() -> BJOT
    55:55:int getInterval() -> getInterval
    void sample() -> wTdl
    void construct() -> wUEl
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> BJNe
    107:108:void setInterval(int) -> AGKd
react.api.Sector -> PJft:
    int value() -> value
react.api.SelectionException -> jgrv:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> QMjd:
    react.api.SelectionMode WHITELIST -> VgMM
    react.api.SelectionMode BLACKLIST -> XucY
    react.api.SelectionMode[] $VALUES -> tUPY
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> CMSr:
    java.lang.Class objectType -> gpmQ
    react.api.SelectionMode mode -> PSyN
    react.glang.GSet list -> wVIR
    react.glang.GSet possibilities -> sQlC
    int popoff -> iCnD
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> WGJY
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> iBmJ
    43:43:react.glang.GSet getList() -> yQya
    49:49:react.glang.GSet getPossibilities() -> GsRh
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> lDGI
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> IWTN
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> vcEx:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> NEAQ
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> lDGI
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> vtGe
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> lDGY:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> aeiy:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> AGKd
    29:30:void add(org.bukkit.Chunk,int) -> BJNe
    34:38:void add(org.bukkit.World) -> lDGI
    42:46:void addAll() -> jgrv
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> lDGI
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> vtGe
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> onra:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> lDGI
    87:87:java.lang.String getName() -> getName
react.api.Side -> BBAE:
    react.api.Side PLAYERS -> OHdL
    react.api.Side CONSOLE -> YVbQ
    java.lang.String ss -> dyEX
    react.api.Side[] $VALUES -> bGjJ
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> QMjd
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> TFRB
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> uhTL:
    react.api.SideGate PLAYERS_ONLY -> IFrc
    react.api.SideGate CONSOLES_ONLY -> oxcs
    react.api.SideGate ANYTHING -> Gspq
    react.api.SideGate[] $VALUES -> JJVf
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> BJNe
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> uhTL$1:
    int[] $SwitchMap$react$api$SideGate -> Mlqh
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> gDxL:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> AjQS
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> CMSr
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> IVuE:
    double wScale -> wnxc
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> BJNe
react.api.SpecializedTickLimiter -> RIAP:
    double rMaxTime -> PnLJ
    long rStartTime -> RROL
    double rLastTime -> AsAo
    long rMark -> TywI
    double tMaxTime -> UAeQ
    react.gmath.Average atimes -> lwmt
    react.gmath.Average adropped -> dVeB
    int droppedTicks -> VwoY
    boolean entityTick -> JuNJ
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> qKJE:
    react.glang.GList sources -> dMrt
    react.glang.GList splooge -> DkLK
    react.glang.GSet destroy -> wfkm
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> BJNe
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> AGKd
    void clipped(org.bukkit.Location) -> BJNe
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> AGKd
    boolean isAllowedSource(org.bukkit.Location) -> NEAQ
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> BJNe
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> AGKd
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> NEAQ
react.api.SploogeCounter$1 -> qKJE$1:
    java.util.Iterator val$it -> CghK
    org.bukkit.Location val$start -> WaaE
    int val$maxDistance -> iTsA
    react.api.SploogeCounter this$0 -> qKhj
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> qKJE$1$1:
    react.api.SploogeCounter$1 this$1 -> ekJJ
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> ccbo:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> IWXP:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> jhRp
    38:49:void fromJSON(react.json.JSONObject) -> BJNe
react.api.StackTraceRecordBook -> GkEE:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> AGKd
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> BJNe
react.api.StackedEntity -> OPWy:
    org.bukkit.entity.LivingEntity entity -> DPwv
    int count -> count
    double rmx -> XmUE
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> BJNe
    46:46:int getAbsoluteMaxCount() -> vcEx
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> AGKd
    56:58:void update() -> update
    62:68:void signalSize() -> lDGY
    72:123:void updateHealth() -> aeiy
    127:128:void heal(double) -> AGKd
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> onra
    142:142:int getEffectiveCount(double) -> NEAQ
    147:147:double getEffectiveMaxHealth(int) -> iCNQ
    152:152:double getRealMaxHealth() -> BBAE
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> BJNe
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> tnEj:
    react.glang.GList headings -> jFst
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> BJNe
    24:24:int getMaxSelection() -> uhTL
    29:37:int left(int) -> aeiG
    42:50:int right(int) -> eXcm
    55:55:react.api.MonitorHeading getHeadFor(int) -> pPQx
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> BJNe
    83:100:java.lang.String getHotbarFor(int,boolean) -> BJNe
react.api.Unused -> XktD:
react.binject.BlockInjector -> Aqbg:
    react.surge.util.Protocol protocol -> mHNO
    java.lang.Class blocksClass -> VgOD
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> BJNe
    29:56:void inject() -> gDxL
    61:61:react.surge.util.Protocol getVersion() -> IVuE
react.binject.IBlockInjector -> dfeg:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> BJNe
    void add(int,java.lang.String,java.lang.Object) -> BJNe
    java.lang.Object get(java.lang.String) -> get
    void inject() -> gDxL
    react.surge.util.Protocol getVersion() -> IVuE
react.binject.InjectedBlock -> wDIu:
    react.surge.util.Protocol getInjectProtocol() -> RIAP
    java.lang.String getInjectKey() -> qKJE
    java.lang.String getInjectCKey() -> ccbo
    int getInjectId() -> IWXP
react.binject.ReflectionUtil -> pjJK:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> BJNe
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> BJNe
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> BJNe
    41:54:void setAccessible(java.lang.reflect.Field) -> BJNe
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> BJNe
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> BJNe
react.binject.V10.BlockInjector10 -> kbhs:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> IWTN
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> BJNe
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> BJNe
react.binject.V11.BlockInjector11 -> lTkD:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> vtGe
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> BJNe
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> BJNe
react.binject.V12.BlockInjector12 -> AaAl:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> iCNQ
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> BJNe
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> BJNe
react.binject.V8.BlockInjector8 -> yuDV:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> aeiG
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> BJNe
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> BJNe
react.binject.V9.BlockInjector9 -> awPP:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> eXcm
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> BJNe
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> BJNe
react.cache.CachedEntity -> HBrw:
    java.util.UUID uid -> BufD
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> LYPo
    double x -> x
    double y -> y
    double z -> z
    double vx -> lgNP
    double vy -> cBaA
    double vz -> rOLV
    double dx -> slBI
    double dy -> VUmL
    double dz -> yvCt
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> vtGe
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> GkEE
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> OPWy
    120:121:void setVx(double) -> TFRB
    125:125:double getVy() -> tnEj
    130:131:void setVy(double) -> iBmJ
    135:135:double getVz() -> XktD
    140:141:void setVz(double) -> lDGI
    145:145:double getDx() -> Aqbg
    150:151:void setDx(double) -> IWTN
    155:155:double getDy() -> dfeg
    160:161:void setDy(double) -> vtGe
    165:165:double getDz() -> wDIu
    170:171:void setDz(double) -> iCNQ
    175:175:java.util.UUID getUid() -> pjJK
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> IVwf:
    int age -> vtil
    boolean ageLock -> ivtm
    boolean breed -> TWvq
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> vtGe
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> kbhs
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> lTkD
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> dfdp:
    org.bukkit.DyeColor dye -> SoGh
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> vtGe
    30:30:org.bukkit.DyeColor getDye() -> AaAl
    35:36:void setDye(org.bukkit.DyeColor) -> BJNe
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> UtLV:
    react.glang.GList potionEffects -> AsBt
    boolean canPickupItems -> cCAT
    org.bukkit.inventory.ItemStack[] armorContents -> lxOP
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> awoK
    double maxHealth -> maxHealth
    int maxAir -> oWDO
    int air -> sALs
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> vtGe
    63:63:react.glang.GList getPotionEffects() -> yuDV
    68:69:void setPotionEffects(react.glang.GList) -> AGKd
    73:73:boolean isCanPickupItems() -> awPP
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> HBrw
    138:139:void setMaxAir(int) -> iBkv
    143:143:int getAir() -> IVwf
    148:149:void setAir(int) -> Cfcu
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> Cwgv:
    boolean sheared -> UuKt
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> vtGe
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> RPoV:
    org.bukkit.inventory.ItemStack is -> kkyI
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> vtGe
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> INef:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> pYGP:
    react.chronophysics.HopperDirection DOWN -> DQWm
    react.chronophysics.HopperDirection NORTH -> tCno
    react.chronophysics.HopperDirection SOUTH -> NgfM
    react.chronophysics.HopperDirection EAST -> eYey
    react.chronophysics.HopperDirection WEST -> BJsC
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> qBuw
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> TFRB
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> BJNe
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> AGKd
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> pYGP$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> BlvC
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> Rjaj:
    org.bukkit.block.Hopper source -> IrJK
    react.glang.GList path -> dpUk
    org.bukkit.block.Hopper destination -> JRhm
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> dfdp
    31:31:react.glang.GList getPath() -> UtLV
    36:36:org.bukkit.block.Hopper getDestination() -> Cwgv
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> BJNe
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> KUMN:
    org.bukkit.block.Hopper h -> HDRg
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> BJNe
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> RPoV
    62:62:boolean isLockedByRedstone() -> INef
react.command.CommandAct -> eqwp:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> BJNe
    186:192:react.text.RTX getBeginningRTX() -> pYGP
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> BJNe
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> AGKd
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> NEAQ
    331:346:react.glang.GList getSortedCommands() -> Rjaj
    351:358:int getPageSize(int) -> jEoX
    363:363:boolean isValidPage(int,int) -> BJNe
    368:377:react.glang.GList getPage(int,int) -> AGKd
react.command.CommandActionLog -> uxvp:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandCPUScore -> UAHH:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandCapabilities -> hapT:
    16:23:void <init>() -> <init>
    28:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandChunkBlame -> JHwe:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandChunkBlame$1 -> JHwe$1:
    org.bukkit.command.CommandSender val$sender -> HnfQ
    react.command.CommandChunkBlame this$0 -> Ngfl
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> JHwe$1$1:
    java.lang.String val$i -> Arbu
    react.glang.GMap val$top -> rNiv
    int val$totalx -> indL
    react.command.CommandChunkBlame$1 this$1 -> OkKH
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> ndBO:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandHelp -> pqvy:
    28:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> BJNe
    69:75:react.text.RTX getBeginningRTX() -> pYGP
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> BJNe
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> AGKd
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> NEAQ
    191:198:react.glang.GList getSortedCommands() -> Rjaj
    203:210:int getPageSize(int) -> jEoX
    215:215:boolean isValidPage(int,int) -> BJNe
    220:229:react.glang.GList getPage(int,int) -> AGKd
react.command.CommandMap -> BRdC:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandMonitor -> wTiR:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandReload -> CUgA:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.command.CommandReload$1 -> CUgA$1:
    org.bukkit.command.CommandSender val$sender -> HnfQ
    react.command.CommandReload this$0 -> HTtG
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> CUgA$1$1:
    react.command.CommandReload$1 this$1 -> urFt
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> bypt:
    28:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
    52:61:org.bukkit.inventory.ItemStack makeBook() -> KUMN
    66:92:void addSpikePages(react.glang.GList) -> NEAQ
    96:106:void addStatusPages(react.glang.GList) -> TFRB
    110:127:int findSlot(org.bukkit.entity.Player) -> AGKd
react.command.CommandVersion -> Jbjg:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> BJNe
react.controller.ActionController -> vHuK:
    int kiv -> GRQe
    react.glang.GMap actions -> twSx
    react.glang.GMap pending -> gOLS
    react.glang.GList tasks -> vAhS
    18:18:void <init>() -> <init>
    29:70:void start() -> start
    74:75:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> BJNe
    79:100:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> AGKd
    105:105:react.api.IAction getAction(react.api.ActionType) -> BJNe
    110:111:void registerAction(react.api.IAction) -> BJNe
    117:117:void stop() -> stop
    122:187:void tick() -> tick
    191:191:react.glang.GList getActions() -> eqwp
    196:203:react.glang.GList getActionNames() -> uxvp
    20:20:void <clinit>() -> <clinit>
react.controller.BenchmarkController -> BdGb:
    react.api.CPUBenchmark finished -> Gsui
    boolean done -> Pmnv
    int score -> cRuY
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> BJNe
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> BJNe
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> BJNe
react.controller.BenchmarkController$1 -> BdGb$1:
    react.controller.BenchmarkController this$0 -> WbDC
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> BdGb$1$1:
    react.controller.BenchmarkController$1 this$1 -> XvHV
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> BdGb$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> HTvN
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> XIsN:
    react.glang.GMap rangeMapping -> wgOP
    react.binject.IBlockInjector injector -> VxQo
    boolean injected -> wwon
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> UAHH
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> hapT
    115:115:react.binject.IBlockInjector getInjector() -> JHwe
    120:120:boolean isInjected() -> ndBO
react.controller.ChronophyFluidController -> bFnr:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> tTTg:
    boolean firstTickList -> HniM
    long firstTick -> aUnA
    long lastTick -> EKmS
    react.gmath.Average aCSMS -> xjRT
    react.glang.GMap pluginLoads -> dWGU
    react.glang.GMap playerLoads -> kRjC
    int serverLoads -> HniY
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> pqvy
    63:73:void tickNextTickList() -> BRdC
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJNe
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> BJNe
    171:171:boolean isFirstTickList() -> wTiR
    176:176:long getFirstTick() -> CUgA
    181:181:long getLastTick() -> bypt
    186:186:react.gmath.Average getaCSMS() -> Jbjg
    191:191:react.glang.GMap getPluginLoads() -> vHuK
    196:196:react.glang.GMap getPlayerLoads() -> BdGb
    201:201:int getServerLoads() -> XIsN
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> BJNe
    21:21:int access$108(react.controller.ChunkController) -> AGKd
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> NEAQ
react.controller.ChunkController$1 -> tTTg$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> QqSq
    react.controller.ChunkController this$0 -> qKiy
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> NEAQ
    131:131:void run(java.lang.Object) -> BJNe
react.controller.CommandController -> CLvg:
    react.glang.GList commands -> MBbQ
    boolean k -> RcTI
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> iCNQ
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> aeiG
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> BJNe
    317:317:react.glang.GList getCommands() -> bFnr
    322:323:void setCommands(react.glang.GList) -> iBmJ
    327:327:boolean isK() -> tTTg
    332:333:void setK(boolean) -> aeiG
react.controller.EntityCullController -> LiSx:
    react.glang.GSet flags -> JdMU
    react.glang.GSet defer -> kdKe
    react.glang.GMap maxs -> yvEb
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> CLvg
    172:180:int cull(org.bukkit.Chunk) -> NEAQ
    185:285:int partialCull(org.bukkit.Chunk) -> TFRB
react.controller.EntityStackController -> iduq:
    react.glang.GList stacks -> Tqin
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> lDGI
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> NEAQ
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> TFRB
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> BJNe
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> BJNe
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> iBmJ
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> BJNe
react.controller.EntityStackController$1 -> iduq$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> TGVd
    react.controller.EntityStackController this$0 -> MeFP
    249:249:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> oVFs:
    react.glang.GMap slots -> sbqT
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> BJNe
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJNe
react.controller.ExplosiveController -> HCVC:
    boolean firstTickList -> HniM
    long firstTick -> aUnA
    long lastTick -> EKmS
    react.gmath.Average aCSMS -> xjRT
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> pqvy
    50:60:void tickNextTickList() -> BRdC
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> BJNe
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> BJNe
    89:89:boolean isFirstTickList() -> wTiR
    94:94:long getFirstTick() -> CUgA
    99:99:long getLastTick() -> bypt
    104:104:react.gmath.Average getaCSMS() -> Jbjg
react.controller.FastDecayController -> WhsD:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> BJNe
    47:123:void checkBreak(org.bukkit.block.Block) -> NEAQ
    127:135:void decay(org.bukkit.block.Block) -> TFRB
    141:141:void tick() -> tick
react.controller.FastDecayController$1 -> WhsD$1:
    react.glang.GMap val$locs -> Bdfr
    react.controller.FastDecayController this$0 -> gNmH
    57:57:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    61:61:boolean isAllowedSplooge(org.bukkit.Location) -> AGKd
    67:67:boolean isAllowedSource(org.bukkit.Location) -> NEAQ
    73:92:void clipped(org.bukkit.Location) -> BJNe
    97:120:void finished() -> finished
react.controller.FastDecayController$1$1 -> WhsD$1$1:
    int val$i -> ePwh
    react.controller.FastDecayController$1 this$1 -> Rbrr
    102:102:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    106:116:void run() -> run
react.controller.FastDecayController$2 -> WhsD$2:
    org.bukkit.block.Block val$b -> BlwV
    react.controller.FastDecayController this$0 -> gNmH
    128:128:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    132:133:void run() -> run
react.controller.FeatureController -> jNgD:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> bPBP:
    react.glang.GSet ignore -> NVfq
    int flowsPerTick -> awon
    int flowsPerSecond -> Blvs
    react.gmath.Average aFST -> ioFh
    react.gmath.Average aFSS -> VgOo
    react.gmath.Average aFSMS -> UIyb
    boolean firstTickList -> HniM
    long firstTick -> aUnA
    long lastTick -> EKmS
    react.glang.GSet frozen -> FXAj
    react.glang.GMap queue -> jqiM
    react.glang.GMap freezeTimes -> iwWV
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> iBmJ
    68:76:void checkChunks() -> LiSx
    80:97:void checkChunk(org.bukkit.Chunk) -> lDGI
    101:107:void queue(org.bukkit.block.Block) -> iBmJ
    111:111:boolean isFrozen(org.bukkit.Chunk) -> IWTN
    116:117:void freeze(org.bukkit.Chunk) -> vtGe
    121:127:void unfreeze(org.bukkit.Chunk) -> iCNQ
    131:138:void freeze(org.bukkit.Chunk,long) -> BJNe
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> pqvy
    172:182:void tickNextTickList() -> BRdC
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> BJNe
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> BJNe
    248:248:react.glang.GSet getIgnore() -> iduq
    253:253:int getTransfersPerTick() -> oVFs
    258:258:int getTransfersPerSecond() -> HCVC
    263:263:react.gmath.Average getaFST() -> WhsD
    268:268:react.gmath.Average getaFSS() -> jNgD
    273:273:react.gmath.Average getaFSMS() -> bPBP
    278:278:boolean isFirstTickList() -> wTiR
    283:283:long getFirstTick() -> CUgA
    288:288:long getLastTick() -> bypt
    293:293:react.glang.GSet getFrozen() -> MlXN
    298:298:react.glang.GMap getQueue() -> CMVx
    303:303:react.glang.GMap getFreezeTimes() -> sYaa
react.controller.GlassController -> MlXN:
    react.glang.GMap q -> hcRc
    react.glang.GList g -> HfWx
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> NEAQ
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> TFRB
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> iBmJ
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> BJNe
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> BJNe
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> BJNe
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> BJNe
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> BJNe
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> BJNe
    33:33:react.glang.GList access$000(react.controller.GlassController) -> BJNe
react.controller.GlassController$1 -> MlXN$1:
    react.glang.GMap val$cc -> vAfc
    react.controller.GlassController this$0 -> Gsuf
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> MlXN$1$1:
    org.bukkit.Location val$i -> MTEY
    org.bukkit.entity.Player val$j -> nKUK
    react.controller.GlassController$1 this$1 -> lwrY
    107:107:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> CMVx:
    react.glang.GMap g -> NVig
    react.glang.GMap gr -> PnRX
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> BJNe
    121:156:void toggleMapping(org.bukkit.entity.Player) -> lDGI
    160:160:react.glang.GMap getG() -> Grva
    165:165:react.glang.GMap getGr() -> WOag
    28:28:react.glang.GMap access$000(react.controller.GraphController) -> BJNe
    28:28:react.glang.GMap access$100(react.controller.GraphController) -> AGKd
react.controller.GraphController$1 -> CMVx$1:
    react.controller.GraphController this$0 -> QiEO
    49:49:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> CMVx$2:
    react.controller.GraphController this$0 -> QiEO
    85:85:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> CMVx$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> giDX
    react.controller.GraphController this$0 -> QiEO
    101:101:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> sYaa:
    react.glang.GSet ignore -> NVfq
    int transfersPerTick -> YEgi
    int transfersPerSecond -> Qyeh
    react.gmath.Average aHST -> NNYn
    react.gmath.Average aHSS -> WsGf
    react.gmath.Average aHSMS -> LbFg
    boolean firstTickList -> HniM
    long firstTick -> aUnA
    long lastTick -> EKmS
    react.glang.GSet frozen -> FXAj
    react.glang.GMap queue -> jqiM
    react.glang.GMap freezeTimes -> iwWV
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> iBmJ
    65:73:void checkChunks() -> LiSx
    77:94:void checkChunk(org.bukkit.Chunk) -> lDGI
    98:104:void queue(org.bukkit.block.Block) -> iBmJ
    108:108:boolean isFrozen(org.bukkit.Chunk) -> IWTN
    113:114:void freeze(org.bukkit.Chunk) -> vtGe
    118:124:void unfreeze(org.bukkit.Chunk) -> iCNQ
    128:135:void freeze(org.bukkit.Chunk,long) -> BJNe
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> pqvy
    169:179:void tickNextTickList() -> BRdC
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> BJNe
    207:207:react.glang.GSet getIgnore() -> iduq
    212:212:int getTransfersPerTick() -> oVFs
    217:217:int getTransfersPerSecond() -> HCVC
    222:222:react.gmath.Average getaHST() -> Fxdi
    227:227:react.gmath.Average getaHSS() -> jWWr
    232:232:react.gmath.Average getaHSMS() -> RbVA
    237:237:boolean isFirstTickList() -> wTiR
    242:242:long getFirstTick() -> CUgA
    247:247:long getLastTick() -> bypt
    252:252:react.glang.GSet getFrozen() -> MlXN
    257:257:react.glang.GMap getQueue() -> CMVx
    262:262:react.glang.GMap getFreezeTimes() -> sYaa
react.controller.HopperOvertickController -> Grva:
    react.glang.GList possiblePlunge -> jrLf
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> NEAQ
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> BJNe
react.controller.LanguageController -> WOag:
    java.io.File languageFolder -> cKUf
    int oldVersion -> GQuc
    java.io.File dlf -> mXqn
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> APBS
    160:221:void downloadAll(boolean) -> eXcm
    225:261:void downloadLanguage(java.lang.String) -> pPQx
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> iBkv
    315:315:java.io.File getFileForLanguage(java.lang.String) -> Cfcu
    320:332:void writeDefaults() -> RkFe
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> BJNe
    31:31:void access$100(react.controller.LanguageController) -> BJNe
react.controller.LanguageController$1 -> WOag$1:
    react.controller.LanguageController this$0 -> WGqs
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> WOag$2:
    react.controller.LanguageController this$0 -> WGqs
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> WOag$2$1:
    react.controller.LanguageController$2 this$1 -> cSfJ
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> BJNe
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> BJNe
    121:121:void onDownloadStarted(react.gnet.download.Download) -> BJNe
    126:128:void onDownloadFinished(react.gnet.download.Download) -> AGKd
    134:134:void onDownloadFailed(react.gnet.download.Download) -> NEAQ
react.controller.LanguageController$3 -> WOag$3:
    react.controller.LanguageController this$0 -> WGqs
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> WOag$3$1:
    react.controller.LanguageController$3 this$1 -> FhfA
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> WOag$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> bXsO
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> WOag$4:
    java.io.File val$dld -> lfpc
    react.controller.LanguageController this$0 -> WGqs
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> BJNe
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> BJNe
    245:245:void onDownloadStarted(react.gnet.download.Download) -> BJNe
    250:251:void onDownloadFinished(react.gnet.download.Download) -> AGKd
    257:257:void onDownloadFailed(react.gnet.download.Download) -> NEAQ
react.controller.MonitorController -> Fxdi:
    int maxCooldown -> XKTl
    react.api.TitleMonitor titleMonitor -> YyLT
    react.glang.GMap posts -> qmoI
    react.slate.PhantomSlate sb -> bQCB
    boolean ready -> uhyX
    43:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> tTSg
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> IWTN
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> vtGe
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> bGOU
    178:183:float calcVolume(react.api.ReactPlayer) -> BJNe
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> iCNQ
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> aeiG
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> eXcm
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> pPQx
    218:222:void startMonitoring(org.bukkit.entity.Player) -> iBkv
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> Cfcu
    241:246:void startActionLogging(org.bukkit.entity.Player) -> jEoX
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> rMfk
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> AGKd
    278:290:void processPlayer(react.api.ReactPlayer) -> NEAQ
    295:295:void handleActionLog(org.bukkit.entity.Player) -> NoTf
    299:323:void handleTriggers(react.api.ReactPlayer) -> TFRB
    327:366:void handleScrolling(react.api.ReactPlayer) -> iBmJ
    370:398:void handleShifting(react.api.ReactPlayer) -> lDGI
    402:424:void handlePosting(react.api.ReactPlayer) -> IWTN
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> BJNe
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> BJNe
    470:477:void tickMonitor(react.api.ReactPlayer) -> vtGe
    481:481:react.api.TitleMonitor getTitleMonitor() -> SvWt
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> BJNe
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> BJNe
    515:527:void onTick() -> uqIk
    531:553:void updateActionBoard() -> tuuq
    558:558:java.lang.String getTickName() -> cteV
    34:34:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> BJNe
    34:34:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> BJNe
    34:34:boolean access$202(react.controller.MonitorController,boolean) -> BJNe
    34:34:boolean access$200(react.controller.MonitorController) -> AGKd
    34:34:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> NEAQ
    36:36:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> Fxdi$1:
    react.controller.MonitorController this$0 -> jFwO
    68:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> Fxdi$2:
    react.controller.MonitorController this$0 -> jFwO
    532:532:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> jWWr:
    react.glang.GMap samples -> GJDh
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> aeiG
    51:52:void onHopper(org.bukkit.Chunk) -> eXcm
    56:57:void onFluid(org.bukkit.Chunk) -> pPQx
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> BJNe
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> BJNe
    80:91:void onTick() -> uqIk
    96:96:java.lang.String getTickName() -> cteV
    101:101:react.glang.GMap getSamples() -> xhpT
react.controller.PlayerController -> RbVA:
    react.glang.GList players -> gNpB
    react.glang.GSet save -> oMuv
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> MuBm
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> BJNe
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> eaUN
    113:113:react.glang.GList getPlayers() -> xGNY
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJNe
react.controller.PlayerController$1 -> RbVA$1:
    react.glang.GList val$toSave -> bbCf
    react.controller.PlayerController this$0 -> EnRX
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> APBS:
    react.rai.IRAI rai -> pPxs
    boolean raiEnabled -> Vwrk
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    18:18:react.rai.IRAI access$000(react.controller.RAIController) -> BJNe
react.controller.RAIController$1 -> APBS$1:
    react.controller.RAIController this$0 -> LjUm
    49:49:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> RkFe:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> NEAQ
react.controller.ReactServerInfo -> tTSg:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> cIpm
    27:27:int dgetGameProtocol() -> LrEH
    33:33:java.lang.String dgetGameVersion() -> dMUM
    39:39:java.lang.String dgetReactVersion() -> Wysj
    45:45:int dgetMaxPlayers() -> SnHc
    51:58:react.glang.GList dgetConnectedPlayers() -> WXRJ
    64:64:int dgetViewDistance() -> VfOx
    70:70:int dgetGamePort() -> bWpV
    76:76:java.lang.String dgetGameAddress() -> Wqby
    82:89:react.glang.GList dgetRemotePlugins() -> ydCY
    95:102:react.glang.GList dgetWorlds() -> dVGI
    108:108:react.glang.GList dgetActions() -> tmeV
    114:114:react.glang.GList dgetSamplers() -> Ywia
react.controller.RedstoneController -> bGOU:
    react.glang.GSet ignore -> NVfq
    react.glang.GSet frozen -> FXAj
    react.glang.GMap queue -> jqiM
    react.glang.GMap freezeTimes -> iwWV
    int redstonePerTick -> aEOD
    int redstonePerSecond -> sRQt
    react.gmath.Average aRST -> XdgL
    react.gmath.Average aRSS -> HTwf
    react.gmath.Average aRSMS -> LbEi
    boolean firstTickList -> HniM
    long firstTick -> aUnA
    long lastTick -> EKmS
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> iBmJ
    95:101:void tick() -> tick
    105:113:void checkChunks() -> LiSx
    117:134:void checkChunk(org.bukkit.Chunk) -> lDGI
    138:144:void queue(org.bukkit.block.Block) -> iBmJ
    148:148:boolean isFrozen(org.bukkit.Chunk) -> IWTN
    153:154:void freeze(org.bukkit.Chunk) -> vtGe
    158:165:void flushTickList() -> pqvy
    169:179:void tickNextTickList() -> BRdC
    183:189:void unfreeze(org.bukkit.Chunk) -> iCNQ
    193:200:void freeze(org.bukkit.Chunk,long) -> BJNe
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> BJNe
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> BJNe
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> BJNe
    246:246:react.glang.GSet getIgnore() -> iduq
    251:251:react.glang.GSet getFrozen() -> MlXN
    256:256:react.glang.GMap getQueue() -> CMVx
    261:261:react.glang.GMap getFreezeTimes() -> sYaa
    266:266:int getRedstonePerTick() -> OPYs
    271:271:int getRedstonePerSecond() -> XBBo
    276:276:react.gmath.Average getaRST() -> WiSX
    281:281:react.gmath.Average getaRSS() -> QyGC
    286:286:react.gmath.Average getaRSMS() -> BRgS
    291:291:boolean isFirstTickList() -> wTiR
    296:296:long getFirstTick() -> CUgA
    301:301:long getLastTick() -> bypt
react.controller.RemoteController -> SvWt:
    react.remote.server.RemoteServer remoteServer -> dVhF
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> xXRf
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> BJNe
react.controller.RemoteController$1 -> SvWt$1:
    react.controller.RemoteController this$0 -> WPeT
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> SvWt$2:
    react.controller.RemoteController this$0 -> WPeT
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> HKhO
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> vQlK
react.controller.SampleController -> uqIk:
    react.glang.GMap samplers -> yvKF
    react.surge.server.SuperSampler ss -> dyNh
    int cd -> rptl
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> kRMd
    69:74:void restartSuperSampler() -> KndM
    78:79:void registerSampler(react.api.ISampler) -> NEAQ
    83:83:react.api.ISampler getSampler(java.lang.String) -> jEoX
    88:131:void constructSamplers() -> gpTK
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> biUj
    187:209:void onTick() -> uqIk
    214:214:java.lang.String getTickName() -> cteV
    219:219:react.glang.GMap getSamplers() -> EudK
    224:224:react.surge.server.SuperSampler getSs() -> uVxW
    229:229:int getCd() -> mqdk
    234:241:react.glang.GList getSamplerNames() -> ETAj
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> BJNe
react.controller.SampleController$1 -> uqIk$1:
    react.controller.SampleController this$0 -> GlKM
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> uqIk$2:
    react.controller.SampleController this$0 -> GlKM
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> tuuq:
    java.lang.String ipa -> uPLB
    react.glang.GList failures -> lNAw
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> rMfk
    41:74:void checkForIP() -> MBFn
    78:91:void scan(java.lang.Runnable) -> BJNe
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> tuuq$1:
    react.controller.SecurityController this$0 -> LGuB
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> tuuq$2:
    java.lang.String val$ip -> tMHj
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> tuuq$3:
    java.lang.Thread val$t -> GlJs
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> cteV:
    react.glang.GMap etl -> lpEC
    react.glang.GMap ttl -> dWKv
    20:20:void <init>() -> <init>
    28:44:void start() -> start
    49:62:void stop() -> stop
    69:76:void on(org.bukkit.event.world.WorldLoadEvent) -> BJNe
    83:90:void on(org.bukkit.event.world.WorldUnloadEvent) -> BJNe
    96:96:void tick() -> tick
    100:112:void witholdWorld(org.bukkit.World) -> IWTN
    116:128:void releaseWorld(org.bukkit.World) -> vtGe
    132:144:double getUniversalEntityTick() -> kRLq
    149:161:double getUniversalEntityLimit() -> NDft
    166:178:double getUniversalTileLimit() -> mWqY
    183:195:double getUniversalTileTick() -> FotK
    200:207:double getUniversalEntityDroppedTicks() -> EubT
    212:219:double getUniversalTileDroppedTicks() -> ggax
    224:225:void setEntityTickLimit(org.bukkit.World,double) -> BJNe
    229:230:void setTileTickLimit(org.bukkit.World,double) -> AGKd
    234:234:double getEntityTickLimit(org.bukkit.World) -> iCNQ
    239:239:double getTileTickLimit(org.bukkit.World) -> aeiG
    244:244:double getLastEntityTick(org.bukkit.World) -> eXcm
    249:249:double getLastTileTick(org.bukkit.World) -> pPQx
    254:254:double getEntityDroppedTicks(org.bukkit.World) -> iBkv
    259:259:double getTileDroppedTicks(org.bukkit.World) -> Cfcu
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> BJNe
react.controller.SpikeController -> xhpT:
    react.glang.GMap spikes -> kmAa
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> uqIk
    111:111:java.lang.String getTickName() -> cteV
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> VToR
    128:160:void whoFuckingDidThis(react.glang.Callback) -> BJNe
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> BJNe
react.controller.SpikeController$1 -> xhpT$1:
    react.controller.SpikeController this$0 -> LbHg
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> xhpT$1$1:
    react.controller.SpikeController$1 this$1 -> cCHG
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> xhpT$2:
    react.glang.GMap val$vv -> PLRL
    react.controller.SpikeController this$0 -> LbHg
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> xhpT$3:
    java.lang.Thread val$t -> GlJs
    react.glang.Callback val$callback -> NEkD
    react.controller.SpikeController this$0 -> LbHg
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> xGNY:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.event.ReactEvent -> cIpm:
    org.bukkit.event.HandlerList handlers -> xPcM
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> LrEH:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> dMUM:
    react.event.ScrollDirection direction -> SDXx
    boolean cancellled -> AHUR
    int amount -> nujK
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> JRNQ
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> VeqG
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> Wysj:
    react.event.ScrollDirection DOWN -> FOVG
    react.event.ScrollDirection UP -> qmrD
    react.event.ScrollDirection[] $VALUES -> BSgy
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gbench.Profiler -> SnHc:
    long nanos -> xsFp
    long startNano -> lpEM
    long millis -> APdu
    long startMillis -> kAmF
    double time -> riDb
    boolean profiling -> BvMx
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> rMfk
    78:78:double getTicks() -> Btjj
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> gNPh
    93:93:double getHours() -> YUhe
    98:98:double getMilliseconds() -> afQh
    103:103:long getNanoseconds() -> PeAb
    108:108:long getNanos() -> XJUb
    113:113:long getStartNano() -> Yfin
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> NLwv
    128:128:double getTime() -> tSuB
    133:133:boolean isProfiling() -> xGPN
react.gconcurrent.A -> WXRJ:
    react.gconcurrent.ParallelPoolManager mgr -> DjpM
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> WXRJ$1:
    react.gconcurrent.A this$0 -> FqWQ
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> VfOx:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> bWpV:
    react.gconcurrent.QueueMode mode -> rWan
    react.glang.GList threads -> vtpQ
    int next -> lgRr
    int threadCount -> IOks
    java.util.Queue squeue -> apDh
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> bQDh
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> UKAr
    22:23:void syncQueue(react.gconcurrent.Execution) -> BJNe
    long getNanoGate() -> imgm
    29:51:void tickSyncQueue() -> XcgP
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> BIwm
    102:109:int getTotalQueueSize() -> WPFX
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> AGKd
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> oxNW
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> JQom
    161:188:void updateThreadInformation() -> Knem
    192:224:react.gconcurrent.ParallelThread nextThread() -> JAPA
    229:235:void createThreads(int) -> NoTf
    239:239:react.gconcurrent.QueueMode getMode() -> JcRa
    244:244:int getNext() -> eHLi
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> IppY
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> Yflx
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> AXVl
react.gconcurrent.ParallelThread -> Wqby:
    java.util.Queue queue -> lDrM
    react.gconcurrent.ThreadInformation info -> bQDh
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> aeiG
    63:70:void execute(react.gconcurrent.Execution) -> NEAQ
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> AGKd
    92:92:java.util.Queue getQueue() -> AFtY
    97:97:react.gconcurrent.ThreadInformation getInfo() -> EScJ
react.gconcurrent.QueueMode -> ydCY:
    react.gconcurrent.QueueMode ROUND_ROBIN -> KpHe
    react.gconcurrent.QueueMode SMALLEST -> GJJI
    react.gconcurrent.QueueMode[] ENUM$VALUES -> IrSQ
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> dVGI:
    react.gconcurrent.ParallelPoolManager mgr -> DjpM
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> dVGI$1:
    react.gconcurrent.S this$0 -> mixQ
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> tmeV:
    long tick -> DkSs
    long atick -> ndkO
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> Ywia:
    double ticksPerSecond -> ffDj
    int queuedSize -> KEUD
    boolean processing -> CVmo
    double utilization -> LXxT
    react.gmath.Average ticksPerSecondAverage -> tCxb
    long tick -> DkSs
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> DsDK
    33:35:void setTicksPerSecond(double) -> eXcm
    39:39:int getQueuedSize() -> gpUs
    44:45:void setQueuedSize(int) -> MuBm
    49:49:boolean isProcessing() -> mGTB
    54:55:void setProcessing(boolean) -> pPQx
    59:59:double getUtilization() -> lwUV
    64:65:void setUtilization(double) -> pPQx
    69:69:double getTicksPerSecondAverage() -> LWuM
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> lCoK
    89:89:int getId() -> getId
react.gformat.F -> OPYs:
    java.text.NumberFormat NF -> CyRl
    java.text.DecimalFormat DF -> fLSL
    java.lang.String[] NAMES -> OHpN
    java.math.BigInteger THOUSAND -> UuUt
    java.util.NavigableMap MAP -> LHXW
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> NoTf
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> BJNe
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> BJNe
    201:221:java.lang.String timeLong(long,int) -> BJNe
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> NEAQ
    236:236:java.lang.String b(double) -> iBkv
    241:258:java.lang.String b(java.math.BigInteger) -> BJNe
    263:267:void instantiate() -> FhGL
    279:279:java.lang.String fileSize(long) -> TFRB
    292:292:java.lang.String memSize(long) -> iBmJ
    305:306:java.lang.String stamp(long) -> lDGI
    322:349:java.lang.String ofSize(long,int) -> AGKd
    363:368:java.lang.String trim(java.lang.String,int) -> AGKd
    381:401:java.lang.String cname(java.lang.String) -> MuBm
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> IWTN
    459:477:java.lang.String memx(long) -> vtGe
    491:492:java.lang.String f(long) -> iCNQ
    504:505:java.lang.String f(int) -> eaUN
    519:528:java.lang.String f(double,int) -> AGKd
    544:553:java.lang.String fd(double,int) -> NEAQ
    567:576:java.lang.String f(float,int) -> BJNe
    587:587:java.lang.String f(double) -> Cfcu
    598:598:java.lang.String f(float) -> BJNe
    613:613:java.lang.String pc(double,int) -> TFRB
    628:628:java.lang.String pc(float,int) -> AGKd
    641:641:java.lang.String pc(double) -> jEoX
    654:654:java.lang.String pc(float) -> AGKd
    670:670:java.lang.String pc(int,int,int) -> BJNe
    684:684:java.lang.String pc(int,int) -> NEAQ
    700:700:java.lang.String pc(long,long,int) -> BJNe
    714:714:java.lang.String pc(long,long) -> TFRB
    726:726:java.lang.String msSeconds(long) -> aeiG
    740:740:java.lang.String msSeconds(long,int) -> NEAQ
    752:752:java.lang.String nsMs(long) -> eXcm
    766:766:java.lang.String nsMs(long,int) -> TFRB
    780:780:java.lang.String nsMsd(long,int) -> iBmJ
react.glang.AccessCallback -> XBBo:
    java.lang.Object get() -> get
react.glang.Adapter -> WiSX:
    java.lang.Object adapt(java.lang.Object) -> lDGI
    java.lang.Object onAdapt(java.lang.Object) -> IWTN
react.glang.Callback -> QyGC:
    java.lang.Object t -> eHoC
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> BJNe
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> BRgS:
    double i -> KgWt
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> rMfk
react.glang.FinalFloat -> xXRf:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> NEAQ
react.glang.FinalInteger -> HKhO:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> OHEE
react.glang.FinalLong -> vQlK:
    long i -> GAXy
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> pPQx
react.glang.FinalString -> kRMd:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> KndM:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> lDGI
    java.lang.Object onAdapt(java.lang.Object) -> IWTN
react.glang.GBiset -> gpTK:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> iLjR
    java.lang.Object b -> VNFA
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> xXTD
    53:54:void setA(java.lang.Object) -> vtGe
    63:63:java.lang.Object getB() -> NgLu
    73:74:void setB(java.lang.Object) -> iCNQ
react.glang.GList -> biUj:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> TFRB
    45:52:react.glang.GList grepDistance(int,int) -> iBmJ
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> AGKd
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> gNSC
    188:190:react.glang.GList shuffleCopy() -> xFqS
    198:199:void shuffle() -> jEyV
    210:236:react.glang.GList split() -> owla
    248:248:boolean hasIndex(int) -> PmKF
    258:259:java.lang.Object pickRandom() -> Wyvv
    270:277:react.glang.GList stringList() -> QVck
    288:292:void forEach(react.glang.Callback) -> AGKd
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> GPmc
    336:336:react.glang.GList cropFrom(int) -> mXJl
    341:373:react.glang.GList split(int) -> dLnT
    389:389:react.glang.GList cropTo(int) -> bGHq
    406:416:react.glang.GList crop(int,int) -> lDGI
    427:431:react.glang.GList removeDuplicates() -> gNSK
    442:446:void removeAll(java.lang.Object) -> aeiG
    455:455:boolean hasDuplicates() -> mrGD
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> LiXN
    484:490:void push(java.lang.Object,int) -> BJNe
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> eXcm
    528:532:void add(java.util.List) -> BJNe
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> xXTA
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> oxMS
    626:627:react.glang.GList qdel(java.lang.Object) -> pPQx
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> LiWs
    662:669:java.lang.Object popLast() -> NgMl
    674:683:java.lang.Object popRandom() -> QpWP
react.glang.GListAdapter -> EudK:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> AGKd
    java.lang.Object onAdapt(java.lang.Object) -> IWTN
react.glang.GMap -> uVxW:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> upky
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> BJNe
    64:81:react.glang.GMap flip() -> VfWP
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> BJNe
    121:121:react.glang.GList k() -> eaUN
    131:131:react.glang.GSet kset() -> cSKG
    141:141:react.glang.GList v() -> pHNm
    151:151:react.glang.GSet vset() -> gVfK
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> AGKd
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> IWTN
    209:219:react.glang.GMap removeDuplicateValues() -> OGnv
    233:242:void put(react.glang.GList,react.glang.GList) -> BJNe
    251:267:react.glang.GList sortK() -> dEKq
    277:293:react.glang.GList sortV() -> lLcF
react.glang.GQuadraset -> mqdk:
    java.lang.Object a -> iLjR
    java.lang.Object b -> VNFA
    java.lang.Object c -> aVTo
    java.lang.Object d -> VUtk
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> xXTD
    25:26:void setA(java.lang.Object) -> vtGe
    30:30:java.lang.Object getB() -> NgLu
    35:36:void setB(java.lang.Object) -> iCNQ
    40:40:java.lang.Object getC() -> uNlW
    45:46:void setC(java.lang.Object) -> iBkv
    50:50:java.lang.Object getD() -> gggL
    55:56:void setD(java.lang.Object) -> Cfcu
react.glang.GSet -> ETAj:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> MBFn:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> iLjR
    java.lang.Object b -> VNFA
    java.lang.Object c -> aVTo
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> xXTD
    26:27:void setA(java.lang.Object) -> vtGe
    31:31:java.lang.Object getB() -> NgLu
    36:37:void setB(java.lang.Object) -> iCNQ
    41:41:java.lang.Object getC() -> uNlW
    46:47:void setC(java.lang.Object) -> iBkv
react.gmath.Average -> kRLq:
    double[] values -> aETB
    double average -> JKAb
    boolean dirty -> PedS
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> NoTf
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> LXYh
react.gmath.DoubleArrayUtils -> NDft:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> BJNe
    17:19:void wrapRight(double[]) -> BJNe
    23:27:void fill(double[],double) -> fill
react.gmath.M -> mWqY:
    int precision -> tUYl
    int modulus -> oFJd
    float[] sin -> xiva
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> BJNe
    31:36:boolean r(java.lang.Double) -> AGKd
    51:51:double tps(long,int) -> lDGI
    63:63:double ticksFromNS(long) -> iBkv
    75:101:java.lang.String toRoman(int) -> XIkf
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> IWTN
    144:216:int fromRoman(java.lang.String) -> eaUN
    226:226:long ns() -> XIxw
    236:236:long ms() -> JQrh
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> AGKd
    333:333:float sinLookup(int) -> JbfS
react.gnet.client.Client -> FotK:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> gOUB
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> BJNe
    74:74:react.gnet.packet.PacketHandler getHandler() -> ejQY
react.gnet.client.IClient -> EubT:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> BJNe
    react.gnet.packet.PacketHandler getHandler() -> ejQY
react.gnet.download.Download -> ggax:
    react.gnet.download.DownloadState state -> lVSd
    react.gnet.download.DownloadType type -> bHUS
    react.gnet.download.DownloadStatus status -> skho
    react.gnet.download.DownloadMonitor monitor -> OscH
    java.net.URL url -> url
    java.io.File file -> lxWG
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> MAgy
    92:92:react.gnet.download.DownloadType getType() -> AGXj
    97:97:react.gnet.download.DownloadStatus getStatus() -> VUTd
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> Wqhn
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> VToR:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> BJNe
    void onDownloadStarted(react.gnet.download.Download) -> BJNe
    void onDownloadFinished(react.gnet.download.Download) -> AGKd
    void onDownloadFailed(react.gnet.download.Download) -> NEAQ
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> BJNe
react.gnet.download.DownloadState -> JRNQ:
    react.gnet.download.DownloadState IDLE -> DtEG
    react.gnet.download.DownloadState DOWNLOADING -> jPLh
    react.gnet.download.DownloadState FAILED -> oFJS
    react.gnet.download.DownloadState FINISHED -> LbIc
    react.gnet.download.DownloadState[] $VALUES -> BSlF
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> VeqG:
    long bytesDownloaded -> VwwS
    long bytesTotal -> qeao
    long bytesPerSecond -> msIG
    long timeElapsed -> JRqd
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> mhvs
    25:25:long getBytesDownloaded() -> hHfb
    30:31:void setBytesDownloaded(long) -> Cfcu
    35:35:long getBytesTotal() -> CxRJ
    40:41:void setBytesTotal(long) -> jEoX
    45:45:long getBytesPerSecond() -> VMDS
    50:51:void setBytesPerSecond(long) -> rMfk
    55:55:long getTimeElapsed() -> owoA
    60:61:void setTimeElapsed(long) -> NoTf
react.gnet.download.DownloadType -> Btjj:
    react.gnet.download.DownloadType DETERMINATE -> YWMb
    react.gnet.download.DownloadType INDETERMINATE -> TjAf
    react.gnet.download.DownloadType[] $VALUES -> GlMG
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> gNPh:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> qJpQ
    java.lang.String getPacketName() -> DabT
react.gnet.packet.IncompatablePacketException -> YUhe:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> afQh:
    react.gnet.packet.PacketBinding SERVER_BOUND -> WGxR
    react.gnet.packet.PacketBinding CLIENT_BOUND -> ObdW
    react.gnet.packet.PacketBinding[] $VALUES -> NgqY
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> PeAb:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> XJUb:
    react.glang.GList accept -> wwxU
    react.gnet.packet.PacketBinding side -> xPhM
    react.gnet.streams.OSS out -> Qykn
    react.gnet.streams.ISS in -> lMfA
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> BJNe
    28:34:void accept(react.gnet.packet.IPacket) -> AGKd
    38:46:react.gnet.packet.IPacket findPacket(int) -> lUFw
    51:66:react.gnet.packet.IPacket read() -> pGlp
    71:77:void write(react.gnet.packet.IPacket) -> NEAQ
react.gnet.packet.UnhandledPacketException -> Yfin:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> NLwv:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> ejQY
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> TFRB
react.gnet.server.Server -> tSuB:
    int port -> port
    java.net.ServerSocket socket -> QXIk
    react.gnet.packet.PacketHandler handler -> gOUB
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> ejQY
    37:84:void run() -> run
    88:91:void pstart() -> wDPj
    95:96:void pstop() -> ArLi
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> TFRB
react.gnet.streams.ISS -> xGPN:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> UKDe
    boolean built -> ceNh
    byte[] readBuffer -> NhSO
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> tCKx
    64:72:react.glang.GList readStringList() -> lTrJ
    77:85:react.glang.GList readDoubleList() -> fSbP
    90:98:react.glang.GList readLongList() -> esCP
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> BJNe
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> BJNe
    136:137:react.gnet.streams.ISS gzip() -> rotx
    142:147:void build() -> WWvf
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> AGKd
    435:436:void close() -> close
react.gnet.streams.OSS -> imgm:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> rhhU
    react.gnet.streams.StreamBuilder bu -> UKDe
    boolean built -> ceNh
    byte[] writeBuffer -> Snpt
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> FDwc
    41:42:react.gnet.streams.OSS gzip(int) -> OHCR
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> AGKd
    53:58:void build() -> WWvf
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> vtGe
    102:108:void writeDoubleList(react.glang.GList) -> iCNQ
    112:118:void writeLongList(react.glang.GList) -> aeiG
    122:128:void writeStreamableList(react.glang.GList) -> eXcm
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> mrHq
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> NEAQ
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> XcgP:
    react.glang.GList constructors -> EUHU
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> BJNe
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJNe
    49:50:void bind(react.gnet.streams.StreamConstructor) -> BJNe
    54:55:void bindGZIP(int) -> jhRp
    59:60:void bindGZIP() -> ryGk
    64:65:void bindCipher(javax.crypto.Cipher) -> NEAQ
    69:70:void bindBuffer(int) -> DaUf
    74:75:void bindBuffer() -> OXrj
react.gnet.streams.StreamConstructor -> BIwm:
    java.io.InputStream constructInput(java.io.InputStream) -> BJNe
    java.io.OutputStream constructOutput(java.io.OutputStream) -> BJNe
react.gnet.streams.constructors.BufferedStreamConstructor -> WPFX:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> AGKd
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> AGKd
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJNe
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> BJNe
react.gnet.streams.constructors.CipherStreamConstructor -> oxNW:
    javax.crypto.Cipher cipher -> giJV
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> NEAQ
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> NEAQ
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJNe
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> BJNe
react.gnet.streams.constructors.GZipStreamConstructor -> JQom:
    int compressionLevel -> xQHF
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> TFRB
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> TFRB
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> BJNe
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> BJNe
react.gnet.streams.overlays.CGZIPInputStream -> Knem:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> JAPA:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> JcRa:
    void toBytes(react.gnet.streams.OSS) -> BJNe
    void fromBytes(react.gnet.streams.ISS) -> BJNe
react.graph.ColossalView -> eHLi:
    react.papyrus.BufferedFrame view -> KUvQ
    react.glang.GMap buffers -> kBPr
    react.glang.GMap graphs -> NFOD
    double level -> BSnN
    double targetLevel -> vuTm
    int maxX -> wgVL
    int maxY -> AQLF
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> ECEm
    51:77:void render() -> dfpV
    81:98:void scroll(int) -> yklq
    102:112:void recompile() -> Kexb
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> BJNe
    122:122:react.papyrus.BufferedFrame getView() -> gFGO
    127:127:react.glang.GMap getBuffers() -> xOhJ
    132:132:react.glang.GMap getGraphs() -> SKmk
    137:137:double getLevel() -> rFFW
    142:142:double getTargetLevel() -> goxr
    147:147:int getMaxX() -> MAkg
    152:152:int getMaxY() -> DjWH
react.graph.ColossalView$Builder -> eHLi$BJNe:
    react.glang.GList graphs -> xahE
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> BJNe
    171:191:react.graph.ColossalView compute() -> RkNs
react.graph.CubicleIterator -> IppY:
    int[][] mapping -> fwKJ
    int xCubes -> lDup
    int yCubes -> JmIj
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> UcGR
    47:130:void insert(react.graph.GraphSize,int) -> BJNe
    134:145:void print() -> print
react.graph.GraphSampleLine -> Yflx:
    double lx -> qUFu
    double ly -> DITw
    react.api.ISampler sampler -> BeQb
    react.graph.IFormatter formatter -> Xupx
    byte graphColor -> urUQ
    byte backgroundColor -> OREy
    byte borderColor -> SoTL
    byte textColor -> sIjW
    int ticksLeftTitle -> YgtB
    int ticksOutTitle -> xajb
    double nextPoint -> Hwdm
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> wTdl
    51:183:void onRender(react.papyrus.BufferedFrame) -> BJNe
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> AGKd
    226:254:int getHue(int,int,int) -> NEAQ
    259:281:void scaleFor(react.glang.GList) -> pPQx
    285:285:react.graph.IFormatter getFormatter() -> QpME
    290:291:void setFormatter(react.graph.IFormatter) -> BJNe
    295:295:byte getGraphColor() -> vAPt
    300:301:void setGraphColor(byte) -> BJNe
    305:305:byte getBackgroundColor() -> VDUx
    310:311:void setBackgroundColor(byte) -> AGKd
    315:315:byte getBorderColor() -> RjnR
    320:321:void setBorderColor(byte) -> NEAQ
    325:325:byte getTextColor() -> xXXd
    330:331:void setTextColor(byte) -> TFRB
    335:335:react.api.ISampler getSampler() -> PdhL
react.graph.GraphSize -> AXVl:
    react.graph.GraphSize WIDE -> kuWy
    react.graph.GraphSize FULL -> ELWP
    react.graph.GraphSize SQUARE -> XTMy
    react.graph.GraphSize[] $VALUES -> ceNx
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> lvwy
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> AXVl$1:
    int[] $SwitchMap$react$graph$GraphSize -> Ojua
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> AFtY:
    java.lang.String text -> text
    byte fontColor -> cTMi
    byte backgroundColor -> OREy
    boolean wrote -> Bmbs
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> BJNe
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> gFGY
    68:69:void setFontColor(byte) -> iBmJ
    73:73:byte getBackgroundColor() -> VDUx
    78:79:void setBackgroundColor(byte) -> AGKd
react.graph.GraphingInstance -> EScJ:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> xahE
    react.graph.ColossalView view -> IrVN
    react.papyrus.Papyrus papyrus -> bPjE
    react.papyrus.IRenderer renderer -> Iqtq
    boolean mapping -> Euvg
    react.glang.GList msgs -> KpKp
    react.surge.sched.Task waiter -> mQJa
    react.surge.sched.Task waiter2 -> aDtw
    int shift -> xYYq
    boolean notif -> gWiX
    48:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> BJNe
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> BJNe
    138:142:void send(java.lang.String) -> OHEE
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> BJNe
    153:165:void on(react.event.ReactScrollEvent) -> BJNe
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> BJNe
    179:187:void destroy() -> destroy
    191:200:void toggle() -> tLKh
    204:205:void setGraphs(react.glang.GList) -> iBkv
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> xFty
    243:259:void compile() -> NDnD
    32:32:boolean access$000(react.graph.GraphingInstance) -> BJNe
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> AGKd
    32:32:boolean access$200(react.graph.GraphingInstance) -> NEAQ
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> BJNe
    32:32:int access$300(react.graph.GraphingInstance) -> TFRB
    32:32:int access$310(react.graph.GraphingInstance) -> iBmJ
    32:32:int access$302(react.graph.GraphingInstance,int) -> BJNe
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> lDGI
react.graph.GraphingInstance$1 -> EScJ$1:
    org.bukkit.entity.Player val$player -> bXye
    react.graph.GraphingInstance this$0 -> UuXp
    52:52:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> EScJ$2:
    react.graph.GraphingInstance this$0 -> UuXp
    77:77:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> EScJ$3:
    react.graph.GraphingInstance this$0 -> UuXp
    107:107:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> BJNe
react.graph.IFormatter -> DsDK:
    java.lang.String from(double) -> MuBm
react.graph.IGraph -> gpUs:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> BmAm
    long getTimeViewport() -> YxRV
    void render(react.papyrus.BufferedFrame) -> NEAQ
    double getMax() -> getMax
    void setMax(double) -> eaUN
react.graph.NormalGraph -> mGTB:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> vuUy
    long timeViewport -> GtaN
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> BmAm
    35:35:long getTimeViewport() -> YxRV
    41:42:void render(react.papyrus.BufferedFrame) -> NEAQ
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> eaUN
    void onRender(react.papyrus.BufferedFrame) -> BJNe
react.graph.PlotBoard -> lwUV:
    react.glang.GMap plots -> bbLb
    int maxRecordings -> FFjE
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> CVQo
    33:33:long getAccurateTimeSpan() -> jppl
    38:50:long getMedian(long,long) -> iBmJ
    55:55:long getMinimumAccuracyRange() -> XSLn
    60:70:double getMaxValue() -> nSKJ
    75:85:double getMinValue() -> UJDK
    90:90:react.glang.GList sort(react.glang.GMap) -> AGKd
    95:105:long earilestRecording() -> DjVN
    110:120:long latestRecording() -> EeKM
    125:126:void reduceBefore(long) -> MuBm
    130:148:void reduceBetween(long,long) -> lDGI
    152:152:boolean before(long,long) -> IWTN
    157:157:boolean after(long,long) -> vtGe
    162:162:boolean within(long,long,long) -> BJNe
    167:177:react.glang.GMap getBetween(long,long) -> iCNQ
    182:184:void plot(long,double) -> BJNe
    188:188:boolean hasAt(long) -> eaUN
    193:193:double getAt(long) -> OHEE
    198:198:int getSize() -> getSize
react.graph.Point -> LWuM:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> lCoK:
    int iid -> dyTS
    react.graph.IGraph graph -> msMV
    react.graph.GraphSize size -> ioPy
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> TXEE
    24:25:void setGraph(react.graph.IGraph) -> BJNe
    29:29:react.graph.GraphSize getSize() -> rhKh
    34:35:void setSize(react.graph.GraphSize) -> BJNe
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> FhGL:
    react.graph.RenderMaxType UNLIMITED -> vldv
    react.graph.RenderMaxType LIMITED -> ffHX
    react.graph.RenderMaxType[] $VALUES -> mbNl
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> xXTD:
    java.lang.String CRLF -> ORGk
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> PmKF
    162:198:java.lang.String toString(react.json.JSONObject) -> AGKd
react.json.HTTPTokener -> NgLu:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> gNSC:
    java.util.ArrayList myArrayList -> AkAt
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> BJNe
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> QpME
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> JbgA
    394:399:react.json.JSONObject getJSONObject(int) -> BJOT
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> GPmc
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> wTdl
    515:515:boolean optBoolean(int) -> wUEl
    533:536:boolean optBoolean(int,boolean) -> AGKd
    551:551:double optDouble(int) -> WGJY
    569:572:double optDouble(int,double) -> BJNe
    587:587:int optInt(int) -> yQya
    605:608:int optInt(int,int) -> vtGe
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> AGKd
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> BJNe
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> BJNe
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> BJNe
    722:723:react.json.JSONArray optJSONArray(int) -> GsRh
    737:738:react.json.JSONObject optJSONObject(int) -> vQfB
    752:752:long optLong(int) -> fJfj
    770:773:long optLong(int,long) -> BJNe
    788:788:java.lang.String optString(int) -> pYEy
    803:804:java.lang.String optString(int,java.lang.String) -> BJNe
    816:817:react.json.JSONArray put(boolean) -> iBkv
    830:831:react.json.JSONArray put(java.util.Collection) -> BJNe
    845:848:react.json.JSONArray put(double) -> OHEE
    860:861:react.json.JSONArray put(int) -> aCgk
    873:874:react.json.JSONArray put(long) -> PmKF
    887:888:react.json.JSONArray put(java.util.Map) -> BJNe
    902:903:react.json.JSONArray put(java.lang.Object) -> jEoX
    921:922:react.json.JSONArray put(int,boolean) -> NEAQ
    939:940:react.json.JSONArray put(int,java.util.Collection) -> BJNe
    958:959:react.json.JSONArray put(int,double) -> AGKd
    977:978:react.json.JSONArray put(int,int) -> iCNQ
    996:997:react.json.JSONArray put(int,long) -> AGKd
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> BJNe
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> BJNe
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> rMfk
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> BJNe
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> BJNe
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> BJNe
react.json.JSONException -> xFqS:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> lDxV
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> jEyV:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> BJNe
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> mXJl
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> BJNe
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> AGKd
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> PmKF
    379:456:java.lang.String toString(react.json.JSONArray) -> AGKd
    472:552:java.lang.String toString(react.json.JSONObject) -> AGKd
react.json.JSONObject -> owla:
    java.util.Map map -> map
    java.lang.Object NULL -> LrqL
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> BJNe
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> AGKd
    480:499:java.lang.String doubleToString(double) -> PmKF
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> dLnT
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> bGHq
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> XIkf
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> NEAQ
    751:767:java.lang.String[] getNames(java.lang.Object) -> NoTf
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> JbfS
    855:855:boolean isNull(java.lang.String) -> lUFw
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> WOlC
    917:937:java.lang.String numberToString(java.lang.Number) -> BJNe
    949:949:java.lang.Object opt(java.lang.String) -> tCKx
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> BJNe
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> BJNe
    1018:1018:boolean optBoolean(java.lang.String) -> FDwc
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> BJNe
    1054:1054:double optDouble(java.lang.String) -> OHCR
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> BJNe
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> BJNe
    1116:1119:double optDouble(java.lang.String,double) -> BJNe
    1134:1134:int optInt(java.lang.String) -> jhRp
    1152:1155:int optInt(java.lang.String,int) -> NEAQ
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> DaUf
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> yklq
    1198:1198:long optLong(java.lang.String) -> UcGR
    1216:1219:long optLong(java.lang.String,long) -> BJNe
    1234:1234:java.lang.String optString(java.lang.String) -> QpME
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> AGKd
    1255:1305:void populateMap(java.lang.Object) -> MuBm
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> AGKd
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> BJNe
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> AGKd
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> TFRB
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> AGKd
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> BJNe
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> NEAQ
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> TFRB
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> iBmJ
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> BJNe
    1590:1590:java.lang.Object remove(java.lang.String) -> JbgA
    1605:1640:boolean similar(java.lang.Object) -> rMfk
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> eaUN
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> NEAQ
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> BJNe
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> BJNe
    2000:2004:void indent(java.io.Writer,int) -> BJNe
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> BJNe
react.json.JSONObject$Null -> owla$BJNe:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> Wyvv:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> QVck:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> gNSK:
    long character -> ndpp
    boolean eof -> eof
    long index -> HLqt
    long line -> dgsw
    char previous -> fLWv
    java.io.Reader reader -> reader
    boolean usePrevious -> QFke
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> JJFr
    119:131:int dehexchar(char) -> BJNe
    136:136:boolean end() -> oVRG
    147:153:boolean more() -> WOlM
    164:198:char next() -> next
    213:218:char next(char) -> AGKd
    233:250:java.lang.String next(int) -> IyYW
    263:266:char nextClean() -> uprw
    287:334:java.lang.String nextString(char) -> NEAQ
    349:361:java.lang.String nextTo(char) -> TFRB
    376:388:java.lang.String nextTo(java.lang.String) -> BJOT
    403:441:java.lang.Object nextValue() -> Qglg
    458:479:char skipTo(char) -> iBmJ
    491:491:react.json.JSONException syntaxError(java.lang.String) -> wTdl
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> mrGD:
    int maxdepth -> skpW
    boolean comma -> TYGN
    char mode -> nvTK
    react.json.JSONObject[] stack -> txDx
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> wUEl
    157:164:react.json.JSONWriter array() -> TpvJ
    180:193:react.json.JSONWriter end(char,char) -> BJNe
    206:206:react.json.JSONWriter endArray() -> eYTv
    219:219:react.json.JSONWriter endObject() -> oEPC
    235:258:react.json.JSONWriter key(java.lang.String) -> WGJY
    274:285:react.json.JSONWriter object() -> pjUc
    299:310:void pop(char) -> lDGI
    322:329:void push(react.json.JSONObject) -> TFRB
    342:342:react.json.JSONWriter value(boolean) -> Cfcu
    356:356:react.json.JSONWriter value(double) -> GPmc
    369:369:react.json.JSONWriter value(long) -> GPmc
    385:385:react.json.JSONWriter value(java.lang.Object) -> OHEE
react.json.XML -> LiXN:
    java.lang.Character AMP -> jjHF
    java.lang.Character APOS -> FrAc
    java.lang.Character BANG -> HUdJ
    java.lang.Character EQ -> IXgH
    java.lang.Character GT -> SLqj
    java.lang.Character LT -> mama
    java.lang.Character QUEST -> aNJm
    java.lang.Character QUOT -> dWTQ
    java.lang.Character SLASH -> CFTo
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> yQya
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> BJNe
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> PmKF
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> xXTA:
    java.util.HashMap entity -> FiOT
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> wvyd
    108:133:java.lang.Object nextContent() -> Xlad
    149:166:java.lang.Object nextEntity(char) -> IWTN
    186:239:java.lang.Object nextMeta() -> aoJi
    261:334:java.lang.Object nextToken() -> fdfu
    354:420:boolean skipPast(java.lang.String) -> GsRh
react.papyrus.BufferedFrame -> oxMS:
    byte[][] frame -> qehY
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> BJNe
    90:97:void write(byte) -> lDGI
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> BJNe
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> BJNe
    131:145:java.awt.image.BufferedImage toBufferedImage() -> OYTk
    153:160:void writeRainbowMul() -> rhJd
    167:174:void writeRainbowAdd() -> WFxw
    181:191:void writeSparks() -> VTwg
    195:201:boolean write(int,int,byte) -> BJNe
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> BJNe
    233:250:void write(react.papyrus.BufferedFrame) -> TFRB
    254:254:byte[][] getRawFrame() -> DQFB
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> LiWs:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> TFRB
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> BJNe
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> NgMl:
    org.bukkit.map.MapView getView() -> ArQV
    react.papyrus.BufferedFrame getFrameBuffer() -> rWJA
    void addRenderer(react.papyrus.IRenderer) -> BJNe
    void clearRenderers() -> EeIs
    react.glang.GList getRenderers() -> pPba
    void removeRenderer(react.papyrus.IRenderer) -> AGKd
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> YDnh
react.papyrus.IRenderer -> QpWP:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> BJNe
react.papyrus.Papyrus -> upky:
    org.bukkit.map.MapView map -> wDum
    react.papyrus.BufferedFrame frameBuffer -> lVYP
    react.papyrus.BufferedFrame lastFrameBuffer -> NguM
    react.glang.GList renderers -> qKui
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> ArQV
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> rWJA
    51:52:void addRenderer(react.papyrus.IRenderer) -> BJNe
    57:58:void clearRenderers() -> EeIs
    63:63:react.glang.GList getRenderers() -> pPba
    69:70:void removeRenderer(react.papyrus.IRenderer) -> AGKd
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> YDnh
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> BJNe
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> AGKd
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> NEAQ
react.papyrus.Papyrus$1 -> upky$1:
    org.bukkit.map.MapCanvas val$c -> qwKT
    org.bukkit.map.MapView val$v -> kKEr
    react.papyrus.Papyrus this$0 -> BCQS
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> VfWP:
    int spaceSize -> UJgL
    java.lang.String fontChars -> IrXk
    int[][] fontData -> AQPA
    react.papyrus.ReactFont Font -> iUcg
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> cSKG:
    react.glang.GList subgoals -> ECkQ
    java.lang.String tag -> PwOj
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> nBLW
    26:44:void propigate() -> MRnS
    49:50:void addGoal(react.rai.IGoal) -> BJNe
    55:65:react.glang.GList getFailingSubgoals() -> vIcI
    71:71:boolean isFailing() -> tLLt
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> dUov
    void onPropigated() -> PlyX
react.rai.Goal$1 -> cSKG$1:
    react.rai.IGoal val$i -> VMmD
    react.rai.Goal this$0 -> LPpW
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> pHNm:
    react.glang.GList getSubgoals() -> nBLW
    void propigate() -> MRnS
    void onPropigated() -> PlyX
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> vIcI
    boolean isFailing() -> tLLt
    boolean onCheckFailing() -> dUov
    void update() -> update
    void addGoal(react.rai.IGoal) -> BJNe
react.rai.IRAI -> gVfK:
    react.glang.GList getGoals() -> SebH
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> BJNe
    react.glang.GList getEvents() -> VMHh
    void callEvent(react.rai.RAIEvent) -> BJNe
    react.glang.GList getListeners() -> QyPj
react.rai.RAI -> OGnv:
    react.glang.GList goals -> qvmd
    react.glang.GList events -> scap
    react.glang.GList logEvents -> rhnv
    react.glang.GList listeners -> dxxH
    long since -> pQgJ
    react.rai.RAI instance -> RSBu
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> SebH
    41:42:void addGoal(react.rai.IGoal) -> BJNe
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> VMHh
    80:87:void callEvent(react.rai.RAIEvent) -> BJNe
    92:92:react.glang.GList getListeners() -> QyPj
react.rai.RAIEvent -> dEKq:
    react.rai.RAIEventType type -> iEBi
    java.lang.String[] pars -> AIAF
    java.lang.String ovt -> DblA
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> PSif
    29:29:java.lang.String[] getPars() -> sjpR
    34:34:java.lang.String getOvt() -> UkjY
react.rai.RAIEventType -> lLcF:
    react.rai.RAIEventType FIRE_ACTION -> WQPr
    react.rai.RAIEventType NOTE_GOAL_FAILING -> Dslq
    react.rai.RAIEventType NOTE_GOAL_FIXED -> iMSV
    java.lang.String[] msgs -> tMRg
    react.rai.RAIEventType[] $VALUES -> gWmh
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> jhff
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> BJNe
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedChunkLoad -> uNlW:
    boolean failing -> kBXP
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> dUov
    66:79:void onPropigated() -> PlyX
react.rai.goals.GoalReducedChunkLoad$1 -> uNlW$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> oWUY
    43:43:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> uNlW$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> oWUY
    69:69:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> gggL:
    boolean failing -> kBXP
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> dUov
    91:134:void onPropigated() -> PlyX
    22:22:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> BJNe
react.rai.goals.GoalReducedEntityCounts$1 -> gggL$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> DcJk
    68:68:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> gggL$2:
    org.bukkit.Chunk val$lx -> YFSs
    react.rai.goals.GoalReducedEntityCounts this$0 -> DcJk
    120:120:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> LXYh:
    boolean failing -> kBXP
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> dUov
    78:128:void onPropigated() -> PlyX
react.rai.goals.GoalStableChunkTime$1 -> LXYh$1:
    react.rai.goals.GoalStableChunkTime this$0 -> MKae
    55:55:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> LXYh$2:
    java.lang.Object val$i -> iVDQ
    react.rai.goals.GoalStableChunkTime this$0 -> MKae
    112:112:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> XIxw:
    boolean failing -> kBXP
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> PlyX
    35:35:void letUp() -> pjXB
    40:77:boolean onCheckFailing() -> dUov
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> BJNe
react.rai.goals.GoalStableEntityTime$1 -> XIxw$1:
    react.rai.goals.GoalStableEntityTime this$0 -> oxwF
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> JQrh:
    boolean failing -> kBXP
    react.glang.GMap reocc -> vSWt
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> PlyX
    88:125:boolean onCheckFailing() -> dUov
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> BJNe
    24:24:boolean access$100(react.rai.goals.GoalStableFluidTime) -> AGKd
react.rai.goals.GoalStableFluidTime$1 -> JQrh$1:
    org.bukkit.Chunk val$lx -> YFSs
    react.rai.goals.GoalStableFluidTime this$0 -> mkAF
    67:67:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> JQrh$2:
    react.rai.goals.GoalStableFluidTime this$0 -> mkAF
    108:108:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> ejQY:
    boolean failing -> kBXP
    react.glang.GMap reocc -> vSWt
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> PlyX
    89:125:boolean onCheckFailing() -> dUov
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> BJNe
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> AGKd
react.rai.goals.GoalStableHopperTime$1 -> ejQY$1:
    org.bukkit.Chunk val$lx -> YFSs
    react.rai.goals.GoalStableHopperTime this$0 -> TPWP
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> ejQY$2:
    react.rai.goals.GoalStableHopperTime this$0 -> TPWP
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> MAgy:
    boolean failing -> kBXP
    react.glang.GMap reocc -> vSWt
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> PlyX
    89:126:boolean onCheckFailing() -> dUov
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> BJNe
    24:24:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> AGKd
react.rai.goals.GoalStableRedstoneTime$1 -> MAgy$1:
    org.bukkit.Chunk val$lx -> YFSs
    react.rai.goals.GoalStableRedstoneTime this$0 -> CqIo
    67:67:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> MAgy$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> CqIo
    109:109:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> AGXj:
    boolean failing -> kBXP
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> PlyX
    34:58:boolean onCheckFailing() -> dUov
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> BJNe
react.rai.goals.GoalStableTickTime$1 -> AGXj$1:
    react.rai.goals.GoalStableTickTime this$0 -> YyXw
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> VUTd:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> Yxwt
    boolean authenticated -> Gksi
    react.remote.server.ServerInfo info -> mPlx
    react.glang.GMap frems -> fwNK
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> KUKo
    51:51:react.glang.GMap getFrames() -> uXDh
    56:75:int computeFrames() -> IXGi
    80:92:boolean clearToken() -> CVUK
    97:110:boolean updateServerInfo() -> Rjqq
    115:129:boolean refreshToken() -> GsdT
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> NEAQ
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> kAVN
    165:165:boolean isAuthenticated() -> IhiG
    170:170:react.remote.server.ServerInfo getInfo() -> aLhj
react.remote.client.packet.CPacketClearToken -> Wqhn:
    java.lang.String token -> Yxwt
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJNe
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJNe
    38:38:java.lang.String getToken() -> kAVN
    43:44:void setToken(java.lang.String) -> vQfB
react.remote.client.packet.CPacketComputeFrames -> mhvs:
    java.lang.String token -> Yxwt
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJNe
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJNe
    38:38:java.lang.String getToken() -> kAVN
    43:44:void setToken(java.lang.String) -> vQfB
react.remote.client.packet.CPacketGetInfo -> hHfb:
    java.lang.String token -> Yxwt
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJNe
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJNe
    38:38:java.lang.String getToken() -> kAVN
    43:44:void setToken(java.lang.String) -> vQfB
react.remote.client.packet.CPacketGetToken -> CxRJ:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> BJNe
    36:38:void fromBytes(react.gnet.streams.ISS) -> BJNe
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> VMDS:
    java.lang.String token -> Yxwt
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJNe
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJNe
    38:38:java.lang.String getToken() -> kAVN
    43:44:void setToken(java.lang.String) -> vQfB
react.remote.client.packet.ClientPacket -> owoA:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> BJNe
    void fromBytes(react.gnet.streams.ISS) -> BJNe
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> qJpQ
    42:42:java.lang.String getPacketName() -> DabT
react.remote.client.packet.ClientPacketType -> qJpQ:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> bkDj
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> pHwu
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> qwPa
    react.remote.client.packet.ClientPacketType GET_INFO -> Warr
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> MKeG
    react.remote.client.packet.ClientPacketType[] $VALUES -> PDLy
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> DabT:
    react.glang.GMap compute(long,long) -> NEAQ
react.remote.server.KnownUser -> pGlp:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> wDPj:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> BJNe
    38:41:void fromBytes(react.gnet.streams.ISS) -> BJNe
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> ArLi:
    react.glang.GList users -> pRIx
    react.glang.GMap session -> IGiU
    react.glang.GMap lastCompute -> Npjt
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> HKhO
    44:45:void registerUser(react.remote.server.KnownUser) -> BJNe
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> AGKd
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> fJfj
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> TFRB
    react.remote.server.IFrameComputer getFrameComputer() -> vQlK
    170:171:void markLastCompute(react.remote.server.KnownUser) -> NEAQ
    175:180:long getLastCompute(react.remote.server.KnownUser) -> TFRB
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> BJNe
    190:191:void deleteSession(react.remote.server.KnownUser) -> iBmJ
    195:195:java.lang.String createToken() -> Xtrc
react.remote.server.ServerInfo -> lTrJ:
    java.lang.String motd -> ebkS
    int gameProtocol -> SxKS
    java.lang.String gameVersion -> RJTH
    java.lang.String reactVersion -> FPBb
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> ixIw
    int viewDistance -> viewDistance
    int gamePort -> hIqo
    java.lang.String gameAddress -> BTVT
    react.glang.GList remotePlugins -> QrDy
    react.glang.GList worlds -> RdGI
    react.glang.GList actions -> hIpr
    react.glang.GList samplers -> EDOD
    26:26:react.remote.server.ServerInfo empty() -> IWea
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> BJNe
    146:159:void fromBytes(react.gnet.streams.ISS) -> BJNe
    java.lang.String dgetMotd() -> cIpm
    int dgetGameProtocol() -> LrEH
    java.lang.String dgetGameVersion() -> dMUM
    java.lang.String dgetReactVersion() -> Wysj
    int dgetMaxPlayers() -> SnHc
    react.glang.GList dgetConnectedPlayers() -> WXRJ
    int dgetViewDistance() -> VfOx
    int dgetGamePort() -> bWpV
    java.lang.String dgetGameAddress() -> Wqby
    react.glang.GList dgetRemotePlugins() -> ydCY
    react.glang.GList dgetWorlds() -> dVGI
    react.glang.GList dgetActions() -> tmeV
    react.glang.GList dgetSamplers() -> Ywia
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> LPMt
    199:199:java.lang.String getGameVersion() -> ThgA
    204:204:java.lang.String getReactVersion() -> ECHt
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> kkha
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> NfuK
    229:229:java.lang.String getGameAddress() -> oEPr
    234:234:react.glang.GList getRemotePlugins() -> YDpi
    239:239:react.glang.GList getWorlds() -> dpFY
    244:244:react.glang.GList getActions() -> eqwp
    249:249:react.glang.GList getSamplers() -> teaT
react.remote.server.ServerInfo$1 -> lTrJ$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> dVGI
    37:37:int dgetViewDistance() -> VfOx
    43:43:react.glang.GList dgetRemotePlugins() -> ydCY
    49:49:java.lang.String dgetReactVersion() -> Wysj
    55:55:java.lang.String dgetMotd() -> cIpm
    61:61:int dgetMaxPlayers() -> SnHc
    67:67:java.lang.String dgetGameVersion() -> dMUM
    73:73:int dgetGameProtocol() -> LrEH
    79:79:int dgetGamePort() -> bWpV
    85:85:java.lang.String dgetGameAddress() -> Wqby
    91:91:react.glang.GList dgetConnectedPlayers() -> WXRJ
    97:97:react.glang.GList dgetActions() -> tmeV
    103:103:react.glang.GList dgetSamplers() -> Ywia
react.remote.server.packet.ComputedFrame -> fSbP:
    react.glang.GMap values -> nduJ
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> BJNe
    28:36:void fromBytes(react.gnet.streams.ISS) -> BJNe
    40:40:react.glang.GMap getValues() -> qKVb
    45:46:void setValues(react.glang.GMap) -> NEAQ
react.remote.server.packet.SPacketOk -> esCP:
    boolean ok -> cuvy
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJNe
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJNe
    38:38:boolean isOk() -> vbvK
    43:44:void setOk(boolean) -> jEoX
react.remote.server.packet.SPacketSendFrames -> rotx:
    react.glang.GMap frames -> GJUQ
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> BJNe
    36:44:void fromBytes(react.gnet.streams.ISS) -> BJNe
    48:48:react.glang.GMap getFrames() -> uXDh
    53:54:void setFrames(react.glang.GMap) -> TFRB
react.remote.server.packet.SPacketSendInfo -> WWvf:
    react.remote.server.ServerInfo info -> mPlx
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJNe
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJNe
    38:38:react.remote.server.ServerInfo getInfo() -> aLhj
    43:44:void setInfo(react.remote.server.ServerInfo) -> BJNe
react.remote.server.packet.SPacketSendToken -> mrHq:
    java.lang.String token -> Yxwt
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> BJNe
    33:34:void fromBytes(react.gnet.streams.ISS) -> BJNe
    38:38:java.lang.String getToken() -> kAVN
    43:44:void setToken(java.lang.String) -> vQfB
react.remote.server.packet.ServerPacket -> ryGk:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> BJNe
    void fromBytes(react.gnet.streams.ISS) -> BJNe
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> qJpQ
    42:42:java.lang.String getPacketName() -> DabT
react.remote.server.packet.ServerPacketType -> OXrj:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> Voqo
    react.remote.server.packet.ServerPacketType SEND_INFO -> nLBw
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> cKcJ
    react.remote.server.packet.ServerPacketType OK -> THGy
    react.remote.server.packet.ServerPacketType[] $VALUES -> BBtq
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> ECEm:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleAsyncQueue$1 -> ECEm$1:
    react.sampler.SampleAsyncQueue this$0 -> NFVe
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleChunkTime -> dfpV:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleChunkTime$1 -> dfpV$1:
    react.sampler.SampleChunkTime this$0 -> EvqE
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleChunksLoaded -> Kexb:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleChunksLoaded$1 -> Kexb$1:
    react.sampler.SampleChunksLoaded this$0 -> PCkX
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleChunksLoadedPerSecond -> gFGO:
    react.gmath.Average a -> bQQF
    react.graph.IFormatter formatter -> Xupx
    16:29:void <init>() -> <init>
    34:40:void construct() -> wUEl
    45:47:void sample() -> wTdl
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleChunksLoadedPerSecond$1 -> gFGO$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> xkCC
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> MuBm
react.sampler.SampleEntitiesDrops -> xOhJ:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleEntitiesDrops$1 -> xOhJ$1:
    react.sampler.SampleEntitiesDrops this$0 -> RlUe
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleEntitiesLiving -> SKmk:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleEntitiesLiving$1 -> SKmk$1:
    react.sampler.SampleEntitiesLiving this$0 -> LHaX
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleEntitiesTiles -> rFFW:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleEntitiesTiles$1 -> rFFW$1:
    react.sampler.SampleEntitiesTiles this$0 -> FrEL
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleEntitiesTotal -> goxr:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleEntitiesTotal$1 -> goxr$1:
    react.sampler.SampleEntitiesTotal this$0 -> TjKh
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleEntityDroppedTicks -> MAkg:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleEntityDroppedTicks$1 -> MAkg$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> LPqh
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleEntityTime -> DjWH:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleEntityTime$1 -> DjWH$1:
    react.sampler.SampleEntityTime this$0 -> yutY
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleEntityTimeLock -> RkNs:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleEntityTimeLock$1 -> RkNs$1:
    react.sampler.SampleEntityTimeLock this$0 -> giPx
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleExplosionTime -> vAPt:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleExplosionTime$1 -> vAPt$1:
    react.sampler.SampleExplosionTime this$0 -> wNMB
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleFluidPerSecond -> VDUx:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleFluidPerSecond$1 -> VDUx$1:
    react.sampler.SampleFluidPerSecond this$0 -> rFla
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleFluidPerTick -> RjnR:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    46:53:void sample() -> wTdl
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleFluidPerTick$1 -> RjnR$1:
    react.sampler.SampleFluidPerTick this$0 -> SMYB
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleFluidTickTime -> xXXd:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleFluidTickTime$1 -> xXXd$1:
    react.sampler.SampleFluidTickTime this$0 -> KFAl
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleFluidTickUtilization -> PdhL:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    46:53:void sample() -> wTdl
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleFluidTickUtilization$1 -> PdhL$1:
    react.sampler.SampleFluidTickUtilization this$0 -> BLGu
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleHopperPerSecond -> lvwy:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleHopperPerSecond$1 -> lvwy$1:
    react.sampler.SampleHopperPerSecond this$0 -> gPBt
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleHopperPerTick -> gFGY:
    react.graph.IFormatter formatter -> Xupx
    19:29:void <init>() -> <init>
    34:40:void construct() -> wUEl
    47:54:void sample() -> wTdl
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleHopperPerTick$1 -> gFGY$1:
    react.sampler.SampleHopperPerTick this$0 -> twkE
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleHopperTickTime -> tLKh:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleHopperTickTime$1 -> tLKh$1:
    react.sampler.SampleHopperTickTime this$0 -> EesC
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleHopperTickUtilization -> xFty:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    46:53:void sample() -> wTdl
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleHopperTickUtilization$1 -> xFty$1:
    react.sampler.SampleHopperTickUtilization this$0 -> DtRV
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleMemoryAllocated -> NDnD:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleMemoryAllocated$1 -> NDnD$1:
    react.sampler.SampleMemoryAllocated this$0 -> Qqev
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleMemoryAllocationPerSecond -> BmAm:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleMemoryAllocationPerSecond$1 -> BmAm$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> KyGT
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleMemoryFree -> YxRV:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleMemoryFree$1 -> YxRV$1:
    react.sampler.SampleMemoryFree this$0 -> WkGe
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleMemoryMax -> CVQo:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleMemoryMax$1 -> CVQo$1:
    react.sampler.SampleMemoryMax this$0 -> lpRw
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleMemoryUse -> jppl:
    react.graph.IFormatter formatter -> Xupx
    18:27:void <init>() -> <init>
    32:38:void construct() -> wUEl
    43:44:void sample() -> wTdl
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleMemoryUse$1 -> jppl$1:
    react.sampler.SampleMemoryUse this$0 -> gytn
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> MuBm
react.sampler.SampleRedstonePerSecond -> XSLn:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleRedstonePerSecond$1 -> XSLn$1:
    react.sampler.SampleRedstonePerSecond this$0 -> bsUj
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleRedstonePerTick -> nSKJ:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    46:53:void sample() -> wTdl
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleRedstonePerTick$1 -> nSKJ$1:
    react.sampler.SampleRedstonePerTick this$0 -> FFqY
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleRedstoneTickTime -> UJDK:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleRedstoneTickTime$1 -> UJDK$1:
    react.sampler.SampleRedstoneTickTime this$0 -> QrFP
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleRedstoneTickUtilization -> DjVN:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    46:53:void sample() -> wTdl
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleRedstoneTickUtilization$1 -> DjVN$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> GtiK
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleSyncQueue -> EeKM:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleSyncQueue$1 -> EeKM$1:
    react.sampler.SampleSyncQueue this$0 -> cBrs
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleTickTime -> TXEE:
    react.graph.IFormatter formatter -> Xupx
    react.gmath.Average aa -> FOcI
    17:29:void <init>() -> <init>
    34:40:void construct() -> wUEl
    45:47:void sample() -> wTdl
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleTickTime$1 -> TXEE$1:
    react.sampler.SampleTickTime this$0 -> YqLY
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> MuBm
react.sampler.SampleTickUtilization -> rhKh:
    react.graph.IFormatter formatter -> Xupx
    react.gmath.Average aa -> FOcI
    17:29:void <init>() -> <init>
    34:40:void construct() -> wUEl
    45:47:void sample() -> wTdl
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleTickUtilization$1 -> rhKh$1:
    react.sampler.SampleTickUtilization this$0 -> iEGJ
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> MuBm
react.sampler.SampleTicksPerSecond -> WOlC:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleTicksPerSecond$1 -> WOlC$1:
    react.sampler.SampleTicksPerSecond this$0 -> fnaX
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleTileDroppedTicks -> JJFr:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleTileDroppedTicks$1 -> JJFr$1:
    react.sampler.SampleTileDroppedTicks this$0 -> axdJ
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleTileTime -> oVRG:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleTileTime$1 -> oVRG$1:
    react.sampler.SampleTileTime this$0 -> MmiY
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.sampler.SampleTileTimeLock -> WOlM:
    react.graph.IFormatter formatter -> Xupx
    19:28:void <init>() -> <init>
    33:39:void construct() -> wUEl
    44:45:void sample() -> wTdl
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> QpME
react.sampler.SampleTileTimeLock$1 -> WOlM$1:
    react.sampler.SampleTileTimeLock this$0 -> oqKK
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> MuBm
react.security.checkpoints.SecurityCheckpointAlpha -> uprw:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> PBhH
    78:148:void doScan(java.lang.Runnable) -> AGKd
    152:181:byte[] readResource(java.io.File,java.lang.String) -> BJNe
    186:217:react.glang.GMap scan(java.io.File) -> AGKd
    33:33:byte[] access$000(java.io.File,java.lang.String) -> AGKd
react.security.checkpoints.SecurityCheckpointAlpha$1 -> uprw$1:
    java.lang.Runnable val$r -> sdDv
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> uprw$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> Qhsy
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> Qglg:
    java.lang.String ip -> FObs
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> TpvJ:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> TpvJ$1:
    java.io.File val$f -> RBDn
    react.security.locks.SecurityLockAlpha this$0 -> xavE
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> eYTv:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> OHEE
react.slate.PhantomSlate -> oEPC:
    react.glang.GList lines -> RRgm
    react.glang.GList viewers -> PMCK
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> VWDp
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> wTwg
    44:45:void set(int,java.lang.String) -> AGKd
    50:51:void setLines(react.glang.GList) -> Cfcu
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> WWvf
    91:95:void addViewer(org.bukkit.entity.Player) -> OHEE
    100:102:void removeViewer(org.bukkit.entity.Player) -> PmKF
    107:107:react.glang.GList getViewers() -> esIM
    113:113:boolean isViewing(org.bukkit.entity.Player) -> GPmc
    119:120:void addLine(java.lang.String) -> pYEy
    125:126:void clearLines() -> Gsdx
react.slate.Slate -> pjUc:
    void build() -> WWvf
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> wTwg
    void set(int,java.lang.String) -> AGKd
    void setLines(react.glang.GList) -> Cfcu
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> OHEE
    void addLine(java.lang.String) -> pYEy
    void clearLines() -> Gsdx
    void removeViewer(org.bukkit.entity.Player) -> PmKF
    react.glang.GList getViewers() -> esIM
    boolean isViewing(org.bukkit.entity.Player) -> GPmc
    void update() -> update
react.slate.SlateUtil -> wvyd:
    18:18:void <init>() -> <init>
    27:27:org.bukkit.scoreboard.ScoreboardManager getManager() -> wLkK
    37:37:org.bukkit.scoreboard.Scoreboard newBoard() -> uiIE
    51:61:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> BJNe
    66:76:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> AGKd
    90:100:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> NEAQ
    115:121:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> BJNe
    134:146:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> BJNe
    160:172:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> AGKd
    177:187:java.lang.String convertJSON(java.lang.String) -> aCgk
    192:208:java.lang.String[] convertJSON(java.lang.String[]) -> AGKd
    213:214:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> BJNe
react.surge.Main -> Xlad:
    react.glang.GList plugins -> bIEf
    react.glang.GMap pluginInstances -> mPtf
    react.glang.GList controllerSet -> jine
    react.glang.GMap anchors -> MnMU
    react.glang.GList classes -> fCnr
    java.lang.reflect.Field nsField -> uYNC
    java.lang.reflect.Field thField -> axep
    react.glang.GList tracks -> cdyp
    long nsf -> SxOi
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> PdnG
    90:109:long getNanoSync() -> wLkS
    114:115:void requestResetNanos() -> hcDC
    119:127:void requestReload() -> Nfwg
    131:134:void requestReload(java.lang.Runnable) -> NEAQ
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> BJNe
    201:218:void onStop() -> tDCM
    224:224:void onPostInit() -> XKDI
    230:230:void onPreInit() -> Uklp
    234:245:void shutDownAmps() -> dDtQ
    249:458:void initializeAmps() -> BJbe
    463:504:void doScan() -> iDCN
    508:530:void scanForPoolDefiners() -> DbMH
    534:550:void scanForRawEvents() -> sHoF
    554:570:void scanForDynamicTrack() -> DbMJ
    574:595:void scanForAmps() -> IhkE
    600:611:void onTick() -> uqIk
react.surge.Main$1 -> Xlad$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> aoJi:
    react.surge.control.AmpedPlugin plugin -> elAq
    boolean connected -> connected
    int masterTask -> gGSg
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> qTJo
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> FyUA
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> BJNe
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> BJNe
    113:114:void stopTask(int) -> rpNJ
    57:57:void access$0(react.surge.PluginAmp) -> BJNe
react.surge.PluginAmp$1 -> aoJi$1:
    react.surge.PluginAmp this$0 -> qUQU
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> aoJi$2:
    react.surge.PluginAmp this$0 -> qUQU
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> fdfu:
    react.surge.PluginAmp amp -> OtRT
    react.glang.GList tickComponents -> Xdxv
    react.glang.GList atickComponents -> aWBu
    react.surge.sched.TaskManager taskmgr -> CNlx
    react.surge.hotload.HotloadManager hotloadmgr -> PTpy
    java.lang.Thread mainThread -> sIsy
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> BJNe
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> IyYW
    44:44:java.io.File folder() -> NETa
    49:51:java.io.File getPluginJarFile() -> kbyS
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> TFRB
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> ncqw
    74:74:react.glang.GList getTickComponents() -> qBgu
    79:79:react.glang.GList getAsyncTickComponents() -> IGFv
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> BJNe
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> AGKd
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> BJNe
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> vlKO
    126:126:boolean hasAmp() -> IFfV
    131:131:react.surge.PluginAmp getAmp() -> PCKN
    136:136:react.surge.sched.TaskManager getTaskManager() -> CxYw
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> CNGg
react.surge.cluster.Cluster -> OYTk:
    react.surge.cluster.ClusterType type -> xjee
    java.lang.Object t -> eHoC
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> Mcsm
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> rhJd:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> WFxw:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> VTwg:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> DQFB:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> ArQV:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> rWJA:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> EeIs:
    react.surge.cluster.ClusterType INT -> VVcF
    react.surge.cluster.ClusterType BOOLEAN -> WIEV
    react.surge.cluster.ClusterType STRING -> aWCN
    react.surge.cluster.ClusterType STRING_LIST -> mQUP
    react.surge.cluster.ClusterType DOUBLE -> PDPs
    react.surge.cluster.ClusterType LONG -> hdGm
    react.surge.cluster.ClusterType[] ENUM$VALUES -> nBtf
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> pPba:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> ghsx
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> BJNe
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> BJNe
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> ETLu
react.surge.cluster.ConfigurationDataOutput -> YDnh:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> AGKd
react.surge.cluster.DataCluster -> nBLW:
    react.glang.GMap clusters -> qnaf
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> eGvK
    29:33:void fromJson(react.json.JSONObject) -> iBmJ
    37:44:react.json.JSONObject toJson() -> SCcR
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> YgVy
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> BJNe
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> KUKo
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> lDGI
    194:195:void set(java.lang.String,int) -> iBmJ
    199:200:void set(java.lang.String,boolean) -> NEAQ
    204:205:void set(java.lang.String,double) -> NEAQ
    209:210:void set(java.lang.String,long) -> NEAQ
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> BJNe
react.surge.cluster.ICluster -> MRnS:
    react.surge.cluster.ClusterType getType() -> Mcsm
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> vIcI:
react.surge.cluster.IDataInput -> tLLt:
    react.surge.cluster.DataCluster read(java.io.File) -> NEAQ
react.surge.cluster.IDataOutput -> dUov:
    void write(react.surge.cluster.DataCluster,java.io.File) -> BJNe
react.surge.cluster.Key -> PlyX:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> SebH:
    int value() -> value
react.surge.cluster.KeyStore -> VMHh:
react.surge.cluster.ReflectedConfigurationException -> QyPj:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> PSif:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> NEAQ
react.surge.cluster.YamlDataOutput -> sjpR:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> BJNe
react.surge.collection.GSound -> UkjY:
    java.lang.String sound -> vJmG
    org.bukkit.Sound iSound -> uYKs
    java.lang.Float volume -> EwWD
    java.lang.Float pitch -> NqPG
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> mXJl
    61:72:void play(org.bukkit.Location) -> iBmJ
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> BJNe
    93:93:java.lang.String getSound() -> PeNR
    98:99:void setSound(java.lang.String) -> rpNJ
    103:103:org.bukkit.Sound getiSound() -> PvQm
    108:109:void setiSound(org.bukkit.Sound) -> BJNe
    113:113:java.lang.Float getVolume() -> IOYy
    118:119:void setVolume(java.lang.Float) -> BJNe
    123:123:java.lang.Float getPitch() -> hseu
    128:129:void setPitch(java.lang.Float) -> AGKd
react.surge.control.AmpedPlugin -> jhff:
    react.glang.GList controllers -> Rtlq
    react.gconcurrent.ParallelPoolManager pp -> WYiO
    react.surge.server.CoreTickThread ctt -> FOhB
    24:50:void <init>() -> <init>
    void doScan() -> iDCN
    long getNanoSync() -> wLkS
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> dVWi
    108:109:void registerController(react.surge.control.IController) -> BJNe
    114:125:void onTick() -> uqIk
    130:130:java.lang.String getTickName() -> cteV
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> iLVN
    142:257:void destroyOldThreads() -> fSmA
    void onControllerRegistry() -> PdnG
    void onStart(react.surge.util.Protocol) -> BJNe
    void onStop() -> tDCM
    void onPostInit() -> XKDI
    void onPreInit() -> Uklp
react.surge.control.AmpedPlugin$1 -> jhff$1:
    react.surge.control.AmpedPlugin this$0 -> htkr
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> imgm
react.surge.control.AmpedPlugin$2 -> jhff$2:
    react.surge.control.AmpedPlugin this$0 -> htkr
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> pjXB:
react.surge.control.Controller -> uXDh:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> IXGi:
react.surge.control.Enable -> CVUK:
react.surge.control.IController -> Rjqq:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> GsdT:
react.surge.control.Plugin -> kAVN:
react.surge.control.SurgePlugin -> IhiG:
    void onStart(react.surge.util.Protocol) -> BJNe
    void onStop() -> tDCM
    void onPostInit() -> XKDI
    void onPreInit() -> Uklp
    void onControllerRegistry() -> PdnG
    void registerController(react.surge.control.IController) -> BJNe
    react.glang.GList getControllers() -> dVWi
    react.gconcurrent.ParallelPoolManager getThreadPool() -> iLVN
react.surge.hotload.HotloadManager -> aLhj:
    react.glang.GMap filemods -> uGmN
    react.glang.GMap filesizes -> NiAi
    react.glang.GMap fileacts -> JCCN
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> BJNe
    35:38:void untrack(java.io.File) -> TFRB
    42:45:void untrackall() -> XRta
    50:86:void onTick() -> uqIk
    91:91:java.lang.String getTickName() -> cteV
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> BJNe
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> AGKd
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> NEAQ
react.surge.hotload.HotloadManager$1 -> aLhj$1:
    react.surge.hotload.HotloadManager this$0 -> ELeE
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> Xtrc:
    boolean init -> mPvh
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> lovm
    java.lang.Class IChatBaseComponent -> kJpi
    java.lang.Class ChatSerializer -> aWEo
    java.lang.Class PacketPlayOutPlayerInfo -> oOMP
    java.lang.Class PlayerInfoData -> QaIo
    java.lang.Class EnumPlayerInfoAction -> QaJN
    java.lang.Class GameProfile -> JBba
    java.lang.Class EnumGamemode -> UvHE
    java.lang.Class TileEntitySkull -> HgPf
    java.lang.Class LoadingCache -> FPIU
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> IWea:
    react.surge.nms.NMSX bountifulAPI -> NhbD
    boolean useOldMethods -> VNUp
    java.lang.String nmsver -> hRhl
    java.lang.Object eTimes -> Qhxy
    java.lang.Object eTitle -> Jufx
    java.lang.Object eSubtitle -> LIHN
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> BJNe
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> IyYU
    75:89:java.lang.Class getCBClass(java.lang.String) -> kAEP
    96:104:java.lang.Object serializeChat(java.lang.String) -> HeUI
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> AGKd
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> BJNe
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> uXHk
    151:151:java.lang.String craftPackage() -> VLoQ
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> BJNe
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> BJNe
    197:207:java.lang.Class getNMSClass(java.lang.String) -> WXNh
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> BJNe
    279:280:void clearTitle(org.bukkit.entity.Player) -> dLnT
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> AGKd
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> BJNe
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> BJNe
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> wvjn
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> lDGI
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> iCNQ
    434:447:int ping(org.bukkit.entity.Player) -> bGHq
react.surge.nms.NMSX$1 -> IWea$1:
    org.bukkit.entity.Player val$player -> bXye
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> IWea$2:
    org.bukkit.entity.Player val$player -> bXye
    java.lang.String val$message -> wVcU
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> LPMt:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> Fpdk
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> BJNe
    68:82:void clearTitle(org.bukkit.entity.Player) -> dLnT
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> BJNe
react.surge.nms.PacketUtil$V -> LPMt$BJNe:
    react.surge.nms.PacketUtil$V R17 -> PfVL
    react.surge.nms.PacketUtil$V R18 -> apWO
    react.surge.nms.PacketUtil$V R19 -> tVLD
    react.surge.nms.PacketUtil$V R111 -> Qhwj
    react.surge.nms.PacketUtil$V R110 -> OcSJ
    react.surge.nms.PacketUtil$V R112 -> MnNW
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> kvEW
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> ThgA:
    java.lang.String title -> title
    java.lang.String subTitle -> sIuy
    java.lang.String action -> action
    java.lang.Integer fadeIn -> Trax
    java.lang.Integer fadeOut -> HVNQ
    java.lang.Integer stayTime -> nKgo
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> XIkf
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> aoQt
    79:80:void setSubTitle(java.lang.String) -> TEsU
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> iwHk
    99:100:void setFadeIn(java.lang.Integer) -> NEAQ
    104:104:java.lang.Integer getFadeOut() -> pbJm
    109:110:void setFadeOut(java.lang.Integer) -> TFRB
    114:114:java.lang.Integer getStayTime() -> JIjn
    119:120:void setStayTime(java.lang.Integer) -> iBmJ
react.surge.nms.VersionBukkit -> ECHt:
    react.surge.nms.VersionBukkit VU -> nSwv
    react.surge.nms.VersionBukkit V7 -> GIxo
    react.surge.nms.VersionBukkit V8 -> EMDv
    react.surge.nms.VersionBukkit V9 -> GSJy
    react.surge.nms.VersionBukkit V11 -> ORQm
    react.surge.nms.VersionBukkit V111 -> ynJx
    react.surge.nms.VersionBukkit V112 -> Enfw
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> bjiR
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> xOnj
    27:32:boolean uc() -> Gbdn
    37:67:react.surge.nms.VersionBukkit get() -> axBP
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> kkha:
    void burst(java.lang.Object) -> PmKF
    void setTimeLock(double) -> mXJl
    double getEstimatedTimeUse() -> HTgE
    int flush() -> Gsfc
    int flush(react.gbench.Profiler) -> BJNe
    void queue(java.lang.Object) -> GPmc
    void queue(java.util.List) -> NEAQ
    void queue(java.lang.Object[]) -> BJNe
react.surge.sched.ICancellable -> NfuK:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> oEPr:
    void onTick() -> uqIk
    java.lang.String getTickName() -> cteV
react.surge.sched.ITask -> YDpi:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> LjEP
    java.lang.String getName() -> getName
    double getComputeTime() -> TNwq
    double getTotalComputeTime() -> ytth
    double getActiveTime() -> kkkp
    boolean hasCompleted() -> GQdT
react.surge.sched.Task -> dpFY:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> LIKO
    double computeTime -> IrfD
    double totalComputeTime -> hBKG
    double activeTime -> UmWm
    boolean completed -> completed
    react.gbench.Profiler profiler -> Soap
    react.gbench.Profiler activeProfiler -> opqh
    int ticks -> wVfa
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> TFRB
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> LjEP
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> TNwq
    150:150:boolean hasCompleted() -> GQdT
    156:156:double getTotalComputeTime() -> ytth
    162:162:double getActiveTime() -> kkkp
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> BJNe
    15:15:void access$1(react.surge.sched.Task,boolean) -> BJNe
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> AGKd
    14:14:void access$3(react.surge.sched.Task,double) -> BJNe
    12:12:void access$4(react.surge.sched.Task,double) -> AGKd
    14:14:double access$5(react.surge.sched.Task) -> NEAQ
    13:13:void access$6(react.surge.sched.Task,double) -> NEAQ
    13:13:double access$7(react.surge.sched.Task) -> TFRB
    12:12:double access$8(react.surge.sched.Task) -> iBmJ
react.surge.sched.Task$1 -> dpFY$1:
    react.surge.sched.Task this$0 -> bYit
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> dpFY$2:
    react.surge.sched.Task this$0 -> bYit
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> dpFY$3:
    react.surge.sched.Task this$0 -> bYit
    int val$total -> xIIP
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> teaT:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> LIKO
    double computeTime -> IrfD
    double totalComputeTime -> hBKG
    double activeTime -> UmWm
    boolean completed -> completed
    react.gbench.Profiler profiler -> Soap
    react.gbench.Profiler activeProfiler -> opqh
    int ticks -> wVfa
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> TFRB
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> LjEP
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> TNwq
    101:101:boolean hasCompleted() -> GQdT
    107:107:double getTotalComputeTime() -> ytth
    113:113:double getActiveTime() -> kkkp
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> BJNe
    12:12:void access$1(react.surge.sched.TaskLater,double) -> BJNe
    13:13:double access$2(react.surge.sched.TaskLater) -> AGKd
    12:12:double access$3(react.surge.sched.TaskLater) -> NEAQ
    13:13:void access$4(react.surge.sched.TaskLater,double) -> AGKd
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> TFRB
    14:14:double access$6(react.surge.sched.TaskLater) -> iBmJ
    14:14:void access$7(react.surge.sched.TaskLater,double) -> NEAQ
react.surge.sched.TaskLater$1 -> teaT$1:
    react.surge.sched.TaskLater this$0 -> GmAN
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> qKVb:
    react.glang.GList tasks -> vAhS
    react.glang.GMap taskProfiles -> tgPB
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> BJNe
    25:35:void onTick() -> uqIk
    39:40:void putFinishingTask(react.surge.sched.ITask) -> AGKd
    44:53:void putTask(react.surge.sched.ITask) -> NEAQ
    58:58:java.lang.String getTickName() -> cteV
    63:63:react.glang.GList getTasks() -> gOCN
    68:68:react.glang.GMap getTaskProfiles() -> YUyg
react.surge.sched.TaskProfile -> vbvK:
    double activeTime -> UmWm
    double computeTickTime -> qLch
    double computeTime -> IrfD
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> kkkp
    23:24:void setActiveTime(double) -> dLnT
    28:28:double getComputeTickTime() -> dNIh
    33:34:void setComputeTickTime(double) -> bGHq
    38:38:double getComputeTime() -> TNwq
    43:44:void setComputeTime(double) -> XIkf
react.surge.server.AsyncTick -> PBhH:
react.surge.server.CPS -> wTwg:
    react.glang.GMap keys -> hdMU
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> PAvx
    46:99:void scan() -> AjHT
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> NEAQ
react.surge.server.CoreTickThread -> esIM:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> Gsdx:
    long memoryFree -> EDVp
    long memoryUsed -> vJrM
    long memoryMax -> Dbur
    long lastMemoryUsed -> lxif
    long memoryUsedAfterGC -> lyKM
    long allocated -> ORTk
    long collected -> rhxS
    long collections -> xQWo
    long sms -> ekce
    long memoryAllocatedPerTick -> cKjh
    long memoryCollectedPerTick -> qUUN
    long memoryFullyAllocatedPerTick -> jabF
    long mah -> Ulua
    long mahs -> rGUd
    22:39:void <init>() -> <init>
    void onAllocationSet() -> Utad
    46:98:void run() -> run
    102:102:long getMemoryFree() -> vkoT
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> HKyF
    117:117:long getLastMemoryUsed() -> ryTs
    122:122:long getMemoryUsedAfterGC() -> Drpu
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> GRHR
    137:137:long getCollections() -> TFkU
    142:142:long getSms() -> sYsv
    147:147:long getMemoryAllocatedPerTick() -> tUHR
    152:152:long getMemoryCollectedPerTick() -> ggsa
    157:157:long getMemoryFullyAllocatedPerTick() -> rgqq
    162:162:long getMah() -> XcwU
    167:167:long getMahs() -> jNyM
react.surge.server.SuperSampler -> wLkK:
    react.gmath.Average ticksPerSecondL -> DtWX
    react.gmath.Average tickTimeL -> YNoU
    react.gmath.Average mahL -> kCBM
    double ticksPerSecond -> ffDj
    double ticksPerSecondRaw -> xYhH
    double tickTime -> eJBU
    double tickTimeRaw -> wVds
    boolean running -> running
    boolean frozen -> gOgJ
    double tickUtilizationRaw -> hSJm
    double tickUtilization -> ujTu
    double leftoverTickTime -> MnSX
    long memoryUse -> xHjM
    long memoryAllocated -> sSNA
    long memoryCollected -> SUqP
    long mahs -> rGUd
    int totalChunks -> agjn
    int totalEntities -> Rcof
    int totalDrops -> SDpQ
    int totalTiles -> JdjF
    int totalLiving -> wyKi
    int chunksLoaded -> XfCF
    int chunksUnloaded -> HpEw
    react.surge.server.WorldMonitor worldMonitor -> BwCs
    react.surge.server.TPSMonitor tpsMonitor -> GBNp
    react.surge.server.MemoryMonitor memoryMonitor -> aNXX
    java.lang.StackTraceElement[] lockStack -> pAQp
    react.glang.GMap spikes -> kmAa
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> uqIk
    154:154:java.lang.String getTickName() -> cteV
    159:159:react.gmath.Average getTicksPerSecondL() -> oVXj
    164:164:double getTicksPerSecond() -> DsDK
    169:169:double getTicksPerSecondRaw() -> Gshe
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> ymGh
    184:184:react.gmath.Average getTickTimeL() -> WHCm
    189:189:double getTickTime() -> pGyB
    194:194:double getTickTimeRaw() -> agBt
    199:199:double getTickUtilizationRaw() -> JdAb
    204:204:double getTickUtilization() -> DaoM
    209:209:double getLeftoverTickTime() -> SUIc
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> imxa
    219:219:long getMemoryUse() -> cRuY
    224:224:long getMemoryAllocated() -> uiOR
    229:229:long getMemoryCollected() -> fusv
    234:234:react.gmath.Average getMahL() -> ymKR
    239:239:long getMahs() -> jNyM
    244:244:int getTotalChunks() -> WqyI
    249:249:int getTotalEntities() -> fnES
    254:254:int getTotalDrops() -> AYHh
    259:259:int getTotalTiles() -> kuDT
    264:264:int getTotalLiving() -> JJQY
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> aUcU
    274:274:int getChunksLoaded() -> RYxY
    279:279:int getChunksUnloaded() -> HwOr
    284:285:void setTicksPerSecondL(react.gmath.Average) -> BJNe
    289:290:void setTickTimeL(react.gmath.Average) -> AGKd
    294:295:void setMahL(react.gmath.Average) -> NEAQ
    299:300:void setTicksPerSecond(double) -> eXcm
    304:305:void setTicksPerSecondRaw(double) -> JbfS
    309:310:void setTickTime(double) -> lUFw
    314:315:void setTickTimeRaw(double) -> tCKx
    319:320:void setRunning(boolean) -> rMfk
    324:325:void setTickUtilizationRaw(double) -> FDwc
    329:330:void setTickUtilization(double) -> OHCR
    334:335:void setLeftoverTickTime(double) -> jhRp
    339:340:void setMemoryUse(long) -> mXJl
    344:345:void setMemoryAllocated(long) -> dLnT
    349:350:void setMemoryCollected(long) -> bGHq
    354:355:void setMahs(long) -> XIkf
    359:360:void setTotalChunks(int) -> IyYU
    364:365:void setTotalEntities(int) -> kAEP
    369:370:void setTotalDrops(int) -> HeUI
    374:375:void setTotalTiles(int) -> WXNh
    379:380:void setTotalLiving(int) -> wvjn
    384:385:void setChunksLoaded(int) -> TEsU
    389:390:void setChunksUnloaded(int) -> PAvx
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> BJNe
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> BJNe
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> BJNe
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> cAwW
    419:419:react.glang.GMap getSpikes() -> VToR
    31:31:void access$0(react.surge.server.SuperSampler,int) -> BJNe
    33:33:void access$1(react.surge.server.SuperSampler,int) -> AGKd
    34:34:void access$2(react.surge.server.SuperSampler,int) -> NEAQ
    32:32:void access$3(react.surge.server.SuperSampler,int) -> TFRB
    35:35:void access$4(react.surge.server.SuperSampler,int) -> iBmJ
    36:36:void access$5(react.surge.server.SuperSampler,int) -> lDGI
    37:37:void access$6(react.surge.server.SuperSampler,int) -> IWTN
    19:19:void access$7(react.surge.server.SuperSampler,double) -> BJNe
    21:21:void access$8(react.surge.server.SuperSampler,double) -> AGKd
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> BJNe
    19:19:double access$10(react.surge.server.SuperSampler) -> AGKd
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> NEAQ
    21:21:double access$12(react.surge.server.SuperSampler) -> TFRB
    18:18:void access$13(react.surge.server.SuperSampler,double) -> NEAQ
    20:20:void access$14(react.surge.server.SuperSampler,double) -> TFRB
    24:24:void access$15(react.surge.server.SuperSampler,double) -> iBmJ
    20:20:double access$16(react.surge.server.SuperSampler) -> iBmJ
    25:25:void access$17(react.surge.server.SuperSampler,double) -> lDGI
    25:25:double access$18(react.surge.server.SuperSampler) -> lDGI
    26:26:void access$19(react.surge.server.SuperSampler,double) -> IWTN
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> BJNe
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> IWTN
    27:27:void access$22(react.surge.server.SuperSampler,long) -> BJNe
    28:28:void access$23(react.surge.server.SuperSampler,long) -> AGKd
    29:29:void access$24(react.surge.server.SuperSampler,long) -> NEAQ
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> vtGe
    30:30:void access$26(react.surge.server.SuperSampler,long) -> TFRB
react.surge.server.SuperSampler$1 -> wLkK$1:
    react.surge.server.SuperSampler this$0 -> eQrr
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> BJNe
react.surge.server.SuperSampler$2 -> wLkK$2:
    react.surge.server.SuperSampler this$0 -> eQrr
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> GRIq
    106:107:void onSpike() -> bPVf
react.surge.server.SuperSampler$3 -> wLkK$3:
    react.surge.server.SuperSampler this$0 -> eQrr
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> Utad
react.surge.server.TPSMonitor -> uiIE:
    double tickTimeMS -> jXqu
    double rawTicksPerSecond -> MvbY
    react.gbench.Profiler tickProfiler -> Pexd
    react.gbench.Profiler tickTimeProfiler -> XKmf
    boolean ticked -> elGJ
    java.lang.Thread$State lastState -> kBcf
    double actualTickTimeMS -> qoJG
    double ltt -> huPD
    long lastTick -> EKmS
    boolean frozen -> gOgJ
    java.lang.StackTraceElement[] lockedStack -> AHmR
    double lmsx -> PoLK
    23:40:void <init>() -> <init>
    void onTicked() -> GRIq
    void onSpike() -> bPVf
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> BJNe
    160:160:double getTickTimeMS() -> xrWh
    165:165:double getRawTicksPerSecond() -> qSom
    170:170:react.gbench.Profiler getTickProfiler() -> eaon
    175:175:boolean isTicked() -> xGcT
    180:181:void markTick() -> vuBp
    185:185:react.gbench.Profiler getTickTimeProfiler() -> iTih
    190:190:java.lang.Thread$State getLastState() -> qmcU
    195:195:double getActualTickTimeMS() -> NNMf
    200:200:double getLtt() -> IGON
    205:205:long getLastTick() -> bypt
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> dNKr
react.surge.server.WorldMonitor -> PdnG:
    boolean chunksChanged -> lVge
    boolean dropChanged -> agit
    boolean tileChanged -> wFGA
    boolean livingChanged -> FFyx
    boolean totalChanged -> sSOd
    boolean updated -> dNsS
    int totalChunks -> agjn
    int totalDrops -> SDpQ
    int totalTiles -> JdjF
    int totalLiving -> wyKi
    int totalEntities -> Rcof
    int chunksLoaded -> XfCF
    int chunksUnloaded -> HpEw
    long ms -> IGFv
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> BJNe
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> AGKd
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> BJNe
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> BJNe
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> BJNe
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> BJNe
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> BJNe
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> BJNe
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> BJNe
    130:131:void doUpdate() -> brXR
    135:186:void sample() -> wTdl
    190:196:void sampleTotalCount() -> gqGQ
    200:206:void sampleLivingCount() -> WPUh
    210:219:void sampleTileCount() -> HDIt
    223:229:void sampleDropCount() -> Drqi
    233:239:void sampleChunkCount() -> Yomd
react.surge.text.PhantomSpinner -> wLkS:
    react.surge.text.ProgressSpinner s -> VEkH
    react.surge.text.ProgressSpinner c -> xtBB
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> hcDC:
    java.lang.String[] chars -> fLiM
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> CpxP
    react.surge.text.ProgressSpinner NETWORK -> uYVC
    react.surge.text.ProgressSpinner CIRCLES -> EoNj
    react.surge.text.ProgressSpinner RANDOMS -> qnlL
    react.surge.text.ProgressSpinner MERGERS -> WYpF
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> sYvM
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> Nfwg:
    int value() -> value
react.surge.util.Area -> tDCM:
    org.bukkit.Location location -> VWMd
    java.lang.Double radius -> agmf
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> BJNe
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> PnDu
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> lDGI
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> IWTN
    109:109:boolean isWithin(org.bukkit.Location) -> vtGe
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> TFRB
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> BJNe
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> iDII
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> XmJy
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> iCNQ
    257:257:java.lang.Double getRadius() -> lweV
    268:269:void setRadius(java.lang.Double) -> NEAQ
    278:283:org.bukkit.Location random() -> oMih
react.surge.util.Axis -> XKDI:
    react.surge.util.Axis X -> vuix
    react.surge.util.Axis Y -> Okjm
    react.surge.util.Axis Z -> HwxA
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> raNN
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> hAEk
    29:29:org.bukkit.util.Vector negative() -> OapH
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> Uklp:
    react.surge.util.BlastResistance BARRIER -> lWKo
    react.surge.util.BlastResistance BEDROCK -> NGEg
    react.surge.util.BlastResistance COMMAND -> IbHQ
    react.surge.util.BlastResistance ENDER_PORTAL -> htpt
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> eJEk
    react.surge.util.BlastResistance ANVIL -> diEj
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> cLPO
    react.surge.util.BlastResistance OBSIDIAN -> UTHi
    react.surge.util.BlastResistance ENDER_CHEST -> ceah
    react.surge.util.BlastResistance WATER -> mHlK
    react.surge.util.BlastResistance LAVA -> MKqA
    react.surge.util.BlastResistance STATIONARY_WATER -> oORj
    react.surge.util.BlastResistance DRAGON_EGG -> SNBr
    react.surge.util.BlastResistance ENDER_STONE -> UBfb
    react.surge.util.BlastResistance COAL_BLOCK -> IPep
    react.surge.util.BlastResistance DIAMOND_BLOCK -> bsaN
    react.surge.util.BlastResistance EMERALD_BLOCK -> MTap
    react.surge.util.BlastResistance GOLD_BLOCK -> ayNu
    react.surge.util.BlastResistance IRON_BLOCK -> ifqy
    react.surge.util.BlastResistance REDSTONE_BLOCK -> BUCx
    react.surge.util.BlastResistance BRICK -> tVQP
    react.surge.util.BlastResistance BRICK_STAIRS -> cfCV
    react.surge.util.BlastResistance HARD_CLAY -> nfBR
    react.surge.util.BlastResistance STONE -> yLOA
    react.surge.util.BlastResistance SMOOTH_BRICK -> fDXL
    react.surge.util.BlastResistance SMOOTH_STAIRS -> bsaA
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> raPV
    react.surge.util.BlastResistance STONE_SLAB2 -> eJHr
    react.surge.util.BlastResistance IRON_DOOR -> FrTM
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> MefQ
    react.surge.util.BlastResistance IRON_TRAPDOOR -> IQJL
    react.surge.util.BlastResistance MOB_SPAWNER -> IsMQ
    react.surge.util.BlastResistance WEB -> SDtN
    react.surge.util.BlastResistance DISPENSER -> mbah
    react.surge.util.BlastResistance DROPPER -> HMen
    react.surge.util.BlastResistance FURNACE -> xHmd
    react.surge.util.BlastResistance BURNING_FURNACE -> BwHa
    react.surge.util.BlastResistance BEACON -> KFOE
    react.surge.util.BlastResistance COAL_ORE -> NOXM
    react.surge.util.BlastResistance COCOA -> aVnW
    react.surge.util.BlastResistance DIAMOND_ORE -> Yyjc
    react.surge.util.BlastResistance EMERALD_ORE -> ipHE
    react.surge.util.BlastResistance FENCE -> Mmvh
    react.surge.util.BlastResistance FENCE_GATE -> uYVr
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> XLTP
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> HEVS
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> jPfj
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> SpJF
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> Jdmo
    react.surge.util.BlastResistance ACACIA_FENCE -> ARDQ
    react.surge.util.BlastResistance BIRCH_FENCE -> JunJ
    react.surge.util.BlastResistance DARK_OAK_FENCE -> usJD
    react.surge.util.BlastResistance SPRUCE_FENCE -> kKXv
    react.surge.util.BlastResistance JUNGLE_FENCE -> NFeb
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> TXwi
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> IrkR
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> sRnu
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> rqoV
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> lWLb
    react.surge.util.BlastResistance QUARTZ_STAIRS -> lWMG
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> pQva
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> lyPL
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> dyhe
    react.surge.util.BlastResistance WOOD_STAIRS -> QibE
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> YpxU
    react.surge.util.BlastResistance ACACIA_DOOR -> HUwk
    react.surge.util.BlastResistance BIRCH_DOOR -> QOpu
    react.surge.util.BlastResistance DARK_OAK_DOOR -> YGII
    react.surge.util.BlastResistance SPRUCE_DOOR -> GJdj
    react.surge.util.BlastResistance JUNGLE_DOOR -> NymN
    react.surge.util.BlastResistance GOLD_ORE -> bABJ
    react.surge.util.BlastResistance HOPPER -> Nylj
    react.surge.util.BlastResistance IRON_ORE -> rjDF
    react.surge.util.BlastResistance LAPIS_BLOCK -> mYsD
    react.surge.util.BlastResistance LAPIS_ORE -> tUty
    react.surge.util.BlastResistance QUARTZ_ORE -> xjsI
    react.surge.util.BlastResistance REDSTONE_ORE -> DIlX
    react.surge.util.BlastResistance TRAP_DOOR -> jsMD
    react.surge.util.BlastResistance WOOD -> lyRh
    react.surge.util.BlastResistance CHEST -> UvRK
    react.surge.util.BlastResistance TRAPPED_CHEST -> hJbb
    react.surge.util.BlastResistance WORKBENCH -> togp
    react.surge.util.BlastResistance CAULDRON -> RAsV
    react.surge.util.BlastResistance LOG -> Begm
    react.surge.util.BlastResistance LOG_2 -> NNxj
    react.surge.util.BlastResistance BOOKSHELF -> MTfr
    react.surge.util.BlastResistance BANNER -> hlfJ
    react.surge.util.BlastResistance STANDING_BANNER -> kTMM
    react.surge.util.BlastResistance WALL_BANNER -> XehL
    react.surge.util.BlastResistance JACK_O_LANTERN -> PLoP
    react.surge.util.BlastResistance MELON_BLOCK -> ynWC
    react.surge.util.BlastResistance SKULL -> jsML
    react.surge.util.BlastResistance PUMPKIN -> GdXX
    react.surge.util.BlastResistance SIGN -> DImE
    react.surge.util.BlastResistance SIGN_POST -> nwHP
    react.surge.util.BlastResistance WALL_SIGN -> BfJc
    react.surge.util.BlastResistance QUARTZ_BLOCK -> LQcE
    react.surge.util.BlastResistance NOTE_BLOCK -> jQHu
    react.surge.util.BlastResistance RED_SANDSTONE -> yTce
    react.surge.util.BlastResistance SANDSTONE -> tDru
    react.surge.util.BlastResistance WOOL -> CXLO
    react.surge.util.BlastResistance MONSTER_EGG -> CymB
    react.surge.util.BlastResistance RAILS -> HUwY
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> OIjX
    react.surge.util.BlastResistance DETECTOR_RAIL -> GKET
    react.surge.util.BlastResistance POWERED_RAIL -> KhSG
    react.surge.util.BlastResistance CLAY -> keMT
    react.surge.util.BlastResistance DIRT -> GmGv
    react.surge.util.BlastResistance GRASS -> NXJR
    react.surge.util.BlastResistance GRAVEL -> XUFY
    react.surge.util.BlastResistance SPONGE -> smEW
    react.surge.util.BlastResistance BREWING_STAND -> Qicd
    react.surge.util.BlastResistance STONE_BUTTON -> WHtK
    react.surge.util.BlastResistance WOOD_BUTTON -> kmaU
    react.surge.util.BlastResistance CAKE_BLOCK -> WkWr
    react.surge.util.BlastResistance ICE -> fMPR
    react.surge.util.BlastResistance PACKED_ICE -> jbNO
    react.surge.util.BlastResistance LEVER -> tDvb
    react.surge.util.BlastResistance MYCEL -> OuCL
    react.surge.util.BlastResistance PISTON_BASE -> SEYT
    react.surge.util.BlastResistance PISTON_EXTENSION -> rOqr
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> HEYl
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> VNbd
    react.surge.util.BlastResistance GOLD_PLATE -> ceic
    react.surge.util.BlastResistance IRON_PLATE -> oiKs
    react.surge.util.BlastResistance STONE_PLATE -> rYCj
    react.surge.util.BlastResistance WOOD_PLATE -> kdoe
    react.surge.util.BlastResistance SAND -> TPlj
    react.surge.util.BlastResistance SOUL_SAND -> OJNn
    react.surge.util.BlastResistance CACTUS -> uPjW
    react.surge.util.BlastResistance LADDER -> lWRT
    react.surge.util.BlastResistance NETHERRACK -> uGxX
    react.surge.util.BlastResistance GLASS -> qnqE
    react.surge.util.BlastResistance THIN_GLASS -> nmxO
    react.surge.util.BlastResistance STAINED_GLASS -> XTfy
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> veOP
    react.surge.util.BlastResistance GLOWSTONE -> lyUC
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> bcEi
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> TbNJ
    react.surge.util.BlastResistance SEA_LANTERN -> KFRE
    react.surge.util.BlastResistance BED_BLOCK -> JvST
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> Efbp
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> vdnG
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> XCeu
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> lhQv
    react.surge.util.BlastResistance LEAVES -> twyX
    react.surge.util.BlastResistance LEAVES_2 -> RcwY
    react.surge.util.BlastResistance SNOW -> jGxb
    int br -> Yhkx
    react.surge.util.BlastResistance[] ENUM$VALUES -> iNGj
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> nKGf
    175:190:int get(org.bukkit.Material) -> BJNe
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> dDtQ:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> lDGI
react.surge.util.C -> BJbe:
    react.surge.util.C BLACK -> XeiL
    react.surge.util.C DARK_BLUE -> VyVH
    react.surge.util.C DARK_GREEN -> bjvA
    react.surge.util.C DARK_AQUA -> jrmQ
    react.surge.util.C DARK_RED -> Asjv
    react.surge.util.C DARK_PURPLE -> VqGv
    react.surge.util.C GOLD -> cUKF
    react.surge.util.C GRAY -> WAFh
    react.surge.util.C DARK_GRAY -> styj
    react.surge.util.C BLUE -> HMlR
    react.surge.util.C GREEN -> wyWP
    react.surge.util.C AQUA -> XfMF
    react.surge.util.C RED -> fgED
    react.surge.util.C LIGHT_PURPLE -> AcJX
    react.surge.util.C YELLOW -> Soni
    react.surge.util.C WHITE -> cUJv
    react.surge.util.C MAGIC -> AYwk
    react.surge.util.C BOLD -> yKvp
    react.surge.util.C STRIKETHROUGH -> fVDM
    react.surge.util.C UNDERLINE -> fMRc
    react.surge.util.C ITALIC -> MwOa
    react.surge.util.C RESET -> iUyu
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> lWTX
    char code -> KWWI
    boolean isFormat -> YWnF
    java.lang.String toString -> CFnI
    java.util.Map BY_ID -> LtKI
    java.util.Map BY_CHAR -> DcbI
    java.util.Map dyeChatMap -> yUHk
    java.util.Map chatHexMap -> KNdE
    java.util.Map dyeHexMap -> elPj
    int[] $SWITCH_TABLE$surge$util$C -> gifb
    react.surge.util.C[] ENUM$VALUES -> UvUN
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> cRxH
    378:378:java.lang.String hex() -> hIUV
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> vtGe
    434:442:react.surge.util.C getByChar(java.lang.String) -> ugsb
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> AGKd
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> BJNe
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> AGKd
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> NEAQ
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> dUcD
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> cdAr
    560:578:java.lang.String generateColorTable() -> kkou
    588:588:org.bukkit.ChatColor chatColor() -> QVuA
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> IWTN
    632:679:byte getItemMeta() -> cBVm
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> baVk
react.surge.util.C$1 -> BJbe$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> BJbe$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> BJbe$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> BJbe$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> BJbe$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> BJbe$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> BJbe$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> BJbe$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> BJbe$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> BJbe$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> BJbe$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> BJbe$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> BJbe$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> BJbe$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> BJbe$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> BJbe$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> BJbe$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> BJbe$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> BJbe$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> BJbe$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> BJbe$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> BJbe$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> iDCN:
    double number -> VpgH
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> DaUf
    23:25:react.surge.util.CDou add(double) -> yklq
    30:32:react.surge.util.CDou sub(double) -> UcGR
    37:37:double get() -> get
    42:48:void circ() -> VMRn
react.surge.util.CMD -> DbMH:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> ipLj
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> Wqwt
    51:53:void execute(org.bukkit.command.CommandSender) -> iBmJ
    60:77:void execute() -> execute
react.surge.util.CNum -> sHoF:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> ugsb
    23:25:react.surge.util.CNum add(int) -> dUcD
    30:32:react.surge.util.CNum sub(int) -> cdAr
    37:37:int get() -> get
    42:48:void circ() -> VMRn
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> IFTv
react.surge.util.Chunks -> DbMJ:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> jEoX
    33:40:react.glang.GList getLoadedChunks() -> twLQ
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> AGKd
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> BJNe
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> BJNe
    98:98:boolean unload(org.bukkit.Chunk) -> iBkv
    114:124:int unload(react.glang.GList,boolean,boolean) -> BJNe
    138:138:int unload(react.glang.GList,boolean) -> BJNe
    150:150:int unload(react.glang.GList) -> jEoX
    166:166:boolean isLoaded(java.lang.String,int,int) -> BJNe
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> AGKd
    201:205:void load(react.glang.GList) -> rMfk
react.surge.util.Cuboid -> IhkE:
    java.lang.String worldName -> aVsW
    int x1 -> wWRU
    int y1 -> Rljo
    int z1 -> iNJN
    int x2 -> lNag
    int y2 -> bYvP
    int z2 -> xcGC
    int[] $SWITCH_TABLE$surge$util$Axis -> JvXN
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> eBAP
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> BJNe
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> NEAQ
    93:93:boolean hasPlayers() -> fSrt
    98:110:react.glang.GList getPlayers() -> xGNY
    115:166:react.glang.GList getEntities() -> FWYM
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> OOup
    287:287:org.bukkit.Location getLowerNE() -> OYax
    298:298:org.bukkit.Location getUpperSW() -> LGhQ
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> gVvb
    348:348:int getSizeY() -> TWpY
    358:358:int getSizeZ() -> KUfj
    368:368:int getLowerX() -> URbo
    378:378:int getLowerY() -> qLCc
    388:388:int getLowerZ() -> wnvW
    398:398:int getUpperX() -> QWYG
    408:408:int getUpperY() -> fvWL
    418:418:int getUpperZ() -> rqIM
    428:438:org.bukkit.block.Block[] corners() -> jXPH
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> BJNe
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> AGKd
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> NEAQ
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> TFRB
    546:546:boolean contains(int,int,int) -> iBmJ
    558:558:boolean contains(org.bukkit.block.Block) -> IWTN
    570:570:boolean contains(org.bukkit.Location) -> aeiG
    580:580:int volume() -> nlkx
    591:601:byte averageLightLevel() -> SnaD
    612:612:react.surge.util.Cuboid contract() -> wUdT
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> BJNe
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> AGKd
    708:715:boolean containsOnly(org.bukkit.Material) -> AGKd
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> BJNe
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> lDGI
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> BJNe
    786:800:java.util.List getChunks() -> LilN
    815:819:void fill(int,byte) -> BJNe
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> ePow
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> uiQG
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> DYdK
react.surge.util.Cuboid$1 -> IhkE$1:
    react.surge.util.Cuboid this$0 -> EnxS
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> aeiG
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IWTN
react.surge.util.Cuboid$CuboidDirection -> IhkE$BJNe:
    react.surge.util.Cuboid$CuboidDirection North -> GmNl
    react.surge.util.Cuboid$CuboidDirection East -> rGfC
    react.surge.util.Cuboid$CuboidDirection South -> FjKm
    react.surge.util.Cuboid$CuboidDirection West -> Aslq
    react.surge.util.Cuboid$CuboidDirection Up -> BfPB
    react.surge.util.Cuboid$CuboidDirection Down -> HhBJ
    react.surge.util.Cuboid$CuboidDirection Horizontal -> WtLq
    react.surge.util.Cuboid$CuboidDirection Vertical -> wxwp
    react.surge.util.Cuboid$CuboidDirection Both -> ywOH
    react.surge.util.Cuboid$CuboidDirection Unknown -> xkYq
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> eBAP
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> DkvB
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> QVwm
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> DYdK
react.surge.util.Cuboid$CuboidIterator -> IhkE$AGKd:
    org.bukkit.World w -> HyCh
    int baseX -> DtgK
    int baseY -> uQNr
    int baseZ -> HyDH
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> YWpD
    int sizeY -> RKLP
    int sizeZ -> orAm
    react.surge.util.Cuboid this$0 -> EnxS
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> qTJo:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> FyUA:
    react.glang.GList buffer -> Uuvk
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> TFRB
    37:38:void l(java.lang.Object,java.lang.String) -> AGKd
    42:43:void s(java.lang.Object,java.lang.String) -> NEAQ
    47:48:void v(java.lang.Object,java.lang.String) -> TFRB
    52:53:void w(java.lang.Object,java.lang.String) -> iBmJ
    57:58:void f(java.lang.Object,java.lang.String) -> lDGI
    62:69:void l(java.lang.String) -> IFTv
    73:80:void s(java.lang.String) -> OOup
    84:91:void v(java.lang.String) -> DGfb
    95:102:void w(java.lang.String) -> sPkx
    106:113:void f(java.lang.String) -> FMkE
react.surge.util.DMSRequire -> NETa:
    react.surge.util.DMSRequirement value() -> PvXm
react.surge.util.DMSRequirement -> kbyS:
    react.surge.util.DMSRequirement SQL -> btLj
    react.surge.util.DMSRequirement[] ENUM$VALUES -> QiiW
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> ncqw:
    react.surge.util.Depend VAULT -> Chpk
    react.surge.util.Depend FAWE -> XCjI
    react.surge.util.Depend WORLDEDIT -> pkrG
    react.surge.util.Depend PROTOLIB -> gPVb
    react.surge.util.Depend CITIZENS -> wxwF
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> RAws
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> qBgu:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> oyAa
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> IGFv:
    react.surge.util.DimensionFace X -> WQhT
    react.surge.util.DimensionFace Y -> cfLi
    react.surge.util.DimensionFace Z -> gPVM
    react.surge.util.DimensionFace[] ENUM$VALUES -> wFRi
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> vlKO:
    react.surge.util.Direction U -> MDLL
    react.surge.util.Direction D -> fVDm
    react.surge.util.Direction N -> PDcm
    react.surge.util.Direction S -> jrpu
    react.surge.util.Direction E -> eSBF
    react.surge.util.Direction W -> QOwR
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> TatN
    int[] $SWITCH_TABLE$surge$util$Direction -> Tasl
    react.surge.util.Direction[] ENUM$VALUES -> euGd
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> sHwM
    61:61:int x() -> Euvg
    66:66:int y() -> nmMA
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> hcKB
    81:81:react.glang.GList news() -> UBAY
    86:86:react.glang.GList udnews() -> xihQ
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> JbfS
    115:147:react.surge.util.Direction fromByte(byte) -> vtGe
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> nRyK
react.surge.util.DynamicConfiguration -> IFfV:
react.surge.util.DynamicTracker -> PCKN:
react.surge.util.Embedded -> CxYw:
    react.glang.GList get() -> wfdf
    void add(java.lang.Object) -> add
react.surge.util.FU -> CNGg:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> BJNe
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> AGKd
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> iBmJ
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> lDGI
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> Mcsm:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> lfKA
react.surge.util.Health -> ETLu:
    double hp -> uIBC
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> lMTM
    41:41:double getHearts() -> XRya
    51:51:double getHalfHearts() -> FOHI
    61:61:int getFlatHalfHearts() -> XBXp
react.surge.util.IO -> eGvK:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> SCcR:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> BJNe
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> BJNe
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> BJNe
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> BJNe
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> BJNe
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> AGKd
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> NEAQ
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> TFRB
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> BJNe
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> BJNe
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> BJNe
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> BJNe
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> iBmJ
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> lDGI
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> IWTN
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> vtGe
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> iCNQ
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> BJNe
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> aeiG
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> eXcm
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> BJNe
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> BJNe
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> AGKd
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> BJNe
react.surge.util.MSound -> YgVy:
    react.surge.util.MSound AMBIENCE_CAVE -> CPCP
    react.surge.util.MSound AMBIENCE_RAIN -> Chsv
    react.surge.util.MSound AMBIENCE_THUNDER -> Cyug
    react.surge.util.MSound ANVIL_BREAK -> plVW
    react.surge.util.MSound ANVIL_LAND -> wqKJ
    react.surge.util.MSound ANVIL_USE -> yTmI
    react.surge.util.MSound ARROW_HIT -> wqKI
    react.surge.util.MSound BURP -> Mnau
    react.surge.util.MSound CHEST_CLOSE -> nDLW
    react.surge.util.MSound CHEST_OPEN -> CObC
    react.surge.util.MSound CLICK -> mAHu
    react.surge.util.MSound DOOR_CLOSE -> btNv
    react.surge.util.MSound DOOR_OPEN -> wxxw
    react.surge.util.MSound DRINK -> SosU
    react.surge.util.MSound EAT -> kCTD
    react.surge.util.MSound EXPLODE -> NXRL
    react.surge.util.MSound FALL_BIG -> OlWA
    react.surge.util.MSound FALL_SMALL -> QYKH
    react.surge.util.MSound FIRE -> eteb
    react.surge.util.MSound FIRE_IGNITE -> QjMB
    react.surge.util.MSound FIZZ -> nemo
    react.surge.util.MSound FUSE -> xYxr
    react.surge.util.MSound GLASS -> pAaO
    react.surge.util.MSound HURT_FLESH -> fnwn
    react.surge.util.MSound ITEM_BREAK -> mQjC
    react.surge.util.MSound ITEM_PICKUP -> vLCR
    react.surge.util.MSound LAVA -> qEDP
    react.surge.util.MSound LAVA_POP -> QGiF
    react.surge.util.MSound LEVEL_UP -> raXv
    react.surge.util.MSound MINECART_BASE -> wNdy
    react.surge.util.MSound MINECART_INSIDE -> PgJL
    react.surge.util.MSound NOTE_BASS -> ywOV
    react.surge.util.MSound NOTE_PIANO -> pksb
    react.surge.util.MSound NOTE_BASS_DRUM -> SMnl
    react.surge.util.MSound NOTE_STICKS -> ptgy
    react.surge.util.MSound NOTE_BASS_GUITAR -> rGjK
    react.surge.util.MSound NOTE_SNARE_DRUM -> bQmL
    react.surge.util.MSound NOTE_PLING -> QYMs
    react.surge.util.MSound ORB_PICKUP -> Yqem
    react.surge.util.MSound PISTON_EXTEND -> cDOS
    react.surge.util.MSound PISTON_RETRACT -> Cqgd
    react.surge.util.MSound PORTAL -> UTXd
    react.surge.util.MSound PORTAL_TRAVEL -> oXTI
    react.surge.util.MSound PORTAL_TRIGGER -> Okxg
    react.surge.util.MSound SHOOT_ARROW -> lNid
    react.surge.util.MSound SPLASH -> GTAb
    react.surge.util.MSound SPLASH2 -> wVyA
    react.surge.util.MSound STEP_GRASS -> xblk
    react.surge.util.MSound STEP_GRAVEL -> dPDR
    react.surge.util.MSound STEP_LADDER -> YOdM
    react.surge.util.MSound STEP_SAND -> yToC
    react.surge.util.MSound STEP_SNOW -> oWqs
    react.surge.util.MSound STEP_STONE -> gXkc
    react.surge.util.MSound STEP_WOOD -> xcMd
    react.surge.util.MSound STEP_WOOL -> kTVx
    react.surge.util.MSound SWIM -> jPsW
    react.surge.util.MSound WATER -> TQUt
    react.surge.util.MSound WOOD_CLICK -> AlAX
    react.surge.util.MSound BAT_DEATH -> OciO
    react.surge.util.MSound BAT_HURT -> DdHh
    react.surge.util.MSound BAT_IDLE -> EgLN
    react.surge.util.MSound BAT_LOOP -> NqfC
    react.surge.util.MSound BAT_TAKEOFF -> fgIq
    react.surge.util.MSound BLAZE_BREATH -> AcQh
    react.surge.util.MSound BLAZE_DEATH -> oiSv
    react.surge.util.MSound BLAZE_HIT -> BneI
    react.surge.util.MSound CAT_HISS -> ffiI
    react.surge.util.MSound CAT_HIT -> WcOI
    react.surge.util.MSound CAT_MEOW -> rXih
    react.surge.util.MSound CAT_PURR -> RlqU
    react.surge.util.MSound CAT_PURREOW -> pkvI
    react.surge.util.MSound CHICKEN_IDLE -> BvuE
    react.surge.util.MSound CHICKEN_HURT -> CWuE
    react.surge.util.MSound CHICKEN_EGG_POP -> ujcy
    react.surge.util.MSound CHICKEN_WALK -> IIEd
    react.surge.util.MSound COW_IDLE -> kuwy
    react.surge.util.MSound COW_HURT -> YhwS
    react.surge.util.MSound COW_WALK -> jawP
    react.surge.util.MSound CREEPER_HISS -> Hovo
    react.surge.util.MSound CREEPER_DEATH -> nfSl
    react.surge.util.MSound ENDERDRAGON_DEATH -> RueD
    react.surge.util.MSound ENDERDRAGON_GROWL -> dPFC
    react.surge.util.MSound ENDERDRAGON_HIT -> LJAM
    react.surge.util.MSound ENDERDRAGON_WINGS -> DRjI
    react.surge.util.MSound ENDERMAN_DEATH -> mQni
    react.surge.util.MSound ENDERMAN_HIT -> edIj
    react.surge.util.MSound ENDERMAN_IDLE -> qEHy
    react.surge.util.MSound ENDERMAN_TELEPORT -> fVKy
    react.surge.util.MSound ENDERMAN_SCREAM -> tFAu
    react.surge.util.MSound ENDERMAN_STARE -> nTqK
    react.surge.util.MSound GHAST_SCREAM -> AlCd
    react.surge.util.MSound GHAST_SCREAM2 -> Qipj
    react.surge.util.MSound GHAST_CHARGE -> EVNR
    react.surge.util.MSound GHAST_DEATH -> CaGs
    react.surge.util.MSound GHAST_FIREBALL -> iFCM
    react.surge.util.MSound GHAST_MOAN -> MLcc
    react.surge.util.MSound IRONGOLEM_DEATH -> rXlp
    react.surge.util.MSound IRONGOLEM_HIT -> yfRl
    react.surge.util.MSound IRONGOLEM_THROW -> ReCV
    react.surge.util.MSound IRONGOLEM_WALK -> IIGH
    react.surge.util.MSound MAGMACUBE_WALK -> QYNh
    react.surge.util.MSound MAGMACUBE_WALK2 -> IQVt
    react.surge.util.MSound MAGMACUBE_JUMP -> hubl
    react.surge.util.MSound PIG_IDLE -> NFtI
    react.surge.util.MSound PIG_DEATH -> ReCd
    react.surge.util.MSound PIG_WALK -> DIwf
    react.surge.util.MSound SHEEP_IDLE -> QGli
    react.surge.util.MSound SHEEP_SHEAR -> iosv
    react.surge.util.MSound SHEEP_WALK -> oPCj
    react.surge.util.MSound SILVERFISH_HIT -> WlBb
    react.surge.util.MSound SILVERFISH_KILL -> fUmM
    react.surge.util.MSound SILVERFISH_IDLE -> OSLV
    react.surge.util.MSound SILVERFISH_WALK -> BnhO
    react.surge.util.MSound SKELETON_IDLE -> wNlo
    react.surge.util.MSound SKELETON_DEATH -> yoGG
    react.surge.util.MSound SKELETON_HURT -> WcSn
    react.surge.util.MSound SKELETON_WALK -> bbqr
    react.surge.util.MSound SLIME_ATTACK -> xRQO
    react.surge.util.MSound SLIME_WALK -> RBcI
    react.surge.util.MSound SLIME_WALK2 -> IPyd
    react.surge.util.MSound SPIDER_IDLE -> Hxjm
    react.surge.util.MSound SPIDER_DEATH -> dWxD
    react.surge.util.MSound SPIDER_WALK -> CrLs
    react.surge.util.MSound WITHER_DEATH -> euMs
    react.surge.util.MSound WITHER_HURT -> eRjQ
    react.surge.util.MSound WITHER_IDLE -> YaIu
    react.surge.util.MSound WITHER_SHOOT -> UKlN
    react.surge.util.MSound WITHER_SPAWN -> heCv
    react.surge.util.MSound WOLF_BARK -> yLag
    react.surge.util.MSound WOLF_DEATH -> toun
    react.surge.util.MSound WOLF_GROWL -> tWEW
    react.surge.util.MSound WOLF_HOWL -> DAkH
    react.surge.util.MSound WOLF_HURT -> VNmX
    react.surge.util.MSound WOLF_PANT -> YWuy
    react.surge.util.MSound WOLF_SHAKE -> TYhm
    react.surge.util.MSound WOLF_WALK -> Ijju
    react.surge.util.MSound WOLF_WHINE -> yCpN
    react.surge.util.MSound ZOMBIE_METAL -> lpoK
    react.surge.util.MSound ZOMBIE_WOOD -> fDjh
    react.surge.util.MSound ZOMBIE_WOODBREAK -> lOMN
    react.surge.util.MSound ZOMBIE_IDLE -> LtVA
    react.surge.util.MSound ZOMBIE_DEATH -> xsrF
    react.surge.util.MSound ZOMBIE_HURT -> yDQF
    react.surge.util.MSound ZOMBIE_INFECT -> KqRe
    react.surge.util.MSound ZOMBIE_UNFECT -> KXAL
    react.surge.util.MSound ZOMBIE_REMEDY -> Wkcf
    react.surge.util.MSound ZOMBIE_WALK -> iyIG
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> JeaH
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> SNXb
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> jPyg
    react.surge.util.MSound ZOMBIE_PIG_HURT -> nTuh
    react.surge.util.MSound DIG_WOOL -> pAiq
    react.surge.util.MSound DIG_GRASS -> gace
    react.surge.util.MSound DIG_GRAVEL -> QHSQ
    react.surge.util.MSound DIG_SAND -> qoaI
    react.surge.util.MSound DIG_SNOW -> DuRV
    react.surge.util.MSound DIG_STONE -> sBat
    react.surge.util.MSound DIG_WOOD -> ShKu
    react.surge.util.MSound FIREWORK_BLAST -> PwtK
    react.surge.util.MSound FIREWORK_BLAST2 -> QXrP
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> Xnha
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> thIF
    react.surge.util.MSound FIREWORK_TWINKLE -> vmmt
    react.surge.util.MSound FIREWORK_TWINKLE2 -> FYTL
    react.surge.util.MSound FIREWORK_LAUNCH -> DAmE
    react.surge.util.MSound SUCCESSFUL_HIT -> LARe
    react.surge.util.MSound HORSE_ANGRY -> Dtok
    react.surge.util.MSound HORSE_ARMOR -> QHQc
    react.surge.util.MSound HORSE_BREATHE -> riqt
    react.surge.util.MSound HORSE_DEATH -> uPwb
    react.surge.util.MSound HORSE_GALLOP -> orKM
    react.surge.util.MSound HORSE_HIT -> gXqB
    react.surge.util.MSound HORSE_IDLE -> gbCO
    react.surge.util.MSound HORSE_JUMP -> vKiu
    react.surge.util.MSound HORSE_LAND -> RCES
    react.surge.util.MSound HORSE_SADDLE -> Fitl
    react.surge.util.MSound HORSE_SOFT -> Guhs
    react.surge.util.MSound HORSE_WOOD -> gaas
    react.surge.util.MSound DONKEY_ANGRY -> bbsd
    react.surge.util.MSound DONKEY_DEATH -> rXsa
    react.surge.util.MSound DONKEY_HIT -> iyMp
    react.surge.util.MSound DONKEY_IDLE -> RKXC
    react.surge.util.MSound HORSE_SKELETON_DEATH -> GvMH
    react.surge.util.MSound HORSE_SKELETON_HIT -> drOF
    react.surge.util.MSound HORSE_SKELETON_IDLE -> msxK
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> Fafu
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> veaN
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> ExWQ
    react.surge.util.MSound VILLAGER_DEATH -> Khev
    react.surge.util.MSound VILLAGER_HAGGLE -> VheX
    react.surge.util.MSound VILLAGER_HIT -> PMao
    react.surge.util.MSound VILLAGER_IDLE -> UfDK
    react.surge.util.MSound VILLAGER_NO -> qocJ
    react.surge.util.MSound VILLAGER_YES -> XDXg
    java.lang.String pre19sound -> mlGn
    java.lang.String post19sound -> Fiwk
    org.bukkit.Sound resolvedSound -> THlh
    react.surge.util.MSound[] ENUM$VALUES -> nMGs
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> WHFy
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> PeNR:
    org.bukkit.Material material -> puPx
    java.lang.Byte data -> vwBm
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> hAGk
    79:80:void setData(java.lang.Byte) -> BJNe
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> PvQm:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> IpgA
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> oNMK
    68:68:boolean isAnyOnline() -> UuFa
    80:80:react.glang.GList inWorld(org.bukkit.World) -> rMfk
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> Cfcu
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> BJNe
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> BJNe
    143:144:void disable(org.bukkit.entity.Player) -> lUFw
    154:155:void enable(org.bukkit.entity.Player) -> tCKx
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> BJNe
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> AGKd
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> FDwc
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> BJNe
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> OHCR
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> NEAQ
    300:300:boolean canFindPlayer(java.lang.String) -> pOsK
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> GsRQ
    338:345:react.glang.GList onlinePlayers() -> ryXR
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> jhRp
    368:371:void clear(org.bukkit.entity.Player) -> DaUf
    381:385:void clearEffects(org.bukkit.entity.Player) -> yklq
    398:399:void heal(org.bukkit.entity.Player,double) -> BJNe
    409:410:void heal(org.bukkit.entity.Player) -> UcGR
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> QpME
    432:433:void resetHunger(org.bukkit.entity.Player) -> JbgA
    443:444:void kill(org.bukkit.entity.Player) -> BJOT
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> wTdl
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> wUEl
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> BJNe
react.surge.util.P$1 -> PvQm$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> aeiG
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IWTN
react.surge.util.P$2 -> PvQm$2:
    java.lang.Double val$doff -> lqTx
    org.bukkit.entity.Player val$e -> yniW
    org.bukkit.entity.Entity[] val$result -> WQuq
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> eXcm
react.surge.util.PE -> IOYy:
    react.surge.util.PE ABSORPTION -> rYTW
    react.surge.util.PE BLINDNESS -> bQtQ
    react.surge.util.PE CONFUSION -> DBOo
    react.surge.util.PE DAMAGE_RESISTANCE -> ujlg
    react.surge.util.PE FAST_DIGGING -> Uvbo
    react.surge.util.PE FIRE_RESISTANCE -> xQsY
    react.surge.util.PE GLOWING -> Xexk
    react.surge.util.PE HARM -> QjVi
    react.surge.util.PE HEAL -> BLiq
    react.surge.util.PE HEALTH_BOOST -> pdOA
    react.surge.util.PE HUNGER -> BMKK
    react.surge.util.PE INCREASE_DAMAGE -> bcWN
    react.surge.util.PE INVISIBILITY -> HEib
    react.surge.util.PE JUMP -> aXCa
    react.surge.util.PE LEVITATION -> GvKv
    react.surge.util.PE LUCK -> OBMx
    react.surge.util.PE NIGHT_VISION -> IkQH
    react.surge.util.PE POISON -> JnTH
    react.surge.util.PE REGENERATION -> YPLJ
    react.surge.util.PE SATURATION -> GukY
    react.surge.util.PE SLOW -> ixnr
    react.surge.util.PE SLOW_DIGGING -> wXDw
    react.surge.util.PE SPEED -> OldJ
    react.surge.util.PE UNLUCK -> FYYM
    react.surge.util.PE WATER_BREATHING -> AlKw
    react.surge.util.PE WEAKNESS -> mJGd
    react.surge.util.PE WITHER -> CaQJ
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> BJNe
    144:144:react.surge.util.PE d(int) -> DGfb
    156:156:react.surge.util.PE a(int) -> sPkx
    166:166:org.bukkit.potion.PotionEffect c() -> iUKi
    177:178:void c(org.bukkit.entity.LivingEntity) -> lDGI
    182:183:void crm(org.bukkit.entity.LivingEntity) -> IWTN
    187:188:void rm(org.bukkit.entity.LivingEntity) -> vtGe
react.surge.util.ParticleEffect -> hseu:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> Rulx
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> kech
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> Ewwt
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> QbJB
    react.surge.util.ParticleEffect WATER_BUBBLE -> lqWo
    react.surge.util.ParticleEffect WATER_SPLASH -> liHH
    react.surge.util.ParticleEffect WATER_WAKE -> gYWF
    react.surge.util.ParticleEffect SUSPENDED -> AAXE
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> VFdp
    react.surge.util.ParticleEffect CRIT -> AJHi
    react.surge.util.ParticleEffect CRIT_MAGIC -> LIha
    react.surge.util.ParticleEffect SMOKE_NORMAL -> YaPY
    react.surge.util.ParticleEffect SMOKE_LARGE -> Sgny
    react.surge.util.ParticleEffect SPELL -> rPeR
    react.surge.util.ParticleEffect SPELL_INSTANT -> QsLC
    react.surge.util.ParticleEffect SPELL_MOB -> bRWU
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> HhOS
    react.surge.util.ParticleEffect SPELL_WITCH -> apup
    react.surge.util.ParticleEffect DRIP_WATER -> PpGH
    react.surge.util.ParticleEffect DRIP_LAVA -> yTwm
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> pdPu
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> KhgW
    react.surge.util.ParticleEffect TOWN_AURA -> RJxH
    react.surge.util.ParticleEffect NOTE -> PxVv
    react.surge.util.ParticleEffect PORTAL -> fwuG
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> FPgQ
    react.surge.util.ParticleEffect FLAME -> bkiY
    react.surge.util.ParticleEffect LAVA -> wGBR
    react.surge.util.ParticleEffect FOOTSTEP -> aWdh
    react.surge.util.ParticleEffect CLOUD -> GBhf
    react.surge.util.ParticleEffect REDSTONE -> kvdD
    react.surge.util.ParticleEffect SNOWBALL -> nDXJ
    react.surge.util.ParticleEffect SNOW_SHOVEL -> riul
    react.surge.util.ParticleEffect SLIME -> drPV
    react.surge.util.ParticleEffect HEART -> Qiwy
    react.surge.util.ParticleEffect BARRIER -> Isbw
    react.surge.util.ParticleEffect ITEM_CRACK -> PgUv
    react.surge.util.ParticleEffect BLOCK_CRACK -> NPQT
    react.surge.util.ParticleEffect BLOCK_DUST -> rbJQ
    react.surge.util.ParticleEffect WATER_DROP -> UmwI
    react.surge.util.ParticleEffect ITEM_TAKE -> mRYd
    react.surge.util.ParticleEffect MOB_APPEARANCE -> PfxH
    react.surge.util.ParticleEffect DRAGON_BREATH -> whgh
    react.surge.util.ParticleEffect END_ROD -> bklK
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> TkTl
    react.surge.util.ParticleEffect SWEEP_ATTACK -> EVWn
    java.util.Map NAME_MAP -> kTdV
    java.util.Map ID_MAP -> DuWt
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> lOVp
    java.util.List properties -> aWhP
    react.surge.util.ParticleEffect[] ENUM$VALUES -> JTer
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> VEDi
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> BJNe
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> sPkl
    557:565:react.surge.util.ParticleEffect fromId(int) -> FMkE
    577:578:boolean isWater(org.bukkit.Location) -> pPQx
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> BJNe
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> BJNe
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> BJNe
    665:681:void display(float,int,org.bukkit.Location,double) -> BJNe
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> BJNe
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJNe
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> BJNe
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> BJNe
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJNe
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> BJNe
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> BJNe
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJNe
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> BJNe
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> BJNe
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJNe
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> BJNe
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> BJNe
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> BJNe
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> hseu$BJNe:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> hseu$AGKd:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> hseu$NEAQ:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> RQie
    1594:1594:float getValueY() -> XAxf
    1605:1605:float getValueZ() -> FOKC
react.surge.util.ParticleEffect$OrdinaryColor -> hseu$TFRB:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> RQie
    1526:1526:float getValueY() -> XAxf
    1537:1537:float getValueZ() -> FOKC
react.surge.util.ParticleEffect$ParticleColor -> hseu$iBmJ:
    1383:1383:void <init>() -> <init>
    float getValueX() -> RQie
    float getValueY() -> XAxf
    float getValueZ() -> FOKC
react.surge.util.ParticleEffect$ParticleColorException -> hseu$lDGI:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> hseu$IWTN:
    org.bukkit.Material material -> puPx
    byte data -> fMeT
    int[] packetData -> GBkk
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> xGhK
    1309:1309:java.lang.String getPacketDataString() -> SCmk
react.surge.util.ParticleEffect$ParticleDataException -> hseu$vtGe:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> hseu$iCNQ:
    int version -> version
    java.lang.Class enumParticle -> RTNH
    java.lang.reflect.Constructor packetConstructor -> Wkll
    java.lang.reflect.Method getHandle -> VNwU
    java.lang.reflect.Field playerConnection -> NqrT
    java.lang.reflect.Method sendPacket -> xkjR
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> MLlT
    float offsetX -> WRYl
    float offsetY -> fMca
    float offsetZ -> kTbt
    float speed -> qwvn
    int amount -> nujK
    boolean longDistance -> RTLW
    react.surge.util.ParticleEffect$ParticleData data -> tgnV
    java.lang.Object packet -> DAre
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> iBkv
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> BJNe
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> AGKd
    2004:2018:void sendTo(org.bukkit.Location,double) -> AGKd
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> hseu$iCNQ$BJNe:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> hseu$iCNQ$AGKd:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> hseu$iCNQ$NEAQ:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> hseu$aeiG:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> YPPR
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> WlMQ
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> FQJP
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> ynmA
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> tWLm
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> hseu$eXcm:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> dVWi:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> eHCc
react.surge.util.Persist -> iLVN:
react.surge.util.PluginUtil -> fSmA:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> iBmJ
    81:85:void enableAll() -> NyEc
    95:99:void disable(org.bukkit.plugin.Plugin) -> lDGI
    106:110:void disableAll() -> mOyU
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> IWTN
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> BJNe
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> PJft
    169:172:java.util.List getPluginNames(boolean) -> NoTf
    184:187:java.lang.String getPluginVersion(java.lang.String) -> jgrv
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> vtGe
    237:316:java.util.List findByCommand(java.lang.String) -> QMjd
    337:338:void load(org.bukkit.plugin.Plugin) -> iCNQ
    342:364:java.lang.String getPluginFileName(java.lang.String) -> CMSr
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> BJNe
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> aeiG
    480:484:void reloadAll() -> YpTX
    496:622:void unload(org.bukkit.plugin.Plugin) -> eXcm
react.surge.util.PoolCount -> XRta:
react.surge.util.PoolDescriber -> uXHk:
react.surge.util.PoolNanoThrottle -> VLoQ:
react.surge.util.PositionalSelector -> Fpdk:
    react.glang.GSet allowedChunks -> fNDx
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> XJlu
    39:40:void addChunk(org.bukkit.Chunk) -> jEoX
    44:44:react.glang.GSet getAllowedChunks() -> woXb
react.surge.util.Protocol -> aoQt:
    react.surge.util.Protocol LATEST -> BoQo
    react.surge.util.Protocol R1_12_2 -> fETM
    react.surge.util.Protocol R1_12_2_PRE -> ignX
    react.surge.util.Protocol R1_12_1 -> aOVY
    react.surge.util.Protocol R1_12 -> AJMb
    react.surge.util.Protocol R1_11_2 -> JwLA
    react.surge.util.Protocol R1_11_1 -> PokN
    react.surge.util.Protocol R1_11 -> vwJH
    react.surge.util.Protocol R1_10_2 -> lOXp
    react.surge.util.Protocol R1_10_1 -> txrk
    react.surge.util.Protocol R1_10 -> dOpg
    react.surge.util.Protocol R1_9_4 -> PDvm
    react.surge.util.Protocol R1_9_3 -> yLlo
    react.surge.util.Protocol R1_9_2 -> DSVu
    react.surge.util.Protocol R1_9_1 -> cwbO
    react.surge.util.Protocol R1_9 -> iyUC
    react.surge.util.Protocol R1_8_9 -> IHsf
    react.surge.util.Protocol R1_8_8 -> EMiR
    react.surge.util.Protocol R1_8_7 -> liKQ
    react.surge.util.Protocol R1_8_6 -> QsOd
    react.surge.util.Protocol R1_8_5 -> KWkP
    react.surge.util.Protocol R1_8_4 -> AkoP
    react.surge.util.Protocol R1_8_3 -> HgtJ
    react.surge.util.Protocol R1_8_2 -> OKFf
    react.surge.util.Protocol R1_8_1 -> YYDY
    react.surge.util.Protocol R1_8 -> txqu
    react.surge.util.Protocol R1_7_10 -> PolF
    react.surge.util.Protocol R1_7_9 -> TRDJ
    react.surge.util.Protocol R1_7_8 -> yLlV
    react.surge.util.Protocol R1_7_7 -> HyUI
    react.surge.util.Protocol R1_7_6 -> Gdnw
    react.surge.util.Protocol R1_7_5 -> KNxY
    react.surge.util.Protocol R1_7_4 -> veef
    react.surge.util.Protocol R1_7_3 -> PMfu
    react.surge.util.Protocol R1_7_2 -> OBTO
    react.surge.util.Protocol R1_7_1 -> TcFC
    react.surge.util.Protocol B1_6_4 -> VXJK
    react.surge.util.Protocol B1_6_3 -> MxCb
    react.surge.util.Protocol B1_6_2 -> rPhO
    react.surge.util.Protocol B1_6_1 -> BgCi
    react.surge.util.Protocol B1_5_2 -> cwbI
    react.surge.util.Protocol B1_5_1 -> aFfx
    react.surge.util.Protocol B1_5 -> iWOn
    react.surge.util.Protocol B1_4_7 -> cxCA
    react.surge.util.Protocol B1_4_6 -> cLmU
    react.surge.util.Protocol B1_4_5 -> CaWU
    react.surge.util.Protocol B1_4_4 -> RvTS
    react.surge.util.Protocol B1_4_2 -> TQfK
    react.surge.util.Protocol B1_3_2 -> cLpM
    react.surge.util.Protocol B1_3_1 -> NjHY
    react.surge.util.Protocol B1_2_5 -> MVCg
    react.surge.util.Protocol B1_2_4 -> DRws
    react.surge.util.Protocol EARLIEST -> kKvq
    react.surge.util.Protocol UNKNOWN -> ucFr
    int version -> version
    java.lang.String packageVersion -> RBni
    java.lang.String versionName -> aXLX
    boolean netty -> nLom
    react.surge.util.Protocol[] ENUM$VALUES -> bImc
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> htOI
    118:118:java.lang.String getPackageVersion() -> Orvl
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> XmQQ
    142:150:react.surge.util.Protocol getProtocolVersion() -> quwH
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> AGKd
    160:160:boolean isServerVersion() -> BvDK
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> TFpM
    175:175:boolean isActualVersion() -> CpTQ
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> twPj
    200:200:int getMetaVersion() -> Hnad
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> iwHk:
    react.surge.util.Protocol from -> pKFO
    react.surge.util.Protocol to -> qojl
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> lgHO
    21:21:react.surge.util.Protocol getTo() -> UdFp
    26:26:boolean contains(react.surge.util.Protocol) -> NEAQ
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> pbJm:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> MuaO
    70:70:int randomNextInt() -> TiSr
    80:80:long randomNextLong() -> vBAX
    92:92:boolean isWithin(double) -> QpME
    104:104:boolean isWithin(int) -> lfKA
    116:116:boolean isWithin(long) -> JbfS
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> JbgA
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> eaUN
react.surge.util.RawEvent -> JIjn:
react.surge.util.RayTrace -> xOnj:
    org.bukkit.Location start -> MnuG
    org.bukkit.util.Vector direction -> Bnsn
    java.lang.Double maxDistance -> IcIi
    java.lang.Double distanceCovered -> UCgq
    java.lang.Double step -> Sgsf
    java.lang.Boolean stop -> oYDM
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> VDfU
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> eXcm
    89:89:org.bukkit.Location getStart() -> rOGM
    94:95:void setStart(org.bukkit.Location) -> Cfcu
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> NNPm
    114:115:void setMaxDistance(java.lang.Double) -> TFRB
    119:119:java.lang.Double getDistanceCovered() -> bXjE
    124:125:void setDistanceCovered(java.lang.Double) -> iBmJ
    129:129:java.lang.Double getStep() -> afkS
    134:135:void setStep(java.lang.Double) -> lDGI
react.surge.util.ReflectionUtils -> Gbdn:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> BJNe
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> BJNe
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> BJNe
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> BJNe
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> BJNe
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> BJNe
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> BJNe
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> BJNe
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> BJNe
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> BJNe
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> BJNe
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> BJNe
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> BJNe
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> BJNe
react.surge.util.ReflectionUtils$DataType -> Gbdn$BJNe:
    react.surge.util.ReflectionUtils$DataType BYTE -> eAse
    react.surge.util.ReflectionUtils$DataType SHORT -> kKup
    react.surge.util.ReflectionUtils$DataType INTEGER -> oYCx
    react.surge.util.ReflectionUtils$DataType LONG -> DljN
    react.surge.util.ReflectionUtils$DataType CHARACTER -> AcbR
    react.surge.util.ReflectionUtils$DataType FLOAT -> aGIe
    react.surge.util.ReflectionUtils$DataType DOUBLE -> ywal
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> dieY
    java.util.Map CLASS_MAP -> usfH
    java.lang.Class primitive -> rPim
    java.lang.Class reference -> GmcS
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> pRuB
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> EKhb
    704:704:java.lang.Class getReference() -> fnKU
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> AGKd
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> NEAQ
    741:742:java.lang.Class getReference(java.lang.Class) -> TFRB
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> BJNe
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> AGKd
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> AGKd
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> NEAQ
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> BJNe
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> Gbdn$AGKd:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> bIkt
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> wykr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> wOXi
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> MEAd
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> MLqM
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> SODA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> IcKS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> qEYy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> mSAN
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> vvmC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> JULa
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> oihD
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> GTTI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> CPWb
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> lXNW
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> eBXB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> iguo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> tWTp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> dHFF
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> ViQE
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> Tbir
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> axBP:
    void refresh() -> refresh
react.surge.util.SQLOperation -> HTgE:
    react.surge.util.SQLOperation LOAD -> jHuW
    react.surge.util.SQLOperation SAVE -> jIUy
    react.surge.util.SQLOperation[] ENUM$VALUES -> WteC
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> Gsfc:
    react.surge.util.ServerState START -> MMUL
    react.surge.util.ServerState ENABLE -> ViPx
    react.surge.util.ServerState DISABLE -> xuCS
    react.surge.util.ServerState STOP -> ojGx
    react.surge.util.ServerState RUNNING -> gjaH
    react.surge.util.ServerState[] ENUM$VALUES -> TsjR
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> LjEP:
    org.bukkit.Location location -> VWMd
    org.bukkit.util.Vector offset -> lXLp
    org.bukkit.util.Vector size -> GTRh
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> jEoX
    90:94:org.bukkit.Location randomLocation() -> dotV
    104:104:org.bukkit.Location randomSurface() -> HesW
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> bYNA
    129:129:org.bukkit.util.Vector getSize() -> MlsC
react.surge.util.SnowLevel -> TNwq:
    byte level -> eBWG
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> WXnG
    51:52:void setLevel(byte) -> iCNQ
react.surge.util.SuperCaller -> ytth:
    void run() -> run
react.surge.util.T -> kkkp:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> AGKd
    32:35:void stop() -> stop
react.surge.util.TXT -> GQdT:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> IWTN
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> BJNe
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> BJNe
    99:99:java.lang.String line(react.surge.util.C,int) -> BJNe
    113:113:java.lang.String underline(react.surge.util.C,int) -> AGKd
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> BJNe
react.surge.util.Tag -> gOCN:
    java.lang.String value() -> value
react.surge.util.Timer -> YUyg:
    long tns -> mkph
    long cns -> TYvs
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> incE
react.surge.util.VectorMath -> dNIh:
    int[] $SWITCH_TABLE$surge$util$Axis -> JvXN
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> kKxN
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> BJNe
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> BJNe
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> AGKd
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> NEAQ
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> BJNe
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> AGKd
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> AGKd
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> NEAQ
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> TFRB
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> iBmJ
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> lDGI
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> IWTN
    111:111:double round(double,int) -> iBmJ
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> BJNe
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> BJNe
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> BJNe
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> TFRB
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> iBmJ
    268:268:org.bukkit.util.Vector toVector(float,float) -> BJNe
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> BJNe
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> BJNe
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> vtGe
    337:340:double getSpeed(org.bukkit.util.Vector) -> iCNQ
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> BJNe
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> aeiG
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> BJNe
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> AGKd
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> NEAQ
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> TFRB
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> eXcm
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> uiQG
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> USHi
react.surge.util.VectorMath$1 -> dNIh$1:
    org.bukkit.util.Vector val$vector -> snBy
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> pPQx
    1:1:java.lang.Object onAdapt(java.lang.Object) -> IWTN
react.surge.util.W -> AjHT:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> vtGe
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> BJNe
    75:86:org.bukkit.entity.Entity getEntity(int) -> IpgA
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> BJNe
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> BJNe
    143:143:int getChunkX(org.bukkit.block.Block) -> iCNQ
    155:155:int getChunkY(org.bukkit.block.Block) -> aeiG
    168:169:void dropXp(org.bukkit.Location,int) -> AGKd
    180:180:int getChunkZ(org.bukkit.block.Block) -> eXcm
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> AGKd
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> BJNe
    232:239:react.glang.GList news(org.bukkit.Location) -> rMfk
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> BJNe
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> rMfk
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> NoTf
    300:300:org.bukkit.World toSync(org.bukkit.World) -> MuBm
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> pPQx
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> NoTf
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> NoTf
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> vcEx
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> BJNe
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> BJNe
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> BJNe
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> BJNe
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> BJNe
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> BJNe
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> BJNe
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> BJNe
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> MuBm
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> iBkv
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> MuBm
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> NEAQ
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> BJNe
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> BJNe
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> BJNe
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> BJNe
react.surge.util.W$1 -> AjHT$1:
    java.lang.Double val$doff -> lqTx
    org.bukkit.entity.Entity val$e -> noTl
    org.bukkit.entity.Entity[] val$result -> WQuq
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> eXcm
react.surge.util.Worlds -> Utad:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> dpFY
    33:33:boolean hasWorld(java.lang.String) -> lDGY
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> vkoT:
react.text.ColoredString -> HKyF:
    react.surge.util.C c -> pBVc
    java.lang.String s -> FaqC
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> VgMM
    42:43:void setC(react.surge.util.C) -> AGKd
    47:47:java.lang.String getS() -> XucY
    52:53:void setS(java.lang.String) -> aeiy
react.text.RTEX -> ryTs:
    react.glang.GList extras -> whlv
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> tUPY
    44:58:react.json.JSONObject toJSON() -> jhRp
react.text.RTX -> Drpu:
    react.json.JSONArray base -> qMie
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> lDGI
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> AGKd
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> BJNe
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> BJNe
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> AGKd
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> NEAQ
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> BJNe
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> AGKd
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> NEAQ
    265:265:react.json.JSONArray toJSON() -> gpmQ
    276:277:void tellRawTo(org.bukkit.entity.Player) -> WGJY
react.text.RawText -> GRHR:
    java.lang.String COLOR_BLACK -> vTiE
    java.lang.String COLOR_DARK_BLUE -> BVGD
    java.lang.String COLOR_DARK_GREEN -> RCQI
    java.lang.String COLOR_DARK_AQUA -> qNIq
    java.lang.String COLOR_DARK_RED -> Xntx
    java.lang.String COLOR_DARK_PURPLE -> DllW
    java.lang.String COLOR_GOLD -> Kypw
    java.lang.String COLOR_GRAY -> eAuq
    java.lang.String COLOR_DARK_GRAY -> XfeU
    java.lang.String COLOR_BLUE -> cweh
    java.lang.String COLOR_GREEN -> BxHv
    java.lang.String COLOR_AQUA -> UfMP
    java.lang.String COLOR_RED -> LIpP
    java.lang.String COLOR_LIGHT_PURPLE -> JKyt
    java.lang.String COLOR_YELLOW -> TQjS
    java.lang.String COLOR_WHITE -> ubjR
    java.lang.String COLOR_NONE -> FPrJ
    java.lang.String HEAD_TEXT -> MgIP
    java.lang.String HEAD_COLOR -> rbQq
    java.lang.String HEAD_BOLD -> ihXo
    java.lang.String HEAD_ITALIC -> HEva
    java.lang.String HEAD_UNDERLINED -> uQiI
    java.lang.String HEAD_STRIKETHROUGH -> aqar
    java.lang.String HEAD_OBFUSCATED -> uQiG
    java.lang.String HEAD_CLICK_EVENT -> aqbT
    java.lang.String HEAD_HOVER_EVENT -> KWpt
    java.lang.String HEAD_ACTION -> ubih
    java.lang.String HEAD_VALUE -> hTTT
    java.lang.String HEAD_EXTRA -> aqbb
    java.lang.String HEAD_ACTION_SHOW_TEXT -> mtdO
    java.lang.String HEAD_ACTION_COMMAND -> IQjE
    java.util.ArrayList components -> wWma
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> onra
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> iBmJ
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJNe
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> BJNe
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJNe
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> BJNe
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJNe
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> BJNe
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> BJNe
    307:313:java.lang.String compile() -> PSyN
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> BJNe

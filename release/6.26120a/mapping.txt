react.Config -> JtIb:
    react.glang.GMap worldConfigs -> JtIb
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> YgCd
    java.lang.String A_COMMANDOVERRIDE_TPS -> lCee
    java.lang.String A_REACT_REMOTE_PORT -> ylOL
    java.lang.String A_REACT_REMOTE_ENABLED -> xiLM
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> GPmP
    java.lang.String A_POOL_MAXTHREADS -> qJde
    java.lang.String A_POOL_SYNC_NANOS -> Dqvy
    java.lang.String A_FASTLEAF_ENABLED -> IguI
    java.lang.String A_FASTLEAF_ONDECAY -> qcvI
    java.lang.String A_FASTLEAF_INSTANT -> UtJE
    java.lang.String A_FASTLEAF_DECAYPERIOD -> QNKB
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> NMRJ
    java.lang.String A_ENTITYSTACK_ENABLED -> iTOF
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> flhH
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> Lhmn
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> rfyT
    java.lang.String A_GLASS_SHOW_BLOCKS -> xylN
    java.lang.String A_GLASS_SHOW_PARTICLES -> Ptyr
    java.lang.String A_ALLOW_CULL -> eHCS
    java.lang.String A_ALLOW_PURGE -> GQMD
    java.lang.String A_ALLOW_STACKING -> AGME
    java.lang.String A_CULL_RULES -> Kmxy
    java.lang.String A_RAI_TPS_HIGH_TICK -> iuot
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> JtIA
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> yIiu
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> lUGT
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> CLrB
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> oLnN
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> TyUh
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> RroE
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> NMQH
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> VDFw
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> yIiY
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> jVol
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> yJIx
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> Etyg
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> qKDS
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> STOg
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> KTkE
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> qtyj
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> jErG
    java.lang.String A_RAI_FLUID_TIME_CEIL -> UAGA
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> OXfa
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> KfLr
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> pPTk
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> XtcS
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> Bcay
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> DHGJ
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> Ixwr
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> WypN
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> RQNw
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> VelD
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> qBVI
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> RQOf
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> afLc
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> LaAC
    java.lang.String A_USE_WORLD_CONFIGS -> JHwJ
    java.lang.String A_LANGUAGE -> UbiX
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> Bcai
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> UAGY
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> PJiN
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> VDJN
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> xXLY
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> gMjR
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> oxEf
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> HCRU
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> AFnG
    java.lang.String A_RAI_ENTITY_PROPIGATE -> aUJC
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> uWSD
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> PBVd
    double MAX_EXPLOSION_MS -> KCgs
    boolean COMMANDOVERRIDES_TPS -> teQQ
    int REACT_REMOTE_PORT -> aKvr
    boolean REACT_REMOTE_ENABLED -> TFRl
    int ENTITY_STACK_MAX_COUNT -> OYGF
    int POOL_MAXTHREADS -> ieRS
    long POOL_SYNC_NANOS -> bFkC
    boolean FASTLEAF_ENABLED -> GkAp
    boolean FASTLEAF_ONDECAY -> MdCB
    boolean FASTLEAF_INSTANT -> RPmc
    int FASTLEAF_DECAYPERIOD -> NLqc
    boolean COMMANDOVERRIDES_MEMORY -> VwMj
    boolean ENTITYSTACK_ENABLED -> URGi
    int ENTITYSTACK_MINIMUM_GROUP -> mXLI
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> PAvc
    int ENTITYSTACK_MAXIMUM_HEALTH -> ykna
    boolean GLASS_SHOW_BLOCKS -> uNaS
    boolean GLASS_SHOW_PARTICLES -> Nwew
    react.glang.GList ALLOW_CULL -> jNeR
    react.glang.GList ALLOW_PURGE -> DXht
    react.glang.GList ALLOW_STACKING -> dUeA
    react.glang.GList CULL_RULES -> IVvj
    double RAI_TPS_HIGH_TICK -> XSBv
    long RAI_REDSTONE_TIME_FLOOR -> TNfL
    long RAI_REDSTONE_TIME_CEIL -> UAIL
    long RAI_REDSTONE_TIME_MUDDING -> HvXU
    double RAI_REDSTONE_TIME_FUNCTION -> XIpb
    double RAI_REDSTONE_TIME_OVERBLEED -> MRcI
    int RAI_REDSTONE_TIME_RADIUS -> Gjcq
    int RAI_REDSTONE_TIME_PROPIGATION -> saod
    long RAI_HOPPER_TIME_FLOOR -> dMUE
    long RAI_HOPPER_TIME_CEIL -> qcyj
    long RAI_HOPPER_TIME_MUDDING -> MuGW
    double RAI_HOPPER_TIME_FUNCTION -> uhWO
    double RAI_HOPPER_TIME_OVERBLEED -> flkU
    int RAI_HOPPER_TIME_RADIUS -> iCPf
    int RAI_HOPPER_TIME_PROPIGATION -> LrCC
    int RAI_ENTITY_CHUNK_MULTIPLIER -> pqwm
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> WGNJ
    int RAI_ENTITY_CHUNK_RADIUS -> YDbd
    long RAI_FLUID_TIME_FLOOR -> fRxT
    long RAI_FLUID_TIME_CEIL -> GkDM
    long RAI_FLUID_TIME_MUDDING -> cuDR
    double RAI_FLUID_TIME_FUNCTION -> QyBB
    double RAI_FLUID_TIME_OVERBLEED -> oMQu
    int RAI_FLUID_TIME_RADIUS -> wCga
    int RAI_FLUID_TIME_PROPIGATION -> JbkC
    double SMEAR_TICK_ENTITIES_MAX_TICK -> EBYs
    double SMEAR_TICK_TILES_MAX_TICK -> ivTr
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> BuFw
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> fmKp
    double SMEAR_TICK_ENTITIES_AMOUNT -> rNOH
    double SMEAR_TICK_TILES_AMOUNT -> vQjD
    boolean SMEAR_TICK_ENTITIES_ENABLE -> pOxI
    boolean SMEAR_TICK_TILES_ENABLE -> cJSV
    boolean HOPPER_OVERTICK_ENABLE -> YfiK
    boolean USE_WORLD_CONFIGS -> rpQc
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> AGQa
    long RAI_CHUNK_TIME_CEIL -> ieVs
    long RAI_CHUNK_TIME_MUDDING -> RPsD
    double RAI_CHUNK_TIME_FUNCTION -> xiRR
    double RAI_CHUNK_TIME_OVERBLEED -> iuwe
    int RAI_CHUNK_TIME_RADIUS -> srtR
    int RAI_CHUNK_TIME_PROPIGATION -> rNNj
    boolean RAI_CHUNK_TIME_PROPIGATE -> wvoi
    boolean RAI_FLUID_TIME_PROPIGATE -> AaCs
    boolean RAI_ENTITY_PROPIGATE -> FNPx
    boolean RAI_HOPPER_TIME_PROPIGATE -> bGQH
    boolean RAI_REDSTONE_TIME_PROPIGATE -> jOGg
    boolean hrld -> oxJC
    boolean rns -> FWBg
    boolean rrl -> LWra
    37:37:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> JtIb
    675:697:void onRead(org.bukkit.plugin.Plugin) -> YgCd
    701:731:void read(java.io.File,boolean) -> JtIb
    735:752:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> JtIb
    757:765:void closeWorldConfig(org.bukkit.World) -> YgCd
    770:883:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> JtIb
    888:925:react.surge.cluster.DataCluster defaultConfig(boolean) -> JtIb
    930:1009:react.glang.GList getDefaultEntitiesForStacking() -> JtIb
    1014:1033:react.glang.GList getDefaultEntitiesForCulling() -> YgCd
    1038:1075:react.glang.GList getDefaultEntitiesForRemoval() -> lCee
    1080:1109:react.glang.GList getDefaultCullRules() -> ylOL
    39:648:void <clinit>() -> <clinit>
react.Config$1 -> JtIb$1:
    java.io.File val$fConfig -> YgJO
    java.io.File val$fConfigExperimental -> xrCK
    org.bukkit.plugin.Plugin val$main -> KoCX
    657:657:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Config$2 -> JtIb$2:
    react.api.WorldConfig val$wc -> QgcI
    org.bukkit.World val$w -> CMVo
    743:743:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    747:748:void run() -> run
react.Gate -> YgCd:
    react.glang.GMap defaultSettings -> uVuk
    react.glang.GSet refresh -> Bths
    react.glang.GSet destroy -> aCkX
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> JtIb
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> JtIb
    180:180:int getChunkCountForView() -> xiLM
    185:185:int getMaxChunksForView() -> GPmP
    190:190:boolean hasFawe() -> qJde
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> lCee
    220:224:void resetEntityMaxTick(org.bukkit.World) -> ylOL
    228:228:int getEntityTickMax(org.bukkit.World) -> xiLM
    233:233:int getTileTickMax(org.bukkit.World) -> GPmP
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> JtIb
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> JtIb
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> JtIb
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> JtIb
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> YgCd
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> JtIb
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> qJde
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> JtIb
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> YgCd
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> lCee
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> ylOL
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> xiLM
    377:377:boolean isBadForUnloading() -> Dqvy
    382:382:boolean canUnload(org.bukkit.World,int,int) -> JtIb
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> YgCd
    426:442:void removeEntity(org.bukkit.entity.Entity) -> JtIb
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> YgCd
    466:482:void cullEntity(org.bukkit.entity.Entity) -> lCee
    487:504:void updateBlock(org.bukkit.block.Block) -> JtIb
    508:512:java.lang.String header(java.lang.String,react.surge.util.C) -> JtIb
    517:517:java.lang.String header(react.surge.util.C) -> JtIb
    523:527:void updateFluid(org.bukkit.block.Block) -> YgCd
    531:532:void refresh(org.bukkit.Chunk) -> YgCd
    537:556:void refreshChunks() -> IguI
    560:561:void sendBlockChange(org.bukkit.Location) -> JtIb
    42:44:void <clinit>() -> <clinit>
react.Gate$1 -> YgCd$1:
    react.api.SelectorPosition val$sel -> VfOi
    react.glang.Callback val$prog -> CVIs
    react.glang.Callback val$cb -> myrV
    49:49:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> YgCd$1$1:
    java.lang.Object val$o -> QoqT
    java.lang.reflect.Constructor val$vectorConstruct -> ySCH
    java.lang.reflect.Constructor val$cuboidConstruct -> VTmR
    java.lang.reflect.Method val$faweFixMethod -> TFWQ
    java.lang.Integer[] val$total -> SeVn
    java.lang.Integer[] val$sof -> hbSX
    java.lang.Integer val$tot -> EKMW
    react.Gate$1 this$0 -> CEHT
    81:81:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> YgCd$1$2:
    java.lang.Integer[] val$total -> SeVn
    react.Gate$1 this$0 -> CEHT
    110:110:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Gate$2 -> YgCd$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> owgd
    290:290:void <clinit>() -> <clinit>
react.Info -> lCee:
    java.lang.String CORE_REACT_DOT -> fmNI
    java.lang.String CORE_NAME -> kAGv
    java.lang.String CORE_CACHE -> LPAt
    java.lang.String WORLD_CONFIGS -> Cnyc
    java.lang.String CORE_DOTYML -> UtOO
    java.lang.String COMMAND_REACT -> cuFm
    java.lang.String COMMAND_RAI -> AaDl
    java.lang.String COMMAND_ACT_DESCRIPTION -> SeXE
    java.lang.String COMMAND_ACT -> Ahss
    java.lang.String COMMAND_ACT_ALIAS_1 -> baBY
    java.lang.String COMMAND_ACT_ALIAS_2 -> vAHL
    java.lang.String COMMAND_ACT_USAGE -> paYW
    java.lang.String COMMAND_HELP_DESCRIPTION -> hjbl
    java.lang.String COMMAND_HELP -> lvns
    java.lang.String COMMAND_HELP_ALIAS_1 -> miRC
    java.lang.String COMMAND_HELP_ALIAS_2 -> CgJd
    java.lang.String COMMAND_HELP_USAGE -> Lytb
    java.lang.String COMMAND_STATUS_DESCRIPTION -> bObb
    java.lang.String COMMAND_STATUS -> KwUL
    java.lang.String COMMAND_STATUS_ALIAS_1 -> dxMG
    java.lang.String COMMAND_STATUS_ALIAS_2 -> xFou
    java.lang.String COMMAND_STATUS_USAGE -> owjy
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> WrFw
    java.lang.String COMMAND_CPUSCORE -> XAdi
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> yJTb
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> Elqp
    java.lang.String COMMAND_CPUSCORE_USAGE -> rMpT
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> LXUQ
    java.lang.String COMMAND_RELOAD -> sauE
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> KfSw
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> JRMg
    java.lang.String COMMAND_RELOAD_USAGE -> FpTm
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> miTH
    java.lang.String COMMAND_MONITOR -> xWqF
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> QhDO
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> Elpm
    java.lang.String COMMAND_MONITOR_USAGE -> oDef
    java.lang.String COMMAND_ENV_DESCRIPTION -> YxLO
    java.lang.String COMMAND_ENV -> tLEf
    java.lang.String COMMAND_ENV_ALIAS_1 -> XkwH
    java.lang.String COMMAND_ENV_ALIAS_2 -> nBCQ
    java.lang.String COMMAND_ENV_USAGE -> hIBg
    java.lang.String COMMAND_VERSION_DESCRIPTION -> hsUs
    java.lang.String COMMAND_VERSION -> Oiml
    java.lang.String COMMAND_VERSION_ALIAS_1 -> cuHh
    java.lang.String COMMAND_VERSION_ALIAS_2 -> MkxS
    java.lang.String COMMAND_VERSION_USAGE -> CEIh
    java.lang.String COMMAND_MAP_DESCRIPTION -> eHLv
    java.lang.String COMMAND_MAP -> UlCX
    java.lang.String COMMAND_MAP_ALIAS_1 -> kAMl
    java.lang.String COMMAND_MAP_ALIAS_2 -> VfUR
    java.lang.String COMMAND_MAP_USAGE -> qlrJ
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> tdxx
    java.lang.String COMMAND_TOPCHUNK -> MBGu
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> dLyW
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> nBFj
    java.lang.String COMMAND_TOPCHUNK_USAGE -> VetH
    java.lang.String COMMAND_GLASS_DESCRIPTION -> hIFd
    java.lang.String COMMAND_GLASS -> cdJh
    java.lang.String COMMAND_GLASS_ALIAS_1 -> DirC
    java.lang.String COMMAND_GLASS_ALIAS_2 -> ogLc
    java.lang.String COMMAND_GLASS_USAGE -> BJWs
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> sYfJ
    java.lang.String COMMAND_CBLAME -> rouB
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> hYfH
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> RIEp
    java.lang.String COMMAND_CBLAME_USAGE -> hHcw
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> ntiX
    java.lang.String COMMAND_ACTIONLOG -> wCoB
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> NLyc
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> aDOo
    java.lang.String COMMAND_ACTIONLOG_USAGE -> XAfU
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> KLaw
    java.lang.String COMMAND_CAPABILITIES -> leqc
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> rose
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> aLaF
    java.lang.String COMMAND_CAPABILITIES_USAGE -> MdJn
    java.lang.String MSG_PERMISSION -> hbYp
    java.lang.String MSG_MONITORING_STARTED -> tnMh
    java.lang.String MSG_MONITORING_STOPPED -> YgPP
    java.lang.String MSG_ACTIONLOGGING_STARTED -> wfTx
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> GHhk
    java.lang.String MSG_GLASS_STARTED -> DjSt
    java.lang.String MSG_GLASS_STOPPED -> oUmB
    org.bukkit.Color COLOR_HOPPER -> wUTT
    org.bukkit.Color COLOR_BLOCK_UPDATE -> CxSI
    org.bukkit.Color COLOR_BLOCK_FROMTO -> Gjkw
    org.bukkit.Color COLOR_BLOCK_BURN -> dEMH
    org.bukkit.Color COLOR_BLOCK_DECAY -> kkcI
    org.bukkit.Color COLOR_BLOCK_FORM -> IOQA
    java.lang.String NAME_TICK -> SKke
    java.lang.String NAME_MEMORY -> iLJm
    java.lang.String NAME_CHUNKS -> PKSt
    java.lang.String NAME_ENTITIES -> BdMP
    java.lang.String STATE_MONITORING_TAB -> GjmG
    java.lang.String STATE_MONITORING_ENABLED -> PCCh
    java.lang.String STATE_MONITORING_HIGH -> mWuw
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> erbC
    java.lang.String STATE_MAPPING_ENABLED -> PCAu
    java.lang.String STATE_SOUND_PLAYS -> UkcX
    java.lang.String STATE_MONITORING_POSTED -> aoGA
    java.lang.String STATE_MONITORING_LASTTAB -> TONT
    java.lang.String STATE_GLASSES_ENABLED -> OaaQ
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> skIp
    java.lang.String STATE_PLAYER_HOTBAR -> bPFY
    java.lang.String STATE_PLAYER_SHIFT -> rMsQ
    java.lang.String STATE_PLAYER_SCROLL -> NpAJ
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> gyIV
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> qeCj
    java.lang.String PERM_ACCESS -> TpqL
    java.lang.String PERM_MONITOR -> jqOk
    java.lang.String PERM_MONITOR_TITLE -> Ussr
    java.lang.String PERM_MONITOR_ACTIONLOG -> maGX
    java.lang.String PERM_MONITOR_MAP -> ogLv
    java.lang.String PERM_MONITOR_ENVIRONMENT -> govV
    java.lang.String PERM_MONITOR_GLASSES -> KfWW
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> sPue
    java.lang.String PERM_ACT -> xqgO
    java.lang.String PERM_RAI -> iBxH
    java.lang.String PERM_RAI_CONTROL -> aMCm
    java.lang.String PERM_RAI_ACCESS -> oDlg
    java.lang.String PERM_RAI_MONITOR -> sYis
    java.lang.String PERM_RELOAD -> Jbub
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> mFvq
    java.lang.String SAMPLER_REDSTONE_TICK -> KTwW
    java.lang.String SAMPLER_ENTITY_TIME -> cIyw
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> uhak
    java.lang.String SAMPLER_TILE_TIME_LOCK -> oDlu
    java.lang.String SAMPLER_TILE_TIME -> YVOv
    java.lang.String SAMPLER_TILE_DROPTICK -> IhdT
    java.lang.String SAMPLER_ENTITY_DROPTICK -> mWxT
    java.lang.String SAMPLER_REDSTONE_SECOND -> jhag
    java.lang.String SAMPLER_REDSTONE_TIME -> Btoc
    java.lang.String SAMPLER_PHYSICS_TIME -> oVOV
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> AGXr
    java.lang.String SAMPLER_HOPPER_TICK -> sYim
    java.lang.String SAMPLER_HOPPER_SECOND -> HKni
    java.lang.String SAMPLER_HOPPER_TIME -> Foyq
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> qufV
    java.lang.String SAMPLER_FLUID_TICK -> BlaQ
    java.lang.String SAMPLER_FLUID_SECOND -> NfpX
    java.lang.String SAMPLER_FLUID_TIME -> uNmp
    java.lang.String SAMPLER_TPS -> Dred
    java.lang.String SAMPLER_TICK -> AFye
    java.lang.String SAMPLER_TIU -> NobV
    java.lang.String SAMPLER_MEM -> rxhf
    java.lang.String SAMPLER_FREEMEM -> UsvS
    java.lang.String SAMPLER_MAXMEM -> oUmN
    java.lang.String SAMPLER_ALLOCMEM -> UJDN
    java.lang.String SAMPLER_MAHS -> CpCq
    java.lang.String SAMPLER_CHK -> nuMt
    java.lang.String SAMPLER_ATASK -> dpAf
    java.lang.String SAMPLER_STASK -> XAll
    java.lang.String SAMPLER_CHK_TIME -> BAmk
    java.lang.String SAMPLER_EXPLOSION_TIME -> dpDc
    java.lang.String SAMPLER_CHKS -> nBLo
    java.lang.String SAMPLER_ENT -> CxVh
    java.lang.String SAMPLER_ENTLIV -> rxlb
    java.lang.String SAMPLER_ENTDROP -> qBdp
    java.lang.String SAMPLER_ENTTILE -> dEPV
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> jFab
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> rgkN
    java.lang.String ACTION_CULL_ENTITIES_NAME -> DsJI
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> VTxa
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> ECHY
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> BSPM
    java.lang.String ACTION_UPDATE_FLUID_NAME -> DXvS
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> XSPO
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> OGsl
    java.lang.String ACTION_LOCK_FLUID_STATUS -> NgUO
    java.lang.String ACTION_LOCK_FLUID_NAME -> kQtT
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> jiDk
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> HwFQ
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> dEQF
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> rhKd
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> DPes
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> ifAo
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> HnTj
    java.lang.String ACTION_LOCK_HOPPER_NAME -> RkQQ
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> aLgI
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> DHSw
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> qvJA
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> aTwF
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> DsIM
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> Lqmy
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> DQFR
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> oDme
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> nuOu
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> ctoo
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> ArSA
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> Edkl
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> EJyX
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> OHVj
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> vIeq
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> IhhT
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> imtK
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> XRow
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> WiaH
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> Mttb
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> SfEh
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> jput
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> qukG
    java.lang.String ACTION_FIX_LIGHTING_NAME -> ytqc
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> oVRv
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> ePep
    java.lang.String ACTION_COLLECT_GARBAGE -> qdid
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> GtEU
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> Xcpn
    6:6:void <init>() -> <init>
    8:247:void <clinit>() -> <clinit>
react.Lang -> ylOL:
    java.lang.String BUNDLE_NAME -> VDXs
    java.util.ResourceBundle RESOURCE_BUNDLE -> ndQM
    java.util.ResourceBundle PRIMARY_BUNDLE -> JIfm
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> xiLM:
    react.React instance -> ksyE
    react.controller.SampleController sampleController -> sIMJ
    react.controller.PlayerController playerController -> MAoI
    react.controller.MonitorController monitorController -> uheO
    react.controller.CommandController commandController -> RIOE
    react.controller.ActionController actionController -> OQGY
    react.controller.FastDecayController fastDecayController -> NgVT
    react.controller.EntityStackController entityStackController -> JcYp
    react.controller.GlassController glassController -> OjXn
    react.controller.EntityCullController entityCullController -> FFMB
    react.controller.SpikeController spikeController -> Rjpk
    react.controller.SecurityController securityController -> dUrY
    react.controller.RedstoneController redstoneController -> Mlbu
    react.controller.HopperController hopperController -> kIeN
    react.controller.PhysicsController physicsController -> lCvd
    react.controller.TickTimeController tickTimeController -> fdib
    react.controller.RAIController raiController -> LaOv
    react.controller.FluidController fluidController -> EJxl
    react.controller.ChunkController chunkController -> TOUX
    react.controller.GraphController graphController -> pGrj
    react.controller.ChronophyFluidController fluidChronophyController -> pHSj
    react.controller.EventController eventController -> pPdL
    react.controller.BlockInjectController blockInjectController -> oNAp
    react.controller.SmearTickController smearTickController -> SwEy
    react.controller.FeatureController featureController -> GjtQ
    react.controller.HopperOvertickController hopperPlungeController -> AYCE
    react.controller.LanguageController languageController -> PCKY
    react.controller.RemoteController remoteController -> FEnX
    react.controller.ExplosiveController explosiveController -> EBjv
    react.controller.WorldController worldController -> jGFa
    43:43:void <init>() -> <init>
    138:146:void enable() -> enable
    152:152:void disable() -> disable
react.React$1 -> xiLM$1:
    react.React this$0 -> prjf
    139:139:void <init>(react.React) -> <init>
    143:144:void run() -> run
react.action.ActionCollectGarbage -> GPmP:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionCollectGarbage$1 -> GPmP$1:
    react.action.source.IActionSource val$source -> gyQy
    react.action.ActionCollectGarbage this$0 -> ejYx
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> GPmP$1$1:
    long val$mbnex -> rhPS
    long val$mbmem -> gElf
    react.action.ActionCollectGarbage$1 this$1 -> Licc
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> qJde:
    long ms -> XuVk
    int lcd -> WXaS
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
    25:25:long access$002(react.action.ActionCullEntities,long) -> JtIb
    25:25:int access$100(react.action.ActionCullEntities) -> JtIb
    25:25:long access$000(react.action.ActionCullEntities) -> YgCd
react.action.ActionCullEntities$1 -> qJde$1:
    react.action.ActionCullEntities this$0 -> oESk
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> qcvI
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> qJde$2:
    react.action.ActionCullEntities this$0 -> oESk
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> qcvI
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> qJde$3:
    react.glang.FinalInteger val$completed -> fvOL
    react.glang.FinalInteger val$total -> FpaX
    react.glang.FinalInteger val$totalCulled -> rgml
    react.glang.FinalInteger val$totalChunked -> OrkO
    react.action.source.IActionSource val$source -> gyQy
    react.action.ActionCullEntities this$0 -> oESk
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> qJde$4:
    react.action.source.IActionSource val$source -> gyQy
    react.glang.FinalInteger val$totalCulled -> rgml
    react.glang.FinalInteger val$totalChunked -> OrkO
    react.action.ActionCullEntities this$0 -> oESk
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> Dqvy:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionFixLighting$1 -> Dqvy$1:
    react.action.ActionFixLighting this$0 -> OQHm
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> qcvI
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> Dqvy$2:
    react.action.source.IActionSource val$source -> gyQy
    int val$ch -> rhOO
    react.action.ActionFixLighting this$0 -> OQHm
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> JtIb
    78:78:void run(java.lang.Object) -> JtIb
react.action.ActionFixLighting$3 -> Dqvy$3:
    react.action.ActionFixLighting this$0 -> OQHm
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> JtIb
    89:89:void run(java.lang.Object) -> JtIb
react.action.ActionLockFluid -> IguI:
    int lcd -> WXaS
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionLockFluid$1 -> IguI$1:
    react.action.ActionLockFluid this$0 -> priX
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> qcvI
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> IguI$2:
    react.action.ActionLockFluid this$0 -> priX
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> qcvI
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> qcvI:
    int lcd -> WXaS
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionLockHopper$1 -> qcvI$1:
    react.action.ActionLockHopper this$0 -> iLRd
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> qcvI
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> qcvI$2:
    react.action.ActionLockHopper this$0 -> iLRd
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> qcvI
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> UtJE:
    int lcd -> WXaS
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionLockRedstone$1 -> UtJE$1:
    react.action.ActionLockRedstone this$0 -> JIiN
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> qcvI
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> UtJE$2:
    react.action.ActionLockRedstone this$0 -> JIiN
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> qcvI
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> QNKB:
    long ms -> XuVk
    int lcd -> WXaS
    boolean fail -> UAXL
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> YgCd
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> JtIb
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> JtIb
    23:23:int access$200(react.action.ActionPurgeChunks) -> YgCd
    23:23:long access$100(react.action.ActionPurgeChunks) -> lCee
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> JtIb
react.action.ActionPurgeChunks$1 -> QNKB$1:
    react.action.ActionPurgeChunks this$0 -> Rscq
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> qcvI
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> QNKB$2:
    int val$dk -> Drkf
    java.lang.Object val$j -> Drkg
    react.glang.FinalInteger val$acompleted -> pXwN
    react.glang.FinalInteger val$completed -> fvOL
    react.glang.FinalInteger val$total -> FpaX
    react.glang.FinalInteger val$totalCulled -> rgml
    react.glang.FinalInteger val$totalChunked -> OrkO
    react.action.source.IActionSource val$source -> gyQy
    react.api.ISelector[] val$selectors -> gWNY
    react.action.ActionPurgeChunks this$0 -> Rscq
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> QNKB$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> tecl
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> QNKB$3:
    react.action.source.IActionSource val$source -> gyQy
    react.glang.FinalInteger val$acompleted -> pXwN
    react.action.ActionPurgeChunks this$0 -> Rscq
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> QNKB$4:
    org.bukkit.Chunk val$chunk -> uGDm
    java.lang.Runnable val$cb -> YESm
    react.action.ActionPurgeChunks this$0 -> Rscq
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> NMRJ:
    long ms -> XuVk
    int lcd -> WXaS
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> YgCd
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> JtIb
    27:27:int access$100(react.action.ActionPurgeEntities) -> JtIb
    27:27:long access$000(react.action.ActionPurgeEntities) -> YgCd
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> JtIb
react.action.ActionPurgeEntities$1 -> NMRJ$1:
    react.action.ActionPurgeEntities this$0 -> baOq
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> qcvI
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> NMRJ$2:
    react.action.ActionPurgeEntities this$0 -> baOq
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> qcvI
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> NMRJ$3:
    react.glang.FinalInteger val$completed -> fvOL
    react.glang.FinalInteger val$total -> FpaX
    react.glang.FinalInteger val$totalCulled -> rgml
    react.glang.FinalInteger val$totalChunked -> OrkO
    react.action.source.IActionSource val$source -> gyQy
    react.action.ActionPurgeEntities this$0 -> baOq
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> NMRJ$4:
    react.action.source.IActionSource val$source -> gyQy
    react.glang.FinalInteger val$totalCulled -> rgml
    react.glang.FinalInteger val$totalChunked -> OrkO
    react.action.ActionPurgeEntities this$0 -> baOq
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> NMRJ$5:
    org.bukkit.entity.Entity val$i -> kRWs
    react.glang.FinalInteger val$cu -> AOpo
    int val$k -> DQIs
    org.bukkit.Chunk val$chunk -> uGDm
    java.lang.Runnable val$cb -> YESm
    react.action.ActionPurgeEntities this$0 -> baOq
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> iTOF:
    int lcd -> WXaS
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionUnlockFluid$1 -> iTOF$1:
    react.action.ActionUnlockFluid this$0 -> OsME
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> qcvI
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> flhH:
    int lcd -> WXaS
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionUnlockHopper$1 -> flhH$1:
    react.action.ActionUnlockHopper this$0 -> Drkw
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> qcvI
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> Lhmn:
    int lcd -> WXaS
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.action.ActionUnlockRedstone$1 -> Lhmn$1:
    react.action.ActionUnlockRedstone this$0 -> wMKB
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> qcvI
    30:30:java.lang.Object get() -> get
react.action.source.AccessActionSource -> rfyT:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> JtIb
    26:33:void sendResponseSuccess(java.lang.String) -> YgCd
    38:45:void sendResponseError(java.lang.String) -> lCee
    50:57:void sendResponseActing(java.lang.String) -> ylOL
react.action.source.ActionHandle -> xylN:
    react.action.source.ActionHandle AUTOMATIC -> qukp
    react.action.source.ActionHandle MANUAL -> NMfA
    react.action.source.ActionHandle MUTEX -> jGEV
    react.action.source.ActionHandle[] $VALUES -> gWQW
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> Ptyr:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> JtIb
    18:19:void sendResponseSuccess(java.lang.String) -> YgCd
    24:25:void sendResponseError(java.lang.String) -> lCee
    30:31:void sendResponseActing(java.lang.String) -> ylOL
react.action.source.EmptyActionSource -> eHCS:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> JtIb
    15:15:void sendResponseSuccess(java.lang.String) -> YgCd
    21:21:void sendResponseError(java.lang.String) -> lCee
    27:27:void sendResponseActing(java.lang.String) -> ylOL
react.action.source.IActionSource -> GQMD:
    void sendResponse(java.lang.String) -> JtIb
    void sendResponseSuccess(java.lang.String) -> YgCd
    void sendResponseError(java.lang.String) -> lCee
    void sendResponseActing(java.lang.String) -> ylOL
react.action.source.PlayerActionSource -> AGME:
    org.bukkit.entity.Player p -> TWiu
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> JtIb
    30:31:void sendResponseSuccess(java.lang.String) -> YgCd
    36:37:void sendResponseError(java.lang.String) -> lCee
    42:43:void sendResponseActing(java.lang.String) -> ylOL
react.action.source.RAIActionSource -> Kmxy:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> JtIb
    16:17:void sendResponseSuccess(java.lang.String) -> YgCd
    22:23:void sendResponseError(java.lang.String) -> lCee
    28:29:void sendResponseActing(java.lang.String) -> ylOL
react.api.Action -> iuot:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> FyUm
    java.lang.String[] nodes -> cSUG
    react.action.source.ActionHandle handle -> Blgn
    react.api.ActionState state -> dfwu
    react.api.ActionTargetType target -> TFhm
    react.api.ActionType type -> BmIM
    react.action.source.IActionSource currentSource -> vAXo
    double progress -> HTgq
    react.glang.GMap defaultSelectors -> mrSu
    28:29:void <init>(react.api.ActionType) -> <init>
    32:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> JtIb
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> JtIb
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> UtJE
    94:94:react.api.ActionState getState() -> QNKB
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> xiLM
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> NMRJ
    130:130:react.api.ActionType getType() -> iTOF
    136:136:react.glang.GMap getDefaultSelectors() -> flhH
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> YgCd
    189:190:void completeAction() -> Lhmn
    195:195:react.action.source.IActionSource getCurrentSource() -> rfyT
    201:201:java.lang.String[] getNodes() -> xylN
    207:208:void setNodes(java.lang.String[]) -> JtIb
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
react.api.ActionAlreadyRunningException -> JtIA:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> yIiu:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> lUGT:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> CLrB:
    react.api.ActionState IDLE -> ArUo
    react.api.ActionState RUNNING -> Rbeh
    react.api.ActionState[] $VALUES -> psLu
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> oLnN:
    react.api.ActionTargetType POSITIONAL -> iUGE
    react.api.ActionTargetType SYSTEM -> Mtxl
    react.api.ActionTargetType[] $VALUES -> nBQo
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> TyUh:
    react.api.ActionType FIX_LIGHTING -> YVXF
    react.api.ActionType UNLOCK_FLUID -> RYrp
    react.api.ActionType LOCK_FLUID -> SDEY
    react.api.ActionType UNLOCK_HOPPER -> brSm
    react.api.ActionType LOCK_HOPPER -> MlgH
    react.api.ActionType UNLOCK_REDSTONE -> UJKX
    react.api.ActionType LOCK_REDSTONE -> Xctw
    react.api.ActionType CULL_ENTITIES -> EeOw
    react.api.ActionType COLLECT_GARBAGE -> clfB
    react.api.ActionType PURGE_ENTITIES -> Lico
    react.api.ActionType PURGE_CHUNKS -> vJJN
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> Blgn
    react.api.ActionTargetType target -> TFhm
    react.api.ActionType[] $VALUES -> dETs
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> Ptyr
    50:50:react.api.ActionTargetType getTarget() -> NMRJ
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> RroE:
    react.api.ActivationRangeType ANIMALS -> IWjM
    react.api.ActivationRangeType MONSTERS -> opHi
    react.api.ActivationRangeType MISC -> Cfyl
    react.api.ActivationRangeType[] $VALUES -> rxpy
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> NMQH:
    int value() -> value
react.api.Async -> VDFw:
react.api.CPUBenchmark -> yIiY:
    org.bukkit.command.CommandSender sender -> sender
    int score -> Qxsh
    java.lang.Runnable onFinish -> JuAT
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> eHCS
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> JtIb
    10:10:int access$100(react.api.CPUBenchmark) -> YgCd
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> lCee
react.api.CPUBenchmark$1 -> yIiY$1:
    react.api.CPUBenchmark this$0 -> YpJh
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> yIiY$2:
    react.api.CPUBenchmark this$0 -> YpJh
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> jVol:
    react.api.CPUResult ULTRA_SLOW -> woRo
    react.api.CPUResult VERY_SLOW -> rxuF
    react.api.CPUResult SLOW -> FEqt
    react.api.CPUResult AVERAGE -> SLXa
    react.api.CPUResult GOOD -> gOBo
    react.api.CPUResult FAST -> WXdc
    react.api.CPUResult VERY_FAST -> Vfcl
    react.api.CPUResult ULTRA_FAST -> mPRu
    java.lang.String m -> rhTL
    react.api.CPUResult[] $VALUES -> iKwB
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> JtIb
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> yJIx:
    react.glang.GMap cache -> bOrx
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> YgCd
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> lCee
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> GQMD
    54:54:boolean has(java.lang.Object) -> ylOL
react.api.Capability -> Etyg:
    react.api.Capability DUAL_WEILD -> MJge
    react.api.Capability SCOREBOARD -> pGyX
    react.api.Capability SCOREBOARD_ADVANCED -> dVXn
    react.api.Capability HOPPER -> QVql
    react.api.Capability ENTITY_ATTRIBUTES -> pHYs
    react.api.Capability ENTITY_AI -> bidb
    react.api.Capability ACTION_BAR -> cuXh
    react.api.Capability ENTITY_NAMES -> oUwn
    react.api.Capability TITLE_BAR -> OPku
    react.api.Capability CHUNK_RELIGHTING -> jiLk
    react.api.Capability MONITOR_SUBMISSIVENESS -> OPlU
    react.api.Capability ACCELERATED_PING -> klOk
    react.api.Capability ENTITY_THROTTLING -> jOXt
    react.api.Capability TILE_THROTTLING -> QFQq
    react.api.Capability PASSENGERS -> AHEl
    react.glang.GList capabilities -> tTek
    react.surge.util.Protocol version -> uWiK
    react.api.Flavor flavor -> PdqS
    java.lang.String plugin -> ELAM
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> AGME
    100:100:boolean isFlavorCapable() -> Kmxy
    105:105:boolean isVersionCapable() -> iuot
    110:110:boolean isCapable() -> JtIA
    115:115:react.surge.util.Protocol getVersion() -> yIiu
    120:120:react.api.Flavor getFlavor() -> lUGT
    125:125:java.lang.String getPlugin() -> CLrB
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> JtIb
    153:167:void sendNotCapable(react.action.source.IActionSource) -> JtIb
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> qKDS:
    react.api.CapabilityBasis VERSION -> HKxG
    react.api.CapabilityBasis FLAVOR -> clgx
    react.api.CapabilityBasis PLUGIN -> Vnrv
    react.api.CapabilityBasis[] $VALUES -> tUGI
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> STOg:
    react.api.ChunkIssue ENTITY -> SfKI
    react.api.ChunkIssue HOPPER -> mOqX
    react.api.ChunkIssue TNT -> ydVP
    react.api.ChunkIssue REDSTONE -> RcHR
    react.api.ChunkIssue FLUID -> SwNq
    react.api.ChunkIssue PHYSICS -> CpQE
    react.api.ChunkIssue[] $VALUES -> FWWI
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> oLnN
    3:10:void <clinit>() -> <clinit>
react.api.ChunkIssue$1 -> STOg$1:
    int[] $SwitchMap$react$api$ChunkIssue -> sYvb
    14:14:void <clinit>() -> <clinit>
react.api.Clip -> KTkE:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> qtyj:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> JtIb
    31:32:void sendResponseSuccess(java.lang.String) -> YgCd
    37:38:void sendResponseError(java.lang.String) -> lCee
    43:44:void sendResponseActing(java.lang.String) -> ylOL
react.api.CullList -> jErG:
    react.glang.GSet toCull -> EvVp
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> ylOL
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> TyUh
react.api.DTest -> UAGA:
    6:6:void <init>() -> <init>
    11:62:int test() -> RroE
react.api.EntityFlag -> OXfa:
    react.api.EntityFlag NAMED -> ytyq
    react.api.EntityFlag TAMED -> nljd
    react.api.EntityFlag STACKED -> hkYq
    react.api.EntityFlag RIDDEN -> sYvh
    react.api.EntityFlag LEASHED -> IaAV
    java.lang.String m -> rhTL
    react.api.EntityFlag[] $VALUES -> pQNQ
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> xiLM
    40:70:boolean is(org.bukkit.entity.Entity) -> GPmP
    76:76:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> KfLr:
    react.glang.GSet entityTypes -> ghUu
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> NMQH
react.api.EntitySample -> pPTk:
    react.glang.GMap counts -> EnFt
    react.glang.GMap sets -> FgxM
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> VDFw
    45:45:react.glang.GList getTypes() -> yIiY
    50:57:int total() -> jVol
    62:67:int get(org.bukkit.entity.EntityType) -> JtIb
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> YgCd
    84:96:void add(org.bukkit.entity.Entity) -> ylOL
react.api.Experimental -> XtcS:
react.api.Flavor -> Bcay:
    react.api.Flavor ANY -> agFT
    react.api.Flavor SAFE_MODE -> gFTK
    react.api.Flavor CRAFT_BUKKIT -> IFnJ
    react.api.Flavor BUKKIT -> vlRG
    react.api.Flavor SPIGOT -> EeTT
    react.api.Flavor SOGGY_SPIGOT -> BKLB
    react.api.Flavor PAPER_SPIGOT -> aMQq
    react.api.Flavor TACO_SPIGOT -> mOsd
    react.api.Flavor TORCH_SPIGOT -> Rjxd
    react.api.Flavor FORGE_HACK -> qura
    react.api.Flavor SPONGE_HACK -> FphG
    react.api.Flavor[] $VALUES -> aoTj
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> yJIx
    74:79:boolean compatableWith(react.api.Flavor) -> JtIb
    84:84:java.lang.String fancyName() -> Etyg
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> DHGJ:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> UtJE
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> YgCd
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
    react.api.ActionState getState() -> QNKB
    react.api.ActionTargetType getTarget() -> NMRJ
    void setNodes(java.lang.String[]) -> JtIb
    java.lang.String[] getNodes() -> xylN
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> xiLM
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> iTOF
    react.glang.GMap getDefaultSelectors() -> flhH
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> JtIb
    react.api.ISelector[] biselect(react.api.ISelector[]) -> JtIb
    react.action.source.IActionSource getCurrentSource() -> rfyT
    void completeAction() -> Lhmn
react.api.ICache -> Ixwr:
    react.glang.GSet get(java.lang.Object) -> YgCd
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> lCee
    void clear() -> clear
    boolean has(java.lang.Object) -> ylOL
    react.glang.GList k() -> GQMD
react.api.ICommand -> WypN:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> qKDS
    java.lang.String[] getPermissions() -> STOg
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> GPmP
    react.api.SideGate getSideGate() -> KTkE
    void registerParameterDescription(java.lang.String,java.lang.String) -> JtIb
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.api.IRecord -> RQNw:
    java.lang.String getRecordType() -> qtyj
    long getRecordTime() -> jErG
    react.json.JSONObject toJSON() -> UAGA
    java.lang.Object getRecordObject() -> OXfa
    void fromJSON(react.json.JSONObject) -> JtIb
react.api.IRecordBook -> VelD:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> JtIb
    long getOldestRecordTime() -> KfLr
    void addRecord(react.api.IRecord) -> JtIb
    long getLatestRecordTime() -> pPTk
    int countRecords(long,long) -> JtIb
    react.glang.GMap getRecords(long,long) -> YgCd
    int purgeRecordsBefore(long) -> YgCd
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> qBVI:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> XtcS
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> Bcay
    react.surge.util.C getAltColor() -> DHGJ
    void setColor(react.surge.util.C,react.surge.util.C) -> JtIb
    int getInterval() -> getInterval
    void setInterval(int) -> YgCd
    void sample() -> Ixwr
    java.lang.String get() -> get
    void construct() -> WypN
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> RQOf:
    react.api.SelectionMode getMode() -> RQNw
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> xiLM
    react.glang.GSet getList() -> VelD
    react.glang.GSet getPossibilities() -> qBVI
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> GPmP
    java.lang.String getName() -> getName
react.api.Injection -> afLc:
    react.api.InjectionMethod value() -> RQOf
react.api.InjectionMethod -> LaAC:
    react.api.InjectionMethod SWAP -> JInw
    react.api.InjectionMethod SUBSTRATE -> uhmT
    react.api.InjectionMethod RELOAD -> qSpG
    react.api.InjectionMethod[] $VALUES -> wUaH
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> JHwJ:
    java.lang.String value() -> value
react.api.MSampler -> UbiX:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> afLc
react.api.MonitorHeading -> Bcai:
    react.api.ISampler head -> QyYF
    react.glang.GList children -> Vntx
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> JtIb
    27:27:react.api.ISampler getHead() -> LaAC
    32:33:void setHead(react.api.ISampler) -> YgCd
    37:37:react.glang.GList getChildren() -> JHwJ
    42:42:java.lang.String getHeadText() -> UbiX
    47:60:java.lang.String getChildText() -> Bcai
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> JtIb
react.api.NoiseGenerator -> UAGY:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> PJiN:
    react.api.NoiseGenerator[] octaves -> LqyD
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> UAGY
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> VDJN:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> mien
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> PJiN
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> xXLY:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> JtIb
react.api.Permissable -> gMjR:
    react.api.Permissable ACCESS -> KoVg
    react.api.Permissable MONITOR -> bOta
    react.api.Permissable MONITOR_TITLE -> YMkH
    react.api.Permissable MONITOR_ACTIONLOG -> USBB
    react.api.Permissable MONITOR_MAP -> xGcB
    react.api.Permissable MONITOR_ENVIRONMENT -> baWJ
    react.api.Permissable MONITOR_GLASSES -> qdpe
    react.api.Permissable MONITOR_CHUNK_BLAME -> DQQB
    react.api.Permissable RAI_MONITOR -> jqbL
    react.api.Permissable RAI_CONTROL -> errq
    react.api.Permissable RAI_ACCESS -> gOFt
    react.api.Permissable RAI -> mPWo
    react.api.Permissable ACT -> kJQm
    react.api.Permissable RELOAD -> cJjG
    java.lang.String node -> rWVk
    react.api.Permissable[] $VALUES -> iDKP
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> JtIb
    46:46:java.lang.String getNode() -> VDJN
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> oxEf:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> ECUH
    java.lang.Runnable r -> vSBI
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> JtIb
react.api.ReactCommand -> HCRU:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> rNdn
    java.lang.String usage -> iULf
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> fuvO
    react.api.SideGate sideGate -> xHFM
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> GPmP
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> JtIb
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> qKDS
    47:47:java.lang.String[] getPermissions() -> STOg
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> KTkE
react.api.ReactException -> AFnG:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> aUJC:
    react.glang.GMap keystore -> ryYG
    boolean monitoring -> monitoring
    boolean highMonitor -> rphA
    boolean actionlogging -> LPWx
    boolean glasses -> QhYB
    boolean mapping -> aDbd
    int monitorSelection -> hsjy
    int plays -> oonf
    boolean monitorPosted -> gxyE
    int monitorLastSelection -> LGgY
    int switchNotification -> AilQ
    int hotbarSlot -> RHxW
    boolean shift -> dyBD
    int scroll -> lEBs
    double lastHeight -> SUMh
    boolean heightMovement -> qKaO
    org.bukkit.entity.Player p -> TWiu
    42:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> xXLY
    128:128:boolean isMapping() -> gMjR
    133:133:org.bukkit.entity.Player getP() -> oxEf
    138:140:void setMonitoring(boolean) -> YgCd
    144:146:void setMapping(boolean) -> lCee
    150:150:int getMonitorSelection() -> HCRU
    155:157:void setMonitorSelection(int) -> lCee
    161:161:int getHotbarSlot() -> AFnG
    166:168:void setHotbarSlot(int) -> ylOL
    172:172:boolean isShifting() -> aUJC
    177:179:void setShifting(boolean) -> ylOL
    183:183:boolean isShift() -> uWSD
    188:190:void setShift(boolean) -> xiLM
    194:194:int getScroll() -> PBVd
    199:201:void setScroll(int) -> xiLM
    205:205:int getMonitorLastSelection() -> KCgs
    210:212:void setMonitorLastSelection(int) -> GPmP
    216:217:void setP(org.bukkit.entity.Player) -> YgCd
    221:221:double getLastHeight() -> teQQ
    226:228:void setLastHeight(double) -> JtIb
    232:232:boolean isHeightMovement() -> aKvr
    237:239:void setHeightMovement(boolean) -> GPmP
    243:243:int getSwitchNotification() -> TFRl
    248:250:void setSwitchNotification(int) -> qJde
    254:254:boolean getMonitorPosted() -> OYGF
    259:261:void setMonitorPosted(boolean) -> qJde
    265:265:int getPlays() -> ieRS
    270:272:void setPlays(int) -> Dqvy
    276:276:boolean isGlasses() -> bFkC
    281:283:void setGlasses(boolean) -> Dqvy
    287:287:boolean isActionlogging() -> GkAp
    292:294:void setActionlogging(boolean) -> IguI
    24:40:void <clinit>() -> <clinit>
react.api.Record -> uWSD:
    java.lang.String recordType -> fCRH
    long recordTime -> IiRq
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> qtyj
    32:32:long getRecordTime() -> jErG
    38:38:java.lang.Object getRecordObject() -> OXfa
    react.json.JSONObject toJSON() -> UAGA
    void fromJSON(react.json.JSONObject) -> JtIb
react.api.RecordBook -> PBVd:
    java.io.File recordFile -> dooU
    react.json.JSONObject js -> lUgP
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> JtIb
    79:87:react.api.IRecord getRecord(long) -> JtIb
    react.api.IRecord createDummyRecord(long,java.lang.String) -> JtIb
    95:107:long getOldestRecordTime() -> KfLr
    113:125:long getLatestRecordTime() -> pPTk
    130:130:boolean within(long,long,long) -> JtIb
    136:144:int countRecords(long,long) -> JtIb
    150:162:react.glang.GMap getRecords(long,long) -> YgCd
    168:181:int purgeRecordsBefore(long) -> YgCd
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> KCgs:
react.api.SampledChunk -> teQQ:
    org.bukkit.Chunk c -> AYLr
    react.glang.GMap counts -> EnFt
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> MdCB
    26:38:void hit(react.api.ChunkIssue,int) -> JtIb
    42:42:org.bukkit.Chunk getC() -> RPmc
    47:47:react.glang.GMap getCounts() -> NLqc
react.api.SampledType -> aKvr:
    react.api.SampledType ENTITY_TIME_LOCK -> bilQ
    react.api.SampledType TILE_TIME_LOCK -> QOJN
    react.api.SampledType ENTITY_TIME -> ELGg
    react.api.SampledType TILE_TIME -> TaEN
    react.api.SampledType ENTITY_DROPTICK -> OPse
    react.api.SampledType TILE_DROPTICK -> Kfjd
    react.api.SampledType REDSTONE_TICK_USAGE -> vIrM
    react.api.SampledType REDSTONE_TICK -> cvAe
    react.api.SampledType REDSTONE_SECOND -> sslx
    react.api.SampledType REDSTONE_TIME -> wgID
    react.api.SampledType PHYSICS_TIME -> SeqW
    react.api.SampledType HOPPER_TICK_USAGE -> NVbU
    react.api.SampledType HOPPER_TICK -> rhYX
    react.api.SampledType HOPPER_SECOND -> KMWV
    react.api.SampledType HOPPER_TIME -> woWt
    react.api.SampledType FLUID_TICK_USAGE -> lnwe
    react.api.SampledType FLUID_TICK -> vlTq
    react.api.SampledType FLUID_SECOND -> RHyf
    react.api.SampledType FLUID_TIME -> LYKd
    react.api.SampledType TPS -> fnGt
    react.api.SampledType TICK -> scLX
    react.api.SampledType TIU -> XKKx
    react.api.SampledType MEM -> LYLH
    react.api.SampledType FREEMEM -> JRdj
    react.api.SampledType MAXMEM -> OYdE
    react.api.SampledType ALLOCMEM -> EuyY
    react.api.SampledType MAHS -> sAHa
    react.api.SampledType CHK_TIME -> NNQA
    react.api.SampledType EXPLOSION_TIME -> fuwP
    react.api.SampledType CHK -> IqeU
    react.api.SampledType ATASK -> KMXU
    react.api.SampledType STASK -> scKd
    react.api.SampledType CHKS -> OICd
    react.api.SampledType ENT -> JBGQ
    react.api.SampledType ENTLIV -> hAMD
    react.api.SampledType ENTDROP -> SesF
    react.api.SampledType ENTTILE -> BmTE
    java.lang.String node -> rWVk
    react.api.SampledType[] $VALUES -> VDhe
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    50:50:react.api.ISampler get() -> VwMj
    56:56:java.lang.String toString() -> toString
    60:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> VDJN
    6:44:void <clinit>() -> <clinit>
react.api.Sampler -> TFRl:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> TrHJ
    react.surge.util.C altColor -> NMsA
    int interval -> rqNN
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> Bcay
    49:49:react.surge.util.C getAltColor() -> DHGJ
    55:55:int getInterval() -> getInterval
    void sample() -> Ixwr
    void construct() -> WypN
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> JtIb
    107:108:void setInterval(int) -> YgCd
react.api.Sector -> OYGF:
    int value() -> value
react.api.SelectionException -> ieRS:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> bFkC:
    react.api.SelectionMode WHITELIST -> aUiV
    react.api.SelectionMode BLACKLIST -> pPtM
    react.api.SelectionMode[] $VALUES -> pjff
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> GkAp:
    java.lang.Class objectType -> IFsc
    react.api.SelectionMode mode -> RANU
    react.glang.GSet list -> nlpU
    react.glang.GSet possibilities -> lEHR
    int popoff -> lDgP
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> RQNw
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> xiLM
    43:43:react.glang.GSet getList() -> VelD
    49:49:react.glang.GSet getPossibilities() -> qBVI
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> GPmP
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> qJde
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> MdCB:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> lCee
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> GPmP
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Dqvy
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> RPmc:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> NLqc:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> lCee
    29:30:void add(org.bukkit.Chunk,int) -> JtIb
    34:38:void add(org.bukkit.World) -> Dqvy
    42:46:void addAll() -> URGi
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> GPmP
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> Dqvy
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> VwMj:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> GPmP
    87:87:java.lang.String getName() -> getName
react.api.Side -> URGi:
    react.api.Side PLAYERS -> ELJX
    react.api.Side CONSOLE -> ceAx
    java.lang.String ss -> lLxB
    react.api.Side[] $VALUES -> jqfH
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> mXLI
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> YgCd
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> mXLI:
    react.api.SideGate PLAYERS_ONLY -> nvBc
    react.api.SideGate CONSOLES_ONLY -> vcfb
    react.api.SideGate ANYTHING -> vthR
    react.api.SideGate[] $VALUES -> PSvy
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> JtIb
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> mXLI$1:
    int[] $SwitchMap$react$api$SideGate -> kIsm
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> PAvc:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> LXli
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> PAvc
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> ykna:
    double wScale -> uqdd
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> JtIb
react.api.SpecializedTickLimiter -> uNaS:
    double rMaxTime -> IqgH
    long rStartTime -> FNkM
    double rLastTime -> kkvu
    long rMark -> hbmr
    double tMaxTime -> Jchf
    react.gmath.Average atimes -> iwRj
    react.gmath.Average adropped -> esWa
    int droppedTicks -> VVKA
    boolean entityTick -> Yovj
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> Nwew:
    react.glang.GList sources -> SfVE
    react.glang.GList splooge -> qSyS
    react.glang.GSet destroy -> aCkX
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> JtIb
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> YgCd
    void clipped(org.bukkit.Location) -> YgCd
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> lCee
    boolean isAllowedSource(org.bukkit.Location) -> ylOL
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> JtIb
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> YgCd
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> lCee
react.api.SploogeCounter$1 -> Nwew$1:
    java.util.Iterator val$it -> dMrn
    org.bukkit.Location val$start -> hRQD
    int val$maxDistance -> Oaxn
    react.api.SploogeCounter this$0 -> SDRv
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> Nwew$1$1:
    react.api.SploogeCounter$1 this$1 -> kkxy
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> jNeR:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> DXht:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> UAGA
    38:49:void fromJSON(react.json.JSONObject) -> JtIb
react.api.StackTraceRecordBook -> dUeA:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> YgCd
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> JtIb
react.api.StackedEntity -> IVvj:
    org.bukkit.entity.LivingEntity entity -> JSJv
    int count -> count
    double rmx -> yvDG
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> JtIb
    46:46:int getAbsoluteMaxCount() -> ykna
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> YgCd
    56:58:void update() -> update
    62:68:void signalSize() -> uNaS
    72:123:void updateHealth() -> Nwew
    127:128:void heal(double) -> YgCd
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> jNeR
    142:142:int getEffectiveCount(double) -> lCee
    147:147:double getEffectiveMaxHealth(int) -> IguI
    152:152:double getRealMaxHealth() -> DXht
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> JtIb
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> XSBv:
    react.glang.GList headings -> KDlL
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> JtIb
    24:24:int getMaxSelection() -> dUeA
    29:37:int left(int) -> qcvI
    42:50:int right(int) -> UtJE
    55:55:react.api.MonitorHeading getHeadFor(int) -> QNKB
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> JtIb
    83:100:java.lang.String getHotbarFor(int,boolean) -> JtIb
react.api.Unused -> TNfL:
react.api.WorldConfig -> UAIL:
    boolean allowRai -> RQqM
    boolean allowActions -> lfla
    boolean allowRelighting -> hbpc
    boolean allowTileThrottling -> qLHv
    boolean allowEntityThrottling -> uqgT
    boolean allowFastLeafDecay -> UuNE
    java.util.List assumeNoSideEffectsEntities -> jrHP
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> IguI
    48:62:void save(org.bukkit.World) -> qcvI
    66:80:void load(org.bukkit.World) -> UtJE
react.binject.BlockInjector -> HvXU:
    react.surge.util.Protocol protocol -> jrGr
    java.lang.Class blocksClass -> BKSd
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> JtIb
    29:56:void inject() -> IVvj
    61:61:react.surge.util.Protocol getVersion() -> yIiu
react.binject.IBlockInjector -> XIpb:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> JtIb
    void add(int,java.lang.String,java.lang.Object) -> JtIb
    java.lang.Object get(java.lang.String) -> get
    void inject() -> IVvj
    react.surge.util.Protocol getVersion() -> yIiu
react.binject.InjectedBlock -> MRcI:
    react.surge.util.Protocol getInjectProtocol() -> XSBv
    java.lang.String getInjectKey() -> TNfL
    java.lang.String getInjectCKey() -> UAIL
    int getInjectId() -> HvXU
react.binject.ReflectionUtil -> Gjcq:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> JtIb
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> JtIb
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> JtIb
    41:54:void setAccessible(java.lang.reflect.Field) -> JtIb
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> JtIb
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> JtIb
react.binject.V10.BlockInjector10 -> saod:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> qJde
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> JtIb
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> JtIb
react.binject.V11.BlockInjector11 -> dMUE:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> Dqvy
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> JtIb
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> JtIb
react.binject.V12.BlockInjector12 -> qcyj:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> IguI
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> JtIb
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> JtIb
react.binject.V8.BlockInjector8 -> MuGW:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> qcvI
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> JtIb
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> JtIb
react.binject.V9.BlockInjector9 -> uhWO:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> UtJE
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> JtIb
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> JtIb
react.cache.CachedEntity -> flkU:
    java.util.UUID uid -> sQma
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> DjjM
    double x -> x
    double y -> y
    double z -> z
    double vx -> wxMi
    double vy -> YMsC
    double vz -> DjjQ
    double dx -> ydaL
    double dy -> BeFP
    double dz -> NWFS
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> qJde
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> XIpb
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> MRcI
    120:121:void setVx(double) -> ylOL
    125:125:double getVy() -> Gjcq
    130:131:void setVy(double) -> xiLM
    135:135:double getVz() -> saod
    140:141:void setVz(double) -> GPmP
    145:145:double getDx() -> dMUE
    150:151:void setDx(double) -> qJde
    155:155:double getDy() -> qcyj
    160:161:void setDy(double) -> Dqvy
    165:165:double getDz() -> MuGW
    170:171:void setDz(double) -> IguI
    175:175:java.util.UUID getUid() -> uhWO
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> iCPf:
    int age -> xYMO
    boolean ageLock -> AsCx
    boolean breed -> kcgy
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> qJde
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> flkU
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> iCPf
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> LrCC:
    org.bukkit.DyeColor dye -> Jcjp
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> qJde
    30:30:org.bukkit.DyeColor getDye() -> LrCC
    35:36:void setDye(org.bukkit.DyeColor) -> JtIb
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> pqwm:
    react.glang.GList potionEffects -> Gbsx
    boolean canPickupItems -> XugR
    org.bukkit.inventory.ItemStack[] armorContents -> WsEU
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> OPyX
    double maxHealth -> maxHealth
    int maxAir -> pkLM
    int air -> CFGY
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> qJde
    63:63:react.glang.GList getPotionEffects() -> pqwm
    68:69:void setPotionEffects(react.glang.GList) -> YgCd
    73:73:boolean isCanPickupItems() -> WGNJ
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> YDbd
    138:139:void setMaxAir(int) -> NMRJ
    143:143:int getAir() -> fRxT
    148:149:void setAir(int) -> iTOF
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> WGNJ:
    boolean sheared -> eYiX
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> qJde
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> YDbd:
    org.bukkit.inventory.ItemStack is -> JdNa
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> qJde
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> fRxT:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> GkDM:
    react.chronophysics.HopperDirection DOWN -> mirS
    react.chronophysics.HopperDirection NORTH -> gqRg
    react.chronophysics.HopperDirection SOUTH -> Ucle
    react.chronophysics.HopperDirection EAST -> xYOu
    react.chronophysics.HopperDirection WEST -> MuhV
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> SUVh
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> xiLM
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> JtIb
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> YgCd
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> GkDM$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> eYjP
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> cuDR:
    org.bukkit.block.Hopper source -> doyH
    react.glang.GList path -> gybV
    org.bukkit.block.Hopper destination -> SfWt
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> GkDM
    31:31:react.glang.GList getPath() -> cuDR
    36:36:org.bukkit.block.Hopper getDestination() -> QyBB
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> JtIb
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> QyBB:
    org.bukkit.block.Hopper h -> cKSb
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> JtIb
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> oMQu
    62:62:boolean isLockedByRedstone() -> wCga
react.command.CommandAct -> oMQu:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> JtIb
    186:192:react.text.RTX getBeginningRTX() -> JbkC
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> JtIb
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> YgCd
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> lCee
    331:346:react.glang.GList getSortedCommands() -> EBYs
    351:358:int getPageSize(int) -> flhH
    363:363:boolean isValidPage(int,int) -> JtIb
    368:377:react.glang.GList getPage(int,int) -> YgCd
react.command.CommandActionLog -> wCga:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandCPUScore -> JbkC:
    17:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandCapabilities -> EBYs:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandChunkBlame -> ivTr:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandChunkBlame$1 -> ivTr$1:
    org.bukkit.command.CommandSender val$sender -> NNXU
    react.command.CommandChunkBlame this$0 -> eHgw
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> ivTr$1$1:
    java.lang.String val$i -> qnNY
    react.glang.GMap val$top -> LjUP
    int val$totalx -> CEfE
    react.command.CommandChunkBlame$1 this$1 -> GcUw
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandEnvironment -> BuFw:
    25:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandGlasses -> fmKp:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandHelp -> rNOH:
    29:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> JtIb
    81:87:react.text.RTX getBeginningRTX() -> JbkC
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> JtIb
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> YgCd
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> lCee
    208:215:react.glang.GList getSortedCommands() -> EBYs
    220:227:int getPageSize(int) -> flhH
    232:232:boolean isValidPage(int,int) -> JtIb
    237:246:react.glang.GList getPage(int,int) -> YgCd
react.command.CommandHighMonitor -> vQjD:
    17:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandMap -> pOxI:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandMonitor -> cJSV:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandReload -> YfiK:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandReload$1 -> YfiK$1:
    org.bukkit.command.CommandSender val$sender -> NNXU
    react.command.CommandReload this$0 -> lgOa
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> YfiK$1$1:
    react.command.CommandReload$1 this$1 -> NhIS
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> rpQc:
    29:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
    54:63:org.bukkit.inventory.ItemStack makeBook() -> ivTr
    68:94:void addSpikePages(react.glang.GList) -> lCee
    98:108:void addStatusPages(react.glang.GList) -> ylOL
    112:129:int findSlot(org.bukkit.entity.Player) -> lCee
react.command.CommandTopChunk -> AGQa:
    25:32:void <init>() -> <init>
    37:58:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.command.CommandVersion -> ieVs:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> JtIb
react.controller.ActionController -> RPsD:
    int kiv -> HDTX
    react.glang.GMap actions -> qLJm
    react.glang.GMap pending -> LYQs
    react.glang.GList tasks -> gNmb
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> JtIb
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> YgCd
    141:141:react.api.IAction getAction(react.api.ActionType) -> JtIb
    146:147:void registerAction(react.api.IAction) -> JtIb
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> BuFw
    241:248:react.glang.GList getActionNames() -> fmKp
    24:24:void <clinit>() -> <clinit>
react.controller.BlockInjectController -> xiRR:
    react.glang.GMap rangeMapping -> oFDl
    react.binject.IBlockInjector injector -> ryaU
    boolean injected -> fnOF
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> rNOH
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> vQjD
    115:115:react.binject.IBlockInjector getInjector() -> pOxI
    120:120:boolean isInjected() -> cJSV
react.controller.ChronophyFluidController -> iuwe:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> srtR:
    boolean firstTickList -> IOhT
    long firstTick -> OHhd
    long lastTick -> qnLt
    react.gmath.Average aCSMS -> BCDo
    react.glang.GMap pluginLoads -> DHib
    react.glang.GMap playerLoads -> MKSn
    int serverLoads -> pkMg
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> YfiK
    63:73:void tickNextTickList() -> rpQc
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> JtIb
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> JtIb
    171:171:boolean isFirstTickList() -> AGQa
    176:176:long getFirstTick() -> ieVs
    181:181:long getLastTick() -> RPsD
    186:186:react.gmath.Average getaCSMS() -> xiRR
    191:191:react.glang.GMap getPluginLoads() -> iuwe
    196:196:react.glang.GMap getPlayerLoads() -> srtR
    201:201:int getServerLoads() -> rNNj
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> JtIb
    21:21:int access$108(react.controller.ChunkController) -> YgCd
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> lCee
react.controller.ChunkController$1 -> srtR$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> XeHf
    react.controller.ChunkController this$0 -> ooyv
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> lCee
    131:131:void run(java.lang.Object) -> JtIb
react.controller.CommandController -> rNNj:
    react.glang.GList commands -> hRTc
    boolean k -> texA
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> IguI
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> qcvI
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> JtIb
    317:317:react.glang.GList getCommands() -> wvoi
    322:323:void setCommands(react.glang.GList) -> xiLM
    327:327:boolean isK() -> AaCs
    332:333:void setK(boolean) -> qcvI
react.controller.EntityCullController -> wvoi:
    react.glang.GSet flags -> YyMT
    react.glang.GSet defer -> lfox
    react.glang.GMap maxs -> VpEE
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> FNPx
    172:180:int cull(org.bukkit.Chunk) -> ylOL
    185:295:int partialCull(org.bukkit.Chunk) -> xiLM
react.controller.EntityStackController -> AaCs:
    react.glang.GList stacks -> Kfrg
    20:22:void <init>() -> <init>
    27:28:void start() -> start
    33:34:void stop() -> stop
    39:54:void tick() -> tick
    59:112:void stack(react.glang.GList) -> GPmP
    116:121:boolean isStacked(org.bukkit.entity.LivingEntity) -> lCee
    126:139:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> ylOL
    145:163:void on(org.bukkit.event.entity.EntityDamageEvent) -> JtIb
    167:182:void merge(react.api.StackedEntity,react.api.StackedEntity) -> JtIb
    186:252:void checkNear(org.bukkit.entity.LivingEntity) -> xiLM
    257:297:void on(org.bukkit.event.entity.EntitySpawnEvent) -> JtIb
react.controller.EntityStackController$1 -> AaCs$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> AjUt
    react.controller.EntityStackController this$0 -> vAjK
    265:265:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    269:294:void run() -> run
react.controller.EventController -> FNPx:
    react.lagmap.LagMap map -> IFyt
    react.glang.GMap slots -> dFGx
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> JtIb
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> JtIb
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> JtIb
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> JtIb
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> JtIb
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> JtIb
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> JtIb
react.controller.ExplosiveController -> bGQH:
    boolean firstTickList -> IOhT
    long firstTick -> OHhd
    long lastTick -> qnLt
    react.gmath.Average aCSMS -> BCDo
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> YfiK
    51:61:void tickNextTickList() -> rpQc
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> YgCd
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> JtIb
    98:98:boolean isFirstTickList() -> AGQa
    103:103:long getFirstTick() -> ieVs
    108:108:long getLastTick() -> RPsD
    113:113:react.gmath.Average getaCSMS() -> xiRR
react.controller.FastDecayController -> jOGg:
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> JtIb
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> JtIb
    74:155:void checkBreak(org.bukkit.block.Block) -> lCee
    159:190:void decay(org.bukkit.block.Block) -> ylOL
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> xiLM
    258:262:void tick() -> tick
react.controller.FastDecayController$1 -> jOGg$1:
    react.glang.GMap val$locs -> ChLG
    react.controller.FastDecayController this$0 -> GIdD
    89:89:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> lCee
    99:99:boolean isAllowedSource(org.bukkit.Location) -> ylOL
    105:124:void clipped(org.bukkit.Location) -> YgCd
    129:152:void finished() -> finished
react.controller.FastDecayController$1$1 -> jOGg$1$1:
    int val$i -> doyX
    react.controller.FastDecayController$1 this$1 -> rNoF
    134:134:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> jOGg$2:
    org.bukkit.block.Block val$b -> nJsL
    react.controller.FastDecayController this$0 -> GIdD
    160:160:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> jOGg$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> scUB
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> oxJC:
    react.feature.INMSBinding trueBinding -> QXCJ
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> bGQH
    85:85:java.lang.String getPackageVersion() -> jOGg
    90:90:boolean hasBinding() -> oxJC
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> JtIb
react.controller.FluidController -> FWBg:
    react.glang.GSet ignore -> YWIL
    int flowsPerTick -> RcVT
    int flowsPerSecond -> LQDH
    react.gmath.Average aFST -> CyNC
    react.gmath.Average aFSS -> xPaD
    react.gmath.Average aFSMS -> EeaM
    boolean firstTickList -> IOhT
    long firstTick -> OHhd
    long lastTick -> qnLt
    react.glang.GSet frozen -> cScu
    react.glang.GMap queue -> rpqX
    react.glang.GMap freezeTimes -> ivxK
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> GPmP
    68:76:void checkChunks() -> FWBg
    80:97:void checkChunk(org.bukkit.Chunk) -> qJde
    101:107:void queue(org.bukkit.block.Block) -> GPmP
    111:111:boolean isFrozen(org.bukkit.Chunk) -> Dqvy
    116:117:void freeze(org.bukkit.Chunk) -> IguI
    121:127:void unfreeze(org.bukkit.Chunk) -> qcvI
    131:138:void freeze(org.bukkit.Chunk,long) -> JtIb
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> YfiK
    172:182:void tickNextTickList() -> rpQc
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> JtIb
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> JtIb
    248:248:react.glang.GSet getIgnore() -> LWra
    253:253:int getTransfersPerTick() -> YgJO
    258:258:int getTransfersPerSecond() -> xrCK
    263:263:react.gmath.Average getaFST() -> KoCX
    268:268:react.gmath.Average getaFSS() -> QgcI
    273:273:react.gmath.Average getaFSMS() -> CMVo
    278:278:boolean isFirstTickList() -> AGQa
    283:283:long getFirstTick() -> ieVs
    288:288:long getLastTick() -> RPsD
    293:293:react.glang.GSet getFrozen() -> uVuk
    298:298:react.glang.GMap getQueue() -> Bths
    303:303:react.glang.GMap getFreezeTimes() -> aCkX
react.controller.GlassController -> LWra:
    react.glang.GMap q -> YyMH
    react.glang.GList g -> GcVn
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> ylOL
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> xiLM
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> GPmP
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> JtIb
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> JtIb
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> JtIb
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> JtIb
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> JtIb
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> JtIb
    33:33:react.glang.GList access$000(react.controller.GlassController) -> JtIb
react.controller.GlassController$1 -> LWra$1:
    react.glang.GMap val$cc -> nSdE
    react.controller.GlassController this$0 -> RJEK
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> LWra$1$1:
    org.bukkit.Location val$i -> uOgY
    org.bukkit.entity.Player val$j -> Rkfe
    react.controller.GlassController$1 this$1 -> Emqg
    107:107:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> YgJO:
    react.glang.GMap g -> HfYx
    react.glang.GMap gr -> qeaa
    react.glang.GMap gra -> CEkG
    41:41:void <init>() -> <init>
    50:83:void start() -> start
    88:94:void stop() -> stop
    99:126:void tick() -> tick
    131:148:void on(org.bukkit.event.player.PlayerJoinEvent) -> JtIb
    152:174:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> JtIb
    178:181:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> JtIb
    185:189:void addTick(org.bukkit.entity.Player,react.glang.GList) -> YgCd
    193:197:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> lCee
    201:202:void addEod(org.bukkit.entity.Player,react.glang.GList) -> ylOL
    206:215:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> xiLM
    219:222:void addReact(org.bukkit.entity.Player,react.glang.GList) -> GPmP
    226:272:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> JtIb
    277:317:void on(org.bukkit.event.player.PlayerMoveEvent) -> JtIb
    323:323:void on(react.event.ReactScrollEvent) -> JtIb
    327:358:void toggleMapping(org.bukkit.entity.Player) -> qJde
    362:394:void toggleMappingEod(org.bukkit.entity.Player) -> Dqvy
    398:398:react.glang.GMap getG() -> VfOi
    403:403:react.glang.GMap getGr() -> CVIs
    41:41:react.glang.GMap access$000(react.controller.GraphController) -> JtIb
    41:41:react.glang.GMap access$100(react.controller.GraphController) -> YgCd
react.controller.GraphController$1 -> YgJO$1:
    react.controller.GraphController this$0 -> TrPX
    64:64:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    68:81:void run() -> run
react.controller.GraphController$2 -> YgJO$2:
    react.controller.GraphController this$0 -> TrPX
    100:100:void <init>(react.controller.GraphController) -> <init>
    104:108:void run() -> run
react.controller.GraphController$3 -> YgJO$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> fwEF
    react.controller.GraphController this$0 -> TrPX
    132:132:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    136:146:void run() -> run
react.controller.HopperController -> xrCK:
    react.glang.GSet ignore -> YWIL
    int transfersPerTick -> bPde
    int transfersPerSecond -> nKWK
    react.gmath.Average aHST -> wwsg
    react.gmath.Average aHSS -> eYmd
    react.gmath.Average aHSMS -> JuSo
    boolean firstTickList -> IOhT
    long firstTick -> OHhd
    long lastTick -> qnLt
    react.glang.GSet frozen -> cScu
    react.glang.GMap queue -> rpqX
    react.glang.GMap freezeTimes -> ivxK
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> GPmP
    65:73:void checkChunks() -> FWBg
    77:94:void checkChunk(org.bukkit.Chunk) -> qJde
    98:104:void queue(org.bukkit.block.Block) -> GPmP
    108:108:boolean isFrozen(org.bukkit.Chunk) -> Dqvy
    113:114:void freeze(org.bukkit.Chunk) -> IguI
    118:124:void unfreeze(org.bukkit.Chunk) -> qcvI
    128:135:void freeze(org.bukkit.Chunk,long) -> JtIb
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> YfiK
    169:179:void tickNextTickList() -> rpQc
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> JtIb
    207:207:react.glang.GSet getIgnore() -> LWra
    212:212:int getTransfersPerTick() -> YgJO
    217:217:int getTransfersPerSecond() -> xrCK
    222:222:react.gmath.Average getaHST() -> myrV
    227:227:react.gmath.Average getaHSS() -> QoqT
    232:232:react.gmath.Average getaHSMS() -> ySCH
    237:237:boolean isFirstTickList() -> AGQa
    242:242:long getFirstTick() -> ieVs
    247:247:long getLastTick() -> RPsD
    252:252:react.glang.GSet getFrozen() -> uVuk
    257:257:react.glang.GMap getQueue() -> Bths
    262:262:react.glang.GMap getFreezeTimes() -> aCkX
react.controller.HopperOvertickController -> KoCX:
    react.glang.GList possiblePlunge -> hsyC
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> lCee
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> JtIb
react.controller.LanguageController -> QgcI:
    java.io.File languageFolder -> GRWp
    int oldVersion -> xrfj
    java.io.File dlf -> iCvs
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> VTmR
    160:221:void downloadAll(boolean) -> UtJE
    225:261:void downloadLanguage(java.lang.String) -> QNKB
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> NMRJ
    315:315:java.io.File getFileForLanguage(java.lang.String) -> iTOF
    320:332:void writeDefaults() -> TFWQ
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> JtIb
    31:31:void access$100(react.controller.LanguageController) -> JtIb
react.controller.LanguageController$1 -> QgcI$1:
    react.controller.LanguageController this$0 -> neJM
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> QgcI$2:
    react.controller.LanguageController this$0 -> neJM
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> QgcI$2$1:
    react.controller.LanguageController$2 this$1 -> FOUW
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> JtIb
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> JtIb
    121:121:void onDownloadStarted(react.gnet.download.Download) -> JtIb
    126:128:void onDownloadFinished(react.gnet.download.Download) -> YgCd
    134:134:void onDownloadFailed(react.gnet.download.Download) -> lCee
react.controller.LanguageController$3 -> QgcI$3:
    react.controller.LanguageController this$0 -> neJM
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> QgcI$3$1:
    react.controller.LanguageController$3 this$1 -> wUpY
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> QgcI$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> xGqd
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> QgcI$4:
    java.io.File val$dld -> uqlp
    react.controller.LanguageController this$0 -> neJM
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> JtIb
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> JtIb
    245:245:void onDownloadStarted(react.gnet.download.Download) -> JtIb
    250:251:void onDownloadFinished(react.gnet.download.Download) -> YgCd
    257:257:void onDownloadFailed(react.gnet.download.Download) -> lCee
react.controller.MonitorController -> CMVo:
    int maxCooldown -> agTh
    react.api.TitleMonitor titleMonitor -> RJGm
    react.glang.GMap posts -> feau
    react.slate.PhantomSlate sb -> ghdU
    boolean ready -> sQtL
    44:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> SeVn
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> IguI
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> qcvI
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> hbSX
    179:184:float calcVolume(react.api.ReactPlayer) -> JtIb
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> UtJE
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> QNKB
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> NMRJ
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> iTOF
    219:223:void startMonitoring(org.bukkit.entity.Player) -> flhH
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> Lhmn
    242:247:void startActionLogging(org.bukkit.entity.Player) -> rfyT
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> xylN
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> YgCd
    279:291:void processPlayer(react.api.ReactPlayer) -> lCee
    296:296:void handleActionLog(org.bukkit.entity.Player) -> Ptyr
    300:324:void handleTriggers(react.api.ReactPlayer) -> ylOL
    328:367:void handleScrolling(react.api.ReactPlayer) -> xiLM
    371:399:void handleShifting(react.api.ReactPlayer) -> GPmP
    403:425:void handlePosting(react.api.ReactPlayer) -> qJde
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> JtIb
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> JtIb
    471:501:void tickMonitor(react.api.ReactPlayer) -> Dqvy
    505:505:react.api.TitleMonitor getTitleMonitor() -> EKMW
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> JtIb
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> JtIb
    539:552:void onTick() -> CEHT
    556:578:void updateActionBoard() -> owgd
    583:583:java.lang.String getTickName() -> fmNI
    35:35:react.slate.PhantomSlate access$002(react.controller.MonitorController,react.slate.PhantomSlate) -> JtIb
    35:35:react.slate.PhantomSlate access$100(react.controller.MonitorController) -> JtIb
    35:35:boolean access$202(react.controller.MonitorController,boolean) -> JtIb
    35:35:boolean access$200(react.controller.MonitorController) -> YgCd
    35:35:react.slate.PhantomSlate access$000(react.controller.MonitorController) -> lCee
    37:37:void <clinit>() -> <clinit>
react.controller.MonitorController$1 -> CMVo$1:
    react.controller.MonitorController this$0 -> ohKi
    69:69:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> CMVo$2:
    react.controller.MonitorController this$0 -> ohKi
    557:557:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> uVuk:
    react.glang.GMap samples -> vSNO
    int redstonePerTick -> EnSr
    int redstonePerSecond -> slGj
    boolean firstTickList -> IOhT
    long firstTick -> OHhd
    long lastTick -> qnLt
    react.gmath.Average aRSMS -> LsHo
    react.gmath.Average aRST -> sASd
    react.gmath.Average aRSS -> JuRv
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> JtIb
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> JtIb
    72:79:void flushTickList() -> YfiK
    83:93:void tickNextTickList() -> rpQc
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> UtJE
    121:122:void onPhysics(org.bukkit.Chunk) -> QNKB
    126:127:void onHopper(org.bukkit.Chunk) -> NMRJ
    131:132:void onFluid(org.bukkit.Chunk) -> iTOF
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> JtIb
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> JtIb
    156:176:void onTick() -> CEHT
    181:181:java.lang.String getTickName() -> fmNI
    186:186:react.glang.GMap getSamples() -> kAGv
    191:191:int getRedstonePerTick() -> LPAt
    196:196:int getRedstonePerSecond() -> Cnyc
    201:201:boolean isFirstTickList() -> AGQa
    206:206:long getFirstTick() -> ieVs
    211:211:long getLastTick() -> RPsD
    216:216:react.gmath.Average getaRSMS() -> UtOO
    221:221:react.gmath.Average getaRST() -> cuFm
    226:226:react.gmath.Average getaRSS() -> AaDl
react.controller.PhysicsController$1 -> uVuk$1:
    react.controller.PhysicsController this$0 -> APgH
    169:169:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> Bths:
    react.glang.GList players -> VpDp
    react.glang.GSet save -> OsaT
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> eHCS
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> JtIb
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> GQMD
    113:113:react.glang.GList getPlayers() -> SeXE
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> JtIb
react.controller.PlayerController$1 -> Bths$1:
    react.glang.GList val$toSave -> xjTn
    react.controller.PlayerController this$0 -> Fygi
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> aCkX:
    react.rai.IRAI rai -> xbDh
    boolean raiEnabled -> TPLn
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    17:17:react.rai.IRAI access$000(react.controller.RAIController) -> JtIb
react.controller.RAIController$1 -> aCkX$1:
    react.controller.RAIController this$0 -> ieyG
    47:47:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> VfOi:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> lCee
react.controller.ReactServerInfo -> CVIs:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> Ahss
    27:27:int dgetGameProtocol() -> baBY
    33:33:java.lang.String dgetGameVersion() -> vAHL
    39:39:java.lang.String dgetReactVersion() -> paYW
    45:45:int dgetMaxPlayers() -> hjbl
    51:58:react.glang.GList dgetConnectedPlayers() -> lvns
    64:64:int dgetViewDistance() -> miRC
    70:70:int dgetGamePort() -> CgJd
    76:76:java.lang.String dgetGameAddress() -> Lytb
    82:89:react.glang.GList dgetRemotePlugins() -> bObb
    95:102:react.glang.GList dgetWorlds() -> KwUL
    108:108:react.glang.GList dgetActions() -> dxMG
    114:114:react.glang.GList dgetSamplers() -> xFou
react.controller.RedstoneController -> myrV:
    react.glang.GSet ignore -> YWIL
    react.glang.GSet frozen -> cScu
    react.glang.GMap queue -> rpqX
    react.glang.GMap freezeTimes -> ivxK
    int redstonePerTick -> EnSr
    int redstonePerSecond -> slGj
    react.gmath.Average aRST -> sASd
    react.gmath.Average aRSS -> JuRv
    react.gmath.Average aRSMS -> LsHo
    boolean firstTickList -> IOhT
    long firstTick -> OHhd
    long lastTick -> qnLt
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> GPmP
    95:101:void tick() -> tick
    105:113:void checkChunks() -> FWBg
    117:134:void checkChunk(org.bukkit.Chunk) -> qJde
    138:144:void queue(org.bukkit.block.Block) -> GPmP
    148:148:boolean isFrozen(org.bukkit.Chunk) -> Dqvy
    153:154:void freeze(org.bukkit.Chunk) -> IguI
    158:165:void flushTickList() -> YfiK
    169:179:void tickNextTickList() -> rpQc
    183:189:void unfreeze(org.bukkit.Chunk) -> qcvI
    193:200:void freeze(org.bukkit.Chunk,long) -> JtIb
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> JtIb
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> JtIb
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> JtIb
    246:246:react.glang.GSet getIgnore() -> LWra
    251:251:react.glang.GSet getFrozen() -> uVuk
    256:256:react.glang.GMap getQueue() -> Bths
    261:261:react.glang.GMap getFreezeTimes() -> aCkX
    266:266:int getRedstonePerTick() -> LPAt
    271:271:int getRedstonePerSecond() -> Cnyc
    276:276:react.gmath.Average getaRST() -> cuFm
    281:281:react.gmath.Average getaRSS() -> AaDl
    286:286:react.gmath.Average getaRSMS() -> UtOO
    291:291:boolean isFirstTickList() -> AGQa
    296:296:long getFirstTick() -> ieVs
    301:301:long getLastTick() -> RPsD
react.controller.RemoteController -> QoqT:
    react.remote.server.RemoteServer remoteServer -> dFHy
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> owjy
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> JtIb
react.controller.RemoteController$1 -> QoqT$1:
    react.controller.RemoteController this$0 -> cujI
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> QoqT$2:
    react.controller.RemoteController this$0 -> cujI
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> WrFw
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> XAdi
react.controller.SampleController -> ySCH:
    react.glang.GMap samplers -> qvdt
    react.surge.server.SuperSampler ss -> nCIG
    int cd -> Fhhi
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> yJTb
    69:74:void restartSuperSampler() -> Elqp
    78:79:void registerSampler(react.api.ISampler) -> lCee
    83:83:react.api.ISampler getSampler(java.lang.String) -> flhH
    88:131:void constructSamplers() -> rMpT
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> LXUQ
    187:209:void onTick() -> CEHT
    214:214:java.lang.String getTickName() -> fmNI
    219:219:react.glang.GMap getSamplers() -> sauE
    224:224:react.surge.server.SuperSampler getSs() -> KfSw
    229:229:int getCd() -> JRMg
    234:241:react.glang.GList getSamplerNames() -> FpTm
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> JtIb
react.controller.SampleController$1 -> ySCH$1:
    react.controller.SampleController this$0 -> BvOV
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> ySCH$2:
    react.controller.SampleController this$0 -> BvOV
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> VTmR:
    java.lang.String ipa -> WbIl
    react.glang.GList failures -> ceKn
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> Lhmn
    41:74:void checkForIP() -> miTH
    78:91:void scan(java.lang.Runnable) -> JtIb
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> VTmR$1:
    react.controller.SecurityController this$0 -> WrjT
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> VTmR$2:
    java.lang.String val$ip -> lNEB
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> VTmR$3:
    java.lang.Thread val$t -> mahR
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> TFWQ:
    react.glang.GMap etl -> dxoy
    react.glang.GMap ttl -> OIPl
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> JtIb
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> JtIb
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> QNKB
    143:160:void releaseWorld(org.bukkit.World) -> NMRJ
    164:181:double getUniversalEntityTick() -> xWqF
    186:203:double getUniversalEntityLimit() -> QhDO
    208:225:double getUniversalTileLimit() -> Elpm
    230:247:double getUniversalTileTick() -> oDef
    252:264:double getUniversalEntityDroppedTicks() -> YxLO
    269:281:double getUniversalTileDroppedTicks() -> tLEf
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> JtIb
    301:312:void setTileTickLimit(org.bukkit.World,double) -> YgCd
    316:321:double getEntityTickLimit(org.bukkit.World) -> iTOF
    326:331:double getTileTickLimit(org.bukkit.World) -> flhH
    336:341:double getLastEntityTick(org.bukkit.World) -> Lhmn
    346:351:double getLastTileTick(org.bukkit.World) -> rfyT
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> xylN
    366:371:double getTileDroppedTicks(org.bukkit.World) -> Ptyr
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> JtIb
react.controller.SpikeController -> SeVn:
    react.glang.GMap spikes -> SoOg
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> CEHT
    111:111:java.lang.String getTickName() -> fmNI
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> XkwH
    128:160:void whoFuckingDidThis(react.glang.Callback) -> JtIb
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> JtIb
react.controller.SpikeController$1 -> SeVn$1:
    react.controller.SpikeController this$0 -> Eeey
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> SeVn$1$1:
    react.controller.SpikeController$1 this$1 -> rOSw
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> SeVn$2:
    react.glang.GMap val$vv -> klbh
    react.controller.SpikeController this$0 -> Eeey
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> SeVn$3:
    java.lang.Thread val$t -> mahR
    react.glang.Callback val$callback -> WXxU
    react.controller.SpikeController this$0 -> Eeey
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> hbSX:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> EKMW:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> JtIb
react.event.ReactEvent -> CEHT:
    org.bukkit.event.HandlerList handlers -> lxVo
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> owgd:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> fmNI:
    react.event.ScrollDirection direction -> vtsB
    boolean cancellled -> rhex
    int amount -> LbHv
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> nBCQ
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> hIBg
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> kAGv:
    react.event.ScrollDirection DOWN -> QFdS
    react.event.ScrollDirection UP -> WHVN
    react.event.ScrollDirection[] $VALUES -> UAoF
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> LPAt:
    java.lang.String getPackageVersion() -> jOGg
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> JtIb
react.feature.NMSBinding -> Cnyc:
    java.lang.String packageVersion -> DtCw
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> jOGg
react.feature.NMSBinding10 -> UtOO:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> JtIb
react.feature.NMSBinding11 -> cuFm:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> JtIb
react.feature.NMSBinding12 -> AaDl:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> JtIb
react.feature.NMSBinding8 -> SeXE:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> JtIb
react.feature.NMSBinding9 -> Ahss:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> JtIb
react.gbench.Profiler -> baBY:
    long nanos -> XJwt
    long startNano -> Osba
    long millis -> EKrT
    long startMillis -> inla
    double time -> QNuC
    boolean profiling -> yeIf
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> Lhmn
    78:78:double getTicks() -> hsUs
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> Oiml
    93:93:double getHours() -> cuHh
    98:98:double getMilliseconds() -> MkxS
    103:103:long getNanoseconds() -> CEIh
    108:108:long getNanos() -> eHLv
    113:113:long getStartNano() -> UlCX
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> kAMl
    128:128:double getTime() -> VfUR
    133:133:boolean isProfiling() -> qlrJ
react.gconcurrent.A -> vAHL:
    react.gconcurrent.ParallelPoolManager mgr -> RRYK
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> vAHL$1:
    react.gconcurrent.A this$0 -> RlKc
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> paYW:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> hjbl:
    react.gconcurrent.QueueMode mode -> PUDR
    react.glang.GList threads -> Xuln
    int next -> UuTe
    int threadCount -> xHTP
    java.util.Queue squeue -> URpo
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> bQFm
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> cShi
    22:23:void syncQueue(react.gconcurrent.Execution) -> JtIb
    long getNanoGate() -> tdxx
    29:42:void tickSyncQueue() -> MBGu
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> dLyW
    93:100:int getTotalQueueSize() -> nBFj
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> YgCd
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> VetH
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> hIFd
    152:179:void updateThreadInformation() -> cdJh
    183:215:react.gconcurrent.ParallelThread nextThread() -> DirC
    220:226:void createThreads(int) -> rfyT
    230:230:react.gconcurrent.QueueMode getMode() -> ogLc
    235:235:int getNext() -> BJWs
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> sYfJ
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> rouB
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> hYfH
react.gconcurrent.ParallelThread -> lvns:
    java.util.Queue queue -> SoNj
    react.gconcurrent.ThreadInformation info -> bQFm
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> qcvI
    68:75:void execute(react.gconcurrent.Execution) -> lCee
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> YgCd
    97:97:java.util.Queue getQueue() -> RIEp
    102:102:react.gconcurrent.ThreadInformation getInfo() -> hHcw
react.gconcurrent.QueueMode -> miRC:
    react.gconcurrent.QueueMode ROUND_ROBIN -> qDDG
    react.gconcurrent.QueueMode SMALLEST -> riJJ
    react.gconcurrent.QueueMode[] ENUM$VALUES -> HfaC
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> CgJd:
    react.gconcurrent.ParallelPoolManager mgr -> RRYK
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> CgJd$1:
    react.gconcurrent.S this$0 -> Cxsa
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> Lytb:
    long tick -> mXxa
    long atick -> Gkmr
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> bObb:
    double ticksPerSecond -> EfIQ
    int queuedSize -> NFPF
    boolean processing -> PmxD
    double utilization -> Cpcg
    react.gmath.Average ticksPerSecondAverage -> jqqj
    long tick -> mXxa
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> ntiX
    33:35:void setTicksPerSecond(double) -> UtJE
    39:39:int getQueuedSize() -> wCoB
    44:45:void setQueuedSize(int) -> xylN
    49:49:boolean isProcessing() -> NLyc
    54:55:void setProcessing(boolean) -> QNKB
    59:59:double getUtilization() -> aDOo
    64:65:void setUtilization(double) -> QNKB
    69:69:double getTicksPerSecondAverage() -> XAfU
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> KLaw
    89:89:int getId() -> getId
react.gformat.F -> KwUL:
    java.text.NumberFormat NF -> hQxs
    java.text.DecimalFormat DF -> Yxrp
    java.lang.String[] NAMES -> cCLE
    java.math.BigInteger THOUSAND -> QNwk
    java.util.NavigableMap MAP -> qTcl
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> rfyT
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> JtIb
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> JtIb
    201:221:java.lang.String timeLong(long,int) -> JtIb
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> lCee
    236:236:java.lang.String b(double) -> NMRJ
    241:258:java.lang.String b(java.math.BigInteger) -> JtIb
    263:267:void instantiate() -> leqc
    279:279:java.lang.String fileSize(long) -> ylOL
    292:292:java.lang.String memSize(long) -> xiLM
    297:297:java.lang.String memSize(long,int) -> YgCd
    310:311:java.lang.String stamp(long) -> GPmP
    327:361:java.lang.String ofSize(long,int) -> lCee
    367:394:java.lang.String ofSize(long,int,int) -> JtIb
    408:413:java.lang.String trim(java.lang.String,int) -> YgCd
    426:446:java.lang.String cname(java.lang.String) -> xylN
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> qJde
    504:522:java.lang.String memx(long) -> Dqvy
    536:537:java.lang.String f(long) -> IguI
    549:550:java.lang.String f(int) -> Ptyr
    564:573:java.lang.String f(double,int) -> YgCd
    589:598:java.lang.String fd(double,int) -> lCee
    612:621:java.lang.String f(float,int) -> JtIb
    632:632:java.lang.String f(double) -> iTOF
    643:643:java.lang.String f(float) -> JtIb
    658:658:java.lang.String pc(double,int) -> ylOL
    673:673:java.lang.String pc(float,int) -> YgCd
    686:686:java.lang.String pc(double) -> flhH
    699:699:java.lang.String pc(float) -> YgCd
    715:715:java.lang.String pc(int,int,int) -> JtIb
    729:729:java.lang.String pc(int,int) -> lCee
    745:745:java.lang.String pc(long,long,int) -> JtIb
    759:759:java.lang.String pc(long,long) -> ylOL
    771:771:java.lang.String msSeconds(long) -> qcvI
    785:785:java.lang.String msSeconds(long,int) -> ylOL
    797:797:java.lang.String nsMs(long) -> UtJE
    811:811:java.lang.String nsMs(long,int) -> xiLM
    825:825:java.lang.String nsMsd(long,int) -> GPmP
react.glang.AccessCallback -> dxMG:
    java.lang.Object get() -> get
react.glang.Adapter -> xFou:
    java.lang.Object adapt(java.lang.Object) -> GPmP
    java.lang.Object onAdapt(java.lang.Object) -> qJde
react.glang.Callback -> owjy:
    java.lang.Object t -> qvgO
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> JtIb
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> WrFw:
    double i -> dpai
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> Lhmn
react.glang.FinalFloat -> XAdi:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> lCee
react.glang.FinalInteger -> yJTb:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> eHCS
react.glang.FinalLong -> Elqp:
    long i -> Rkmq
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> QNKB
react.glang.FinalString -> rMpT:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> LXUQ:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> GPmP
    java.lang.Object onAdapt(java.lang.Object) -> qJde
react.glang.GBiset -> sauE:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> aUvR
    java.lang.Object b -> kcsK
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> rose
    53:54:void setA(java.lang.Object) -> Dqvy
    63:63:java.lang.Object getB() -> aLaF
    73:74:void setB(java.lang.Object) -> IguI
react.glang.GList -> KfSw:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> ylOL
    45:52:react.glang.GList grepDistance(int,int) -> xiLM
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> YgCd
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> MdJn
    188:190:react.glang.GList shuffleCopy() -> hbYp
    198:199:void shuffle() -> tnMh
    210:236:react.glang.GList split() -> YgPP
    248:248:boolean hasIndex(int) -> GQMD
    258:259:java.lang.Object pickRandom() -> wfTx
    270:277:react.glang.GList stringList() -> GHhk
    288:292:void forEach(react.glang.Callback) -> YgCd
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> AGME
    336:336:react.glang.GList cropFrom(int) -> Kmxy
    341:373:react.glang.GList split(int) -> iuot
    389:389:react.glang.GList cropTo(int) -> JtIA
    406:416:react.glang.GList crop(int,int) -> GPmP
    427:431:react.glang.GList removeDuplicates() -> DjSt
    442:446:void removeAll(java.lang.Object) -> qcvI
    455:455:boolean hasDuplicates() -> oUmB
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> wUTT
    484:490:void push(java.lang.Object,int) -> JtIb
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> UtJE
    528:532:void add(java.util.List) -> JtIb
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> CxSI
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> Gjkw
    626:627:react.glang.GList qdel(java.lang.Object) -> QNKB
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> dEMH
    662:669:java.lang.Object popLast() -> kkcI
    674:683:java.lang.Object popRandom() -> IOQA
react.glang.GListAdapter -> JRMg:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> YgCd
    java.lang.Object onAdapt(java.lang.Object) -> qJde
react.glang.GMap -> FpTm:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> SKke
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> JtIb
    64:81:react.glang.GMap flip() -> iLJm
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> JtIb
    121:121:react.glang.GList k() -> GQMD
    131:131:react.glang.GSet kset() -> PKSt
    141:141:react.glang.GList v() -> BdMP
    151:151:react.glang.GSet vset() -> GjmG
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> YgCd
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> qJde
    209:219:react.glang.GMap removeDuplicateValues() -> PCCh
    233:242:void put(react.glang.GList,react.glang.GList) -> JtIb
    251:267:react.glang.GList sortK() -> mWuw
    277:293:react.glang.GList sortV() -> erbC
react.glang.GQuadraset -> miTH:
    java.lang.Object a -> aUvR
    java.lang.Object b -> kcsK
    java.lang.Object c -> logU
    java.lang.Object d -> MeMw
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> rose
    25:26:void setA(java.lang.Object) -> Dqvy
    30:30:java.lang.Object getB() -> aLaF
    35:36:void setB(java.lang.Object) -> IguI
    40:40:java.lang.Object getC() -> PCAu
    45:46:void setC(java.lang.Object) -> NMRJ
    50:50:java.lang.Object getD() -> UkcX
    55:56:void setD(java.lang.Object) -> iTOF
react.glang.GSet -> xWqF:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> QhDO:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> aUvR
    java.lang.Object b -> kcsK
    java.lang.Object c -> logU
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> rose
    26:27:void setA(java.lang.Object) -> Dqvy
    31:31:java.lang.Object getB() -> aLaF
    36:37:void setB(java.lang.Object) -> IguI
    41:41:java.lang.Object getC() -> PCAu
    46:47:void setC(java.lang.Object) -> NMRJ
react.gmath.Average -> Elpm:
    double[] values -> HLmQ
    double average -> YEmC
    boolean dirty -> ktti
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> rfyT
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> aoGA
react.gmath.DoubleArrayUtils -> oDef:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> JtIb
    17:19:void wrapRight(double[]) -> JtIb
    23:27:void fill(double[],double) -> fill
react.gmath.M -> YxLO:
    int precision -> JRsW
    int modulus -> PnWb
    float[] sin -> Snok
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> JtIb
    31:36:boolean r(java.lang.Double) -> YgCd
    51:51:double tps(long,int) -> qJde
    63:63:double ticksFromNS(long) -> NMRJ
    75:101:java.lang.String toRoman(int) -> yIiu
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> qJde
    144:216:int fromRoman(java.lang.String) -> Ptyr
    226:226:long ns() -> TONT
    236:236:long ms() -> OaaQ
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> YgCd
    333:333:float sinLookup(int) -> lUGT
react.gnet.client.Client -> tLEf:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> hIgg
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> JtIb
    74:74:react.gnet.packet.PacketHandler getHandler() -> skIp
react.gnet.client.IClient -> XkwH:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> JtIb
    react.gnet.packet.PacketHandler getHandler() -> skIp
react.gnet.download.Download -> nBCQ:
    react.gnet.download.DownloadState state -> wERj
    react.gnet.download.DownloadType type -> lMcc
    react.gnet.download.DownloadStatus status -> jjAc
    react.gnet.download.DownloadMonitor monitor -> ohNv
    java.net.URL url -> url
    java.io.File file -> LGwq
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> bPFY
    92:92:react.gnet.download.DownloadType getType() -> rMsQ
    97:97:react.gnet.download.DownloadStatus getStatus() -> NpAJ
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> gyIV
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> hIBg:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> JtIb
    void onDownloadStarted(react.gnet.download.Download) -> JtIb
    void onDownloadFinished(react.gnet.download.Download) -> YgCd
    void onDownloadFailed(react.gnet.download.Download) -> lCee
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> JtIb
react.gnet.download.DownloadState -> hsUs:
    react.gnet.download.DownloadState IDLE -> bHWl
    react.gnet.download.DownloadState DOWNLOADING -> IXbN
    react.gnet.download.DownloadState FAILED -> mHVd
    react.gnet.download.DownloadState FINISHED -> QOXT
    react.gnet.download.DownloadState[] ENUM$VALUES -> dxqO
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> Oiml:
    long bytesDownloaded -> EwIu
    long bytesTotal -> RlOy
    long bytesPerSecond -> eACR
    long timeElapsed -> qTes
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> qeCj
    25:25:long getBytesDownloaded() -> TpqL
    30:31:void setBytesDownloaded(long) -> iTOF
    35:35:long getBytesTotal() -> jqOk
    40:41:void setBytesTotal(long) -> flhH
    45:45:long getBytesPerSecond() -> Ussr
    50:51:void setBytesPerSecond(long) -> Lhmn
    55:55:long getTimeElapsed() -> maGX
    60:61:void setTimeElapsed(long) -> rfyT
react.gnet.download.DownloadType -> cuHh:
    react.gnet.download.DownloadType DETERMINATE -> sIkG
    react.gnet.download.DownloadType INDETERMINATE -> OHsf
    react.gnet.download.DownloadType[] ENUM$VALUES -> FyoG
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> MkxS:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> ogLv
    java.lang.String getPacketName() -> govV
react.gnet.packet.IncompatablePacketException -> CEIh:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> eHLv:
    react.gnet.packet.PacketBinding SERVER_BOUND -> aDvY
    react.gnet.packet.PacketBinding CLIENT_BOUND -> ghki
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> etGt
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> UlCX:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> kAMl:
    react.glang.GList accept -> QhmK
    react.gnet.packet.PacketBinding side -> fKvK
    react.gnet.streams.OSS out -> QXLc
    react.gnet.streams.ISS in -> CWRd
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> JtIb
    28:34:void accept(react.gnet.packet.IPacket) -> YgCd
    38:46:react.gnet.packet.IPacket findPacket(int) -> CLrB
    51:66:react.gnet.packet.IPacket read() -> KfWW
    71:77:void write(react.gnet.packet.IPacket) -> lCee
react.gnet.packet.UnhandledPacketException -> VfUR:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> qlrJ:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> skIp
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> ylOL
react.gnet.server.Server -> tdxx:
    int port -> port
    java.net.ServerSocket socket -> urTd
    react.gnet.packet.PacketHandler handler -> hIgg
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> skIp
    37:84:void run() -> run
    88:91:void pstart() -> sPue
    95:96:void pstop() -> xqgO
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> ylOL
react.gnet.streams.ISS -> MBGu:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> OtGf
    boolean built -> VDvT
    byte[] readBuffer -> KNHk
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> oLnN
    64:72:react.glang.GList readStringList() -> iBxH
    77:85:react.glang.GList readDoubleList() -> aMCm
    90:98:react.glang.GList readLongList() -> oDlg
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> JtIb
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> JtIb
    136:137:react.gnet.streams.ISS gzip() -> sYis
    142:147:void build() -> Jbub
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> YgCd
    435:436:void close() -> close
react.gnet.streams.OSS -> dLyW:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> jOqC
    react.gnet.streams.StreamBuilder bu -> OtGf
    boolean built -> VDvT
    byte[] writeBuffer -> MCLy
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> TyUh
    41:42:react.gnet.streams.OSS gzip(int) -> RroE
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> YgCd
    53:58:void build() -> Jbub
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> Dqvy
    102:108:void writeDoubleList(react.glang.GList) -> IguI
    112:118:void writeLongList(react.glang.GList) -> qcvI
    122:128:void writeStreamableList(react.glang.GList) -> UtJE
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> mFvq
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> lCee
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> nBFj:
    react.glang.GList constructors -> xXyI
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> JtIb
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> JtIb
    49:50:void bind(react.gnet.streams.StreamConstructor) -> JtIb
    54:55:void bindGZIP(int) -> NMQH
    59:60:void bindGZIP() -> KTwW
    64:65:void bindCipher(javax.crypto.Cipher) -> lCee
    69:70:void bindBuffer(int) -> VDFw
    74:75:void bindBuffer() -> cIyw
react.gnet.streams.StreamConstructor -> VetH:
    java.io.InputStream constructInput(java.io.InputStream) -> JtIb
    java.io.OutputStream constructOutput(java.io.OutputStream) -> JtIb
react.gnet.streams.constructors.BufferedStreamConstructor -> hIFd:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> YgCd
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> YgCd
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> JtIb
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> JtIb
react.gnet.streams.constructors.CipherStreamConstructor -> cdJh:
    javax.crypto.Cipher cipher -> Wakb
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> lCee
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> lCee
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> JtIb
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> JtIb
react.gnet.streams.constructors.GZipStreamConstructor -> DirC:
    int compressionLevel -> KNIQ
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> ylOL
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> ylOL
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> JtIb
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> JtIb
react.gnet.streams.overlays.CGZIPInputStream -> ogLc:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> BJWs:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> sYfJ:
    void toBytes(react.gnet.streams.OSS) -> JtIb
    void fromBytes(react.gnet.streams.ISS) -> JtIb
react.graph.ColossalView -> rouB:
    react.papyrus.BufferedFrame view -> SxCl
    react.glang.GMap buffers -> TYCl
    react.glang.GMap graphs -> ySlC
    double level -> YxsT
    double targetLevel -> KUxW
    int maxX -> NOBP
    int maxY -> SnrB
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> uhak
    51:77:void render() -> oDlu
    81:98:void scroll(int) -> yIiY
    102:112:void recompile() -> YVOv
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> JtIb
    122:122:react.papyrus.BufferedFrame getView() -> IhdT
    127:127:react.glang.GMap getBuffers() -> mWxT
    132:132:react.glang.GMap getGraphs() -> jhag
    137:137:double getLevel() -> Btoc
    142:142:double getTargetLevel() -> oVOV
    147:147:int getMaxX() -> AGXr
    152:152:int getMaxY() -> sYim
react.graph.ColossalView$Builder -> rouB$JtIb:
    react.glang.GList graphs -> Tqta
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> JtIb
    171:191:react.graph.ColossalView compute() -> HKni
react.graph.CubicleIterator -> hYfH:
    int[][] mapping -> CODJ
    int xCubes -> AsPp
    int yCubes -> wfwM
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> jVol
    47:130:void insert(react.graph.GraphSize,int) -> JtIb
    134:145:void print() -> print
react.graph.Graph2D -> RIEp:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> JtIb
react.graph.GraphCPUArc -> hHcw:
    byte fontColor -> IHBy
    byte backgroundColor -> lgYD
    double pct -> dOAL
    react.gmath.Average aax -> IrWH
    react.gmath.Average aay -> TPSS
    react.gmath.Average aaz -> BTQC
    long msx -> FWju
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> Ixwr
    52:90:void onRender(react.papyrus.BufferedFrame) -> JtIb
    94:94:byte getFontColor() -> Foyq
    99:100:void setFontColor(byte) -> JtIb
    104:104:byte getBackgroundColor() -> qufV
    109:110:void setBackgroundColor(byte) -> YgCd
react.graph.GraphLagMap -> ntiX:
    int grid -> ekUa
    org.bukkit.entity.Player viewer -> IrYR
    org.bukkit.util.Vector lastVector -> OkYb
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> BlaQ
    49:55:void zoomOut() -> NfpX
    60:164:void onRender(react.papyrus.BufferedFrame) -> JtIb
react.graph.GraphLagMap$1 -> ntiX$1:
    int[] $SwitchMap$react$api$ChunkIssue -> sYvb
    107:107:void <clinit>() -> <clinit>
react.graph.GraphMemoryArc -> wCoB:
    byte fontColor -> IHBy
    byte backgroundColor -> lgYD
    double pct -> dOAL
    react.gmath.Average aax -> IrWH
    long msx -> FWju
    long of -> VDxr
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> Ixwr
    52:79:void onRender(react.papyrus.BufferedFrame) -> JtIb
    83:83:byte getFontColor() -> Foyq
    88:89:void setFontColor(byte) -> JtIb
    93:93:byte getBackgroundColor() -> qufV
    98:99:void setBackgroundColor(byte) -> YgCd
react.graph.GraphMode -> NLyc:
    react.graph.GraphMode NORMAL -> ioTa
    react.graph.GraphMode ITEMFRAME -> eQed
    react.graph.GraphMode EOD -> xroE
    react.graph.GraphMode[] $VALUES -> tMQU
    3:3:react.graph.GraphMode[] values() -> values
    3:3:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSampleLine -> aDOo:
    double lx -> ySne
    double ly -> aDwu
    react.api.ISampler sampler -> CyYO
    react.graph.IFormatter formatter -> MTQt
    byte graphColor -> UBVq
    byte backgroundColor -> lgYD
    byte borderColor -> lokj
    byte textColor -> Rkql
    int ticksLeftTitle -> MeTS
    int ticksOutTitle -> Nxwj
    double nextPoint -> XvTg
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> Ixwr
    51:183:void onRender(react.papyrus.BufferedFrame) -> JtIb
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> YgCd
    226:254:int getHue(int,int,int) -> lCee
    259:281:void scaleFor(react.glang.GList) -> QNKB
    285:285:react.graph.IFormatter getFormatter() -> XtcS
    290:291:void setFormatter(react.graph.IFormatter) -> JtIb
    295:295:byte getGraphColor() -> uNmp
    300:301:void setGraphColor(byte) -> lCee
    305:305:byte getBackgroundColor() -> qufV
    310:311:void setBackgroundColor(byte) -> YgCd
    315:315:byte getBorderColor() -> Dred
    320:321:void setBorderColor(byte) -> ylOL
    325:325:byte getTextColor() -> AFye
    330:331:void setTextColor(byte) -> xiLM
    335:335:react.api.ISampler getSampler() -> NobV
react.graph.GraphSize -> XAfU:
    react.graph.GraphSize WIDE -> aNKS
    react.graph.GraphSize FULL -> kcwi
    react.graph.GraphSize SQUARE -> mrns
    react.graph.GraphSize[] $VALUES -> tMQA
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> rxhf
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> XAfU$1:
    int[] $SwitchMap$react$graph$GraphSize -> UmKi
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> KLaw:
    java.lang.String text -> text
    byte fontColor -> IHBy
    byte backgroundColor -> lgYD
    boolean wrote -> jjGV
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> JtIb
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> Foyq
    68:69:void setFontColor(byte) -> JtIb
    73:73:byte getBackgroundColor() -> qufV
    78:79:void setBackgroundColor(byte) -> YgCd
react.graph.GraphingInstance -> leqc:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> Tqta
    react.graph.ColossalView view -> oEpM
    react.papyrus.Papyrus papyrus -> XeRM
    react.papyrus.IRenderer renderer -> DcIM
    boolean mapping -> aDbd
    react.glang.GList msgs -> HxFW
    react.surge.sched.Task waiter -> kdXU
    react.surge.sched.Task waiter2 -> EekO
    int shift -> DkYW
    int iv -> SweB
    boolean notif -> TqwI
    boolean doScrolling -> OIUg
    50:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> UsvS
    127:128:void setDoScrolling(boolean) -> NMRJ
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> JtIb
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> JtIb
    151:155:void send(java.lang.String) -> eHCS
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> JtIb
    166:205:void on(react.event.ReactScrollEvent) -> JtIb
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> JtIb
    219:227:void destroy() -> destroy
    231:240:void toggle() -> oUmN
    244:245:void setGraphs(react.glang.GList) -> NMRJ
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> UJDN
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> CpCq
    298:298:react.graph.ColossalView getView() -> nuMt
    303:303:react.papyrus.Papyrus getPapyrus() -> dpAf
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> JtIb
    323:324:void setPapyrus(react.papyrus.Papyrus) -> JtIb
    328:329:void setRenderer(react.papyrus.IRenderer) -> JtIb
    333:334:void setMapping(boolean) -> lCee
    338:339:void setMsgs(react.glang.GList) -> iTOF
    343:344:void setWaiter(react.surge.sched.Task) -> JtIb
    348:349:void setWaiter2(react.surge.sched.Task) -> YgCd
    353:354:void setShift(int) -> yJIx
    358:359:void setNotif(boolean) -> iTOF
    363:363:react.papyrus.IRenderer getRenderer() -> XAll
    368:368:boolean isMapping() -> gMjR
    373:373:react.glang.GList getMsgs() -> BAmk
    378:378:react.surge.sched.Task getWaiter() -> dpDc
    383:383:react.surge.sched.Task getWaiter2() -> nBLo
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> CxVh
    398:414:void compile() -> rxlb
    418:433:void enableSly() -> qBdp
    437:445:void disableSly() -> dEPV
    32:32:boolean access$000(react.graph.GraphingInstance) -> JtIb
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> YgCd
    32:32:boolean access$200(react.graph.GraphingInstance) -> lCee
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> JtIb
    32:32:int access$300(react.graph.GraphingInstance) -> ylOL
    32:32:int access$310(react.graph.GraphingInstance) -> xiLM
    32:32:int access$302(react.graph.GraphingInstance,int) -> JtIb
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> GPmP
react.graph.GraphingInstance$1 -> leqc$1:
    org.bukkit.entity.Player val$player -> AkBm
    react.graph.GraphingInstance this$0 -> vRuU
    55:55:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> leqc$2:
    react.graph.GraphingInstance this$0 -> vRuU
    80:80:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> leqc$3:
    react.graph.GraphingInstance this$0 -> vRuU
    110:110:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> JtIb
react.graph.IFormatter -> rose:
    java.lang.String from(double) -> xylN
react.graph.IGraph -> aLaF:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> jFab
    long getTimeViewport() -> rgkN
    void render(react.papyrus.BufferedFrame) -> lCee
    double getMax() -> getMax
    void setMax(double) -> Ptyr
react.graph.NormalGraph -> MdJn:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> SUal
    long timeViewport -> ujFI
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> jFab
    35:35:long getTimeViewport() -> rgkN
    41:42:void render(react.papyrus.BufferedFrame) -> lCee
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> Ptyr
    void onRender(react.papyrus.BufferedFrame) -> JtIb
react.graph.PlotBoard -> hbYp:
    react.glang.GMap plots -> wUwr
    int maxRecordings -> fmxq
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> DsJI
    33:33:long getAccurateTimeSpan() -> VTxa
    38:50:long getMedian(long,long) -> xiLM
    55:55:long getMinimumAccuracyRange() -> ECHY
    60:70:double getMaxValue() -> BSPM
    75:85:double getMinValue() -> DXvS
    90:90:react.glang.GList sort(react.glang.GMap) -> YgCd
    95:105:long earilestRecording() -> XSPO
    110:120:long latestRecording() -> OGsl
    125:126:void reduceBefore(long) -> xylN
    130:156:void reduceBetween(long,long) -> GPmP
    160:160:boolean before(long,long) -> qJde
    165:165:boolean after(long,long) -> Dqvy
    170:170:boolean within(long,long,long) -> JtIb
    175:193:react.glang.GMap getBetween(long,long) -> IguI
    198:200:void plot(long,double) -> JtIb
    204:204:boolean hasAt(long) -> Ptyr
    209:209:double getAt(long) -> eHCS
    214:214:int getSize() -> getSize
react.graph.Point -> tnMh:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> YgPP:
    int iid -> hkoM
    react.graph.IGraph graph -> rGIY
    react.graph.GraphSize size -> cmas
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> NgUO
    24:25:void setGraph(react.graph.IGraph) -> JtIb
    29:29:react.graph.GraphSize getSize() -> kQtT
    34:35:void setSize(react.graph.GraphSize) -> JtIb
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> wfTx:
    react.graph.RenderMaxType UNLIMITED -> Snsj
    react.graph.RenderMaxType LIMITED -> fmyX
    react.graph.RenderMaxType[] $VALUES -> OIUm
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> GHhk:
    java.lang.String CRLF -> URvi
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> GQMD
    162:198:java.lang.String toString(react.json.JSONObject) -> YgCd
react.json.HTTPTokener -> DjSt:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> oUmB:
    java.util.ArrayList myArrayList -> gGKB
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> JtIb
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> Etyg
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> qKDS
    394:399:react.json.JSONObject getJSONObject(int) -> STOg
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> AGME
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> KTkE
    515:515:boolean optBoolean(int) -> qtyj
    533:536:boolean optBoolean(int,boolean) -> YgCd
    551:551:double optDouble(int) -> jErG
    569:572:double optDouble(int,double) -> JtIb
    587:587:int optInt(int) -> UAGA
    605:608:int optInt(int,int) -> Dqvy
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> YgCd
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> JtIb
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> JtIb
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> JtIb
    722:723:react.json.JSONArray optJSONArray(int) -> OXfa
    737:738:react.json.JSONObject optJSONObject(int) -> KfLr
    752:752:long optLong(int) -> pPTk
    770:773:long optLong(int,long) -> JtIb
    788:788:java.lang.String optString(int) -> XtcS
    803:804:java.lang.String optString(int,java.lang.String) -> JtIb
    816:817:react.json.JSONArray put(boolean) -> flhH
    830:831:react.json.JSONArray put(java.util.Collection) -> JtIb
    845:848:react.json.JSONArray put(double) -> eHCS
    860:861:react.json.JSONArray put(int) -> Bcay
    873:874:react.json.JSONArray put(long) -> GQMD
    887:888:react.json.JSONArray put(java.util.Map) -> JtIb
    902:903:react.json.JSONArray put(java.lang.Object) -> flhH
    921:922:react.json.JSONArray put(int,boolean) -> lCee
    939:940:react.json.JSONArray put(int,java.util.Collection) -> JtIb
    958:959:react.json.JSONArray put(int,double) -> YgCd
    977:978:react.json.JSONArray put(int,int) -> IguI
    996:997:react.json.JSONArray put(int,long) -> YgCd
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> JtIb
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> JtIb
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> Lhmn
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> JtIb
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> JtIb
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> JtIb
react.json.JSONException -> wUTT:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> nuqU
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> CxSI:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> JtIb
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> Kmxy
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> JtIb
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> YgCd
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> GQMD
    379:456:java.lang.String toString(react.json.JSONArray) -> YgCd
    472:552:java.lang.String toString(react.json.JSONObject) -> YgCd
react.json.JSONObject -> Gjkw:
    java.util.Map map -> map
    java.lang.Object NULL -> qvjT
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> JtIb
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> YgCd
    480:499:java.lang.String doubleToString(double) -> GQMD
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> iuot
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> JtIA
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> yIiu
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> lCee
    751:767:java.lang.String[] getNames(java.lang.Object) -> rfyT
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> lUGT
    855:855:boolean isNull(java.lang.String) -> CLrB
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> jiDk
    917:937:java.lang.String numberToString(java.lang.Number) -> JtIb
    949:949:java.lang.Object opt(java.lang.String) -> oLnN
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> JtIb
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> JtIb
    1018:1018:boolean optBoolean(java.lang.String) -> TyUh
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> JtIb
    1054:1054:double optDouble(java.lang.String) -> RroE
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> JtIb
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> JtIb
    1116:1119:double optDouble(java.lang.String,double) -> JtIb
    1134:1134:int optInt(java.lang.String) -> NMQH
    1152:1155:int optInt(java.lang.String,int) -> lCee
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> VDFw
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> yIiY
    1198:1198:long optLong(java.lang.String) -> jVol
    1216:1219:long optLong(java.lang.String,long) -> JtIb
    1234:1234:java.lang.String optString(java.lang.String) -> yJIx
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> YgCd
    1255:1305:void populateMap(java.lang.Object) -> xylN
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> YgCd
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> JtIb
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> YgCd
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> ylOL
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> YgCd
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> JtIb
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> lCee
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> ylOL
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> xiLM
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> JtIb
    1590:1590:java.lang.Object remove(java.lang.String) -> Etyg
    1605:1640:boolean similar(java.lang.Object) -> Lhmn
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> Ptyr
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> lCee
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> JtIb
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> JtIb
    2000:2004:void indent(java.io.Writer,int) -> JtIb
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> JtIb
react.json.JSONObject$Null -> Gjkw$JtIb:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> dEMH:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> kkcI:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> IOQA:
    long character -> NVur
    boolean eof -> eof
    long index -> eAGV
    long line -> bjad
    char previous -> msRg
    java.io.Reader reader -> reader
    boolean usePrevious -> lone
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> HwFQ
    119:131:int dehexchar(char) -> JtIb
    136:136:boolean end() -> dEQF
    147:153:boolean more() -> rhKd
    164:198:char next() -> next
    213:218:char next(char) -> YgCd
    233:250:java.lang.String next(int) -> DHGJ
    263:266:char nextClean() -> DPes
    287:334:java.lang.String nextString(char) -> lCee
    349:361:java.lang.String nextTo(char) -> ylOL
    376:388:java.lang.String nextTo(java.lang.String) -> qKDS
    403:441:java.lang.Object nextValue() -> ifAo
    458:479:char skipTo(char) -> xiLM
    491:491:react.json.JSONException syntaxError(java.lang.String) -> STOg
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> SKke:
    int maxdepth -> JmMt
    boolean comma -> WPoX
    char mode -> SnwH
    react.json.JSONObject[] stack -> Gtea
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> KTkE
    157:164:react.json.JSONWriter array() -> HnTj
    180:193:react.json.JSONWriter end(char,char) -> JtIb
    206:206:react.json.JSONWriter endArray() -> RkQQ
    219:219:react.json.JSONWriter endObject() -> aLgI
    235:258:react.json.JSONWriter key(java.lang.String) -> qtyj
    274:285:react.json.JSONWriter object() -> DHSw
    299:310:void pop(char) -> GPmP
    322:329:void push(react.json.JSONObject) -> ylOL
    342:342:react.json.JSONWriter value(boolean) -> Lhmn
    356:356:react.json.JSONWriter value(double) -> AGME
    369:369:react.json.JSONWriter value(long) -> AGME
    385:385:react.json.JSONWriter value(java.lang.Object) -> eHCS
react.json.XML -> iLJm:
    java.lang.Character AMP -> ekYw
    java.lang.Character APOS -> GRbc
    java.lang.Character BANG -> brrC
    java.lang.Character EQ -> LbRg
    java.lang.Character GT -> uGcu
    java.lang.Character LT -> Kxae
    java.lang.Character QUEST -> OAHl
    java.lang.Character QUOT -> URyo
    java.lang.Character SLASH -> wonD
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> jErG
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> JtIb
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> GQMD
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> PKSt:
    java.util.HashMap entity -> cTSV
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> qvJA
    108:133:java.lang.Object nextContent() -> aTwF
    149:166:java.lang.Object nextEntity(char) -> qJde
    186:239:java.lang.Object nextMeta() -> DsIM
    261:334:java.lang.Object nextToken() -> Lqmy
    354:420:boolean skipPast(java.lang.String) -> UAGA
react.lagmap.LagMap -> BdMP:
    react.glang.GMap chunks -> Pemw
    14:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> DQFR
    32:47:react.glang.GMap getGrandTotal() -> oDme
    52:61:void pump() -> nuOu
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> JtIb
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> JtIb
    85:85:react.glang.GMap getChunks() -> ctoo
react.lagmap.LagMapChunk -> GjmG:
    react.glang.GMap hits -> MBqu
    org.bukkit.Chunk c -> AYLr
    15:18:void <init>(org.bukkit.Chunk) -> <init>
    22:36:react.glang.GMap getMS() -> ArSA
    41:65:double totalMS() -> Edkl
    70:77:double getMS(react.api.ChunkIssue) -> JtIb
    82:88:void hit(react.api.ChunkIssue,double) -> JtIb
    92:93:void hit(react.api.ChunkIssue) -> YgCd
    97:97:int getX() -> getX
    102:102:int getZ() -> getZ
    107:114:double totalScore() -> EJyX
    119:119:react.glang.GMap getHits() -> OHVj
    124:133:void pump() -> nuOu
    138:138:int compareTo(react.lagmap.LagMapChunk) -> JtIb
    143:143:org.bukkit.Chunk getC() -> RPmc
    9:9:int compareTo(java.lang.Object) -> compareTo
react.papyrus.BufferedFrame -> PCCh:
    byte[][] frame -> tgDy
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> JtIb
    90:97:void write(byte) -> GPmP
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> JtIb
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> JtIb
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> JtIb
    153:167:java.awt.image.BufferedImage toBufferedImage() -> vIeq
    175:182:void writeRainbowMul() -> IhhT
    189:196:void writeRainbowAdd() -> imtK
    203:213:void writeSparks() -> XRow
    217:223:boolean write(int,int,byte) -> JtIb
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> JtIb
    255:272:void write(react.papyrus.BufferedFrame) -> ylOL
    276:276:byte[][] getRawFrame() -> WiaH
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> mWuw:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> ylOL
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> JtIb
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> erbC:
    org.bukkit.map.MapView getView() -> Mttb
    react.papyrus.BufferedFrame getFrameBuffer() -> SfEh
    void addRenderer(react.papyrus.IRenderer) -> YgCd
    void clearRenderers() -> jput
    react.glang.GList getRenderers() -> qukG
    void removeRenderer(react.papyrus.IRenderer) -> lCee
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> ytqc
react.papyrus.IRenderer -> PCAu:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> JtIb
react.papyrus.Papyrus -> UkcX:
    org.bukkit.map.MapView map -> nKaP
    react.papyrus.BufferedFrame frameBuffer -> CNdy
    react.papyrus.BufferedFrame lastFrameBuffer -> MduY
    react.glang.GList renderers -> TXfi
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> Mttb
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> SfEh
    51:52:void addRenderer(react.papyrus.IRenderer) -> YgCd
    57:58:void clearRenderers() -> jput
    63:63:react.glang.GList getRenderers() -> qukG
    69:70:void removeRenderer(react.papyrus.IRenderer) -> lCee
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> ytqc
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> YgCd
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> lCee
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> ylOL
react.papyrus.Papyrus$1 -> UkcX$1:
    org.bukkit.map.MapCanvas val$c -> TjIY
    org.bukkit.map.MapView val$v -> Rcaw
    react.papyrus.Papyrus this$0 -> BeWP
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> aoGA:
    int spaceSize -> rFjf
    java.lang.String fontChars -> OskG
    int[][] fontData -> HDcP
    react.papyrus.ReactFont Font -> BLDo
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> TONT:
    react.glang.GList subgoals -> GdCs
    java.lang.String tag -> NgwH
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> oVRv
    26:44:void propigate() -> ePep
    49:50:void addGoal(react.rai.IGoal) -> JtIb
    55:65:react.glang.GList getFailingSubgoals() -> qdid
    71:71:boolean isFailing() -> GtEU
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> Xcpn
    void onPropigated() -> VDXs
react.rai.Goal$1 -> TONT$1:
    react.rai.IGoal val$i -> bbQM
    react.rai.Goal this$0 -> iVBy
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> OaaQ:
    react.glang.GList getSubgoals() -> oVRv
    void propigate() -> ePep
    void onPropigated() -> VDXs
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> qdid
    boolean isFailing() -> GtEU
    boolean onCheckFailing() -> Xcpn
    void update() -> update
    void addGoal(react.rai.IGoal) -> JtIb
react.rai.IRAI -> skIp:
    react.glang.GList getGoals() -> ndQM
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> JtIb
    react.glang.GList getEvents() -> JIfm
    void callEvent(react.rai.RAIEvent) -> JtIb
    react.glang.GList getListeners() -> ksyE
react.rai.RAI -> bPFY:
    react.glang.GList goals -> HwhM
    react.glang.GList events -> XSqg
    react.glang.GList logEvents -> lpMs
    react.glang.GList listeners -> MLDB
    long since -> QWne
    react.rai.RAI instance -> PUMF
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> ndQM
    41:42:void addGoal(react.rai.IGoal) -> JtIb
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> JIfm
    88:95:void callEvent(react.rai.RAIEvent) -> JtIb
    100:100:react.glang.GList getListeners() -> ksyE
react.rai.RAIEvent -> rMsQ:
    react.rai.RAIEventType type -> apNu
    java.lang.String[] pars -> cLAk
    java.lang.String ovt -> cmdK
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> sIMJ
    29:29:java.lang.String[] getPars() -> MAoI
    34:34:java.lang.String getOvt() -> uheO
react.rai.RAIEventType -> NpAJ:
    react.rai.RAIEventType FIRE_ACTION -> bkEH
    react.rai.RAIEventType NOTE_GOAL_FAILING -> gFmy
    react.rai.RAIEventType NOTE_GOAL_FIXED -> steV
    java.lang.String[] msgs -> jYJQ
    react.rai.RAIEventType[] $VALUES -> GuIC
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> RIOE
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> JtIb
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedEntityCounts -> gyIV:
    boolean failing -> hdFE
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> Xcpn
    91:134:void onPropigated() -> VDXs
    22:22:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> JtIb
react.rai.goals.GoalReducedEntityCounts$1 -> gyIV$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> ixIw
    68:68:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> gyIV$2:
    org.bukkit.Chunk val$lx -> tffn
    react.rai.goals.GoalReducedEntityCounts this$0 -> ixIw
    120:120:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> qeCj:
    boolean failing -> hdFE
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> Xcpn
    72:76:void onPropigated() -> VDXs
react.rai.goals.GoalStableChunkTime$1 -> qeCj$1:
    react.rai.goals.GoalStableChunkTime this$0 -> vKJo
    49:49:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> TpqL:
    boolean failing -> hdFE
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> VDXs
    35:35:void letUp() -> OQGY
    40:77:boolean onCheckFailing() -> Xcpn
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> JtIb
react.rai.goals.GoalStableEntityTime$1 -> TpqL$1:
    react.rai.goals.GoalStableEntityTime this$0 -> twiA
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> jqOk:
    boolean failing -> hdFE
    react.glang.GMap reocc -> BdwF
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> VDXs
    88:125:boolean onCheckFailing() -> Xcpn
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> JtIb
    24:24:boolean access$100(react.rai.goals.GoalStableFluidTime) -> YgCd
react.rai.goals.GoalStableFluidTime$1 -> jqOk$1:
    org.bukkit.Chunk val$lx -> tffn
    react.rai.goals.GoalStableFluidTime this$0 -> Kxci
    67:67:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> jqOk$2:
    react.rai.goals.GoalStableFluidTime this$0 -> Kxci
    108:108:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> Ussr:
    boolean failing -> hdFE
    react.glang.GMap reocc -> BdwF
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> VDXs
    89:125:boolean onCheckFailing() -> Xcpn
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> JtIb
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> YgCd
react.rai.goals.GoalStableHopperTime$1 -> Ussr$1:
    org.bukkit.Chunk val$lx -> tffn
    react.rai.goals.GoalStableHopperTime this$0 -> XeWe
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> Ussr$2:
    react.rai.goals.GoalStableHopperTime this$0 -> XeWe
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> maGX:
    boolean failing -> hdFE
    react.glang.GMap reocc -> BdwF
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> VDXs
    89:126:boolean onCheckFailing() -> Xcpn
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> JtIb
    24:24:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> YgCd
react.rai.goals.GoalStableRedstoneTime$1 -> maGX$1:
    org.bukkit.Chunk val$lx -> tffn
    react.rai.goals.GoalStableRedstoneTime this$0 -> XTVY
    67:67:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> maGX$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> XTVY
    109:109:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> ogLv:
    boolean failing -> hdFE
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> VDXs
    34:58:boolean onCheckFailing() -> Xcpn
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> JtIb
react.rai.goals.GoalStableTickTime$1 -> ogLv$1:
    react.rai.goals.GoalStableTickTime this$0 -> Fhsg
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> govV:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> kBYj
    boolean authenticated -> cmfo
    react.remote.server.ServerInfo info -> rFmc
    react.glang.GMap frems -> BSwC
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> Ixwr
    51:51:react.glang.GMap getFrames() -> NgVT
    56:75:int computeFrames() -> JcYp
    80:92:boolean clearToken() -> OjXn
    97:110:boolean updateServerInfo() -> FFMB
    115:129:boolean refreshToken() -> Rjpk
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> lCee
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> dUrY
    165:165:boolean isAuthenticated() -> Mlbu
    170:170:react.remote.server.ServerInfo getInfo() -> kIeN
react.remote.client.packet.CPacketClearToken -> KfWW:
    java.lang.String token -> kBYj
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> JtIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> JtIb
    38:38:java.lang.String getToken() -> dUrY
    43:44:void setToken(java.lang.String) -> OXfa
react.remote.client.packet.CPacketComputeFrames -> sPue:
    java.lang.String token -> kBYj
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> JtIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> JtIb
    38:38:java.lang.String getToken() -> dUrY
    43:44:void setToken(java.lang.String) -> OXfa
react.remote.client.packet.CPacketGetInfo -> xqgO:
    java.lang.String token -> kBYj
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> JtIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> JtIb
    38:38:java.lang.String getToken() -> dUrY
    43:44:void setToken(java.lang.String) -> OXfa
react.remote.client.packet.CPacketGetToken -> iBxH:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> JtIb
    36:38:void fromBytes(react.gnet.streams.ISS) -> JtIb
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> aMCm:
    java.lang.String token -> kBYj
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> JtIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> JtIb
    38:38:java.lang.String getToken() -> dUrY
    43:44:void setToken(java.lang.String) -> OXfa
react.remote.client.packet.ClientPacket -> oDlg:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> JtIb
    void fromBytes(react.gnet.streams.ISS) -> JtIb
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> ogLv
    42:42:java.lang.String getPacketName() -> govV
react.remote.client.packet.ClientPacketType -> sYis:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> kBYU
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> HVFy
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> sJPu
    react.remote.client.packet.ClientPacketType GET_INFO -> qvna
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> YqIx
    react.remote.client.packet.ClientPacketType[] $VALUES -> FaBw
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> Jbub:
    react.glang.GMap compute(long,long) -> lCee
react.remote.server.KnownUser -> mFvq:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> KTwW:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> JtIb
    38:41:void fromBytes(react.gnet.streams.ISS) -> JtIb
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> cIyw:
    react.glang.GList users -> QGPN
    react.glang.GMap session -> sSBI
    react.glang.GMap lastCompute -> WQQq
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> WrFw
    44:45:void registerUser(react.remote.server.KnownUser) -> JtIb
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> YgCd
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> KfLr
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> ylOL
    react.remote.server.IFrameComputer getFrameComputer() -> XAdi
    170:171:void markLastCompute(react.remote.server.KnownUser) -> lCee
    175:180:long getLastCompute(react.remote.server.KnownUser) -> ylOL
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> JtIb
    190:191:void deleteSession(react.remote.server.KnownUser) -> xiLM
    195:195:java.lang.String createToken() -> lCvd
react.remote.server.ServerInfo -> uhak:
    java.lang.String motd -> AsWP
    int gameProtocol -> JKLb
    java.lang.String gameVersion -> fCjg
    java.lang.String reactVersion -> cLCr
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> JmOg
    int viewDistance -> viewDistance
    int gamePort -> YVvm
    java.lang.String gameAddress -> cduG
    react.glang.GList remotePlugins -> KhDh
    react.glang.GList worlds -> EfRt
    react.glang.GList actions -> SMYB
    react.glang.GList samplers -> XnKD
    26:26:react.remote.server.ServerInfo empty() -> fdib
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> JtIb
    146:159:void fromBytes(react.gnet.streams.ISS) -> JtIb
    java.lang.String dgetMotd() -> Ahss
    int dgetGameProtocol() -> baBY
    java.lang.String dgetGameVersion() -> vAHL
    java.lang.String dgetReactVersion() -> paYW
    int dgetMaxPlayers() -> hjbl
    react.glang.GList dgetConnectedPlayers() -> lvns
    int dgetViewDistance() -> miRC
    int dgetGamePort() -> CgJd
    java.lang.String dgetGameAddress() -> Lytb
    react.glang.GList dgetRemotePlugins() -> bObb
    react.glang.GList dgetWorlds() -> KwUL
    react.glang.GList dgetActions() -> dxMG
    react.glang.GList dgetSamplers() -> xFou
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> LaOv
    199:199:java.lang.String getGameVersion() -> EJxl
    204:204:java.lang.String getReactVersion() -> TOUX
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> pGrj
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> pHSj
    229:229:java.lang.String getGameAddress() -> pPdL
    234:234:react.glang.GList getRemotePlugins() -> oNAp
    239:239:react.glang.GList getWorlds() -> SwEy
    244:244:react.glang.GList getActions() -> BuFw
    249:249:react.glang.GList getSamplers() -> GjtQ
react.remote.server.ServerInfo$1 -> uhak$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> KwUL
    37:37:int dgetViewDistance() -> miRC
    43:43:react.glang.GList dgetRemotePlugins() -> bObb
    49:49:java.lang.String dgetReactVersion() -> paYW
    55:55:java.lang.String dgetMotd() -> Ahss
    61:61:int dgetMaxPlayers() -> hjbl
    67:67:java.lang.String dgetGameVersion() -> vAHL
    73:73:int dgetGameProtocol() -> baBY
    79:79:int dgetGamePort() -> CgJd
    85:85:java.lang.String dgetGameAddress() -> Lytb
    91:91:react.glang.GList dgetConnectedPlayers() -> lvns
    97:97:react.glang.GList dgetActions() -> dxMG
    103:103:react.glang.GList dgetSamplers() -> xFou
react.remote.server.packet.ComputedFrame -> oDlu:
    react.glang.GMap values -> UdaA
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> JtIb
    28:36:void fromBytes(react.gnet.streams.ISS) -> JtIb
    40:40:react.glang.GMap getValues() -> AYCE
    45:46:void setValues(react.glang.GMap) -> lCee
react.remote.server.packet.SPacketOk -> YVOv:
    boolean ok -> Bdxk
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> JtIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> JtIb
    38:38:boolean isOk() -> PCKY
    43:44:void setOk(boolean) -> rfyT
react.remote.server.packet.SPacketSendFrames -> IhdT:
    react.glang.GMap frames -> nKfB
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> JtIb
    36:44:void fromBytes(react.gnet.streams.ISS) -> JtIb
    48:48:react.glang.GMap getFrames() -> NgVT
    53:54:void setFrames(react.glang.GMap) -> ylOL
react.remote.server.packet.SPacketSendInfo -> mWxT:
    react.remote.server.ServerInfo info -> rFmc
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> JtIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> JtIb
    38:38:react.remote.server.ServerInfo getInfo() -> kIeN
    43:44:void setInfo(react.remote.server.ServerInfo) -> JtIb
react.remote.server.packet.SPacketSendToken -> jhag:
    java.lang.String token -> kBYj
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> JtIb
    33:34:void fromBytes(react.gnet.streams.ISS) -> JtIb
    38:38:java.lang.String getToken() -> dUrY
    43:44:void setToken(java.lang.String) -> OXfa
react.remote.server.packet.ServerPacket -> Btoc:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> JtIb
    void fromBytes(react.gnet.streams.ISS) -> JtIb
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> ogLv
    42:42:java.lang.String getPacketName() -> govV
react.remote.server.packet.ServerPacketType -> oVOV:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> XBvD
    react.remote.server.packet.ServerPacketType SEND_INFO -> bPsa
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> xIBV
    react.remote.server.packet.ServerPacketType OK -> ifiN
    react.remote.server.packet.ServerPacketType[] $VALUES -> QiUr
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> AGXr:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleAsyncQueue$1 -> AGXr$1:
    react.sampler.SampleAsyncQueue this$0 -> GIvK
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleChunkTime -> sYim:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleChunkTime$1 -> sYim$1:
    react.sampler.SampleChunkTime this$0 -> QhuN
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleChunksLoaded -> HKni:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleChunksLoaded$1 -> HKni$1:
    react.sampler.SampleChunksLoaded this$0 -> DcPh
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleChunksLoadedPerSecond -> Foyq:
    react.gmath.Average a -> cBuM
    react.graph.IFormatter formatter -> MTQt
    16:29:void <init>() -> <init>
    34:40:void construct() -> WypN
    45:47:void sample() -> Ixwr
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleChunksLoadedPerSecond$1 -> Foyq$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> qfQI
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> xylN
react.sampler.SampleEntitiesDrops -> qufV:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleEntitiesDrops$1 -> qufV$1:
    react.sampler.SampleEntitiesDrops this$0 -> EoDu
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleEntitiesLiving -> BlaQ:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleEntitiesLiving$1 -> BlaQ$1:
    react.sampler.SampleEntitiesLiving this$0 -> SUid
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleEntitiesTiles -> NfpX:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleEntitiesTiles$1 -> NfpX$1:
    react.sampler.SampleEntitiesTiles this$0 -> eAKd
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleEntitiesTotal -> uNmp:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleEntitiesTotal$1 -> uNmp$1:
    react.sampler.SampleEntitiesTotal this$0 -> WkHF
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleEntityDroppedTicks -> Dred:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleEntityDroppedTicks$1 -> Dred$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> dOJO
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleEntityTime -> AFye:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleEntityTime$1 -> AFye$1:
    react.sampler.SampleEntityTime this$0 -> xasQ
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleEntityTimeLock -> NobV:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleEntityTimeLock$1 -> NobV$1:
    react.sampler.SampleEntityTimeLock this$0 -> HgKL
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleExplosionTime -> rxhf:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleExplosionTime$1 -> rxhf$1:
    react.sampler.SampleExplosionTime this$0 -> MnJO
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleFluidPerSecond -> UsvS:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleFluidPerSecond$1 -> UsvS$1:
    react.sampler.SampleFluidPerSecond this$0 -> nTUf
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleFluidPerTick -> oUmN:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    46:53:void sample() -> Ixwr
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleFluidPerTick$1 -> oUmN$1:
    react.sampler.SampleFluidPerTick this$0 -> aWAS
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleFluidTickTime -> UJDN:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleFluidTickTime$1 -> UJDN$1:
    react.sampler.SampleFluidTickTime this$0 -> bjeH
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleFluidTickUtilization -> CpCq:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    46:53:void sample() -> Ixwr
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleFluidTickUtilization$1 -> CpCq$1:
    react.sampler.SampleFluidTickUtilization this$0 -> iUgR
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleHopperPerSecond -> nuMt:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleHopperPerSecond$1 -> nuMt$1:
    react.sampler.SampleHopperPerSecond this$0 -> Mdwb
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleHopperPerTick -> dpAf:
    react.graph.IFormatter formatter -> MTQt
    19:29:void <init>() -> <init>
    34:40:void construct() -> WypN
    47:54:void sample() -> Ixwr
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleHopperPerTick$1 -> dpAf$1:
    react.sampler.SampleHopperPerTick this$0 -> UmOy
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleHopperTickTime -> XAll:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleHopperTickTime$1 -> XAll$1:
    react.sampler.SampleHopperTickTime this$0 -> XBtQ
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleHopperTickUtilization -> BAmk:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    46:53:void sample() -> Ixwr
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleHopperTickUtilization$1 -> BAmk$1:
    react.sampler.SampleHopperTickUtilization this$0 -> jXjA
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleMemoryAllocated -> dpDc:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleMemoryAllocated$1 -> dpDc$1:
    react.sampler.SampleMemoryAllocated this$0 -> PoCV
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleMemoryAllocationPerSecond -> nBLo:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleMemoryAllocationPerSecond$1 -> nBLo$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> YEwh
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleMemoryFree -> CxVh:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleMemoryFree$1 -> CxVh$1:
    react.sampler.SampleMemoryFree this$0 -> IjNb
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleMemoryMax -> rxlb:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleMemoryMax$1 -> rxlb$1:
    react.sampler.SampleMemoryMax this$0 -> GItj
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleMemoryUse -> qBdp:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleMemoryUse$1 -> qBdp$1:
    react.sampler.SampleMemoryUse this$0 -> Osog
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SamplePhysicsTickTime -> dEPV:
    react.graph.IFormatter formatter -> MTQt
    18:27:void <init>() -> <init>
    32:38:void construct() -> WypN
    43:44:void sample() -> Ixwr
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SamplePhysicsTickTime$1 -> dEPV$1:
    react.sampler.SamplePhysicsTickTime this$0 -> xarJ
    20:20:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> xylN
react.sampler.SampleRedstonePerSecond -> jFab:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleRedstonePerSecond$1 -> jFab$1:
    react.sampler.SampleRedstonePerSecond this$0 -> etNr
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleRedstonePerTick -> rgkN:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    46:53:void sample() -> Ixwr
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleRedstonePerTick$1 -> rgkN$1:
    react.sampler.SampleRedstonePerTick this$0 -> Npnp
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleRedstoneTickTime -> DsJI:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleRedstoneTickTime$1 -> DsJI$1:
    react.sampler.SampleRedstoneTickTime this$0 -> raEj
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleRedstoneTickUtilization -> VTxa:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    46:53:void sample() -> Ixwr
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleRedstoneTickUtilization$1 -> VTxa$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> QGTe
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleSyncQueue -> ECHY:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleSyncQueue$1 -> ECHY$1:
    react.sampler.SampleSyncQueue this$0 -> xQUN
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleTickTime -> BSPM:
    react.graph.IFormatter formatter -> MTQt
    react.gmath.Average aa -> EMDB
    17:29:void <init>() -> <init>
    34:40:void construct() -> WypN
    45:47:void sample() -> Ixwr
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleTickTime$1 -> BSPM$1:
    react.sampler.SampleTickTime this$0 -> lNSE
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> xylN
react.sampler.SampleTickUtilization -> DXvS:
    react.graph.IFormatter formatter -> MTQt
    react.gmath.Average aa -> EMDB
    17:29:void <init>() -> <init>
    34:40:void construct() -> WypN
    45:47:void sample() -> Ixwr
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleTickUtilization$1 -> DXvS$1:
    react.sampler.SampleTickUtilization this$0 -> nLIC
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> xylN
react.sampler.SampleTicksPerSecond -> XSPO:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleTicksPerSecond$1 -> XSPO$1:
    react.sampler.SampleTicksPerSecond this$0 -> Judh
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleTileDroppedTicks -> OGsl:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleTileDroppedTicks$1 -> OGsl$1:
    react.sampler.SampleTileDroppedTicks this$0 -> DcRa
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleTileTime -> NgUO:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleTileTime$1 -> NgUO$1:
    react.sampler.SampleTileTime this$0 -> ObqS
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.sampler.SampleTileTimeLock -> kQtT:
    react.graph.IFormatter formatter -> MTQt
    19:28:void <init>() -> <init>
    33:39:void construct() -> WypN
    44:45:void sample() -> Ixwr
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> XtcS
react.sampler.SampleTileTimeLock$1 -> kQtT$1:
    react.sampler.SampleTileTimeLock this$0 -> Rkyv
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> xylN
react.security.checkpoints.SecurityCheckpointAlpha -> jiDk:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> FEnX
    78:148:void doScan(java.lang.Runnable) -> YgCd
    152:181:byte[] readResource(java.io.File,java.lang.String) -> JtIb
    186:217:react.glang.GMap scan(java.io.File) -> YgCd
    33:33:byte[] access$000(java.io.File,java.lang.String) -> YgCd
react.security.checkpoints.SecurityCheckpointAlpha$1 -> jiDk$1:
    java.lang.Runnable val$r -> bYgI
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> jiDk$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> IiqG
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> HwFQ:
    java.lang.String ip -> BCXa
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> dEQF:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> dEQF$1:
    java.io.File val$f -> RdJh
    react.security.locks.SecurityLockAlpha this$0 -> JvFN
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> rhKd:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> AGME
react.slate.PhantomSlate -> DPes:
    react.glang.GList lines -> fndG
    react.glang.GList viewers -> sBFB
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> YqPL
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> EBjv
    44:45:void set(int,java.lang.String) -> YgCd
    50:51:void setLines(react.glang.GList) -> flhH
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> Jbub
    91:95:void addViewer(org.bukkit.entity.Player) -> AGME
    100:102:void removeViewer(org.bukkit.entity.Player) -> Kmxy
    107:107:react.glang.GList getViewers() -> jGFa
    113:113:boolean isViewing(org.bukkit.entity.Player) -> iuot
    119:120:void addLine(java.lang.String) -> pPTk
    125:126:void clearLines() -> prjf
react.slate.Slate -> ifAo:
    void build() -> Jbub
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> EBjv
    void set(int,java.lang.String) -> YgCd
    void setLines(react.glang.GList) -> flhH
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> AGME
    void addLine(java.lang.String) -> pPTk
    void clearLines() -> prjf
    void removeViewer(org.bukkit.entity.Player) -> Kmxy
    react.glang.GList getViewers() -> jGFa
    boolean isViewing(org.bukkit.entity.Player) -> iuot
    void update() -> update
react.slate.SlateUtil -> HnTj:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> gyQy
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> ejYx
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> JtIb
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> YgCd
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> lCee
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> JtIb
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> JtIb
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> YgCd
    186:196:java.lang.String convertJSON(java.lang.String) -> XtcS
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> YgCd
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> JtIb
react.surge.Main -> RkQQ:
    react.glang.GList plugins -> bjgp
    react.glang.GMap pluginInstances -> lotA
    react.glang.GList controllerSet -> cmjL
    react.glang.GMap anchors -> VWDQ
    react.glang.GList classes -> QOcs
    java.lang.reflect.Field nsField -> SUiv
    java.lang.reflect.Field thField -> Dkae
    react.glang.GList tracks -> hItn
    long nsf -> Qqfs
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> rhPS
    62:81:long getNanoSync() -> gElf
    86:87:void requestResetNanos() -> Licc
    91:99:void requestReload() -> XuVk
    105:114:void requestReload(java.lang.Runnable) -> lCee
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> JtIb
    210:252:void onStop() -> WXaS
    258:258:void onPostInit() -> oESk
    264:264:void onPreInit() -> fvOL
    268:279:void shutDownAmps() -> FpaX
    283:492:void initializeAmps() -> rgml
    497:538:void doScan() -> OrkO
    542:564:void scanForPoolDefiners() -> OQHm
    568:584:void scanForRawEvents() -> rhOO
    588:604:void scanForDynamicTrack() -> priX
    608:629:void scanForAmps() -> iLRd
    634:645:void onTick() -> CEHT
react.surge.Main$1 -> RkQQ$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> aLgI:
    react.surge.control.AmpedPlugin plugin -> DsrN
    boolean connected -> connected
    int masterTask -> Sfkc
    java.lang.Runnable onReload -> RuJo
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> JIiN
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> UAXL
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> JtIb
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> JtIb
    123:124:void stopTask(int) -> WypN
    128:128:react.surge.control.AmpedPlugin getPlugin() -> Rscq
    133:133:int getMasterTask() -> Drkf
    138:138:java.lang.Runnable getOnReload() -> Drkg
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> JtIb
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> RQNw
    158:159:void setOnReload(java.lang.Runnable) -> ylOL
    67:67:void access$0(react.surge.PluginAmp) -> JtIb
react.surge.PluginAmp$1 -> aLgI$1:
    react.surge.PluginAmp this$0 -> MLIa
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> aLgI$2:
    react.surge.PluginAmp this$0 -> MLIa
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> aLgI$3:
    react.surge.PluginAmp this$0 -> MLIa
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> DHSw:
    react.surge.PluginAmp amp -> HVKw
    react.glang.GList tickComponents -> sReR
    react.glang.GList atickComponents -> aFAp
    react.surge.sched.TaskManager taskmgr -> cLGu
    react.surge.hotload.HotloadManager hotloadmgr -> DkbU
    java.lang.Thread mainThread -> iUiH
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> JtIb
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> Bcay
    44:44:java.io.File folder() -> pXwN
    49:51:java.io.File getPluginJarFile() -> gWNY
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> ylOL
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> tecl
    74:74:react.glang.GList getTickComponents() -> uGDm
    79:79:react.glang.GList getAsyncTickComponents() -> YESm
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> JtIb
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> YgCd
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> YgCd
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> baOq
    126:126:boolean hasAmp() -> kRWs
    131:131:react.surge.PluginAmp getAmp() -> AOpo
    136:136:react.surge.sched.TaskManager getTaskManager() -> DQIs
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> OsME
react.surge.cluster.Cluster -> qvJA:
    react.surge.cluster.ClusterType type -> GJWn
    java.lang.Object t -> qvgO
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> Drkw
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> aTwF:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> DsIM:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> Lqmy:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> DQFR:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> oDme:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> nuOu:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> ctoo:
    react.surge.cluster.ClusterType INT -> tVIR
    react.surge.cluster.ClusterType BOOLEAN -> VouQ
    react.surge.cluster.ClusterType STRING -> aNTv
    react.surge.cluster.ClusterType STRING_LIST -> skyw
    react.surge.cluster.ClusterType DOUBLE -> TsDI
    react.surge.cluster.ClusterType LONG -> xQVp
    react.surge.cluster.ClusterType[] ENUM$VALUES -> hSIs
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> ArSA:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> jGnG
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> JtIb
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> JtIb
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> wMKB
react.surge.cluster.ConfigurationDataOutput -> Edkl:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> YgCd
react.surge.cluster.DataCluster -> EJyX:
    react.glang.GMap clusters -> CqRk
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> qukp
    29:33:void fromJson(react.json.JSONObject) -> xiLM
    37:44:react.json.JSONObject toJson() -> NMfA
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> jGEV
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> JtIb
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> DHGJ
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> GPmP
    194:195:void set(java.lang.String,int) -> xiLM
    199:200:void set(java.lang.String,boolean) -> lCee
    204:205:void set(java.lang.String,double) -> lCee
    209:210:void set(java.lang.String,long) -> lCee
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> JtIb
react.surge.cluster.ICluster -> OHVj:
    react.surge.cluster.ClusterType getType() -> Drkw
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> vIeq:
react.surge.cluster.IDataInput -> IhhT:
    react.surge.cluster.DataCluster read(java.io.File) -> lCee
react.surge.cluster.IDataOutput -> imtK:
    void write(react.surge.cluster.DataCluster,java.io.File) -> JtIb
react.surge.cluster.Key -> XRow:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> WiaH:
    int value() -> value
react.surge.cluster.KeyStore -> Mttb:
react.surge.cluster.ReflectedConfigurationException -> SfEh:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> jput:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> lCee
react.surge.cluster.YamlDataOutput -> qukG:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> JtIb
react.surge.collection.GSound -> ytqc:
    java.lang.String sound -> kSbS
    org.bukkit.Sound iSound -> giXq
    java.lang.Float volume -> yLIj
    java.lang.Float pitch -> twnf
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> JtIA
    61:72:void play(org.bukkit.Location) -> GPmP
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> JtIb
    93:93:java.lang.String getSound() -> gWQW
    98:99:void setSound(java.lang.String) -> Ixwr
    103:103:org.bukkit.Sound getiSound() -> TWiu
    108:109:void setiSound(org.bukkit.Sound) -> JtIb
    113:113:java.lang.Float getVolume() -> FyUm
    118:119:void setVolume(java.lang.Float) -> JtIb
    123:123:java.lang.Float getPitch() -> cSUG
    128:129:void setPitch(java.lang.Float) -> YgCd
react.surge.control.AmpedPlugin -> oVRv:
    react.glang.GList controllers -> cmnC
    react.gconcurrent.ParallelPoolManager pp -> XmnV
    react.surge.server.CoreTickThread ctt -> UKRm
    24:27:void <init>() -> <init>
    void doScan() -> OrkO
    long getNanoSync() -> gElf
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> Blgn
    107:108:void registerController(react.surge.control.IController) -> JtIb
    113:124:void onTick() -> CEHT
    129:129:java.lang.String getTickName() -> fmNI
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> dfwu
    141:256:void destroyOldThreads() -> TFhm
    void onControllerRegistry() -> rhPS
    void onStart(react.surge.util.Protocol) -> JtIb
    void onStop() -> WXaS
    void onPostInit() -> oESk
    void onPreInit() -> fvOL
react.surge.control.AmpedPlugin$1 -> oVRv$1:
    react.surge.control.AmpedPlugin this$0 -> PMFE
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> tdxx
react.surge.control.AmpedPlugin$2 -> oVRv$2:
    react.surge.control.AmpedPlugin this$0 -> PMFE
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> ePep:
react.surge.control.Controller -> qdid:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> GtEU:
react.surge.control.Enable -> Xcpn:
react.surge.control.IController -> VDXs:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> ndQM:
react.surge.control.Plugin -> JIfm:
react.surge.control.SurgePlugin -> ksyE:
    void onStart(react.surge.util.Protocol) -> JtIb
    void onStop() -> WXaS
    void onPostInit() -> oESk
    void onPreInit() -> fvOL
    void onControllerRegistry() -> rhPS
    void registerController(react.surge.control.IController) -> JtIb
    react.glang.GList getControllers() -> Blgn
    react.gconcurrent.ParallelPoolManager getThreadPool() -> dfwu
react.surge.hotload.HotloadManager -> sIMJ:
    react.glang.GMap filemods -> tUkY
    react.glang.GMap filesizes -> dNmX
    react.glang.GMap fileacts -> UBbO
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> JtIb
    35:38:void untrack(java.io.File) -> ylOL
    42:45:void untrackall() -> BmIM
    50:86:void onTick() -> CEHT
    91:91:java.lang.String getTickName() -> fmNI
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> JtIb
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> YgCd
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> lCee
react.surge.hotload.HotloadManager$1 -> sIMJ$1:
    react.surge.hotload.HotloadManager this$0 -> LQYp
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> MAoI:
    boolean init -> Obqb
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> FGUw
    java.lang.Class IChatBaseComponent -> cKiG
    java.lang.Class ChatSerializer -> mrxm
    java.lang.Class PacketPlayOutPlayerInfo -> VEcV
    java.lang.Class PlayerInfoData -> mQVq
    java.lang.Class EnumPlayerInfoAction -> yTYT
    java.lang.Class GameProfile -> DkdL
    java.lang.Class EnumGamemode -> AHhp
    java.lang.Class TileEntitySkull -> oOKr
    java.lang.Class LoadingCache -> QFuQ
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> uheO:
    react.surge.nms.NMSX bountifulAPI -> GSJs
    boolean useOldMethods -> lVdA
    java.lang.String nmsver -> wVbq
    java.lang.Object eTimes -> LHhE
    java.lang.Object eTitle -> AjlG
    java.lang.Object eSubtitle -> IGnn
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> JtIb
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> WypN
    75:89:java.lang.Class getCBClass(java.lang.String) -> RQNw
    96:104:java.lang.Object serializeChat(java.lang.String) -> VelD
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> YgCd
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> JtIb
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> vAXo
    151:151:java.lang.String craftPackage() -> HTgq
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> JtIb
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> JtIb
    197:207:java.lang.Class getNMSClass(java.lang.String) -> qBVI
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> JtIb
    279:280:void clearTitle(org.bukkit.entity.Player) -> yIiu
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> YgCd
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> JtIb
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> JtIb
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> RQOf
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> GPmP
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> Dqvy
    434:447:int ping(org.bukkit.entity.Player) -> lUGT
react.surge.nms.NMSX$1 -> uheO$1:
    org.bukkit.entity.Player val$player -> AkBm
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> uheO$2:
    org.bukkit.entity.Player val$player -> AkBm
    java.lang.String val$message -> SDjr
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> RIOE:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> mrSu
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> JtIb
    68:82:void clearTitle(org.bukkit.entity.Player) -> yIiu
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> JtIb
react.surge.nms.PacketUtil$V -> RIOE$JtIb:
    react.surge.nms.PacketUtil$V R17 -> PMFm
    react.surge.nms.PacketUtil$V R18 -> pbru
    react.surge.nms.PacketUtil$V R19 -> psth
    react.surge.nms.PacketUtil$V R111 -> mayy
    react.surge.nms.PacketUtil$V R110 -> jirk
    react.surge.nms.PacketUtil$V R112 -> Dkfi
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> raIr
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> OQGY:
    java.lang.String title -> title
    java.lang.String subTitle -> RuPW
    java.lang.String action -> action
    java.lang.Integer fadeIn -> lgiK
    java.lang.Integer fadeOut -> CNpU
    java.lang.Integer stayTime -> VEgQ
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> CLrB
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> ArUo
    79:80:void setSubTitle(java.lang.String) -> afLc
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> Rbeh
    99:100:void setFadeIn(java.lang.Integer) -> lCee
    104:104:java.lang.Integer getFadeOut() -> psLu
    109:110:void setFadeOut(java.lang.Integer) -> ylOL
    114:114:java.lang.Integer getStayTime() -> iUGE
    119:120:void setStayTime(java.lang.Integer) -> xiLM
react.surge.nms.VersionBukkit -> NgVT:
    react.surge.nms.VersionBukkit VU -> UeHQ
    react.surge.nms.VersionBukkit V7 -> mPwt
    react.surge.nms.VersionBukkit V8 -> xjkE
    react.surge.nms.VersionBukkit V9 -> rhyF
    react.surge.nms.VersionBukkit V11 -> Dswb
    react.surge.nms.VersionBukkit V111 -> mHgt
    react.surge.nms.VersionBukkit V112 -> VMwR
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> UCDo
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> Mtxl
    27:32:boolean uc() -> nBQo
    37:67:react.surge.nms.VersionBukkit get() -> YVXF
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> JcYp:
    void burst(java.lang.Object) -> GQMD
    void setTimeLock(double) -> Kmxy
    double getEstimatedTimeUse() -> RYrp
    int flush() -> SDEY
    int flush(react.gbench.Profiler) -> JtIb
    void queue(java.lang.Object) -> AGME
    void queue(java.util.List) -> lCee
    void queue(java.lang.Object[]) -> JtIb
react.surge.sched.ICancellable -> OjXn:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> FFMB:
    void onTick() -> CEHT
    java.lang.String getTickName() -> fmNI
react.surge.sched.ITask -> Rjpk:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> brSm
    java.lang.String getName() -> getName
    double getComputeTime() -> MlgH
    double getTotalComputeTime() -> UJKX
    double getActiveTime() -> Xctw
    boolean hasCompleted() -> EeOw
react.surge.sched.Task -> dUrY:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> dhan
    double computeTime -> foGn
    double totalComputeTime -> BmrD
    double activeTime -> sJYX
    boolean completed -> completed
    react.gbench.Profiler profiler -> kKSH
    react.gbench.Profiler activeProfiler -> xaxl
    int ticks -> kKRf
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> ylOL
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> brSm
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> MlgH
    150:150:boolean hasCompleted() -> EeOw
    156:156:double getTotalComputeTime() -> UJKX
    162:162:double getActiveTime() -> Xctw
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> lCee
    15:15:void access$1(react.surge.sched.Task,boolean) -> JtIb
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> ylOL
    14:14:void access$3(react.surge.sched.Task,double) -> JtIb
    12:12:void access$4(react.surge.sched.Task,double) -> YgCd
    14:14:double access$5(react.surge.sched.Task) -> xiLM
    13:13:void access$6(react.surge.sched.Task,double) -> lCee
    13:13:double access$7(react.surge.sched.Task) -> GPmP
    12:12:double access$8(react.surge.sched.Task) -> qJde
react.surge.sched.Task$1 -> dUrY$1:
    react.surge.sched.Task this$0 -> qUUC
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> dUrY$2:
    react.surge.sched.Task this$0 -> qUUC
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> dUrY$3:
    react.surge.sched.Task this$0 -> qUUC
    int val$total -> PMFL
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> Mlbu:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> dhan
    double computeTime -> foGn
    double totalComputeTime -> BmrD
    double activeTime -> sJYX
    boolean completed -> completed
    react.gbench.Profiler profiler -> kKSH
    react.gbench.Profiler activeProfiler -> xaxl
    int ticks -> kKRf
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> ylOL
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> brSm
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> MlgH
    101:101:boolean hasCompleted() -> EeOw
    107:107:double getTotalComputeTime() -> UJKX
    113:113:double getActiveTime() -> Xctw
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> JtIb
    12:12:void access$1(react.surge.sched.TaskLater,double) -> JtIb
    13:13:double access$2(react.surge.sched.TaskLater) -> YgCd
    12:12:double access$3(react.surge.sched.TaskLater) -> lCee
    13:13:void access$4(react.surge.sched.TaskLater,double) -> YgCd
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> ylOL
    14:14:double access$6(react.surge.sched.TaskLater) -> xiLM
    14:14:void access$7(react.surge.sched.TaskLater,double) -> lCee
react.surge.sched.TaskLater$1 -> Mlbu$1:
    react.surge.sched.TaskLater this$0 -> stle
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> kIeN:
    react.glang.GList tasks -> gNmb
    react.glang.GMap taskProfiles -> OlFQ
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> JtIb
    25:35:void onTick() -> CEHT
    39:40:void putFinishingTask(react.surge.sched.ITask) -> YgCd
    44:53:void putTask(react.surge.sched.ITask) -> lCee
    58:58:java.lang.String getTickName() -> fmNI
    63:63:react.glang.GList getTasks() -> clfB
    68:68:react.glang.GMap getTaskProfiles() -> Lico
react.surge.sched.TaskProfile -> lCvd:
    double activeTime -> sJYX
    double computeTickTime -> vmUV
    double computeTime -> foGn
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> Xctw
    23:24:void setActiveTime(double) -> iuot
    28:28:double getComputeTickTime() -> vJJN
    33:34:void setComputeTickTime(double) -> JtIA
    38:38:double getComputeTime() -> MlgH
    43:44:void setComputeTime(double) -> yIiu
react.surge.server.AsyncTick -> fdib:
react.surge.server.CPS -> LaOv:
    react.glang.GMap keys -> oqPs
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> LaAC
    46:99:void scan() -> dETs
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> lCee
react.surge.server.CoreTickThread -> EJxl:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> TOUX:
    long memoryFree -> BLNq
    long memoryUsed -> ynND
    long memoryMax -> WkLu
    long lastMemoryUsed -> jYQG
    long memoryUsedAfterGC -> dycI
    long allocated -> sAfx
    long collected -> CNpo
    long collections -> UCDH
    long sms -> LPyi
    long memoryAllocatedPerTick -> wxgq
    long memoryCollectedPerTick -> wxhQ
    long memoryFullyAllocatedPerTick -> DASW
    long mah -> hRlr
    long mahs -> cfBM
    22:39:void <init>() -> <init>
    void onAllocationSet() -> IWjM
    46:107:void run() -> run
    111:111:long getMemoryFree() -> opHi
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> Cfyl
    126:126:long getLastMemoryUsed() -> rxpy
    131:131:long getMemoryUsedAfterGC() -> Qxsh
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> JuAT
    146:146:long getCollections() -> YpJh
    151:151:long getSms() -> woRo
    156:156:long getMemoryAllocatedPerTick() -> rxuF
    161:161:long getMemoryCollectedPerTick() -> FEqt
    166:166:long getMemoryFullyAllocatedPerTick() -> SLXa
    171:171:long getMah() -> gOBo
    176:176:long getMahs() -> WXdc
react.surge.server.SuperSampler -> pGrj:
    react.gmath.Average ticksPerSecondL -> NiFO
    react.gmath.Average tickTimeL -> kCFA
    react.gmath.Average mahL -> jsFt
    double ticksPerSecond -> EfIQ
    double ticksPerSecondRaw -> YiEW
    double tickTime -> IYUm
    double tickTimeRaw -> TQET
    boolean running -> running
    boolean frozen -> ELiR
    double tickUtilizationRaw -> Kxms
    double tickUtilization -> JKXJ
    double leftoverTickTime -> grMf
    long memoryUse -> IHUJ
    long memoryAllocated -> USfx
    long memoryCollected -> wEfg
    long mahs -> cfBM
    int totalChunks -> kBdU
    int totalEntities -> Nyfw
    int totalDrops -> ixTP
    int totalTiles -> DATY
    int totalLiving -> WYma
    int chunksLoaded -> mYkQ
    int chunksUnloaded -> loyf
    react.surge.server.WorldMonitor worldMonitor -> nwBP
    react.surge.server.TPSMonitor tpsMonitor -> TQDH
    react.surge.server.MemoryMonitor memoryMonitor -> Swrn
    java.lang.StackTraceElement[] lockStack -> fLfH
    react.glang.GMap spikes -> SoOg
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> CEHT
    154:154:java.lang.String getTickName() -> fmNI
    159:159:react.gmath.Average getTicksPerSecondL() -> Vfcl
    164:164:double getTicksPerSecond() -> ntiX
    169:169:double getTicksPerSecondRaw() -> mPRu
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> rhTL
    184:184:react.gmath.Average getTickTimeL() -> iKwB
    189:189:double getTickTime() -> bOrx
    194:194:double getTickTimeRaw() -> MJge
    199:199:double getTickUtilizationRaw() -> pGyX
    204:204:double getTickUtilization() -> dVXn
    209:209:double getLeftoverTickTime() -> QVql
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> pHYs
    219:219:long getMemoryUse() -> bidb
    224:224:long getMemoryAllocated() -> cuXh
    229:229:long getMemoryCollected() -> oUwn
    234:234:react.gmath.Average getMahL() -> OPku
    239:239:long getMahs() -> WXdc
    244:244:int getTotalChunks() -> jiLk
    249:249:int getTotalEntities() -> OPlU
    254:254:int getTotalDrops() -> klOk
    259:259:int getTotalTiles() -> jOXt
    264:264:int getTotalLiving() -> QFQq
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> AHEl
    274:274:int getChunksLoaded() -> tTek
    279:279:int getChunksUnloaded() -> uWiK
    284:285:void setTicksPerSecondL(react.gmath.Average) -> JtIb
    289:290:void setTickTimeL(react.gmath.Average) -> YgCd
    294:295:void setMahL(react.gmath.Average) -> lCee
    299:300:void setTicksPerSecond(double) -> UtJE
    304:305:void setTicksPerSecondRaw(double) -> lUGT
    309:310:void setTickTime(double) -> CLrB
    314:315:void setTickTimeRaw(double) -> oLnN
    319:320:void setRunning(boolean) -> xylN
    324:325:void setTickUtilizationRaw(double) -> TyUh
    329:330:void setTickUtilization(double) -> RroE
    334:335:void setLeftoverTickTime(double) -> NMQH
    339:340:void setMemoryUse(long) -> Kmxy
    344:345:void setMemoryAllocated(long) -> iuot
    349:350:void setMemoryCollected(long) -> JtIA
    354:355:void setMahs(long) -> yIiu
    359:360:void setTotalChunks(int) -> VelD
    364:365:void setTotalEntities(int) -> qBVI
    369:370:void setTotalDrops(int) -> RQOf
    374:375:void setTotalTiles(int) -> afLc
    379:380:void setTotalLiving(int) -> LaAC
    384:385:void setChunksLoaded(int) -> JHwJ
    389:390:void setChunksUnloaded(int) -> UbiX
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> JtIb
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> JtIb
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> JtIb
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> PdqS
    419:419:react.glang.GMap getSpikes() -> XkwH
    31:31:void access$0(react.surge.server.SuperSampler,int) -> JtIb
    33:33:void access$1(react.surge.server.SuperSampler,int) -> YgCd
    34:34:void access$2(react.surge.server.SuperSampler,int) -> lCee
    32:32:void access$3(react.surge.server.SuperSampler,int) -> ylOL
    35:35:void access$4(react.surge.server.SuperSampler,int) -> xiLM
    36:36:void access$5(react.surge.server.SuperSampler,int) -> GPmP
    37:37:void access$6(react.surge.server.SuperSampler,int) -> qJde
    19:19:void access$7(react.surge.server.SuperSampler,double) -> JtIb
    21:21:void access$8(react.surge.server.SuperSampler,double) -> YgCd
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> JtIb
    19:19:double access$10(react.surge.server.SuperSampler) -> YgCd
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> lCee
    21:21:double access$12(react.surge.server.SuperSampler) -> ylOL
    18:18:void access$13(react.surge.server.SuperSampler,double) -> lCee
    20:20:void access$14(react.surge.server.SuperSampler,double) -> ylOL
    24:24:void access$15(react.surge.server.SuperSampler,double) -> xiLM
    20:20:double access$16(react.surge.server.SuperSampler) -> xiLM
    25:25:void access$17(react.surge.server.SuperSampler,double) -> GPmP
    25:25:double access$18(react.surge.server.SuperSampler) -> GPmP
    26:26:void access$19(react.surge.server.SuperSampler,double) -> qJde
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> JtIb
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> qJde
    27:27:void access$22(react.surge.server.SuperSampler,long) -> JtIb
    28:28:void access$23(react.surge.server.SuperSampler,long) -> YgCd
    29:29:void access$24(react.surge.server.SuperSampler,long) -> lCee
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> Dqvy
    30:30:void access$26(react.surge.server.SuperSampler,long) -> ylOL
react.surge.server.SuperSampler$1 -> pGrj$1:
    react.surge.server.SuperSampler this$0 -> BTaf
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> JtIb
react.surge.server.SuperSampler$2 -> pGrj$2:
    react.surge.server.SuperSampler this$0 -> BTaf
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> ELAM
    106:107:void onSpike() -> HKxG
react.surge.server.SuperSampler$3 -> pGrj$3:
    react.surge.server.SuperSampler this$0 -> BTaf
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> IWjM
react.surge.server.TPSMonitor -> pHSj:
    double tickTimeMS -> IaeU
    double rawTicksPerSecond -> IHTC
    react.gbench.Profiler tickProfiler -> nfAE
    react.gbench.Profiler tickTimeProfiler -> RSOD
    boolean ticked -> SVQd
    java.lang.Thread$State lastState -> KNYm
    double actualTickTimeMS -> NNrE
    double ltt -> XnQn
    long lastTick -> qnLt
    boolean frozen -> ELiR
    java.lang.StackTraceElement[] lockedStack -> lhJV
    double lmsx -> raKE
    23:40:void <init>() -> <init>
    void onTicked() -> ELAM
    void onSpike() -> HKxG
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> JtIb
    160:160:double getTickTimeMS() -> clgx
    165:165:double getRawTicksPerSecond() -> Vnrv
    170:170:react.gbench.Profiler getTickProfiler() -> tUGI
    175:175:boolean isTicked() -> SfKI
    180:181:void markTick() -> mOqX
    185:185:react.gbench.Profiler getTickTimeProfiler() -> ydVP
    190:190:java.lang.Thread$State getLastState() -> RcHR
    195:195:double getActualTickTimeMS() -> SwNq
    200:200:double getLtt() -> CpQE
    205:205:long getLastTick() -> RPsD
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> FWWI
react.surge.server.WorldMonitor -> pPdL:
    boolean chunksChanged -> jisc
    boolean dropChanged -> Mmqk
    boolean tileChanged -> stmt
    boolean livingChanged -> fTxv
    boolean totalChanged -> DRXn
    boolean updated -> igTm
    int totalChunks -> kBdU
    int totalDrops -> ixTP
    int totalTiles -> DATY
    int totalLiving -> WYma
    int totalEntities -> Nyfw
    int chunksLoaded -> mYkQ
    int chunksUnloaded -> loyf
    long ms -> XuVk
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> JtIb
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> YgCd
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> JtIb
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> JtIb
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> JtIb
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> JtIb
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> JtIb
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> JtIb
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> JtIb
    135:136:void doUpdate() -> sYvb
    140:191:void sample() -> Ixwr
    195:201:void sampleTotalCount() -> EvVp
    205:211:void sampleLivingCount() -> ytyq
    215:243:void sampleTileCount() -> nljd
    247:253:void sampleDropCount() -> hkYq
    257:263:void sampleChunkCount() -> sYvh
react.surge.text.PhantomSpinner -> oNAp:
    react.surge.text.ProgressSpinner s -> oWcv
    react.surge.text.ProgressSpinner c -> pkhi
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> SwEy:
    java.lang.String[] chars -> slbB
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> vujf
    react.surge.text.ProgressSpinner NETWORK -> Glcj
    react.surge.text.ProgressSpinner CIRCLES -> vvKd
    react.surge.text.ProgressSpinner RANDOMS -> Nyhh
    react.surge.text.ProgressSpinner MERGERS -> VFLV
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> IaAV
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> GjtQ:
    react.surge.util.Amounts SINGLE -> axoV
    react.surge.util.Amounts DUAL -> eQwF
    react.surge.util.Amounts TRI -> KFMI
    react.surge.util.Amounts QUAD -> nebR
    react.surge.util.Amounts HEX -> vJvC
    react.surge.util.Amounts OCTA -> jGsa
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> oNqd
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> Bcai
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> AYCE:
    int value() -> value
react.surge.util.Area -> PCKY:
    org.bukkit.Location location -> cLOp
    java.lang.Double radius -> pbus
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> JtIb
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> pQNQ
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> qJde
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> Dqvy
    109:109:boolean isWithin(org.bukkit.Location) -> IguI
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> ylOL
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> JtIb
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> ghUu
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> EnFt
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> qcvI
    257:257:java.lang.Double getRadius() -> FgxM
    268:269:void setRadius(java.lang.Double) -> lCee
    278:283:org.bukkit.Location random() -> agFT
react.surge.util.Axis -> FEnX:
    react.surge.util.Axis X -> ORVs
    react.surge.util.Axis Y -> vTGY
    react.surge.util.Axis Z -> xYlj
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> nwCs
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> gFTK
    29:29:org.bukkit.util.Vector negative() -> IFnJ
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> EBjv:
    react.surge.util.BlastResistance BARRIER -> yvbY
    react.surge.util.BlastResistance BEDROCK -> UBgE
    react.surge.util.BlastResistance COMMAND -> IXvS
    react.surge.util.BlastResistance ENDER_PORTAL -> KWLl
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> TXtx
    react.surge.util.BlastResistance ANVIL -> WINU
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> btBO
    react.surge.util.BlastResistance OBSIDIAN -> JvLr
    react.surge.util.BlastResistance ENDER_CHEST -> dpvF
    react.surge.util.BlastResistance WATER -> ayNn
    react.surge.util.BlastResistance LAVA -> jrfb
    react.surge.util.BlastResistance STATIONARY_WATER -> RAmq
    react.surge.util.BlastResistance DRAGON_EGG -> YGDU
    react.surge.util.BlastResistance ENDER_STONE -> mIKx
    react.surge.util.BlastResistance COAL_BLOCK -> HVTd
    react.surge.util.BlastResistance DIAMOND_BLOCK -> IahL
    react.surge.util.BlastResistance EMERALD_BLOCK -> KhNm
    react.surge.util.BlastResistance GOLD_BLOCK -> ayQf
    react.surge.util.BlastResistance IRON_BLOCK -> uGtx
    react.surge.util.BlastResistance REDSTONE_BLOCK -> sSRC
    react.surge.util.BlastResistance BRICK -> NWhK
    react.surge.util.BlastResistance BRICK_STAIRS -> ceeG
    react.surge.util.BlastResistance HARD_CLAY -> iETS
    react.surge.util.BlastResistance STONE -> DIjQ
    react.surge.util.BlastResistance SMOOTH_BRICK -> Fibm
    react.surge.util.BlastResistance SMOOTH_STAIRS -> QPOy
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> OlMa
    react.surge.util.BlastResistance STONE_SLAB2 -> COWU
    react.surge.util.BlastResistance IRON_DOOR -> TGvu
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> NNwI
    react.surge.util.BlastResistance IRON_TRAPDOOR -> YFfX
    react.surge.util.BlastResistance MOB_SPAWNER -> oGEQ
    react.surge.util.BlastResistance WEB -> MnWt
    react.surge.util.BlastResistance DISPENSER -> ymtD
    react.surge.util.BlastResistance DROPPER -> dXGf
    react.surge.util.BlastResistance FURNACE -> RuVm
    react.surge.util.BlastResistance BURNING_FURNACE -> nnVC
    react.surge.util.BlastResistance BEACON -> UvOe
    react.surge.util.BlastResistance COAL_ORE -> qoNG
    react.surge.util.BlastResistance COCOA -> whNQ
    react.surge.util.BlastResistance DIAMOND_ORE -> BLUg
    react.surge.util.BlastResistance EMERALD_ORE -> GSRj
    react.surge.util.BlastResistance FENCE -> RuTr
    react.surge.util.BlastResistance FENCE_GATE -> VVmO
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> VgoB
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> HpHo
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> SUsy
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> mYoD
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> SVVF
    react.surge.util.BlastResistance ACACIA_FENCE -> Pnnn
    react.surge.util.BlastResistance BIRCH_FENCE -> iUsR
    react.surge.util.BlastResistance DARK_OAK_FENCE -> wxmy
    react.surge.util.BlastResistance SPRUCE_FENCE -> mINa
    react.surge.util.BlastResistance JUNGLE_FENCE -> slbT
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> iNDN
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> vBfc
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> yUEb
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> MUGe
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> bIQx
    react.surge.util.BlastResistance QUARTZ_STAIRS -> bHpx
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> FPSO
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> Lsfk
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> KyUU
    react.surge.util.BlastResistance WOOD_STAIRS -> xIQY
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> Takg
    react.surge.util.BlastResistance ACACIA_DOOR -> JBmB
    react.surge.util.BlastResistance BIRCH_DOOR -> FPRy
    react.surge.util.BlastResistance DARK_OAK_DOOR -> Glgs
    react.surge.util.BlastResistance SPRUCE_DOOR -> AtGb
    react.surge.util.BlastResistance JUNGLE_DOOR -> HDvr
    react.surge.util.BlastResistance GOLD_ORE -> nUFI
    react.surge.util.BlastResistance HOPPER -> qLkx
    react.surge.util.BlastResistance IRON_ORE -> QGad
    react.surge.util.BlastResistance LAPIS_BLOCK -> btGH
    react.surge.util.BlastResistance LAPIS_ORE -> Bvjs
    react.surge.util.BlastResistance QUARTZ_ORE -> vdlR
    react.surge.util.BlastResistance REDSTONE_ORE -> bkSu
    react.surge.util.BlastResistance TRAP_DOOR -> cLSr
    react.surge.util.BlastResistance WOOD -> diJG
    react.surge.util.BlastResistance CHEST -> cUEV
    react.surge.util.BlastResistance TRAPPED_CHEST -> pJHr
    react.surge.util.BlastResistance WORKBENCH -> RdUy
    react.surge.util.BlastResistance CAULDRON -> FaTL
    react.surge.util.BlastResistance LOG -> Jdnk
    react.surge.util.BlastResistance LOG_2 -> uYXT
    react.surge.util.BlastResistance BOOKSHELF -> Sfwt
    react.surge.util.BlastResistance BANNER -> YGGn
    react.surge.util.BlastResistance STANDING_BANNER -> IHYv
    react.surge.util.BlastResistance WALL_BANNER -> lgpB
    react.surge.util.BlastResistance JACK_O_LANTERN -> jXww
    react.surge.util.BlastResistance MELON_BLOCK -> Okou
    react.surge.util.BlastResistance SKULL -> BwML
    react.surge.util.BlastResistance PUMPKIN -> yehO
    react.surge.util.BlastResistance SIGN -> PgDV
    react.surge.util.BlastResistance SIGN_POST -> EgES
    react.surge.util.BlastResistance WALL_SIGN -> gquN
    react.surge.util.BlastResistance QUARTZ_BLOCK -> vBlB
    react.surge.util.BlastResistance NOTE_BLOCK -> qoQt
    react.surge.util.BlastResistance RED_SANDSTONE -> wVoq
    react.surge.util.BlastResistance SANDSTONE -> BLWq
    react.surge.util.BlastResistance WOOL -> gidn
    react.surge.util.BlastResistance MONSTER_EGG -> lFPd
    react.surge.util.BlastResistance RAILS -> BvmW
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> vBjr
    react.surge.util.BlastResistance DETECTOR_RAIL -> BvmU
    react.surge.util.BlastResistance POWERED_RAIL -> kBlG
    react.surge.util.BlastResistance CLAY -> uQKM
    react.surge.util.BlastResistance DIRT -> NynO
    react.surge.util.BlastResistance GRASS -> JnCG
    react.surge.util.BlastResistance GRAVEL -> iVYH
    react.surge.util.BlastResistance SPONGE -> dWhx
    react.surge.util.BlastResistance BREWING_STAND -> GBUk
    react.surge.util.BlastResistance STONE_BUTTON -> mcDp
    react.surge.util.BlastResistance WOOD_BUTTON -> DJNY
    react.surge.util.BlastResistance CAKE_BLOCK -> tfwi
    react.surge.util.BlastResistance ICE -> FjFt
    react.surge.util.BlastResistance PACKED_ICE -> FqwA
    react.surge.util.BlastResistance LEVER -> VWSQ
    react.surge.util.BlastResistance MYCEL -> cmxd
    react.surge.util.BlastResistance PISTON_BASE -> JSoa
    react.surge.util.BlastResistance PISTON_EXTENSION -> sdVT
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> cwKH
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> PLqy
    react.surge.util.BlastResistance GOLD_PLATE -> QYHC
    react.surge.util.BlastResistance IRON_PLATE -> nekO
    react.surge.util.BlastResistance STONE_PLATE -> nChL
    react.surge.util.BlastResistance WOOD_PLATE -> oiOS
    react.surge.util.BlastResistance SAND -> MKyj
    react.surge.util.BlastResistance SOUL_SAND -> etas
    react.surge.util.BlastResistance CACTUS -> Iapn
    react.surge.util.BlastResistance LADDER -> etbm
    react.surge.util.BlastResistance NETHERRACK -> UmeK
    react.surge.util.BlastResistance GLASS -> VyYU
    react.surge.util.BlastResistance THIN_GLASS -> QaYE
    react.surge.util.BlastResistance STAINED_GLASS -> VWUh
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> SNLk
    react.surge.util.BlastResistance GLOWSTONE -> gigR
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> PffK
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> oXLo
    react.surge.util.BlastResistance SEA_LANTERN -> lpdr
    react.surge.util.BlastResistance BED_BLOCK -> lOCT
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> mADd
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> NiNu
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> gGbg
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> tDwf
    react.surge.util.BlastResistance LEAVES -> BTkm
    react.surge.util.BlastResistance LEAVES_2 -> MUKK
    react.surge.util.BlastResistance SNOW -> tNJH
    int br -> hJgC
    react.surge.util.BlastResistance[] ENUM$VALUES -> YWmJ
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> vlRG
    175:190:int get(org.bukkit.Material) -> JtIb
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> jGFa:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> qJde
react.surge.util.C -> prjf:
    react.surge.util.C BLACK -> dGLF
    react.surge.util.C DARK_BLUE -> GJhW
    react.surge.util.C DARK_GREEN -> DSBI
    react.surge.util.C DARK_AQUA -> Mekf
    react.surge.util.C DARK_RED -> VyWe
    react.surge.util.C DARK_PURPLE -> nThQ
    react.surge.util.C GOLD -> aqFg
    react.surge.util.C GRAY -> LcIk
    react.surge.util.C DARK_GRAY -> oXLO
    react.surge.util.C BLUE -> mbjH
    react.surge.util.C GREEN -> HNNh
    react.surge.util.C AQUA -> puEQ
    react.surge.util.C RED -> EgIM
    react.surge.util.C LIGHT_PURPLE -> NhrE
    react.surge.util.C YELLOW -> wOFL
    react.surge.util.C WHITE -> LblE
    react.surge.util.C MAGIC -> yTkC
    react.surge.util.C BOLD -> VNfR
    react.surge.util.C STRIKETHROUGH -> ULDX
    react.surge.util.C UNDERLINE -> BDKv
    react.surge.util.C ITALIC -> qUdF
    react.surge.util.C RESET -> Mvov
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> plRx
    char code -> fUdm
    boolean isFormat -> GAyu
    java.lang.String toString -> rqxf
    java.util.Map BY_ID -> eRbL
    java.util.Map BY_CHAR -> nTkN
    java.util.Map dyeChatMap -> lyXs
    java.util.Map chatHexMap -> VEty
    java.util.Map dyeHexMap -> HNOh
    int[] $SWITCH_TABLE$surge$util$C -> pdBy
    react.surge.util.C[] ENUM$VALUES -> jPmw
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> EeTT
    378:378:java.lang.String hex() -> BKLB
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> Dqvy
    434:442:react.surge.util.C getByChar(java.lang.String) -> JHwJ
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> YgCd
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> JtIb
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> YgCd
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> lCee
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> UbiX
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> Bcai
    560:578:java.lang.String generateColorTable() -> aMQq
    588:588:org.bukkit.ChatColor chatColor() -> mOsd
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> qJde
    632:679:byte getItemMeta() -> Rjxd
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> qura
react.surge.util.C$1 -> prjf$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> prjf$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> prjf$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> prjf$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> prjf$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> prjf$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> prjf$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> prjf$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> prjf$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> prjf$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> prjf$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> prjf$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> prjf$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> prjf$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> prjf$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> prjf$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> prjf$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> prjf$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> prjf$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> prjf$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> prjf$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> prjf$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> gyQy:
    double number -> Cqaw
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> VDFw
    23:25:react.surge.util.CDou add(double) -> yIiY
    30:32:react.surge.util.CDou sub(double) -> jVol
    37:37:double get() -> get
    42:48:void circ() -> FphG
react.surge.util.CMD -> ejYx:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> gXgM
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> aoTj
    51:53:void execute(org.bukkit.command.CommandSender) -> lCee
    60:77:void execute() -> execute
react.surge.util.CNum -> rhPS:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> UAGY
    23:25:react.surge.util.CNum add(int) -> PJiN
    30:32:react.surge.util.CNum sub(int) -> VDJN
    37:37:int get() -> get
    42:48:void circ() -> FphG
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> xXLY
react.surge.util.Chunks -> gElf:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> eHCS
    33:40:react.glang.GList getLoadedChunks() -> JInw
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> YgCd
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> JtIb
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> JtIb
    98:98:boolean unload(org.bukkit.Chunk) -> flhH
    114:124:int unload(react.glang.GList,boolean,boolean) -> JtIb
    138:138:int unload(react.glang.GList,boolean) -> JtIb
    150:150:int unload(react.glang.GList) -> Lhmn
    166:166:boolean isLoaded(java.lang.String,int,int) -> JtIb
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> lCee
    201:205:void load(react.glang.GList) -> rfyT
react.surge.util.Cuboid -> Licc:
    java.lang.String worldName -> dyqA
    int x1 -> Kgwi
    int y1 -> qxGE
    int z1 -> nDHt
    int x2 -> FGfx
    int y2 -> MenM
    int z2 -> dhpF
    int[] $SWITCH_TABLE$surge$util$Axis -> BTme
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> RJjE
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> JtIb
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> lCee
    93:93:boolean hasPlayers() -> uhmT
    98:110:react.glang.GList getPlayers() -> SeXE
    115:166:react.glang.GList getEntities() -> qSpG
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> gMjR
    287:287:org.bukkit.Location getLowerNE() -> wUaH
    298:298:org.bukkit.Location getUpperSW() -> QyYF
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> Vntx
    348:348:int getSizeY() -> LqyD
    358:358:int getSizeZ() -> mien
    368:368:int getLowerX() -> KoVg
    378:378:int getLowerY() -> bOta
    388:388:int getLowerZ() -> YMkH
    398:398:int getUpperX() -> USBB
    408:408:int getUpperY() -> xGcB
    418:418:int getUpperZ() -> baWJ
    428:438:org.bukkit.block.Block[] corners() -> qdpe
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> JtIb
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> YgCd
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> lCee
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> ylOL
    546:546:boolean contains(int,int,int) -> xiLM
    558:558:boolean contains(org.bukkit.block.Block) -> Dqvy
    570:570:boolean contains(org.bukkit.Location) -> UtJE
    580:580:int volume() -> DQQB
    591:601:byte averageLightLevel() -> jqbL
    612:612:react.surge.util.Cuboid contract() -> errq
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> JtIb
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> YgCd
    708:715:boolean containsOnly(org.bukkit.Material) -> YgCd
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> JtIb
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> GPmP
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> JtIb
    786:800:java.util.List getChunks() -> gOFt
    815:819:void fill(int,byte) -> JtIb
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> mPWo
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> kJQm
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> cJjG
react.surge.util.Cuboid$1 -> Licc$1:
    react.surge.util.Cuboid this$0 -> OdEC
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> IguI
    1:1:java.lang.Object onAdapt(java.lang.Object) -> qJde
react.surge.util.Cuboid$CuboidDirection -> Licc$JtIb:
    react.surge.util.Cuboid$CuboidDirection North -> WYyU
    react.surge.util.Cuboid$CuboidDirection East -> vLAW
    react.surge.util.Cuboid$CuboidDirection South -> bRIP
    react.surge.util.Cuboid$CuboidDirection West -> fECX
    react.surge.util.Cuboid$CuboidDirection Up -> iomt
    react.surge.util.Cuboid$CuboidDirection Down -> xAEf
    react.surge.util.Cuboid$CuboidDirection Horizontal -> lhVg
    react.surge.util.Cuboid$CuboidDirection Vertical -> Iaqv
    react.surge.util.Cuboid$CuboidDirection Both -> TYce
    react.surge.util.Cuboid$CuboidDirection Unknown -> PUgg
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> RJjE
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> etfb
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> rWVk
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> cJjG
react.surge.util.Cuboid$CuboidIterator -> Licc$YgCd:
    org.bukkit.World w -> aqKc
    int baseX -> fxJm
    int baseY -> FHJn
    int baseZ -> nClS
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> YrEQ
    int sizeY -> Ewkj
    int sizeZ -> TsVk
    react.surge.util.Cuboid this$0 -> OdEC
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> XuVk:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> WXaS:
    react.glang.GList buffer -> uaqs
    boolean dbg -> UmiA
    int kf -> aNgo
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> ylOL
    41:49:void l(java.lang.Object,java.lang.String) -> YgCd
    53:54:void s(java.lang.Object,java.lang.String) -> lCee
    58:69:void cdb() -> iDKP
    73:79:void v(java.lang.Object,java.lang.String) -> ylOL
    83:84:void w(java.lang.Object,java.lang.String) -> xiLM
    88:89:void f(java.lang.Object,java.lang.String) -> GPmP
    93:106:void l(java.lang.String) -> UAGY
    110:117:void s(java.lang.String) -> PJiN
    121:135:void v(java.lang.String) -> VDJN
    139:146:void w(java.lang.String) -> xXLY
    150:157:void f(java.lang.String) -> gMjR
react.surge.util.DMSRequire -> oESk:
    react.surge.util.DMSRequirement value() -> ECUH
react.surge.util.DMSRequirement -> fvOL:
    react.surge.util.DMSRequirement SQL -> Dcga
    react.surge.util.DMSRequirement[] ENUM$VALUES -> CrGS
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> FpaX:
    react.surge.util.Depend VAULT -> kvXD
    react.surge.util.Depend FAWE -> yemQ
    react.surge.util.Depend WORLDEDIT -> wqJL
    react.surge.util.Depend PROTOLIB -> iNNf
    react.surge.util.Depend CITIZENS -> aEvQ
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> whWk
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> rgml:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> vSBI
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> OrkO:
    react.surge.util.DimensionFace X -> CXTK
    react.surge.util.DimensionFace Y -> aqKS
    react.surge.util.DimensionFace Z -> nUMK
    react.surge.util.DimensionFace[] ENUM$VALUES -> kCRa
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> OQHm:
    react.surge.util.Direction U -> jIAH
    react.surge.util.Direction D -> UvYW
    react.surge.util.Direction N -> TruV
    react.surge.util.Direction S -> qLsa
    react.surge.util.Direction E -> mbkD
    react.surge.util.Direction W -> Meop
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> vCQo
    int[] $SWITCH_TABLE$surge$util$Direction -> MfQS
    react.surge.util.Direction[] ENUM$VALUES -> TbVn
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> rNdn
    61:61:int x() -> iULf
    66:66:int y() -> fuvO
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> xHFM
    81:81:react.glang.GList news() -> ryYG
    86:86:react.glang.GList udnews() -> rphA
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> oLnN
    115:147:react.surge.util.Direction fromByte(byte) -> Dqvy
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> LPWx
react.surge.util.DynamicConfiguration -> rhOO:
react.surge.util.DynamicTracker -> priX:
react.surge.util.Embedded -> iLRd:
    react.glang.GList get() -> QhYB
    void add(java.lang.Object) -> add
react.surge.util.FU -> JIiN:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> JtIb
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> YgCd
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> xiLM
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> GPmP
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> UAXL:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> oxEf
react.surge.util.Health -> Rscq:
    double hp -> BDPf
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> aDbd
    41:41:double getHearts() -> hsjy
    51:51:double getHalfHearts() -> oonf
    61:61:int getFlatHalfHearts() -> gxyE
react.surge.util.IO -> Drkf:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> Drkg:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> JtIb
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> JtIb
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> JtIb
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> JtIb
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> JtIb
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> YgCd
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> lCee
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> ylOL
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> JtIb
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> JtIb
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> JtIb
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> JtIb
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> xiLM
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> GPmP
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> qJde
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> Dqvy
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> IguI
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> JtIb
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> qcvI
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> UtJE
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> JtIb
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> JtIb
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> YgCd
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> JtIb
react.surge.util.MSound -> pXwN:
    react.surge.util.MSound AMBIENCE_CAVE -> YrGN
    react.surge.util.MSound AMBIENCE_RAIN -> kvYp
    react.surge.util.MSound AMBIENCE_THUNDER -> Cqgj
    react.surge.util.MSound ANVIL_BREAK -> qMWa
    react.surge.util.MSound ANVIL_LAND -> iNPm
    react.surge.util.MSound ANVIL_USE -> qVHf
    react.surge.util.MSound ARROW_HIT -> Xncd
    react.surge.util.MSound BURP -> NiVu
    react.surge.util.MSound CHEST_CLOSE -> drFG
    react.surge.util.MSound CHEST_OPEN -> usUm
    react.surge.util.MSound CLICK -> JSwQ
    react.surge.util.MSound DOOR_CLOSE -> yUNm
    react.surge.util.MSound DOOR_OPEN -> kLEy
    react.surge.util.MSound DRINK -> iWBI
    react.surge.util.MSound EAT -> tMoI
    react.surge.util.MSound EXPLODE -> iVaJ
    react.surge.util.MSound FALL_BIG -> JnJq
    react.surge.util.MSound FALL_SMALL -> bQlD
    react.surge.util.MSound FIRE -> YWqv
    react.surge.util.MSound FIRE_IGNITE -> EEHt
    react.surge.util.MSound FIZZ -> iNPi
    react.surge.util.MSound FUSE -> ywQj
    react.surge.util.MSound GLASS -> xcMK
    react.surge.util.MSound HURT_FLESH -> RubU
    react.surge.util.MSound ITEM_BREAK -> nvpn
    react.surge.util.MSound ITEM_PICKUP -> LcOi
    react.surge.util.MSound LAVA -> NXTh
    react.surge.util.MSound LAVA_POP -> BUSB
    react.surge.util.MSound LEVEL_UP -> lpjr
    react.surge.util.MSound MINECART_BASE -> SpUQ
    react.surge.util.MSound MINECART_INSIDE -> UmjH
    react.surge.util.MSound NOTE_BASS -> gsAf
    react.surge.util.MSound NOTE_PIANO -> DJXt
    react.surge.util.MSound NOTE_BASS_DRUM -> PxOg
    react.surge.util.MSound NOTE_STICKS -> tNRk
    react.surge.util.MSound NOTE_BASS_GUITAR -> oOdX
    react.surge.util.MSound NOTE_SNARE_DRUM -> LRPu
    react.surge.util.MSound NOTE_PLING -> jYgQ
    react.surge.util.MSound ORB_PICKUP -> YiWj
    react.surge.util.MSound PISTON_EXTEND -> AJAL
    react.surge.util.MSound PISTON_RETRACT -> qUkF
    react.surge.util.MSound PORTAL -> pchp
    react.surge.util.MSound PORTAL_TRAVEL -> yDPQ
    react.surge.util.MSound PORTAL_TRIGGER -> XUSs
    react.surge.util.MSound SHOOT_ARROW -> nfTA
    react.surge.util.MSound SPLASH -> cURy
    react.surge.util.MSound SPLASH2 -> NrJb
    react.surge.util.MSound STEP_GRASS -> xlAP
    react.surge.util.MSound STEP_GRAVEL -> xsoy
    react.surge.util.MSound STEP_LADDER -> NiYY
    react.surge.util.MSound STEP_SAND -> BDQo
    react.surge.util.MSound STEP_SNOW -> hucG
    react.surge.util.MSound STEP_STONE -> DdKK
    react.surge.util.MSound STEP_WOOD -> iFAv
    react.surge.util.MSound STEP_WOOL -> iVbj
    react.surge.util.MSound SWIM -> Tjgt
    react.surge.util.MSound WATER -> RTAb
    react.surge.util.MSound WOOD_CLICK -> TQWI
    react.surge.util.MSound BAT_DEATH -> AlDn
    react.surge.util.MSound BAT_HURT -> txdb
    react.surge.util.MSound BAT_IDLE -> xsoa
    react.surge.util.MSound BAT_LOOP -> eJVh
    react.surge.util.MSound BAT_TAKEOFF -> TbYI
    react.surge.util.MSound BLAZE_BREATH -> qMYL
    react.surge.util.MSound BLAZE_DEATH -> jYfD
    react.surge.util.MSound BLAZE_HIT -> Vpnh
    react.surge.util.MSound CAT_HISS -> KqPh
    react.surge.util.MSound CAT_HIT -> kmjW
    react.surge.util.MSound CAT_MEOW -> Rlua
    react.surge.util.MSound CAT_PURR -> LtUr
    react.surge.util.MSound CAT_PURREOW -> ripp
    react.surge.util.MSound CHICKEN_IDLE -> iVej
    react.surge.util.MSound CHICKEN_HURT -> xbqb
    react.surge.util.MSound CHICKEN_EGG_POP -> gXoq
    react.surge.util.MSound CHICKEN_WALK -> thHF
    react.surge.util.MSound COW_IDLE -> ReEu
    react.surge.util.MSound COW_HURT -> xQpV
    react.surge.util.MSound COW_WALK -> appf
    react.surge.util.MSound CREEPER_HISS -> hvGR
    react.surge.util.MSound CREEPER_DEATH -> RJri
    react.surge.util.MSound ENDERDRAGON_DEATH -> aqQh
    react.surge.util.MSound ENDERDRAGON_GROWL -> knOJ
    react.surge.util.MSound ENDERDRAGON_HIT -> OSLQ
    react.surge.util.MSound ENDERDRAGON_WINGS -> PgPb
    react.surge.util.MSound ENDERMAN_DEATH -> gaae
    react.surge.util.MSound ENDERMAN_HIT -> YWxA
    react.surge.util.MSound ENDERMAN_IDLE -> KXAk
    react.surge.util.MSound ENDERMAN_TELEPORT -> qEKc
    react.surge.util.MSound ENDERMAN_SCREAM -> cnfq
    react.surge.util.MSound ENDERMAN_STARE -> JnPe
    react.surge.util.MSound GHAST_SCREAM -> FHRJ
    react.surge.util.MSound GHAST_SCREAM2 -> VhbB
    react.surge.util.MSound GHAST_CHARGE -> MTvI
    react.surge.util.MSound GHAST_DEATH -> etlK
    react.surge.util.MSound GHAST_FIREBALL -> uPuq
    react.surge.util.MSound GHAST_MOAN -> HNVS
    react.surge.util.MSound IRONGOLEM_DEATH -> LJAj
    react.surge.util.MSound IRONGOLEM_HIT -> NqjJ
    react.surge.util.MSound IRONGOLEM_THROW -> LtTx
    react.surge.util.MSound IRONGOLEM_WALK -> qxPG
    react.surge.util.MSound MAGMACUBE_WALK -> GvHG
    react.surge.util.MSound MAGMACUBE_WALK2 -> fDjM
    react.surge.util.MSound MAGMACUBE_JUMP -> cetR
    react.surge.util.MSound PIG_IDLE -> IHhU
    react.surge.util.MSound PIG_DEATH -> TYhk
    react.surge.util.MSound PIG_WALK -> AsvR
    react.surge.util.MSound SHEEP_IDLE -> AIbf
    react.surge.util.MSound SHEEP_SHEAR -> OJYt
    react.surge.util.MSound SHEEP_WALK -> iMrt
    react.surge.util.MSound SILVERFISH_HIT -> GTDp
    react.surge.util.MSound SILVERFISH_KILL -> jkIu
    react.surge.util.MSound SILVERFISH_IDLE -> GCCd
    react.surge.util.MSound SILVERFISH_WALK -> LQrK
    react.surge.util.MSound SKELETON_IDLE -> SpXu
    react.surge.util.MSound SKELETON_DEATH -> bRQT
    react.surge.util.MSound SKELETON_HURT -> DBKM
    react.surge.util.MSound SKELETON_WALK -> aqSp
    react.surge.util.MSound SLIME_ATTACK -> bsvS
    react.surge.util.MSound SLIME_WALK -> tNVr
    react.surge.util.MSound SLIME_WALK2 -> JKmm
    react.surge.util.MSound SPIDER_IDLE -> hKUE
    react.surge.util.MSound SPIDER_DEATH -> VNpd
    react.surge.util.MSound SPIDER_WALK -> LRTs
    react.surge.util.MSound WITHER_DEATH -> mRTD
    react.surge.util.MSound WITHER_HURT -> suhE
    react.surge.util.MSound WITHER_IDLE -> aWaO
    react.surge.util.MSound WITHER_SHOOT -> qUoD
    react.surge.util.MSound WITHER_SPAWN -> fDln
    react.surge.util.MSound WOLF_BARK -> GeHx
    react.surge.util.MSound WOLF_DEATH -> PxTc
    react.surge.util.MSound WOLF_GROWL -> ViDl
    react.surge.util.MSound WOLF_HOWL -> FivG
    react.surge.util.MSound WOLF_HURT -> KNqd
    react.surge.util.MSound WOLF_PANT -> qpBF
    react.surge.util.MSound WOLF_SHAKE -> sBau
    react.surge.util.MSound WOLF_WALK -> tWHF
    react.surge.util.MSound WOLF_WHINE -> VXCU
    react.surge.util.MSound ZOMBIE_METAL -> MTxJ
    react.surge.util.MSound ZOMBIE_WOOD -> xkdV
    react.surge.util.MSound ZOMBIE_WOODBREAK -> RSdj
    react.surge.util.MSound ZOMBIE_IDLE -> MTut
    react.surge.util.MSound ZOMBIE_DEATH -> pIxv
    react.surge.util.MSound ZOMBIE_HURT -> oaJQ
    react.surge.util.MSound ZOMBIE_INFECT -> tpXv
    react.surge.util.MSound ZOMBIE_UNFECT -> QHQe
    react.surge.util.MSound ZOMBIE_REMEDY -> rrbc
    react.surge.util.MSound ZOMBIE_WALK -> fxRD
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> RTEs
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> iMtv
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> nCsB
    react.surge.util.MSound ZOMBIE_PIG_HURT -> mtTq
    react.surge.util.MSound DIG_WOOL -> pRjT
    react.surge.util.MSound DIG_GRASS -> tggb
    react.surge.util.MSound DIG_GRAVEL -> hufa
    react.surge.util.MSound DIG_SAND -> ENAS
    react.surge.util.MSound DIG_SNOW -> YrMH
    react.surge.util.MSound DIG_STONE -> pcno
    react.surge.util.MSound DIG_WOOD -> HFJl
    react.surge.util.MSound FIREWORK_BLAST -> QXuN
    react.surge.util.MSound FIREWORK_BLAST2 -> QsHg
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> Dcpx
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> aWcQ
    react.surge.util.MSound FIREWORK_TWINKLE -> HWMF
    react.surge.util.MSound FIREWORK_TWINKLE2 -> WlHv
    react.surge.util.MSound FIREWORK_LAUNCH -> tyMb
    react.surge.util.MSound SUCCESSFUL_HIT -> rjUu
    react.surge.util.MSound HORSE_ANGRY -> gjWQ
    react.surge.util.MSound HORSE_ARMOR -> IkRB
    react.surge.util.MSound HORSE_BREATHE -> XMIn
    react.surge.util.MSound HORSE_DEATH -> Hxno
    react.surge.util.MSound HORSE_GALLOP -> JwFN
    react.surge.util.MSound HORSE_HIT -> dPKx
    react.surge.util.MSound HORSE_IDLE -> YOke
    react.surge.util.MSound HORSE_JUMP -> wptG
    react.surge.util.MSound HORSE_LAND -> dqmO
    react.surge.util.MSound HORSE_SADDLE -> QHSa
    react.surge.util.MSound HORSE_SOFT -> MUXp
    react.surge.util.MSound HORSE_WOOD -> TYmI
    react.surge.util.MSound DONKEY_ANGRY -> PodS
    react.surge.util.MSound DONKEY_DEATH -> sCDq
    react.surge.util.MSound DONKEY_HIT -> CaPH
    react.surge.util.MSound DONKEY_IDLE -> sSfD
    react.surge.util.MSound HORSE_SKELETON_DEATH -> pcmt
    react.surge.util.MSound HORSE_SKELETON_HIT -> EgUB
    react.surge.util.MSound HORSE_SKELETON_IDLE -> DuST
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> lycw
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> yvxh
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> SglI
    react.surge.util.MSound VILLAGER_DEATH -> eSMw
    react.surge.util.MSound VILLAGER_HAGGLE -> JDAB
    react.surge.util.MSound VILLAGER_HIT -> vwBN
    react.surge.util.MSound VILLAGER_IDLE -> JLPf
    react.surge.util.MSound VILLAGER_NO -> bkgS
    react.surge.util.MSound VILLAGER_YES -> qUnr
    java.lang.String pre19sound -> dOjR
    java.lang.String post19sound -> YaPS
    org.bukkit.Sound resolvedSound -> FQIA
    react.surge.util.MSound[] ENUM$VALUES -> UvfR
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> LGgY
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> gWNY:
    org.bukkit.Material material -> OKBH
    java.lang.Byte data -> kTar
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> AilQ
    79:80:void setData(java.lang.Byte) -> JtIb
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> tecl:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> HCRU
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> RHxW
    68:68:boolean isAnyOnline() -> dyBD
    80:80:react.glang.GList inWorld(org.bukkit.World) -> GQMD
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> Lhmn
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> JtIb
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> JtIb
    143:144:void disable(org.bukkit.entity.Player) -> TyUh
    154:155:void enable(org.bukkit.entity.Player) -> RroE
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> JtIb
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> YgCd
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> NMQH
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> JtIb
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> VDFw
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> lCee
    300:300:boolean canFindPlayer(java.lang.String) -> AFnG
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> aUJC
    338:345:react.glang.GList onlinePlayers() -> lEBs
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> yIiY
    368:371:void clear(org.bukkit.entity.Player) -> jVol
    381:385:void clearEffects(org.bukkit.entity.Player) -> yJIx
    398:399:void heal(org.bukkit.entity.Player,double) -> JtIb
    409:410:void heal(org.bukkit.entity.Player) -> Etyg
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> qKDS
    432:433:void resetHunger(org.bukkit.entity.Player) -> STOg
    443:444:void kill(org.bukkit.entity.Player) -> KTkE
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> qtyj
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> jErG
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> JtIb
react.surge.util.P$1 -> tecl$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> IguI
    1:1:java.lang.Object onAdapt(java.lang.Object) -> qJde
react.surge.util.P$2 -> tecl$2:
    java.lang.Double val$doff -> orPl
    org.bukkit.entity.Player val$e -> nnld
    org.bukkit.entity.Entity[] val$result -> DApF
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> QNKB
react.surge.util.PE -> uGDm:
    react.surge.util.PE ABSORPTION -> gahJ
    react.surge.util.PE BLINDNESS -> WQwu
    react.surge.util.PE CONFUSION -> wNsB
    react.surge.util.PE DAMAGE_RESISTANCE -> ReMM
    react.surge.util.PE FAST_DIGGING -> AJII
    react.surge.util.PE FIRE_RESISTANCE -> KiIf
    react.surge.util.PE GLOWING -> MMMJ
    react.surge.util.PE HARM -> pBOF
    react.surge.util.PE HEAL -> PUuI
    react.surge.util.PE HEALTH_BOOST -> DApp
    react.surge.util.PE HUNGER -> ujoO
    react.surge.util.PE INCREASE_DAMAGE -> SVkj
    react.surge.util.PE INVISIBILITY -> xlHq
    react.surge.util.PE JUMP -> xswm
    react.surge.util.PE LEVITATION -> hBfj
    react.surge.util.PE LUCK -> DJaL
    react.surge.util.PE NIGHT_VISION -> PVUC
    react.surge.util.PE POISON -> ptqS
    react.surge.util.PE REGENERATION -> GSjP
    react.surge.util.PE SATURATION -> iMxx
    react.surge.util.PE SLOW -> nUXw
    react.surge.util.PE SLOW_DIGGING -> QahH
    react.surge.util.PE SPEED -> vUAC
    react.surge.util.PE UNLUCK -> ayhA
    react.surge.util.PE WATER_BREATHING -> cCxH
    react.surge.util.PE WEAKNESS -> puQv
    react.surge.util.PE WITHER -> fwtr
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> JtIb
    144:144:react.surge.util.PE d(int) -> oxEf
    156:156:react.surge.util.PE a(int) -> HCRU
    166:166:org.bukkit.potion.PotionEffect c() -> SUMh
    177:178:void c(org.bukkit.entity.LivingEntity) -> GPmP
    182:183:void crm(org.bukkit.entity.LivingEntity) -> qJde
    187:188:void rm(org.bukkit.entity.LivingEntity) -> Dqvy
react.surge.util.ParticleEffect -> YESm:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> kwDe
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> QXwI
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> liIb
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> sCIi
    react.surge.util.ParticleEffect WATER_BUBBLE -> UUEt
    react.surge.util.ParticleEffect WATER_SPLASH -> ShRJ
    react.surge.util.ParticleEffect WATER_WAKE -> EUvr
    react.surge.util.ParticleEffect SUSPENDED -> ENGk
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> SEnG
    react.surge.util.ParticleEffect CRIT -> OArJ
    react.surge.util.ParticleEffect CRIT_MAGIC -> rQHd
    react.surge.util.ParticleEffect SMOKE_NORMAL -> OcuL
    react.surge.util.ParticleEffect SMOKE_LARGE -> ahiD
    react.surge.util.ParticleEffect SPELL -> AQyx
    react.surge.util.ParticleEffect SPELL_INSTANT -> TRBv
    react.surge.util.ParticleEffect SPELL_MOB -> pBQD
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> nLkR
    react.surge.util.ParticleEffect SPELL_WITCH -> cxBF
    react.surge.util.ParticleEffect DRIP_WATER -> NYBs
    react.surge.util.ParticleEffect DRIP_LAVA -> LlOL
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> QQJf
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> vLSG
    react.surge.util.ParticleEffect TOWN_AURA -> kUEI
    react.surge.util.ParticleEffect NOTE -> UvgN
    react.surge.util.ParticleEffect PORTAL -> bJHl
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> HFNT
    react.surge.util.ParticleEffect FLAME -> CaTO
    react.surge.util.ParticleEffect LAVA -> CYCf
    react.surge.util.ParticleEffect FOOTSTEP -> aqYI
    react.surge.util.ParticleEffect CLOUD -> drRE
    react.surge.util.ParticleEffect REDSTONE -> rahT
    react.surge.util.ParticleEffect SNOWBALL -> vveK
    react.surge.util.ParticleEffect SNOW_SHOVEL -> YjCM
    react.surge.util.ParticleEffect SLIME -> qoen
    react.surge.util.ParticleEffect HEART -> PgXQ
    react.surge.util.ParticleEffect BARRIER -> kDAl
    react.surge.util.ParticleEffect ITEM_CRACK -> IjtH
    react.surge.util.ParticleEffect BLOCK_CRACK -> qpGJ
    react.surge.util.ParticleEffect BLOCK_DUST -> gPgH
    react.surge.util.ParticleEffect WATER_DROP -> SVoI
    react.surge.util.ParticleEffect ITEM_TAKE -> NaRW
    react.surge.util.ParticleEffect MOB_APPEARANCE -> LlNF
    react.surge.util.ParticleEffect DRAGON_BREATH -> cnmr
    react.surge.util.ParticleEffect END_ROD -> rPfS
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> svPc
    react.surge.util.ParticleEffect SWEEP_ATTACK -> Vylr
    java.util.Map NAME_MAP -> BwdJ
    java.util.Map ID_MAP -> Mwby
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> nnqE
    java.util.List properties -> Bfau
    react.surge.util.ParticleEffect[] ENUM$VALUES -> OBUO
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> qKaO
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> JtIb
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> uWSD
    557:565:react.surge.util.ParticleEffect fromId(int) -> AFnG
    577:578:boolean isWater(org.bukkit.Location) -> NMRJ
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> JtIb
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> JtIb
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> JtIb
    665:681:void display(float,int,org.bukkit.Location,double) -> JtIb
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> JtIb
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> JtIb
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> JtIb
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> JtIb
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> JtIb
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> JtIb
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> JtIb
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> JtIb
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> JtIb
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> JtIb
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> JtIb
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> JtIb
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> JtIb
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> JtIb
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> YESm$JtIb:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> YESm$YgCd:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> YESm$lCee:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> fCRH
    1594:1594:float getValueY() -> IiRq
    1605:1605:float getValueZ() -> dooU
react.surge.util.ParticleEffect$OrdinaryColor -> YESm$ylOL:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> fCRH
    1526:1526:float getValueY() -> IiRq
    1537:1537:float getValueZ() -> dooU
react.surge.util.ParticleEffect$ParticleColor -> YESm$xiLM:
    1383:1383:void <init>() -> <init>
    float getValueX() -> fCRH
    float getValueY() -> IiRq
    float getValueZ() -> dooU
react.surge.util.ParticleEffect$ParticleColorException -> YESm$GPmP:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> YESm$qJde:
    org.bukkit.Material material -> OKBH
    byte data -> EDwd
    int[] packetData -> dOqG
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> lUgP
    1309:1309:java.lang.String getPacketDataString() -> AYLr
react.surge.util.ParticleEffect$ParticleDataException -> YESm$Dqvy:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> YESm$IguI:
    int version -> version
    java.lang.Class enumParticle -> kegM
    java.lang.reflect.Constructor packetConstructor -> QPlA
    java.lang.reflect.Method getHandle -> qpIv
    java.lang.reflect.Field playerConnection -> BwcQ
    java.lang.reflect.Method sendPacket -> eBTJ
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> aFhU
    float offsetX -> DAsV
    float offsetY -> fDuF
    float offsetZ -> jHpb
    float speed -> ixrS
    int amount -> LbHv
    boolean longDistance -> seNM
    react.surge.util.ParticleEffect$ParticleData data -> KXKD
    java.lang.Object packet -> yoOw
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> iTOF
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> JtIb
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> YgCd
    2004:2018:void sendTo(org.bukkit.Location,double) -> YgCd
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> YESm$IguI$JtIb:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> YESm$IguI$YgCd:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> YESm$IguI$lCee:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> YESm$qcvI:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> dHAC
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> sBis
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> gGvv
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> BLor
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> tyRR
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> YESm$UtJE:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> baOq:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> PBVd
react.surge.util.Persist -> kRWs:
react.surge.util.Platform -> AOpo:
    boolean ENABLE -> XwcB
    double PROC_CPU -> elet
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> bilQ
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> QOJN
react.surge.util.Platform$CPU -> AOpo$JtIb:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> ELGg
    222:227:double getProcessCPULoad() -> TaEN
    232:237:double getLiveProcessCPULoad() -> OPse
    242:247:java.lang.String getArchitecture() -> Kfjd
react.surge.util.Platform$ENVIRONMENT -> AOpo$YgCd:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> vIrM
    23:28:java.lang.String getJavaHome() -> cvAe
    33:38:java.lang.String getJavaVendor() -> sslx
    43:48:java.lang.String getJavaVersion() -> wgID
react.surge.util.Platform$MEMORY -> AOpo$lCee:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> AOpo$lCee$JtIb:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> SeqW
    135:140:long getFreeMemory() -> NVbU
    145:150:long getUsedMemory() -> rhYX
react.surge.util.Platform$MEMORY$VIRTUAL -> AOpo$lCee$YgCd:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> SeqW
    168:173:long getFreeMemory() -> NVbU
    178:183:long getUsedMemory() -> rhYX
    188:193:long getCommittedVirtualMemory() -> KMWV
react.surge.util.Platform$STORAGE -> AOpo$ylOL:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> woWt
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> qJde
    78:85:long getAbsoluteFreeSpace() -> lnwe
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> Dqvy
    100:100:long getUsedSpace() -> vlTq
    105:105:long getUsedSpace(java.io.File) -> IguI
    110:110:long getAbsoluteUsedSpace() -> RHyf
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> DQIs:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> xiLM
    78:88:void enable(java.lang.String) -> KCgs
    95:99:void enableAll() -> LYKd
    109:113:void disable(org.bukkit.plugin.Plugin) -> GPmP
    120:124:void disableAll() -> fnGt
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> qJde
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> JtIb
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> teQQ
    183:186:java.util.List getPluginNames(boolean) -> Ptyr
    198:201:java.lang.String getPluginVersion(java.lang.String) -> aKvr
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> Dqvy
    251:330:java.util.List findByCommand(java.lang.String) -> TFRl
    351:352:void load(org.bukkit.plugin.Plugin) -> IguI
    356:378:java.lang.String getPluginFileName(java.lang.String) -> OYGF
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> JtIb
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> qcvI
    494:498:void reloadAll() -> scLX
    510:636:void unload(org.bukkit.plugin.Plugin) -> UtJE
react.surge.util.PoolCount -> OsME:
react.surge.util.PoolDescriber -> Drkw:
react.surge.util.PoolNanoThrottle -> wMKB:
react.surge.util.PositionalSelector -> qukp:
    react.glang.GSet allowedChunks -> wiJE
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> XKKx
    39:40:void addChunk(org.bukkit.Chunk) -> rfyT
    44:44:react.glang.GSet getAllowedChunks() -> LYLH
react.surge.util.Protocol -> NMfA:
    react.surge.util.Protocol LATEST -> QbLu
    react.surge.util.Protocol R1_12_2 -> MfbD
    react.surge.util.Protocol R1_12_2_PRE -> QbLt
    react.surge.util.Protocol R1_12_1 -> svRe
    react.surge.util.Protocol R1_12 -> iNao
    react.surge.util.Protocol R1_11_2 -> fpMW
    react.surge.util.Protocol R1_11_1 -> HVtK
    react.surge.util.Protocol R1_11 -> gbNk
    react.surge.util.Protocol R1_10_2 -> qMiJ
    react.surge.util.Protocol R1_10_1 -> HOEI
    react.surge.util.Protocol R1_10 -> oYDr
    react.surge.util.Protocol R1_9_4 -> puYl
    react.surge.util.Protocol R1_9_3 -> XUbI
    react.surge.util.Protocol R1_9_2 -> ReSK
    react.surge.util.Protocol R1_9_1 -> RSow
    react.surge.util.Protocol R1_9 -> MxFp
    react.surge.util.Protocol R1_8_9 -> TYvf
    react.surge.util.Protocol R1_8_8 -> AcaK
    react.surge.util.Protocol R1_8_7 -> NaWT
    react.surge.util.Protocol R1_8_6 -> XUcB
    react.surge.util.Protocol R1_8_5 -> MVDM
    react.surge.util.Protocol R1_8_4 -> CjIX
    react.surge.util.Protocol R1_8_3 -> VWmK
    react.surge.util.Protocol R1_8_2 -> OJgi
    react.surge.util.Protocol R1_8_1 -> plhX
    react.surge.util.Protocol R1_8 -> tgsO
    react.surge.util.Protocol R1_7_10 -> TYvn
    react.surge.util.Protocol R1_7_9 -> UfLO
    react.surge.util.Protocol R1_7_8 -> uISi
    react.surge.util.Protocol R1_7_7 -> OmJP
    react.surge.util.Protocol R1_7_6 -> hdpE
    react.surge.util.Protocol R1_7_5 -> SNam
    react.surge.util.Protocol R1_7_4 -> dPRr
    react.surge.util.Protocol R1_7_3 -> iWQv
    react.surge.util.Protocol R1_7_2 -> Umyo
    react.surge.util.Protocol R1_7_1 -> kKuk
    react.surge.util.Protocol B1_6_4 -> IRFh
    react.surge.util.Protocol B1_6_3 -> sCLt
    react.surge.util.Protocol B1_6_2 -> Xwck
    react.surge.util.Protocol B1_6_1 -> OdXx
    react.surge.util.Protocol B1_5_2 -> HErG
    react.surge.util.Protocol B1_5_1 -> kvid
    react.surge.util.Protocol B1_5 -> JLYR
    react.surge.util.Protocol B1_4_7 -> qEWP
    react.surge.util.Protocol B1_4_6 -> mIkX
    react.surge.util.Protocol B1_4_5 -> HyWd
    react.surge.util.Protocol B1_4_4 -> Tbfs
    react.surge.util.Protocol B1_4_2 -> jtGj
    react.surge.util.Protocol B1_3_2 -> MVBq
    react.surge.util.Protocol B1_3_1 -> tpcO
    react.surge.util.Protocol B1_2_5 -> kKyI
    react.surge.util.Protocol B1_2_4 -> aWnB
    react.surge.util.Protocol EARLIEST -> HqJI
    react.surge.util.Protocol UNKNOWN -> iqGy
    int version -> version
    java.lang.String packageVersion -> DtCw
    java.lang.String versionName -> cwet
    boolean netty -> iyYE
    react.surge.util.Protocol[] ENUM$VALUES -> RLBq
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> JRdj
    118:118:java.lang.String getPackageVersion() -> jOGg
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> OYdE
    142:150:react.surge.util.Protocol getProtocolVersion() -> EuyY
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> YgCd
    160:160:boolean isServerVersion() -> sAHa
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> NNQA
    175:175:boolean isActualVersion() -> fuwP
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> IqeU
    200:200:int getMetaVersion() -> KMXU
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> jGEV:
    react.surge.util.Protocol from -> nMRV
    react.surge.util.Protocol to -> mkpy
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> scKd
    21:21:react.surge.util.Protocol getTo() -> OICd
    26:26:boolean contains(react.surge.util.Protocol) -> lCee
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> gWQW:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> JBGQ
    70:70:int randomNextInt() -> hAMD
    80:80:long randomNextLong() -> SesF
    92:92:boolean isWithin(double) -> yJIx
    104:104:boolean isWithin(int) -> aUJC
    116:116:boolean isWithin(long) -> lUGT
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> Etyg
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> Ptyr
react.surge.util.RawEvent -> TWiu:
react.surge.util.RayTrace -> FyUm:
    org.bukkit.Location start -> gQNh
    org.bukkit.util.Vector direction -> vLXb
    java.lang.Double maxDistance -> btci
    java.lang.Double distanceCovered -> AdDG
    java.lang.Double step -> ubhG
    java.lang.Boolean stop -> jYvq
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> BmTE
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> QNKB
    89:89:org.bukkit.Location getStart() -> VDhe
    94:95:void setStart(org.bukkit.Location) -> flhH
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> TrHJ
    114:115:void setMaxDistance(java.lang.Double) -> ylOL
    119:119:java.lang.Double getDistanceCovered() -> NMsA
    124:125:void setDistanceCovered(java.lang.Double) -> xiLM
    129:129:java.lang.Double getStep() -> rqNN
    134:135:void setStep(java.lang.Double) -> GPmP
react.surge.util.ReflectionUtils -> cSUG:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> JtIb
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> JtIb
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> JtIb
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> JtIb
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> JtIb
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> JtIb
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> JtIb
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> JtIb
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> JtIb
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> JtIb
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> JtIb
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> JtIb
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> JtIb
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> JtIb
react.surge.util.ReflectionUtils$DataType -> cSUG$JtIb:
    react.surge.util.ReflectionUtils$DataType BYTE -> NGfe
    react.surge.util.ReflectionUtils$DataType SHORT -> SFTy
    react.surge.util.ReflectionUtils$DataType INTEGER -> UvoE
    react.surge.util.ReflectionUtils$DataType LONG -> Bnwj
    react.surge.util.ReflectionUtils$DataType CHARACTER -> bcaO
    react.surge.util.ReflectionUtils$DataType FLOAT -> dqvq
    react.surge.util.ReflectionUtils$DataType DOUBLE -> vTiI
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> whmX
    java.util.Map CLASS_MAP -> rsQN
    java.lang.Class primitive -> IQhN
    java.lang.Class reference -> jAFL
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> IYwv
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> aUiV
    704:704:java.lang.Class getReference() -> pPtM
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> YgCd
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> lCee
    741:742:java.lang.Class getReference(java.lang.Class) -> ylOL
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> JtIb
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> YgCd
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> YgCd
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> lCee
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> JtIb
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> cSUG$YgCd:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> cUbn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> AktY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> TYwq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> iyVn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> SWUo
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> eAvO
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> Hgvv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> cMUY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> UTmT
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> svWH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> lrBp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> lhpn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> bktR
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> mAaH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> hTTa
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> pJil
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> tEta
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> ngGf
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> bcdH
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> cnwN
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> rQPi
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> Blgn:
    void refresh() -> refresh
react.surge.util.SQLOperation -> dfwu:
    react.surge.util.SQLOperation LOAD -> BUgF
    react.surge.util.SQLOperation SAVE -> WdFR
    react.surge.util.SQLOperation[] ENUM$VALUES -> ASDa
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> TFhm:
    react.surge.util.ServerState START -> QPrF
    react.surge.util.ServerState ENABLE -> dXhl
    react.surge.util.ServerState DISABLE -> VXRO
    react.surge.util.ServerState STOP -> OloN
    react.surge.util.ServerState RUNNING -> smeW
    react.surge.util.ServerState[] ENUM$VALUES -> QQSR
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> BmIM:
    org.bukkit.Location location -> cLOp
    org.bukkit.util.Vector offset -> WIqq
    org.bukkit.util.Vector size -> Atew
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> Lhmn
    90:94:org.bukkit.Location randomLocation() -> pjff
    104:104:org.bukkit.Location randomSurface() -> IFsc
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> RANU
    129:129:org.bukkit.util.Vector getSize() -> nlpU
react.surge.util.SnowLevel -> vAXo:
    byte level -> FatX
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> lEHR
    51:52:void setLevel(byte) -> IguI
react.surge.util.SuperCaller -> HTgq:
    void run() -> run
react.surge.util.T -> mrSu:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> YgCd
    32:35:void stop() -> stop
react.surge.util.TXT -> ArUo:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> qJde
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> JtIb
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> JtIb
    99:99:java.lang.String line(react.surge.util.C,int) -> JtIb
    113:113:java.lang.String underline(react.surge.util.C,int) -> YgCd
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> JtIb
react.surge.util.Tag -> Rbeh:
    java.lang.String value() -> value
react.surge.util.Timer -> psLu:
    long tns -> Xnwx
    long cns -> QrsW
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> lDgP
react.surge.util.VectorMath -> iUGE:
    int[] $SWITCH_TABLE$surge$util$Axis -> BTme
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> RmfY
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> JtIb
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> JtIb
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> YgCd
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> lCee
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> JtIb
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> YgCd
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> YgCd
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> lCee
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> ylOL
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> xiLM
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> GPmP
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> qJde
    111:111:double round(double,int) -> xiLM
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> JtIb
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> JtIb
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> JtIb
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> ylOL
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> xiLM
    268:268:org.bukkit.util.Vector toVector(float,float) -> JtIb
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> JtIb
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> JtIb
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> Dqvy
    337:340:double getSpeed(org.bukkit.util.Vector) -> IguI
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> JtIb
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> qcvI
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> JtIb
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> YgCd
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> lCee
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> ylOL
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> UtJE
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> kJQm
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> ELJX
react.surge.util.VectorMath$1 -> iUGE$1:
    org.bukkit.util.Vector val$vector -> ellJ
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> QNKB
    1:1:java.lang.Object onAdapt(java.lang.Object) -> qJde
react.surge.util.W -> Mtxl:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> IguI
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> JtIb
    75:86:org.bukkit.entity.Entity getEntity(int) -> uWSD
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> JtIb
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> JtIb
    143:143:int getChunkX(org.bukkit.block.Block) -> qcvI
    155:155:int getChunkY(org.bukkit.block.Block) -> UtJE
    168:169:void dropXp(org.bukkit.Location,int) -> YgCd
    180:180:int getChunkZ(org.bukkit.block.Block) -> QNKB
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> YgCd
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> JtIb
    232:239:react.glang.GList news(org.bukkit.Location) -> rfyT
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> JtIb
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> xylN
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> AGME
    300:300:org.bukkit.World toSync(org.bukkit.World) -> Kmxy
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> NMRJ
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> xylN
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> Ptyr
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> ieRS
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> JtIb
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> JtIb
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> JtIb
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> JtIb
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> JtIb
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> JtIb
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> JtIb
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> JtIb
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> eHCS
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> iTOF
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> Ptyr
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> lCee
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> JtIb
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> JtIb
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> JtIb
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> JtIb
react.surge.util.W$1 -> Mtxl$1:
    java.lang.Double val$doff -> orPl
    org.bukkit.entity.Entity val$e -> mlTQ
    org.bukkit.entity.Entity[] val$result -> DApF
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> QNKB
react.surge.util.Worlds -> nBQo:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> SwEy
    33:33:boolean hasWorld(java.lang.String) -> bFkC
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> YVXF:
react.text.ColoredString -> RYrp:
    react.surge.util.C c -> seSe
    java.lang.String s -> MUer
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> ceAx
    42:43:void setC(react.surge.util.C) -> YgCd
    47:47:java.lang.String getS() -> lLxB
    52:53:void setS(java.lang.String) -> GkAp
react.text.RTEX -> SDEY:
    react.glang.GList extras -> BoYx
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> jqfH
    44:58:react.json.JSONObject toJSON() -> UAGA
react.text.RTX -> brSm:
    react.json.JSONArray base -> wyom
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> GPmP
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> YgCd
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> JtIb
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> JtIb
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> YgCd
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> lCee
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> JtIb
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> YgCd
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> lCee
    265:265:react.json.JSONArray toJSON() -> nvBc
    276:277:void tellRawTo(org.bukkit.entity.Player) -> UAGA
react.text.RawText -> MlgH:
    java.lang.String COLOR_BLACK -> bksc
    java.lang.String COLOR_DARK_BLUE -> KqcX
    java.lang.String COLOR_DARK_GREEN -> gQOo
    java.lang.String COLOR_DARK_AQUA -> hKbJ
    java.lang.String COLOR_DARK_RED -> lWnO
    java.lang.String COLOR_DARK_PURPLE -> oihY
    java.lang.String COLOR_GOLD -> Kyuh
    java.lang.String COLOR_GRAY -> Isof
    java.lang.String COLOR_DARK_GRAY -> ojMI
    java.lang.String COLOR_BLUE -> mkvO
    java.lang.String COLOR_GREEN -> JTpM
    java.lang.String COLOR_AQUA -> DJnS
    java.lang.String COLOR_RED -> PhDU
    java.lang.String COLOR_LIGHT_PURPLE -> gPrI
    java.lang.String COLOR_YELLOW -> uslu
    java.lang.String COLOR_WHITE -> NXkx
    java.lang.String COLOR_NONE -> jbku
    java.lang.String HEAD_TEXT -> qyDB
    java.lang.String HEAD_COLOR -> Ouaq
    java.lang.String HEAD_BOLD -> RCVW
    java.lang.String HEAD_ITALIC -> oYJf
    java.lang.String HEAD_UNDERLINED -> NHKc
    java.lang.String HEAD_STRIKETHROUGH -> DeBX
    java.lang.String HEAD_OBFUSCATED -> fhCX
    java.lang.String HEAD_CLICK_EVENT -> CjPH
    java.lang.String HEAD_HOVER_EVENT -> KrEa
    java.lang.String HEAD_ACTION -> garo
    java.lang.String HEAD_VALUE -> FHbh
    java.lang.String HEAD_EXTRA -> THys
    java.lang.String HEAD_ACTION_SHOW_TEXT -> cVGV
    java.lang.String HEAD_ACTION_COMMAND -> EpSt
    java.util.ArrayList components -> dXhu
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> MdCB
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> xiLM
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> JtIb
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> JtIb
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> JtIb
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> JtIb
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> JtIb
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> JtIb
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> JtIb
    307:313:java.lang.String compile() -> vcfb
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> JtIb

react.Config -> ksfn:
    react.glang.GMap worldConfigs -> ksfn
    java.lang.String A_MAX_EXPLOSIONS_MAXMS -> IyWN
    java.lang.String A_REDSTONE_DYNAMIC_CLOCK -> nkoF
    java.lang.String A_COMMANDOVERRIDE_TPS -> leiL
    java.lang.String A_REACT_REMOTE_PORT -> JkXd
    java.lang.String A_REACT_REMOTE_ENABLED -> VejA
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> eYCp
    java.lang.String A_POOL_MAXTHREADS -> RPlW
    java.lang.String A_POOL_SYNC_NANOS -> OjGa
    java.lang.String A_CULLING_ENABLED -> MuCR
    java.lang.String A_FASTLEAF_ENABLED -> kACR
    java.lang.String A_FASTLEAF_ONDECAY -> GbPI
    java.lang.String A_FASTLEAF_INSTANT -> qdWP
    java.lang.String A_FASTLEAF_DECAYPERIOD -> kbdv
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> GbOr
    java.lang.String A_ENTITYSTACK_ENABLED -> KwKa
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> XJLb
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> DHCd
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> UQdV
    java.lang.String A_GLASS_SHOW_BLOCKS -> OOsA
    java.lang.String A_GLASS_SHOW_PARTICLES -> fKEC
    java.lang.String A_ALLOW_CULL -> IEqC
    java.lang.String A_ALLOW_PURGE -> vQcB
    java.lang.String A_ALLOW_STACKING -> BcaS
    java.lang.String A_CULL_RULES -> tSmF
    java.lang.String A_RAI_TPS_HIGH_TICK -> EliS
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> OrVh
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> LiNF
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> DYFE
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> xykW
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> XJMY
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> HmbV
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> Txtf
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> iBlA
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> yQyh
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> uFRW
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> JcIs
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> ivTX
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> vsiC
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> bWla
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> SKaT
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> cuBs
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> lejm
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> EAxL
    java.lang.String A_RAI_FLUID_TIME_CEIL -> tdpd
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> NLrd
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> awNR
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> JYvi
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> xXLB
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> Btdo
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> iTOv
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> uyVD
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> LGKt
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> EAvd
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> uxtl
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> IhVi
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> qcwJ
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> Husv
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> VUKF
    java.lang.String A_USE_WORLD_CONFIGS -> TVse
    java.lang.String A_LANGUAGE -> vsgM
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> gNIg
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> lwLE
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> yIki
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> kkWb
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> VKxT
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> UbhM
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> uhTK
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> DaXY
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> PJhH
    java.lang.String A_RAI_ENTITY_PROPIGATE -> xhnw
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> BlUi
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> bFlt
    double MAX_EXPLOSION_MS -> HSso
    boolean REDSTONE_DYNAMIC_CLOCK -> SnFl
    boolean COMMANDOVERRIDES_TPS -> GjdH
    int REACT_REMOTE_PORT -> hrra
    boolean REACT_REMOTE_ENABLED -> tLBi
    int ENTITY_STACK_MAX_COUNT -> ctdV
    int POOL_MAXTHREADS -> WyrT
    long POOL_SYNC_NANOS -> RQPy
    boolean CULLING_ENABLED -> uNcp
    boolean FASTLEAF_ENABLED -> yJPG
    boolean FASTLEAF_ONDECAY -> tTRV
    boolean FASTLEAF_INSTANT -> LWpY
    int FASTLEAF_DECAYPERIOD -> xypR
    boolean COMMANDOVERRIDES_MEMORY -> Ipja
    boolean ENTITYSTACK_ENABLED -> GYcN
    int ENTITYSTACK_MINIMUM_GROUP -> jhXG
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> BuEs
    int ENTITYSTACK_MAXIMUM_HEALTH -> bypg
    boolean GLASS_SHOW_BLOCKS -> fBWi
    boolean GLASS_SHOW_PARTICLES -> HeUY
    react.glang.GList ALLOW_CULL -> YDav
    react.glang.GList ALLOW_PURGE -> miOl
    react.glang.GList ALLOW_STACKING -> Smdw
    react.glang.GList CULL_RULES -> dfeG
    double RAI_TPS_HIGH_TICK -> Suuj
    long RAI_REDSTONE_TIME_FLOOR -> RaqY
    long RAI_REDSTONE_TIME_CEIL -> WrBd
    long RAI_REDSTONE_TIME_MUDDING -> iKaE
    double RAI_REDSTONE_TIME_FUNCTION -> bypm
    double RAI_REDSTONE_TIME_OVERBLEED -> qBVt
    int RAI_REDSTONE_TIME_RADIUS -> Elmc
    int RAI_REDSTONE_TIME_PROPIGATION -> RsSm
    long RAI_HOPPER_TIME_FLOOR -> KnbB
    long RAI_HOPPER_TIME_CEIL -> lClH
    long RAI_HOPPER_TIME_MUDDING -> EeAD
    double RAI_HOPPER_TIME_FUNCTION -> FMpN
    double RAI_HOPPER_TIME_OVERBLEED -> miRo
    int RAI_HOPPER_TIME_RADIUS -> FhDL
    int RAI_HOPPER_TIME_PROPIGATION -> MJUL
    int RAI_ENTITY_CHUNK_MULTIPLIER -> APBb
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> hjdD
    int RAI_ENTITY_CHUNK_RADIUS -> ctgS
    long RAI_FLUID_TIME_FLOOR -> Lyty
    long RAI_FLUID_TIME_CEIL -> Qxcm
    long RAI_FLUID_TIME_MUDDING -> kHyB
    double RAI_FLUID_TIME_FUNCTION -> ryBg
    double RAI_FLUID_TIME_OVERBLEED -> HBtu
    int RAI_FLUID_TIME_RADIUS -> kAJA
    int RAI_FLUID_TIME_PROPIGATION -> jFVf
    double SMEAR_TICK_ENTITIES_MAX_TICK -> ySBo
    double SMEAR_TICK_TILES_MAX_TICK -> NVHE
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> uEsw
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> Plmu
    double SMEAR_TICK_ENTITIES_AMOUNT -> wvnd
    double SMEAR_TICK_TILES_AMOUNT -> mWoV
    boolean SMEAR_TICK_ENTITIES_ENABLE -> haqk
    boolean SMEAR_TICK_TILES_ENABLE -> rooc
    boolean HOPPER_OVERTICK_ENABLE -> bWpD
    boolean USE_WORLD_CONFIGS -> sQQF
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> ccck
    long RAI_CHUNK_TIME_CEIL -> oUdy
    long RAI_CHUNK_TIME_MUDDING -> goqA
    double RAI_CHUNK_TIME_FUNCTION -> bGNm
    double RAI_CHUNK_TIME_OVERBLEED -> DPYw
    int RAI_CHUNK_TIME_RADIUS -> LPBG
    int RAI_CHUNK_TIME_PROPIGATION -> Hdvh
    boolean RAI_CHUNK_TIME_PROPIGATE -> NxKI
    boolean RAI_FLUID_TIME_PROPIGATE -> uhWj
    boolean RAI_ENTITY_PROPIGATE -> BRec
    boolean RAI_HOPPER_TIME_PROPIGATE -> Qoqj
    boolean RAI_REDSTONE_TIME_PROPIGATE -> FVaA
    boolean hrld -> ghAC
    boolean rns -> avox
    boolean rrl -> BuIa
    39:654:void <clinit>() -> <clinit>
    37:37:void <init>() -> <init>
    659:676:void doTrack(org.bukkit.plugin.Plugin) -> ksfn
    681:703:void onRead(org.bukkit.plugin.Plugin) -> IyWN
    707:737:void read(java.io.File,boolean) -> ksfn
    741:758:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> ksfn
    763:771:void closeWorldConfig(org.bukkit.World) -> IyWN
    776:889:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> ksfn
    894:931:react.surge.cluster.DataCluster defaultConfig(boolean) -> ksfn
    936:1015:react.glang.GList getDefaultEntitiesForStacking() -> ksfn
    1020:1039:react.glang.GList getDefaultEntitiesForCulling() -> IyWN
    1044:1081:react.glang.GList getDefaultEntitiesForRemoval() -> nkoF
    1086:1127:react.glang.GList getDefaultCullRules() -> leiL
react.Config$1 -> ksfn$1:
    java.io.File val$fConfig -> iSrq
    java.io.File val$fConfigExperimental -> MBDL
    org.bukkit.plugin.Plugin val$main -> jWWW
    1:662:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    667:671:void run() -> run
react.Config$2 -> ksfn$2:
    react.api.WorldConfig val$wc -> Hmhb
    org.bukkit.World val$w -> vbif
    1:748:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    753:754:void run() -> run
react.Gate -> IyWN:
    react.glang.GMap defaultSettings -> WaFE
    react.glang.GSet refresh -> MAdt
    react.glang.GSet destroy -> PucD
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> lTnv
    42:44:void <clinit>() -> <clinit>
    40:40:void <init>() -> <init>
    48:138:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> ksfn
    144:175:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> ksfn
    180:180:int getChunkCountForView() -> JkXd
    185:185:int getMaxChunksForView() -> VejA
    190:190:boolean hasFawe() -> eYCp
    195:216:void tickEntityNextTickListTick(org.bukkit.World) -> nkoF
    220:224:void resetEntityMaxTick(org.bukkit.World) -> leiL
    228:228:int getEntityTickMax(org.bukkit.World) -> JkXd
    233:233:int getTileTickMax(org.bukkit.World) -> VejA
    238:256:void tweakEntityTickMax(org.bukkit.World,int) -> ksfn
    260:277:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> ksfn
    282:286:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> ksfn
    290:302:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> ksfn
    307:311:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> IyWN
    315:333:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> ksfn
    337:341:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> eYCp
    346:349:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> ksfn
    354:357:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> IyWN
    362:362:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> nkoF
    367:367:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> leiL
    372:372:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> JkXd
    377:377:boolean isBadForUnloading() -> RPlW
    382:382:boolean canUnload(org.bukkit.World,int,int) -> ksfn
    389:405:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    411:422:void unloadChunk(org.bukkit.World,int,int) -> IyWN
    426:442:void removeEntity(org.bukkit.entity.Entity) -> ksfn
    446:462:void purgeEntity(org.bukkit.entity.Entity) -> IyWN
    466:487:void cullEntity(org.bukkit.entity.Entity) -> nkoF
    492:509:void updateBlock(org.bukkit.block.Block) -> ksfn
    513:517:java.lang.String header(java.lang.String,react.surge.util.C) -> ksfn
    522:522:java.lang.String header(react.surge.util.C) -> ksfn
    528:532:void updateFluid(org.bukkit.block.Block) -> IyWN
    536:537:void refresh(org.bukkit.Chunk) -> IyWN
    542:561:void refreshChunks() -> OjGa
    565:566:void sendBlockChange(org.bukkit.Location) -> ksfn
    40:40:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> MuCR
react.Gate$1 -> IyWN$1:
    react.api.SelectorPosition val$sel -> upkd
    react.glang.Callback val$prog -> mPBo
    react.glang.Callback val$cb -> Wyva
    1:48:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    53:136:void run() -> run
react.Gate$1$1 -> IyWN$1$1:
    react.Gate$1 this$1 -> SeYg
    java.lang.Object val$o -> Xkwf
    java.lang.reflect.Constructor val$vectorConstruct -> hsWf
    java.lang.reflect.Constructor val$cuboidConstruct -> Edan
    java.lang.reflect.Method val$faweFixMethod -> DHMW
    java.lang.Integer[] val$total -> bqeW
    java.lang.Integer[] val$sof -> CDhW
    react.glang.Callback val$prog -> mPBo
    java.lang.Integer val$tot -> hHbb
    1:80:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    87:105:void run() -> run
react.Gate$1$2 -> IyWN$1$2:
    react.Gate$1 this$1 -> SeYg
    react.glang.Callback val$prog -> mPBo
    react.glang.Callback val$cb -> Wyva
    java.lang.Integer[] val$total -> bqeW
    1:109:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    116:124:void run() -> run
react.Info -> nkoF:
    java.lang.String CORE_REACT_DOT -> Btid
    java.lang.String CORE_NAME -> KLaQ
    java.lang.String CORE_CACHE -> GPvA
    java.lang.String WORLD_CONFIGS -> ySDy
    java.lang.String CORE_DOTYML -> awTX
    java.lang.String COMMAND_REACT -> hkFk
    java.lang.String COMMAND_RAI -> AhuS
    java.lang.String COMMAND_ACT_DESCRIPTION -> DGmD
    java.lang.String COMMAND_ACT -> iKen
    java.lang.String COMMAND_ACT_ALIAS_1 -> GkIc
    java.lang.String COMMAND_ACT_ALIAS_2 -> RICs
    java.lang.String COMMAND_ACT_USAGE -> eGhs
    java.lang.String COMMAND_HELP_DESCRIPTION -> aeoy
    java.lang.String COMMAND_HELP -> nRdP
    java.lang.String COMMAND_HELP_ALIAS_1 -> JQlp
    java.lang.String COMMAND_HELP_ALIAS_2 -> kblt
    java.lang.String COMMAND_HELP_USAGE -> ogJL
    java.lang.String COMMAND_STATUS_DESCRIPTION -> pHIU
    java.lang.String COMMAND_STATUS -> OXku
    java.lang.String COMMAND_STATUS_ALIAS_1 -> xiRo
    java.lang.String COMMAND_STATUS_ALIAS_2 -> lUOJ
    java.lang.String COMMAND_STATUS_USAGE -> ivYU
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> ctgm
    java.lang.String COMMAND_CPUSCORE -> mGQF
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> cuHf
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> DsAQ
    java.lang.String COMMAND_CPUSCORE_USAGE -> ElrI
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> BJYO
    java.lang.String COMMAND_RELOAD -> nRfs
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> RHes
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> CEKe
    java.lang.String COMMAND_RELOAD_USAGE -> MRhj
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> rEae
    java.lang.String COMMAND_MONITOR -> MBHT
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> LyyN
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> cSHa
    java.lang.String COMMAND_MONITOR_USAGE -> gEbJ
    java.lang.String COMMAND_ENV_DESCRIPTION -> ylXv
    java.lang.String COMMAND_ENV -> sQVW
    java.lang.String COMMAND_ENV_ALIAS_1 -> qeBm
    java.lang.String COMMAND_ENV_ALIAS_2 -> aTrA
    java.lang.String COMMAND_ENV_USAGE -> JAOe
    java.lang.String COMMAND_VERSION_DESCRIPTION -> tKgT
    java.lang.String COMMAND_VERSION -> NUku
    java.lang.String COMMAND_VERSION_ALIAS_1 -> CLyy
    java.lang.String COMMAND_VERSION_ALIAS_2 -> sYea
    java.lang.String COMMAND_VERSION_USAGE -> HByU
    java.lang.String COMMAND_MAP_DESCRIPTION -> CfoE
    java.lang.String COMMAND_MAP -> KwWc
    java.lang.String COMMAND_MAP_ALIAS_1 -> yJUj
    java.lang.String COMMAND_MAP_ALIAS_2 -> aTrQ
    java.lang.String COMMAND_MAP_USAGE -> cSHi
    java.lang.String COMMAND_TOPCHUNK_DESCRIPTION -> KoEc
    java.lang.String COMMAND_TOPCHUNK -> dgLV
    java.lang.String COMMAND_TOPCHUNK_ALIAS_1 -> lnbv
    java.lang.String COMMAND_TOPCHUNK_ALIAS_2 -> QyGb
    java.lang.String COMMAND_TOPCHUNK_USAGE -> xrFi
    java.lang.String COMMAND_GLASS_DESCRIPTION -> VfSq
    java.lang.String COMMAND_GLASS -> uqMo
    java.lang.String COMMAND_GLASS_ALIAS_1 -> ksqA
    java.lang.String COMMAND_GLASS_ALIAS_2 -> rFAl
    java.lang.String COMMAND_GLASS_USAGE -> qvBu
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> gEaD
    java.lang.String COMMAND_CBLAME -> feBC
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> dMYl
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> rFAO
    java.lang.String COMMAND_CBLAME_USAGE -> tnIo
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> BuNB
    java.lang.String COMMAND_ACTIONLOG -> EeEA
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> fJmy
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> Kevc
    java.lang.String COMMAND_ACTIONLOG_USAGE -> Pufa
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> yRiN
    java.lang.String COMMAND_CAPABILITIES -> rgfp
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> saxc
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> QxjN
    java.lang.String COMMAND_CAPABILITIES_USAGE -> XBJF
    java.lang.String MSG_PERMISSION -> fluN
    java.lang.String MSG_MONITORING_STARTED -> Tpqk
    java.lang.String MSG_MONITORING_STOPPED -> CEMX
    java.lang.String MSG_ACTIONLOGGING_STARTED -> cckh
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> ggfi
    java.lang.String MSG_GLASS_STARTED -> JAQq
    java.lang.String MSG_GLASS_STOPPED -> TOOr
    org.bukkit.Color COLOR_HOPPER -> hbYh
    org.bukkit.Color COLOR_BLOCK_UPDATE -> wvuc
    org.bukkit.Color COLOR_BLOCK_FROMTO -> YUmd
    org.bukkit.Color COLOR_BLOCK_BURN -> cSKO
    org.bukkit.Color COLOR_BLOCK_DECAY -> QxkA
    org.bukkit.Color COLOR_BLOCK_FORM -> aTtR
    java.lang.String NAME_TICK -> qJqA
    java.lang.String NAME_MEMORY -> AiYr
    java.lang.String NAME_CHUNKS -> bGWD
    java.lang.String NAME_ENTITIES -> TONT
    java.lang.String STATE_MONITORING_TAB -> JcSd
    java.lang.String STATE_MONITORING_ENABLED -> oDjN
    java.lang.String STATE_MONITORING_HIGH -> OHOe
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> qudY
    java.lang.String STATE_MAPPING_ENABLED -> wLae
    java.lang.String STATE_SOUND_PLAYS -> UcSL
    java.lang.String STATE_MONITORING_POSTED -> VvwQ
    java.lang.String STATE_MONITORING_LASTTAB -> SnNh
    java.lang.String STATE_GLASSES_ENABLED -> anev
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> VTtT
    java.lang.String STATE_PLAYER_HOTBAR -> PKRt
    java.lang.String STATE_PLAYER_SHIFT -> fdbu
    java.lang.String STATE_PLAYER_SCROLL -> Lhxw
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> quci
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> uOOk
    java.lang.String PERM_ACCESS -> TyeI
    java.lang.String PERM_MONITOR -> ofpN
    java.lang.String PERM_MONITOR_TITLE -> WGXt
    java.lang.String PERM_MONITOR_ACTIONLOG -> WrLr
    java.lang.String PERM_MONITOR_MAP -> xGWf
    java.lang.String PERM_MONITOR_ENVIRONMENT -> SKnB
    java.lang.String PERM_MONITOR_GLASSES -> EBdt
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> QyMP
    java.lang.String PERM_ACT -> awYf
    java.lang.String PERM_RAI -> woII
    java.lang.String PERM_RAI_CONTROL -> yckx
    java.lang.String PERM_RAI_ACCESS -> Vnii
    java.lang.String PERM_RAI_MONITOR -> ECFY
    java.lang.String PERM_RELOAD -> aDVM
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> vRRW
    java.lang.String SAMPLER_REDSTONE_TICK -> vQpv
    java.lang.String SAMPLER_ENTITY_TIME -> RkNt
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> vcSr
    java.lang.String SAMPLER_TILE_TIME_LOCK -> HUAR
    java.lang.String SAMPLER_TILE_TIME -> ndNG
    java.lang.String SAMPLER_TILE_DROPTICK -> EvJu
    java.lang.String SAMPLER_ENTITY_DROPTICK -> PJuV
    java.lang.String SAMPLER_REDSTONE_SECOND -> UbtP
    java.lang.String SAMPLER_REDSTONE_TIME -> BAlj
    java.lang.String SAMPLER_PHYSICS_TIME -> xFty
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> MuOi
    java.lang.String SAMPLER_HOPPER_TICK -> EmXW
    java.lang.String SAMPLER_HOPPER_SECOND -> yIxg
    java.lang.String SAMPLER_HOPPER_TIME -> CNBO
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> JbuH
    java.lang.String SAMPLER_FLUID_TICK -> WGWg
    java.lang.String SAMPLER_FLUID_SECOND -> iKka
    java.lang.String SAMPLER_FLUID_TIME -> IOQU
    java.lang.String SAMPLER_TPS -> rMtv
    java.lang.String SAMPLER_TICK -> PSeN
    java.lang.String SAMPLER_TIU -> AOjq
    java.lang.String SAMPLER_MEM -> Xtmv
    java.lang.String SAMPLER_FREEMEM -> YUmu
    java.lang.String SAMPLER_MAXMEM -> PKUB
    java.lang.String SAMPLER_ALLOCMEM -> CxSk
    java.lang.String SAMPLER_MAHS -> LGXk
    java.lang.String SAMPLER_CHK -> RYjl
    java.lang.String SAMPLER_ATASK -> ThbV
    java.lang.String SAMPLER_STASK -> ArNl
    java.lang.String SAMPLER_CHK_TIME -> uiAQ
    java.lang.String SAMPLER_EXPLOSION_TIME -> lvvr
    java.lang.String SAMPLER_CHKS -> BuQh
    java.lang.String SAMPLER_ENT -> UsvV
    java.lang.String SAMPLER_ENTLIV -> oUmL
    java.lang.String SAMPLER_ENTDROP -> GHkA
    java.lang.String SAMPLER_ENTTILE -> mhxb
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> xGUf
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> RYlC
    java.lang.String ACTION_CULL_ENTITIES_NAME -> NDnU
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> IXBl
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> ObEJ
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> GtBW
    java.lang.String ACTION_UPDATE_FLUID_NAME -> MSOo
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> OPeF
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> dxTh
    java.lang.String ACTION_LOCK_FLUID_STATUS -> EvLh
    java.lang.String ACTION_LOCK_FLUID_NAME -> qBeL
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> feHl
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> JQwB
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> YMaj
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> QFKF
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> mrMm
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> LqpG
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> FhOH
    java.lang.String ACTION_LOCK_HOPPER_NAME -> VnlJ
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> HnRn
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> kkfY
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> OXsq
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> YDoN
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> MuQj
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> pGpk
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> Tyeo
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> iLOC
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> YgSH
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> qSfB
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> pQDA
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> psFb
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> vtVr
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> KDWq
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> mWxp
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> SKnm
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> Rjnj
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> flwT
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> qCDY
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> qKTa
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> PTHT
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> VDXH
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> bOip
    java.lang.String ACTION_FIX_LIGHTING_NAME -> skMd
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> XBLu
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> SLPT
    java.lang.String ACTION_COLLECT_GARBAGE -> Smqr
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> TWby
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> ogRD
    8:247:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> leiL:
    java.lang.String BUNDLE_NAME -> HmuR
    java.util.ResourceBundle RESOURCE_BUNDLE -> kcXr
    java.util.ResourceBundle PRIMARY_BUNDLE -> NVTr
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> JkXd:
    react.React instance -> nmBs
    react.controller.SampleController sampleController -> CMdV
    react.controller.PlayerController playerController -> WrPw
    react.controller.MonitorController monitorController -> CMcj
    react.controller.CommandController commandController -> XSQo
    react.controller.ActionController actionController -> SfFI
    react.controller.FastDecayController fastDecayController -> ArQm
    react.controller.EntityStackController entityStackController -> nSOo
    react.controller.GlassController glassController -> owtx
    react.controller.EntityCullController entityCullController -> AaOv
    react.controller.SpikeController spikeController -> dUsY
    react.controller.SecurityController securityController -> DajG
    react.controller.RedstoneController redstoneController -> EeNH
    react.controller.HopperController hopperController -> YwwO
    react.controller.PhysicsController physicsController -> LPOh
    react.controller.TickTimeController tickTimeController -> HKsO
    react.controller.RAIController raiController -> BSRB
    react.controller.FluidController fluidController -> pjXI
    react.controller.ChunkController chunkController -> Mtth
    react.controller.GraphController graphController -> dMag
    react.controller.ChronophyFluidController fluidChronophyController -> ycoa
    react.controller.EventController eventController -> pGsL
    react.controller.SmearTickController smearTickController -> PTJI
    react.controller.FeatureController featureController -> EBgq
    react.controller.HopperOvertickController hopperPlungeController -> GcBQ
    react.controller.LanguageController languageController -> APPV
    react.controller.RemoteController remoteController -> rhLp
    react.controller.ExplosiveController explosiveController -> ccpl
    react.controller.WorldController worldController -> MKAY
    42:42:void <init>() -> <init>
    134:142:void enable() -> enable
    148:148:void disable() -> disable
react.React$1 -> JkXd$1:
    react.React this$0 -> IqYH
    1:134:void <init>(react.React) -> <init>
    139:140:void run() -> run
react.action.ActionCollectGarbage -> VejA:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionCollectGarbage$1 -> VejA$1:
    react.action.ActionCollectGarbage this$0 -> PCHh
    react.action.source.IActionSource val$source -> Vnld
    1:29:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> ksfn
react.action.ActionCollectGarbage$1$1 -> VejA$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> DHVl
    long val$mbnex -> prfr
    long val$mbmem -> TFdN
    react.action.source.IActionSource val$source -> Vnld
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.action.source.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> eYCp:
    long ms -> mOjq
    int lcd -> vQtc
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
    27:27:void access$0(react.action.ActionCullEntities,long) -> ksfn
    28:28:int access$1(react.action.ActionCullEntities) -> ksfn
    27:27:long access$2(react.action.ActionCullEntities) -> IyWN
react.action.ActionCullEntities$1 -> eYCp$1:
    react.action.ActionCullEntities this$0 -> SedL
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> eYCp$2:
    react.action.ActionCullEntities this$0 -> SedL
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> eYCp$3:
    react.action.ActionCullEntities this$0 -> SedL
    react.glang.FinalInteger val$completed -> TOWb
    react.glang.FinalInteger val$total -> FpbX
    react.glang.FinalInteger val$totalCulled -> PSlO
    react.glang.FinalInteger val$totalChunked -> RYrL
    react.action.source.IActionSource val$source -> Vnld
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> eYCp$4:
    react.action.ActionCullEntities this$0 -> SedL
    react.action.source.IActionSource val$source -> Vnld
    react.glang.FinalInteger val$totalCulled -> PSlO
    react.glang.FinalInteger val$totalChunked -> RYrL
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> RPlW:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionFixLighting$1 -> RPlW$1:
    react.action.ActionFixLighting this$0 -> IWhb
    1:28:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> RPlW$2:
    react.action.ActionFixLighting this$0 -> IWhb
    react.action.source.IActionSource val$source -> Vnld
    int val$ch -> RIRH
    1:77:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> ksfn
    1:1:void run(java.lang.Object) -> ksfn
react.action.ActionFixLighting$3 -> RPlW$3:
    react.action.ActionFixLighting this$0 -> IWhb
    1:88:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> ksfn
    1:1:void run(java.lang.Object) -> ksfn
react.action.ActionLockFluid -> OjGa:
    int lcd -> vQtc
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionLockFluid$1 -> OjGa$1:
    react.action.ActionLockFluid this$0 -> SfHA
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> OjGa$2:
    react.action.ActionLockFluid this$0 -> SfHA
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> MuCR:
    int lcd -> vQtc
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionLockHopper$1 -> MuCR$1:
    react.action.ActionLockHopper this$0 -> RkUF
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> MuCR$2:
    react.action.ActionLockHopper this$0 -> RkUF
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> kACR:
    int lcd -> vQtc
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionLockRedstone$1 -> kACR$1:
    react.action.ActionLockRedstone this$0 -> dDsV
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> kACR$2:
    react.action.ActionLockRedstone this$0 -> dDsV
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> GbPI:
    long ms -> mOjq
    int lcd -> vQtc
    boolean fail -> kAYB
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> IyWN
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> ksfn
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> ksfn
    26:26:int access$2(react.action.ActionPurgeChunks) -> IyWN
    25:25:long access$3(react.action.ActionPurgeChunks) -> nkoF
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> ksfn
react.action.ActionPurgeChunks$1 -> GbPI$1:
    react.action.ActionPurgeChunks this$0 -> RkTr
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> GbPI$2:
    react.action.ActionPurgeChunks this$0 -> RkTr
    int val$dk -> ycrQ
    java.lang.Object val$j -> QqBr
    react.action.source.IActionSource val$source -> Vnld
    react.api.ISelector[] val$selectors -> WaRf
    react.glang.FinalInteger val$acompleted -> iUDa
    react.glang.FinalInteger val$completed -> TOWb
    react.glang.FinalInteger val$total -> FpbX
    react.glang.FinalInteger val$totalCulled -> PSlO
    react.glang.FinalInteger val$totalChunked -> RYrL
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.action.source.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> ksfn
react.action.ActionPurgeChunks$2$1 -> GbPI$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> hbbP
    react.glang.FinalInteger val$acompleted -> iUDa
    react.glang.FinalInteger val$completed -> TOWb
    react.glang.FinalInteger val$total -> FpbX
    react.glang.FinalInteger val$totalCulled -> PSlO
    react.glang.FinalInteger val$totalChunked -> RYrL
    react.action.source.IActionSource val$source -> Vnld
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> GbPI$3:
    react.action.ActionPurgeChunks this$0 -> RkTr
    react.action.source.IActionSource val$source -> Vnld
    react.glang.FinalInteger val$acompleted -> iUDa
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> GbPI$4:
    react.action.ActionPurgeChunks this$0 -> RkTr
    org.bukkit.Chunk val$chunk -> VoQI
    java.lang.Runnable val$cb -> uOVK
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> qdWP:
    long ms -> mOjq
    int lcd -> vQtc
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> IyWN
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> ksfn
    30:30:int access$1(react.action.ActionPurgeEntities) -> ksfn
    29:29:long access$2(react.action.ActionPurgeEntities) -> IyWN
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> ksfn
react.action.ActionPurgeEntities$1 -> qdWP$1:
    react.action.ActionPurgeEntities this$0 -> GRDT
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> qdWP$2:
    react.action.ActionPurgeEntities this$0 -> GRDT
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> qdWP$3:
    react.action.ActionPurgeEntities this$0 -> GRDT
    react.glang.FinalInteger val$completed -> TOWb
    react.glang.FinalInteger val$total -> FpbX
    react.glang.FinalInteger val$totalCulled -> PSlO
    react.glang.FinalInteger val$totalChunked -> RYrL
    react.action.source.IActionSource val$source -> Vnld
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> qdWP$4:
    react.action.ActionPurgeEntities this$0 -> GRDT
    react.action.source.IActionSource val$source -> Vnld
    react.glang.FinalInteger val$totalCulled -> PSlO
    react.glang.FinalInteger val$totalChunked -> RYrL
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> qdWP$5:
    react.action.ActionPurgeEntities this$0 -> GRDT
    org.bukkit.entity.Entity val$i -> rVlw
    react.glang.FinalInteger val$cu -> YfxA
    int val$k -> dVUs
    org.bukkit.Chunk val$chunk -> VoQI
    java.lang.Runnable val$cb -> uOVK
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> kbdv:
    int lcd -> vQtc
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionUnlockFluid$1 -> kbdv$1:
    react.action.ActionUnlockFluid this$0 -> WPQO
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> GbOr:
    int lcd -> vQtc
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionUnlockHopper$1 -> GbOr$1:
    react.action.ActionUnlockHopper this$0 -> YfvS
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> KwKa:
    int lcd -> vQtc
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.action.ActionUnlockRedstone$1 -> KwKa$1:
    react.action.ActionUnlockRedstone this$0 -> BuYD
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> kACR
    1:1:java.lang.Object get() -> get
react.action.source.AccessActionSource -> XJLb:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> ksfn
    26:33:void sendResponseSuccess(java.lang.String) -> IyWN
    38:45:void sendResponseError(java.lang.String) -> nkoF
    50:57:void sendResponseActing(java.lang.String) -> leiL
react.action.source.ActionHandle -> DHCd:
    react.action.source.ActionHandle AUTOMATIC -> ObJY
    react.action.source.ActionHandle MANUAL -> tmsk
    react.action.source.ActionHandle MUTEX -> xaNu
    react.action.source.ActionHandle[] ENUM$VALUES -> fCIS
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.action.source.ActionHandle[] values() -> values
    1:1:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
react.action.source.ConsoleActionSource -> UQdV:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> ksfn
    18:19:void sendResponseSuccess(java.lang.String) -> IyWN
    24:25:void sendResponseError(java.lang.String) -> nkoF
    30:31:void sendResponseActing(java.lang.String) -> leiL
react.action.source.EmptyActionSource -> OOsA:
    3:3:void <init>() -> <init>
    9:9:void sendResponse(java.lang.String) -> ksfn
    15:15:void sendResponseSuccess(java.lang.String) -> IyWN
    21:21:void sendResponseError(java.lang.String) -> nkoF
    27:27:void sendResponseActing(java.lang.String) -> leiL
react.action.source.IActionSource -> fKEC:
    void sendResponse(java.lang.String) -> ksfn
    void sendResponseSuccess(java.lang.String) -> IyWN
    void sendResponseError(java.lang.String) -> nkoF
    void sendResponseActing(java.lang.String) -> leiL
react.action.source.PlayerActionSource -> IEqC:
    org.bukkit.entity.Player p -> Daiw
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> ksfn
    30:31:void sendResponseSuccess(java.lang.String) -> IyWN
    36:37:void sendResponseError(java.lang.String) -> nkoF
    42:43:void sendResponseActing(java.lang.String) -> leiL
react.action.source.RAIActionSource -> vQcB:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> ksfn
    16:17:void sendResponseSuccess(java.lang.String) -> IyWN
    22:23:void sendResponseError(java.lang.String) -> nkoF
    28:29:void sendResponseActing(java.lang.String) -> leiL
react.api.Action -> BcaS:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> prjG
    java.lang.String[] nodes -> RYqW
    react.action.source.ActionHandle handle -> lnnK
    react.api.ActionState state -> SUEK
    react.api.ActionTargetType target -> lMKM
    react.api.ActionType type -> JJKB
    react.action.source.IActionSource currentSource -> CpJY
    double progress -> Mtuh
    react.glang.GMap defaultSelectors -> MKEn
    28:29:void <init>(react.api.ActionType) -> <init>
    31:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> ksfn
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> ksfn
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> GbPI
    94:94:react.api.ActionState getState() -> qdWP
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> JkXd
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> kbdv
    130:130:react.api.ActionType getType() -> GbOr
    136:136:react.glang.GMap getDefaultSelectors() -> KwKa
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> IyWN
    189:190:void completeAction() -> XJLb
    195:195:react.action.source.IActionSource getCurrentSource() -> DHCd
    201:201:java.lang.String[] getNodes() -> UQdV
    207:208:void setNodes(java.lang.String[]) -> ksfn
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
react.api.ActionAlreadyRunningException -> tSmF:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> EliS:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> OrVh:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> LiNF:
    react.api.ActionState IDLE -> DPkg
    react.api.ActionState RUNNING -> UIke
    react.api.ActionState[] ENUM$VALUES -> RQcs
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> DYFE:
    react.api.ActionTargetType POSITIONAL -> RISg
    react.api.ActionTargetType SYSTEM -> vlNQ
    react.api.ActionTargetType[] ENUM$VALUES -> JJLx
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> xykW:
    react.api.ActionType FIX_LIGHTING -> feNo
    react.api.ActionType UNLOCK_FLUID -> LjFX
    react.api.ActionType LOCK_FLUID -> xrTH
    react.api.ActionType UNLOCK_HOPPER -> woQG
    react.api.ActionType LOCK_HOPPER -> ndVJ
    react.api.ActionType UNLOCK_REDSTONE -> YMge
    react.api.ActionType LOCK_REDSTONE -> KoSn
    react.api.ActionType CULL_ENTITIES -> LHCe
    react.api.ActionType COLLECT_GARBAGE -> eQKQ
    react.api.ActionType PURGE_ENTITIES -> iUFK
    react.api.ActionType PURGE_CHUNKS -> VMOB
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> lnnK
    react.api.ActionTargetType target -> lMKM
    react.api.ActionType[] ENUM$VALUES -> jNwF
    6:18:void <clinit>() -> <clinit>
    25:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> OOsA
    50:50:react.api.ActionTargetType getTarget() -> kbdv
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> XJMY:
    react.api.ActivationRangeType ANIMALS -> cRrm
    react.api.ActivationRangeType MONSTERS -> XKEA
    react.api.ActivationRangeType MISC -> iCca
    react.api.ActivationRangeType[] ENUM$VALUES -> mOoe
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> HmbV:
    int value() -> value
react.api.Async -> Txtf:
react.api.CPUBenchmark -> iBlA:
    org.bukkit.command.CommandSender sender -> sender
    int score -> iUFT
    java.lang.Runnable onFinish -> vIhY
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> fKEC
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> ksfn
    13:13:int access$1(react.api.CPUBenchmark) -> IyWN
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> nkoF
react.api.CPUBenchmark$1 -> iBlA$1:
    react.api.CPUBenchmark this$0 -> DsOS
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> iBlA$2:
    react.api.CPUBenchmark this$0 -> DsOS
    1:77:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> yQyh:
    react.api.CPUResult ULTRA_SLOW -> WjDm
    react.api.CPUResult VERY_SLOW -> qTLU
    react.api.CPUResult SLOW -> FNaQ
    react.api.CPUResult AVERAGE -> OPje
    react.api.CPUResult GOOD -> GISk
    react.api.CPUResult FAST -> QWRG
    react.api.CPUResult VERY_FAST -> YpKK
    react.api.CPUResult ULTRA_FAST -> bqsU
    java.lang.String m -> Ukpd
    react.api.CPUResult[] ENUM$VALUES -> WqwG
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> ksfn
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> uFRW:
    react.glang.GMap cache -> SThj
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> IyWN
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> nkoF
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> IEqC
    54:54:boolean has(java.lang.Object) -> leiL
react.api.Capability -> JcIs:
    react.api.Capability DUAL_WEILD -> WaVM
    react.api.Capability SCOREBOARD -> jFjH
    react.api.Capability SCOREBOARD_ADVANCED -> PmcN
    react.api.Capability HOPPER -> PeSH
    react.api.Capability ENTITY_ATTRIBUTES -> bOtC
    react.api.Capability ENTITY_AI -> FOEN
    react.api.Capability ACTION_BAR -> sABu
    react.api.Capability ENTITY_NAMES -> TWmI
    react.api.Capability TITLE_BAR -> iCes
    react.api.Capability CHUNK_RELIGHTING -> xHCA
    react.api.Capability MONITOR_SUBMISSIVENESS -> FgvM
    react.api.Capability ACCELERATED_PING -> xjEW
    react.api.Capability ENTITY_THROTTLING -> OQNd
    react.api.Capability TILE_THROTTLING -> TWmD
    react.api.Capability PASSENGERS -> gEqD
    react.glang.GList capabilities -> tvip
    react.surge.util.Protocol version -> OroM
    react.api.Flavor flavor -> oDvW
    java.lang.String plugin -> bqtp
    java.lang.String name -> name
    14:48:void <clinit>() -> <clinit>
    55:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> vQcB
    100:100:boolean isFlavorCapable() -> BcaS
    105:105:boolean isVersionCapable() -> tSmF
    110:110:boolean isCapable() -> EliS
    115:115:react.surge.util.Protocol getVersion() -> OrVh
    120:120:react.api.Flavor getFlavor() -> LiNF
    125:125:java.lang.String getPlugin() -> DYFE
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> ksfn
    153:167:void sendNotCapable(react.action.source.IActionSource) -> ksfn
react.api.CapabilityBasis -> ivTX:
    react.api.CapabilityBasis VERSION -> AjHw
    react.api.CapabilityBasis FLAVOR -> rqDb
    react.api.CapabilityBasis PLUGIN -> LaUm
    react.api.CapabilityBasis[] ENUM$VALUES -> JdAP
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.CapabilityBasis[] values() -> values
    1:1:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> vsiC:
    react.api.ChunkIssue ENTITY -> Pmap
    react.api.ChunkIssue HOPPER -> qnAc
    react.api.ChunkIssue TNT -> Rjvk
    react.api.ChunkIssue REDSTONE -> WHCV
    react.api.ChunkIssue FLUID -> QqEp
    react.api.ChunkIssue PHYSICS -> ssfa
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> gVrA
    react.api.ChunkIssue[] ENUM$VALUES -> GkXb
    3:10:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    14:32:double getMS() -> xykW
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> XJMY
react.api.Clip -> bWla:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> SKaT:
    org.bukkit.command.CommandSender sender -> sender
    12:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> ksfn
    31:32:void sendResponseSuccess(java.lang.String) -> IyWN
    37:38:void sendResponseError(java.lang.String) -> nkoF
    43:44:void sendResponseActing(java.lang.String) -> leiL
react.api.CullList -> cuBs:
    react.glang.GSet toCull -> qTMn
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> leiL
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> HmbV
react.api.DTest -> lejm:
    6:6:void <init>() -> <init>
    11:62:int test() -> Txtf
react.api.EntityFlag -> EAxL:
    react.api.EntityFlag NAMED -> XuYu
    react.api.EntityFlag TAMED -> XmJO
    react.api.EntityFlag STACKED -> KMRG
    react.api.EntityFlag RIDDEN -> uhjY
    react.api.EntityFlag LIVING -> hISX
    react.api.EntityFlag NON_LIVING -> BmLG
    react.api.EntityFlag PASSIVE -> KVBp
    react.api.EntityFlag HOSTILE -> Edsu
    react.api.EntityFlag MATURE -> qTQc
    react.api.EntityFlag YOUNG -> FhWx
    react.api.EntityFlag UNDERWATER -> Ojag
    react.api.EntityFlag GROUNDED -> JSCA
    react.api.EntityFlag AIRBORNE -> bigk
    react.api.EntityFlag PROJECTILES -> ggum
    react.api.EntityFlag CAVES -> Thoj
    react.api.EntityFlag NEARBY -> yJff
    react.api.EntityFlag LIT -> NNLt
    react.api.EntityFlag LEASHED -> EvVs
    java.lang.String m -> Ukpd
    react.api.EntityFlag[] ENUM$VALUES -> lfck
    12:31:void <clinit>() -> <clinit>
    35:38:void <init>(java.lang.String,int,java.lang.String) -> <init>
    42:52:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> JkXd
    57:152:boolean is(org.bukkit.entity.Entity) -> VejA
    158:158:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> tdpd:
    react.glang.GSet entityTypes -> nKGl
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> iBlA
react.api.EntitySample -> NLrd:
    react.glang.GMap counts -> hAEn
    react.glang.GMap sets -> Jcby
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> yQyh
    45:45:react.glang.GList getTypes() -> uFRW
    50:57:int total() -> JcIs
    62:67:int get(org.bukkit.entity.EntityType) -> ksfn
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> IyWN
    84:96:void add(org.bukkit.entity.Entity) -> leiL
react.api.Experimental -> awNR:
react.api.Flavor -> JYvi:
    react.api.Flavor ANY -> ESrx
    react.api.Flavor SAFE_MODE -> HDLD
    react.api.Flavor CRAFT_BUKKIT -> oNKQ
    react.api.Flavor BUKKIT -> oNJu
    react.api.Flavor SPIGOT -> iTjI
    react.api.Flavor SOGGY_SPIGOT -> YyAW
    react.api.Flavor PAPER_SPIGOT -> eaof
    react.api.Flavor TACO_SPIGOT -> nAvQ
    react.api.Flavor TORCH_SPIGOT -> WGeD
    react.api.Flavor FORGE_HACK -> jGKd
    react.api.Flavor SPONGE_HACK -> MAwO
    react.api.Flavor[] ENUM$VALUES -> nJfd
    6:18:void <clinit>() -> <clinit>
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> ivTX
    74:79:boolean compatableWith(react.api.Flavor) -> ksfn
    84:84:java.lang.String fancyName() -> vsiC
    1:1:react.api.Flavor[] values() -> values
    1:1:react.api.Flavor valueOf(java.lang.String) -> valueOf
react.api.IAction -> xXLB:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> GbPI
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> IyWN
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
    react.api.ActionState getState() -> qdWP
    react.api.ActionTargetType getTarget() -> kbdv
    void setNodes(java.lang.String[]) -> ksfn
    java.lang.String[] getNodes() -> UQdV
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> JkXd
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> GbOr
    react.glang.GMap getDefaultSelectors() -> KwKa
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> ksfn
    react.api.ISelector[] biselect(react.api.ISelector[]) -> ksfn
    react.action.source.IActionSource getCurrentSource() -> DHCd
    void completeAction() -> XJLb
react.api.ICache -> Btdo:
    react.glang.GSet get(java.lang.Object) -> IyWN
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> nkoF
    void clear() -> clear
    boolean has(java.lang.Object) -> leiL
    react.glang.GList k() -> IEqC
react.api.ICommand -> iTOv:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> bWla
    java.lang.String[] getPermissions() -> SKaT
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> VejA
    react.api.SideGate getSideGate() -> cuBs
    void registerParameterDescription(java.lang.String,java.lang.String) -> ksfn
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.api.IRecord -> uyVD:
    java.lang.String getRecordType() -> lejm
    long getRecordTime() -> EAxL
    react.json.JSONObject toJSON() -> tdpd
    java.lang.Object getRecordObject() -> NLrd
    void fromJSON(react.json.JSONObject) -> ksfn
react.api.IRecordBook -> LGKt:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> ksfn
    long getOldestRecordTime() -> awNR
    void addRecord(react.api.IRecord) -> ksfn
    long getLatestRecordTime() -> JYvi
    int countRecords(long,long) -> ksfn
    react.glang.GMap getRecords(long,long) -> IyWN
    int purgeRecordsBefore(long) -> IyWN
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> EAvd:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> xXLB
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> Btdo
    react.surge.util.C getAltColor() -> iTOv
    void setColor(react.surge.util.C,react.surge.util.C) -> ksfn
    int getInterval() -> getInterval
    void setInterval(int) -> IyWN
    void sample() -> uyVD
    java.lang.String get() -> get
    void construct() -> LGKt
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> uxtl:
    react.api.SelectionMode getMode() -> EAvd
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> JkXd
    react.glang.GSet getList() -> uxtl
    react.glang.GSet getPossibilities() -> IhVi
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> VejA
    java.lang.String getName() -> getName
react.api.Injection -> IhVi:
    react.api.InjectionMethod value() -> qcwJ
react.api.InjectionMethod -> qcwJ:
    react.api.InjectionMethod SWAP -> HfMX
    react.api.InjectionMethod SUBSTRATE -> qvTM
    react.api.InjectionMethod RELOAD -> VxFh
    react.api.InjectionMethod[] ENUM$VALUES -> jGLL
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> Husv:
    java.lang.String value() -> value
react.api.MSampler -> VUKF:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> Husv
react.api.MonitorHeading -> TVse:
    react.api.ISampler head -> fvUC
    react.glang.GList children -> UtcK
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> ksfn
    27:27:react.api.ISampler getHead() -> VUKF
    32:33:void setHead(react.api.ISampler) -> IyWN
    37:37:react.glang.GList getChildren() -> TVse
    42:42:java.lang.String getHeadText() -> vsgM
    47:60:java.lang.String getChildText() -> gNIg
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> ksfn
react.api.NoiseGenerator -> vsgM:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> gNIg:
    react.api.NoiseGenerator[] octaves -> rVqn
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> lwLE
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> lwLE:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> nSWY
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> yIki
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> yIki:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> ksfn
react.api.Permissable -> kkWb:
    react.api.Permissable ACCESS -> wgCT
    react.api.Permissable MONITOR -> cRxA
    react.api.Permissable MONITOR_TITLE -> dMjX
    react.api.Permissable MONITOR_ACTIONLOG -> IiRr
    react.api.Permissable MONITOR_MAP -> UBAu
    react.api.Permissable MONITOR_ENVIRONMENT -> doom
    react.api.Permissable MONITOR_GLASSES -> VUei
    react.api.Permissable MONITOR_CHUNK_BLAME -> Nxbf
    react.api.Permissable RAI_MONITOR -> klTo
    react.api.Permissable RAI_CONTROL -> MJkY
    react.api.Permissable RAI_ACCESS -> ESuW
    react.api.Permissable RAI -> CMnQ
    react.api.Permissable ACT -> dopa
    react.api.Permissable RELOAD -> kdCp
    java.lang.String node -> sjyb
    react.api.Permissable[] ENUM$VALUES -> PdvR
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> ksfn
    46:46:java.lang.String getNode() -> kkWb
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PluginSelfDeleter -> VKxT:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> FpkX
    java.lang.Runnable r -> RHyT
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> ksfn
react.api.ReactCommand -> UbhM:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> IiSm
    java.lang.String usage -> AYIu
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> LGiG
    react.api.SideGate sideGate -> bYIc
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> VejA
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> ksfn
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> bWla
    47:47:java.lang.String[] getPermissions() -> SKaT
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> cuBs
react.api.ReactException -> uhTK:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> DaXY:
    react.glang.GMap keystore -> WPXv
    boolean monitoring -> monitoring
    boolean highMonitor -> wwgO
    boolean actionlogging -> ThqB
    boolean glasses -> sjyY
    boolean mapping -> VgGd
    int monitorSelection -> RIXb
    int plays -> LYIe
    boolean monitorPosted -> xHFR
    int monitorLastSelection -> Knwa
    int switchNotification -> gqHa
    int hotbarSlot -> LHHa
    boolean shift -> wgEV
    int scroll -> SDKy
    double lastHeight -> UlUQ
    boolean heightMovement -> hjye
    org.bukkit.entity.Player p -> Daiw
    24:40:void <clinit>() -> <clinit>
    43:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> VKxT
    128:128:boolean isMapping() -> UbhM
    133:133:org.bukkit.entity.Player getP() -> uhTK
    138:140:void setMonitoring(boolean) -> IyWN
    144:146:void setMapping(boolean) -> nkoF
    150:150:int getMonitorSelection() -> DaXY
    155:157:void setMonitorSelection(int) -> nkoF
    161:161:int getHotbarSlot() -> PJhH
    166:168:void setHotbarSlot(int) -> leiL
    172:172:boolean isShifting() -> xhnw
    177:179:void setShifting(boolean) -> leiL
    183:183:boolean isShift() -> BlUi
    188:190:void setShift(boolean) -> JkXd
    194:194:int getScroll() -> bFlt
    199:201:void setScroll(int) -> JkXd
    205:205:int getMonitorLastSelection() -> HSso
    210:212:void setMonitorLastSelection(int) -> VejA
    216:217:void setP(org.bukkit.entity.Player) -> IyWN
    221:221:double getLastHeight() -> SnFl
    226:228:void setLastHeight(double) -> ksfn
    232:232:boolean isHeightMovement() -> GjdH
    237:239:void setHeightMovement(boolean) -> VejA
    243:243:int getSwitchNotification() -> hrra
    248:250:void setSwitchNotification(int) -> eYCp
    254:254:boolean getMonitorPosted() -> tLBi
    259:261:void setMonitorPosted(boolean) -> eYCp
    265:265:int getPlays() -> ctdV
    270:272:void setPlays(int) -> RPlW
    276:276:boolean isGlasses() -> WyrT
    281:283:void setGlasses(boolean) -> RPlW
    287:287:boolean isActionlogging() -> RQPy
    292:294:void setActionlogging(boolean) -> OjGa
react.api.Record -> PJhH:
    java.lang.String recordType -> UIse
    long recordTime -> oMoB
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> lejm
    32:32:long getRecordTime() -> EAxL
    38:38:java.lang.Object getRecordObject() -> NLrd
    react.json.JSONObject toJSON() -> tdpd
    void fromJSON(react.json.JSONObject) -> ksfn
react.api.RecordBook -> xhnw:
    java.io.File recordFile -> OkFj
    react.json.JSONObject js -> bilN
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> ksfn
    79:87:react.api.IRecord getRecord(long) -> ksfn
    react.api.IRecord createDummyRecord(long,java.lang.String) -> ksfn
    95:107:long getOldestRecordTime() -> awNR
    113:125:long getLatestRecordTime() -> JYvi
    130:130:boolean within(long,long,long) -> ksfn
    136:144:int countRecords(long,long) -> ksfn
    150:162:react.glang.GMap getRecords(long,long) -> IyWN
    168:181:int purgeRecordsBefore(long) -> IyWN
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> BlUi:
react.api.SampledChunk -> bFlt:
    org.bukkit.Chunk c -> Sepm
    react.glang.GMap counts -> hAEn
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> uNcp
    26:38:void hit(react.api.ChunkIssue,int) -> ksfn
    42:42:org.bukkit.Chunk getC() -> yJPG
    47:47:react.glang.GMap getCounts() -> tTRV
react.api.SampledType -> HSso:
    react.api.SampledType ENTITY_TIME_LOCK -> jiSl
    react.api.SampledType TILE_TIME_LOCK -> Yxce
    react.api.SampledType ENTITY_TIME -> mGhl
    react.api.SampledType TILE_TIME -> Kwkm
    react.api.SampledType ENTITY_DROPTICK -> JlYD
    react.api.SampledType TILE_DROPTICK -> vlVX
    react.api.SampledType REDSTONE_TICK_USAGE -> AXkb
    react.api.SampledType REDSTONE_TICK -> hRKb
    react.api.SampledType REDSTONE_SECOND -> hblS
    react.api.SampledType REDSTONE_TIME -> lgIN
    react.api.SampledType PHYSICS_TIME -> Sepr
    react.api.SampledType HOPPER_TICK_USAGE -> AGin
    react.api.SampledType HOPPER_TICK -> feXS
    react.api.SampledType HOPPER_SECOND -> FqNY
    react.api.SampledType HOPPER_TIME -> QOJf
    react.api.SampledType FLUID_TICK_USAGE -> PKdn
    react.api.SampledType FLUID_TICK -> wMUV
    react.api.SampledType FLUID_SECOND -> fvXY
    react.api.SampledType FLUID_TIME -> ktem
    react.api.SampledType TPS -> SDMa
    react.api.SampledType TICK -> nlmf
    react.api.SampledType TIU -> LjLo
    react.api.SampledType MEM -> YpSH
    react.api.SampledType FREEMEM -> gOHX
    react.api.SampledType MAXMEM -> FOIi
    react.api.SampledType ALLOCMEM -> pIAf
    react.api.SampledType MAHS -> qvWp
    react.api.SampledType CHK_TIME -> qmgI
    react.api.SampledType EXPLOSION_TIME -> jXQa
    react.api.SampledType CHK -> Blpv
    react.api.SampledType ATASK -> IPCR
    react.api.SampledType STASK -> OPrc
    react.api.SampledType CHKS -> loWy
    react.api.SampledType ENT -> ktfB
    react.api.SampledType ENTLIV -> KEGe
    react.api.SampledType ENTDROP -> jXQP
    react.api.SampledType ENTTILE -> OsWL
    java.lang.String node -> sjyb
    react.api.SampledType[] ENUM$VALUES -> qLDR
    6:44:void <clinit>() -> <clinit>
    50:50:react.api.ISampler get() -> LWpY
    56:56:java.lang.String toString() -> toString
    59:70:void <init>(java.lang.String,int,java.lang.String) -> <init>
    74:74:java.lang.String getNode() -> kkWb
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> SnFl:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> ESwH
    react.surge.util.C altColor -> IrIB
    int interval -> ierH
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> Btdo
    49:49:react.surge.util.C getAltColor() -> iTOv
    55:55:int getInterval() -> getInterval
    void sample() -> uyVD
    void construct() -> LGKt
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> ksfn
    107:108:void setInterval(int) -> IyWN
react.api.Sector -> GjdH:
    int value() -> value
react.api.SelectionException -> hrra:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> tLBi:
    react.api.SelectionMode WHITELIST -> iTov
    react.api.SelectionMode BLACKLIST -> HneN
    react.api.SelectionMode[] ENUM$VALUES -> ssoS
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> ctdV:
    java.lang.Class objectType -> Winw
    react.api.SelectionMode mode -> Cxgg
    react.glang.GSet list -> Mlre
    react.glang.GSet possibilities -> LGmM
    int popoff -> LsBW
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> EAvd
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> JkXd
    43:43:react.glang.GSet getList() -> uxtl
    49:49:react.glang.GSet getPossibilities() -> IhVi
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> VejA
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> eYCp
    98:100:int pop() -> pop
react.api.SelectorEntityType -> WyrT:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> nkoF
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> VejA
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> RPlW
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> RQPy:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> uNcp:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> nkoF
    29:30:void add(org.bukkit.Chunk,int) -> ksfn
    34:38:void add(org.bukkit.World) -> RPlW
    42:46:void addAll() -> xypR
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> VejA
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> RPlW
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> yJPG:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> VejA
    87:87:java.lang.String getName() -> getName
react.api.Side -> tTRV:
    react.api.Side PLAYERS -> JJWo
    react.api.Side CONSOLE -> IiWu
    java.lang.String ss -> MeDD
    react.api.Side[] ENUM$VALUES -> VEJP
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> Ipja
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> IyWN
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> LWpY:
    react.api.SideGate PLAYERS_ONLY -> wVHs
    react.api.SideGate CONSOLES_ONLY -> lLwc
    react.api.SideGate ANYTHING -> uaDN
    int[] $SWITCH_TABLE$react$api$SideGate -> ssoF
    react.api.SideGate[] ENUM$VALUES -> YhEB
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> ksfn
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> GYcN
react.api.SimplexNoiseGenerator -> xypR:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> Tqew
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> jhXG
react.api.SimplexOctaveGenerator -> Ipja:
    double wScale -> xGiV
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> ksfn
react.api.SpecializedTickLimiter -> GYcN:
    double rMaxTime -> fKfB
    long rStartTime -> ECXJ
    double rLastTime -> GkaN
    long rMark -> DkHt
    double tMaxTime -> GANH
    react.gmath.Average atimes -> rNgk
    react.gmath.Average adropped -> DHeV
    int droppedTicks -> wLvL
    boolean entityTick -> cmQY
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> jhXG:
    react.glang.GList sources -> GkaY
    react.glang.GList splooge -> YEaI
    react.glang.GSet destroy -> PucD
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> ksfn
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> IyWN
    void clipped(org.bukkit.Location) -> IyWN
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> nkoF
    boolean isAllowedSource(org.bukkit.Location) -> leiL
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> ksfn
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> IyWN
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> nkoF
react.api.SploogeCounter$1 -> jhXG$1:
    react.api.SploogeCounter this$0 -> CMrh
    java.util.Iterator val$it -> YowL
    org.bukkit.Location val$start -> XJpi
    int val$maxDistance -> dNTT
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> ksfn
react.api.SploogeCounter$1$1 -> jhXG$1$1:
    react.api.SploogeCounter$1 this$1 -> dpVu
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> BuEs:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> bypg:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> tdpd
    38:49:void fromJSON(react.json.JSONObject) -> ksfn
react.api.StackTraceRecordBook -> fBWi:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> IyWN
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> ksfn
react.api.StackedEntity -> HeUY:
    org.bukkit.entity.LivingEntity entity -> DPxQ
    int count -> count
    double rmx -> DkKk
    org.bukkit.entity.Entity damager -> VVMM
    22:34:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    39:44:double getMaxHealth(org.bukkit.entity.LivingEntity) -> ksfn
    49:49:int getAbsoluteMaxCount() -> BuEs
    54:54:int getMaxCount(org.bukkit.entity.LivingEntity) -> IyWN
    59:61:void update() -> update
    65:71:void signalSize() -> bypg
    75:76:void setDamager(org.bukkit.entity.Entity) -> eYCp
    80:140:void updateHealth() -> fBWi
    144:145:void heal(double) -> IyWN
    149:150:void setHealth(double) -> setHealth
    154:154:int getEffectiveCount() -> HeUY
    159:159:int getEffectiveCount(double) -> nkoF
    164:164:double getEffectiveMaxHealth(int) -> OjGa
    169:169:double getRealMaxHealth() -> YDav
    174:174:double getHealth() -> getHealth
    179:185:void setMaxHealth(double) -> setMaxHealth
    190:199:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> ksfn
    203:203:double getMaxHealth() -> getMaxHealth
    208:208:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    213:213:int getCount() -> getCount
react.api.TitleMonitor -> YDav:
    react.glang.GList headings -> yJoN
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> ksfn
    24:24:int getMaxSelection() -> miOl
    29:37:int left(int) -> MuCR
    42:50:int right(int) -> kACR
    55:55:react.api.MonitorHeading getHeadFor(int) -> GbPI
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> ksfn
    83:100:java.lang.String getHotbarFor(int,boolean) -> ksfn
react.api.Unused -> miOl:
react.api.WorldConfig -> Smdw:
    boolean allowRai -> pjhj
    boolean allowActions -> TaHi
    boolean allowRelighting -> wxOK
    boolean allowTileThrottling -> hQoF
    boolean allowEntityThrottling -> PLLE
    boolean allowFastLeafDecay -> iwUn
    java.util.List assumeNoSideEffectsEntities -> kdIt
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> OjGa
    48:62:void save(org.bukkit.World) -> MuCR
    66:80:void load(org.bukkit.World) -> kACR
react.cache.CachedEntity -> dfeG:
    java.util.UUID uid -> PCYy
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> KfoI
    double x -> x
    double y -> y
    double z -> z
    double vx -> NpYP
    double vy -> wVJv
    double vz -> hQnt
    double dx -> oxfQ
    double dy -> XTBQ
    double dz -> KgNS
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> RPlW
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> Smdw
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> dfeG
    120:121:void setVx(double) -> leiL
    125:125:double getVy() -> Suuj
    130:131:void setVy(double) -> JkXd
    135:135:double getVz() -> RaqY
    140:141:void setVz(double) -> VejA
    145:145:double getDx() -> WrBd
    150:151:void setDx(double) -> eYCp
    155:155:double getDy() -> iKaE
    160:161:void setDy(double) -> RPlW
    165:165:double getDz() -> bypm
    170:171:void setDz(double) -> OjGa
    175:175:java.util.UUID getUid() -> qBVt
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> Suuj:
    int age -> DQXM
    boolean ageLock -> xGjm
    boolean breed -> hbpL
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> RPlW
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> Elmc
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> RsSm
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> RaqY:
    org.bukkit.DyeColor dye -> fCWb
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> RPlW
    30:30:org.bukkit.DyeColor getDye() -> KnbB
    35:36:void setDye(org.bukkit.DyeColor) -> ksfn
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> WrBd:
    react.glang.GList potionEffects -> VgNL
    boolean canPickupItems -> KVLl
    org.bukkit.inventory.ItemStack[] armorContents -> FppN
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> bHLf
    double maxHealth -> maxHealth
    int maxAir -> AHOy
    int air -> GAOe
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> RPlW
    63:63:react.glang.GList getPotionEffects() -> lClH
    68:69:void setPotionEffects(react.glang.GList) -> IyWN
    73:73:boolean isCanPickupItems() -> EeAD
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> FMpN
    138:139:void setMaxAir(int) -> qdWP
    143:143:int getAir() -> miRo
    148:149:void setAir(int) -> kbdv
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> iKaE:
    boolean sheared -> UAfn
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> RPlW
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> bypm:
    org.bukkit.inventory.ItemStack is -> UIxC
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> RPlW
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> qBVt:
    7:7:void <init>() -> <init>
react.command.CommandAct -> Elmc:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> ksfn
    186:192:react.text.RTX getBeginningRTX() -> FhDL
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> ksfn
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> IyWN
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> nkoF
    331:346:react.glang.GList getSortedCommands() -> MJUL
    351:358:int getPageSize(int) -> GbOr
    363:363:boolean isValidPage(int,int) -> ksfn
    368:377:react.glang.GList getPage(int,int) -> IyWN
react.command.CommandActionLog -> RsSm:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandCPUScore -> KnbB:
    16:24:void <init>() -> <init>
    29:39:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandCapabilities -> lClH:
    19:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandChunkBlame -> EeAD:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandChunkBlame$1 -> EeAD$1:
    react.command.CommandChunkBlame this$0 -> psXc
    org.bukkit.command.CommandSender val$sender -> jWtS
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> EeAD$1$1:
    react.command.CommandChunkBlame$1 this$1 -> DPwj
    org.bukkit.command.CommandSender val$sender -> jWtS
    java.lang.String val$i -> hcTK
    react.glang.GMap val$top -> YyKT
    int val$totalx -> Ojkq
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandEnvironment -> FMpN:
    24:32:void <init>() -> <init>
    37:74:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandGlasses -> miRo:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandHelp -> FhDL:
    28:37:void <init>() -> <init>
    42:54:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
    58:77:void sendPage(org.bukkit.command.CommandSender,int,int) -> ksfn
    81:87:react.text.RTX getBeginningRTX() -> FhDL
    92:157:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> ksfn
    161:171:void sendHeader(org.bukkit.command.CommandSender,int,int) -> IyWN
    175:204:void sendFooter(org.bukkit.command.CommandSender,int,int) -> nkoF
    208:215:react.glang.GList getSortedCommands() -> MJUL
    220:227:int getPageSize(int) -> GbOr
    232:232:boolean isValidPage(int,int) -> ksfn
    237:246:react.glang.GList getPage(int,int) -> IyWN
react.command.CommandHighMonitor -> MJUL:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandMap -> APBb:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandMonitor -> hjdD:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandReload -> ctgS:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandReload$1 -> ctgS$1:
    react.command.CommandReload this$0 -> pIIL
    org.bukkit.command.CommandSender val$sender -> jWtS
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> ctgS$1$1:
    react.command.CommandReload$1 this$1 -> YpYc
    org.bukkit.command.CommandSender val$sender -> jWtS
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> Lyty:
    28:36:void <init>() -> <init>
    41:50:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
    54:63:org.bukkit.inventory.ItemStack makeBook() -> APBb
    68:94:void addSpikePages(react.glang.GList) -> nkoF
    98:108:void addStatusPages(react.glang.GList) -> leiL
    112:129:int findSlot(org.bukkit.entity.Player) -> nkoF
react.command.CommandTopChunk -> Qxcm:
    24:32:void <init>() -> <init>
    37:58:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.command.CommandVersion -> kHyB:
    17:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> ksfn
react.controller.ActionController -> ryBg:
    int kiv -> QiBt
    react.glang.GMap actions -> bjTJ
    react.glang.GMap pending -> uFti
    react.glang.GList tasks -> xrap
    24:24:void <clinit>() -> <clinit>
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> ksfn
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> IyWN
    141:141:react.api.IAction getAction(react.api.ActionType) -> ksfn
    146:147:void registerAction(react.api.IAction) -> ksfn
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> hjdD
    241:248:react.glang.GList getActionNames() -> ctgS
react.controller.ChronophyFluidController -> HBtu:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> kAJA:
    boolean firstTickList -> vSJT
    long firstTick -> LbDe
    long lastTick -> yBaC
    react.gmath.Average aCSMS -> Utnj
    react.glang.GMap pluginLoads -> bjSe
    react.glang.GMap playerLoads -> BmWW
    int serverLoads -> AGot
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> Lyty
    63:73:void tickNextTickList() -> Qxcm
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> ksfn
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> ksfn
    171:171:boolean isFirstTickList() -> kHyB
    176:176:long getFirstTick() -> ryBg
    181:181:long getLastTick() -> HBtu
    186:186:react.gmath.Average getaCSMS() -> kAJA
    191:191:react.glang.GMap getPluginLoads() -> jFVf
    196:196:react.glang.GMap getPlayerLoads() -> ySBo
    201:201:int getServerLoads() -> NVHE
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> ksfn
    29:29:int access$1(react.controller.ChunkController) -> IyWN
    29:29:void access$2(react.controller.ChunkController,int) -> ksfn
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> nkoF
react.controller.ChunkController$1 -> kAJA$1:
    react.controller.ChunkController this$0 -> HMFx
    org.bukkit.event.world.ChunkLoadEvent val$e -> YgiX
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> nkoF
    1:1:void run(java.lang.Object) -> ksfn
react.controller.CommandController -> jFVf:
    react.glang.GList commands -> FiCy
    boolean k -> iTsp
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> OjGa
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> MuCR
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> ksfn
    317:317:react.glang.GList getCommands() -> uEsw
    322:323:void setCommands(react.glang.GList) -> JkXd
    327:327:boolean isK() -> Plmu
    332:333:void setK(boolean) -> MuCR
react.controller.EntityCullController -> ySBo:
    react.glang.GSet flags -> WsDx
    react.glang.GSet defer -> Svxr
    react.glang.GSet prefer -> XKTX
    react.glang.GMap maxs -> opYB
    19:19:void <init>() -> <init>
    29:34:void start() -> start
    40:40:void stop() -> stop
    46:46:void tick() -> tick
    50:200:void repopulateRules() -> wvnd
    204:217:int cull(org.bukkit.Chunk) -> leiL
    222:346:int partialCull(org.bukkit.Chunk) -> JkXd
react.controller.EntityStackController -> NVHE:
    react.glang.GList stacks -> GlGa
    21:23:void <init>() -> <init>
    28:29:void start() -> start
    34:35:void stop() -> stop
    40:55:void tick() -> tick
    60:113:void stack(react.glang.GList) -> VejA
    117:122:boolean isStacked(org.bukkit.entity.LivingEntity) -> nkoF
    127:140:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> leiL
    146:164:void on(org.bukkit.event.entity.EntityDamageEvent) -> ksfn
    169:188:void on(org.bukkit.event.entity.EntityDamageByEntityEvent) -> ksfn
    192:207:void merge(react.api.StackedEntity,react.api.StackedEntity) -> ksfn
    211:277:void checkNear(org.bukkit.entity.LivingEntity) -> JkXd
    282:322:void on(org.bukkit.event.entity.EntitySpawnEvent) -> ksfn
react.controller.EntityStackController$1 -> NVHE$1:
    react.controller.EntityStackController this$0 -> sbpv
    org.bukkit.event.entity.EntitySpawnEvent val$e -> gNlu
    1:289:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    294:319:void run() -> run
react.controller.EventController -> uEsw:
    react.lagmap.LagMap map -> kSIu
    react.glang.GMap slots -> SwWu
    22:22:void <init>() -> <init>
    30:38:void start() -> start
    43:44:void stop() -> stop
    49:94:void tick() -> tick
    99:100:void on(org.bukkit.event.entity.EntityExplodeEvent) -> ksfn
    105:106:void on(org.bukkit.event.block.BlockPhysicsEvent) -> ksfn
    111:112:void on(org.bukkit.event.entity.EntitySpawnEvent) -> ksfn
    117:118:void on(org.bukkit.event.entity.EntityDeathEvent) -> ksfn
    123:124:void on(org.bukkit.event.entity.EntityDamageEvent) -> ksfn
    129:130:void on(org.bukkit.event.player.PlayerJoinEvent) -> ksfn
    135:136:void on(org.bukkit.event.player.PlayerQuitEvent) -> ksfn
react.controller.ExplosiveController -> Plmu:
    boolean firstTickList -> vSJT
    long firstTick -> LbDe
    long lastTick -> yBaC
    react.gmath.Average aCSMS -> Utnj
    15:15:void <init>() -> <init>
    25:30:void start() -> start
    34:47:void flushTickList() -> Lyty
    51:61:void tickNextTickList() -> Qxcm
    66:67:void stop() -> stop
    73:74:void tick() -> tick
    79:88:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> IyWN
    93:94:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> ksfn
    98:98:boolean isFirstTickList() -> kHyB
    103:103:long getFirstTick() -> ryBg
    108:108:long getLastTick() -> HBtu
    113:113:react.gmath.Average getaCSMS() -> kAJA
react.controller.FastDecayController -> wvnd:
    int[] $SWITCH_TABLE$org$bukkit$TreeSpecies -> iMCw
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> ksfn
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> ksfn
    74:155:void checkBreak(org.bukkit.block.Block) -> nkoF
    159:190:void decay(org.bukkit.block.Block) -> leiL
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> JkXd
    258:262:void tick() -> tick
    31:31:int[] $SWITCH_TABLE$org$bukkit$TreeSpecies() -> mWoV
react.controller.FastDecayController$1 -> wvnd$1:
    react.controller.FastDecayController this$0 -> nddL
    react.glang.GMap val$locs -> rqPi
    1:88:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> nkoF
    99:99:boolean isAllowedSource(org.bukkit.Location) -> leiL
    105:124:void clipped(org.bukkit.Location) -> IyWN
    129:152:void finished() -> finished
    88:88:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> ksfn
react.controller.FastDecayController$1$1 -> wvnd$1$1:
    react.controller.FastDecayController$1 this$1 -> vuLf
    react.glang.GMap val$locs -> rqPi
    int val$i -> lDit
    1:133:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> wvnd$2:
    react.controller.FastDecayController this$0 -> nddL
    org.bukkit.block.Block val$b -> DIJW
    1:159:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FeatureController -> mWoV:
    react.feature.INMSBinding trueBinding -> MlvT
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> haqk
    85:85:java.lang.String getPackageVersion() -> rooc
    90:90:boolean hasBinding() -> bWpD
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> ksfn
react.controller.FluidController -> haqk:
    react.glang.GSet ignore -> SoIJ
    int flowsPerTick -> PKlI
    int flowsPerSecond -> vSHs
    react.gmath.Average aFST -> Nxlc
    react.gmath.Average aFSS -> rNod
    react.gmath.Average aFSMS -> FOSN
    boolean firstTickList -> vSJT
    long firstTick -> LbDe
    long lastTick -> yBaC
    react.glang.GSet frozen -> VgSO
    react.glang.GMap queue -> yeFw
    react.glang.GMap freezeTimes -> iLex
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> VejA
    68:76:void checkChunks() -> sQQF
    80:97:void checkChunk(org.bukkit.Chunk) -> eYCp
    101:107:void queue(org.bukkit.block.Block) -> VejA
    111:111:boolean isFrozen(org.bukkit.Chunk) -> RPlW
    116:117:void freeze(org.bukkit.Chunk) -> OjGa
    121:127:void unfreeze(org.bukkit.Chunk) -> MuCR
    131:138:void freeze(org.bukkit.Chunk,long) -> ksfn
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> Lyty
    172:182:void tickNextTickList() -> Qxcm
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> ksfn
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> ksfn
    248:248:react.glang.GSet getIgnore() -> ccck
    253:253:int getTransfersPerTick() -> oUdy
    258:258:int getTransfersPerSecond() -> goqA
    263:263:react.gmath.Average getaFST() -> bGNm
    268:268:react.gmath.Average getaFSS() -> DPYw
    273:273:react.gmath.Average getaFSMS() -> LPBG
    278:278:boolean isFirstTickList() -> kHyB
    283:283:long getFirstTick() -> ryBg
    288:288:long getLastTick() -> HBtu
    293:293:react.glang.GSet getFrozen() -> Hdvh
    298:298:react.glang.GMap getQueue() -> NxKI
    303:303:react.glang.GMap getFreezeTimes() -> uhWj
react.controller.GlassController -> rooc:
    react.glang.GMap q -> CVil
    react.glang.GList g -> KUpn
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:137:void tick() -> tick
    141:141:boolean isUsingGlasses(org.bukkit.entity.Player) -> leiL
    146:146:boolean canUseGlasses(org.bukkit.entity.Player) -> JkXd
    151:167:void toggleGlasses(org.bukkit.entity.Player) -> VejA
    172:177:void on(org.bukkit.event.block.BlockPhysicsEvent) -> ksfn
    182:187:void on(org.bukkit.event.block.BlockFromToEvent) -> ksfn
    192:197:void on(org.bukkit.event.block.BlockBurnEvent) -> ksfn
    202:207:void on(org.bukkit.event.block.BlockFormEvent) -> ksfn
    212:217:void on(org.bukkit.event.block.BlockFadeEvent) -> ksfn
    222:234:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> ksfn
    36:36:react.glang.GList access$0(react.controller.GlassController) -> ksfn
react.controller.GlassController$1 -> rooc$1:
    react.controller.GlassController this$0 -> FFan
    react.glang.GMap val$cc -> BujG
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:135:void run() -> run
react.controller.GlassController$1$1 -> rooc$1$1:
    react.controller.GlassController$1 this$1 -> LGrc
    org.bukkit.Location val$i -> LbFd
    org.bukkit.entity.Player val$j -> PvcQ
    1:108:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    113:118:void run() -> run
react.controller.GraphController -> bWpD:
    react.glang.GMap g -> RbvY
    react.glang.GMap gr -> NhMC
    react.glang.GMap gra -> bQCk
    41:41:void <init>() -> <init>
    50:83:void start() -> start
    88:94:void stop() -> stop
    99:126:void tick() -> tick
    131:148:void on(org.bukkit.event.player.PlayerJoinEvent) -> ksfn
    152:174:void createGraphs(react.graph.GraphMode,org.bukkit.entity.Player,react.glang.GList) -> ksfn
    178:181:void addSystem(org.bukkit.entity.Player,react.glang.GList) -> ksfn
    185:189:void addTick(org.bukkit.entity.Player,react.glang.GList) -> IyWN
    193:197:void addMemory(org.bukkit.entity.Player,react.glang.GList) -> nkoF
    201:202:void addEod(org.bukkit.entity.Player,react.glang.GList) -> leiL
    206:215:void addPhysics(org.bukkit.entity.Player,react.glang.GList) -> JkXd
    219:222:void addReact(org.bukkit.entity.Player,react.glang.GList) -> VejA
    226:272:void toggleMapping(org.bukkit.entity.Player,java.lang.String[]) -> ksfn
    277:317:void on(org.bukkit.event.player.PlayerMoveEvent) -> ksfn
    323:323:void on(react.event.ReactScrollEvent) -> ksfn
    327:358:void toggleMapping(org.bukkit.entity.Player) -> eYCp
    362:394:void toggleMappingEod(org.bukkit.entity.Player) -> RPlW
    398:398:react.glang.GMap getG() -> BRec
    403:403:react.glang.GMap getGr() -> Qoqj
    44:44:react.glang.GMap access$0(react.controller.GraphController) -> ksfn
    43:43:react.glang.GMap access$1(react.controller.GraphController) -> IyWN
react.controller.GraphController$1 -> bWpD$1:
    react.controller.GraphController this$0 -> HCvu
    1:63:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    68:81:void run() -> run
react.controller.GraphController$2 -> bWpD$2:
    react.controller.GraphController this$0 -> HCvu
    1:99:void <init>(react.controller.GraphController) -> <init>
    104:108:void run() -> run
react.controller.GraphController$3 -> bWpD$3:
    react.controller.GraphController this$0 -> HCvu
    org.bukkit.event.player.PlayerJoinEvent val$e -> UdOs
    1:131:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    136:146:void run() -> run
react.controller.HopperController -> sQQF:
    react.glang.GSet ignore -> SoIJ
    int transfersPerTick -> RcWc
    int transfersPerSecond -> bPcE
    react.gmath.Average aHST -> iTuy
    react.gmath.Average aHSS -> DHmH
    react.gmath.Average aHSMS -> LPcB
    boolean firstTickList -> vSJT
    long firstTick -> LbDe
    long lastTick -> yBaC
    react.glang.GSet frozen -> VgSO
    react.glang.GMap queue -> yeFw
    react.glang.GMap freezeTimes -> iLex
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> VejA
    65:73:void checkChunks() -> sQQF
    77:94:void checkChunk(org.bukkit.Chunk) -> eYCp
    98:104:void queue(org.bukkit.block.Block) -> VejA
    108:108:boolean isFrozen(org.bukkit.Chunk) -> RPlW
    113:114:void freeze(org.bukkit.Chunk) -> OjGa
    118:124:void unfreeze(org.bukkit.Chunk) -> MuCR
    128:135:void freeze(org.bukkit.Chunk,long) -> ksfn
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> Lyty
    169:179:void tickNextTickList() -> Qxcm
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> ksfn
    207:207:react.glang.GSet getIgnore() -> ccck
    212:212:int getTransfersPerTick() -> oUdy
    217:217:int getTransfersPerSecond() -> goqA
    222:222:react.gmath.Average getaHST() -> FVaA
    227:227:react.gmath.Average getaHSS() -> ghAC
    232:232:react.gmath.Average getaHSMS() -> avox
    237:237:boolean isFirstTickList() -> kHyB
    242:242:long getFirstTick() -> ryBg
    247:247:long getLastTick() -> HBtu
    252:252:react.glang.GSet getFrozen() -> Hdvh
    257:257:react.glang.GMap getQueue() -> NxKI
    262:262:react.glang.GMap getFreezeTimes() -> uhWj
react.controller.HopperOvertickController -> ccck:
    react.glang.GList possiblePlunge -> fnOx
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> ksfn
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> ksfn
react.controller.LanguageController -> oUdy:
    java.io.File languageFolder -> kuOV
    int oldVersion -> FNqN
    java.io.File dlf -> Wacf
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> BuIa
    160:221:void downloadAll(boolean) -> kACR
    225:261:void downloadLanguage(java.lang.String) -> eYCp
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> RPlW
    315:315:java.io.File getFileForLanguage(java.lang.String) -> OjGa
    320:332:void writeDefaults() -> iSrq
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> ksfn
    263:263:void access$1(react.controller.LanguageController) -> ksfn
react.controller.LanguageController$1 -> oUdy$1:
    react.controller.LanguageController this$0 -> UdNm
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> oUdy$2:
    react.controller.LanguageController this$0 -> UdNm
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> ksfn
react.controller.LanguageController$2$1 -> oUdy$2$1:
    react.controller.LanguageController$2 this$1 -> oMvW
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> ksfn
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> ksfn
    121:121:void onDownloadStarted(react.gnet.download.Download) -> ksfn
    126:128:void onDownloadFinished(react.gnet.download.Download) -> IyWN
    134:134:void onDownloadFailed(react.gnet.download.Download) -> nkoF
react.controller.LanguageController$3 -> oUdy$3:
    react.controller.LanguageController this$0 -> UdNm
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> oUdy$3$1:
    react.controller.LanguageController$3 this$1 -> EmqU
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> oUdy$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> pHhi
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> oUdy$4:
    react.controller.LanguageController this$0 -> UdNm
    java.io.File val$dld -> eIJG
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> ksfn
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> ksfn
    245:245:void onDownloadStarted(react.gnet.download.Download) -> ksfn
    250:251:void onDownloadFinished(react.gnet.download.Download) -> IyWN
    257:257:void onDownloadFailed(react.gnet.download.Download) -> nkoF
react.controller.MonitorController -> goqA:
    int maxCooldown -> Gbui
    react.api.TitleMonitor titleMonitor -> sJBL
    react.glang.GMap posts -> EfBV
    react.slate.PhantomSlate sb -> uXWu
    boolean ready -> XKUS
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> MBDL
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> OjGa
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> MuCR
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> jWWW
    179:184:float calcVolume(react.api.ReactPlayer) -> ksfn
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> kACR
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> GbPI
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> qdWP
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> kbdv
    219:223:void startMonitoring(org.bukkit.entity.Player) -> GbOr
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> KwKa
    242:247:void startActionLogging(org.bukkit.entity.Player) -> XJLb
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> DHCd
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> IyWN
    279:291:void processPlayer(react.api.ReactPlayer) -> nkoF
    296:296:void handleActionLog(org.bukkit.entity.Player) -> UQdV
    300:324:void handleTriggers(react.api.ReactPlayer) -> leiL
    328:367:void handleScrolling(react.api.ReactPlayer) -> JkXd
    371:399:void handleShifting(react.api.ReactPlayer) -> VejA
    403:425:void handlePosting(react.api.ReactPlayer) -> eYCp
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> ksfn
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> ksfn
    471:501:void tickMonitor(react.api.ReactPlayer) -> RPlW
    505:505:react.api.TitleMonitor getTitleMonitor() -> Hmhb
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> ksfn
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> ksfn
    539:552:void onTick() -> vbif
    556:578:void updateActionBoard() -> WaFE
    583:583:java.lang.String getTickName() -> MAdt
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> ksfn
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> ksfn
    41:41:void access$2(react.controller.MonitorController,boolean) -> ksfn
    41:41:boolean access$3(react.controller.MonitorController) -> IyWN
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> nkoF
react.controller.MonitorController$1 -> goqA$1:
    react.controller.MonitorController this$0 -> Kfqq
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> goqA$2:
    react.controller.MonitorController this$0 -> Kfqq
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> bGNm:
    react.glang.GMap samples -> TWyu
    int redstonePerTick -> KNAX
    int redstonePerSecond -> uaJJ
    boolean firstTickList -> vSJT
    long firstTick -> LbDe
    long lastTick -> yBaC
    react.gmath.Average aRSMS -> ghbM
    react.gmath.Average aRST -> nlud
    react.gmath.Average aRSS -> PKoy
    24:24:void <init>() -> <init>
    39:50:void start() -> start
    55:59:void on(org.bukkit.event.block.BlockPhysicsEvent) -> ksfn
    64:68:void on(org.bukkit.event.block.BlockFromToEvent) -> ksfn
    72:79:void flushTickList() -> Lyty
    83:93:void tickNextTickList() -> Qxcm
    98:100:void stop() -> stop
    106:112:void tick() -> tick
    116:117:void onRedstone(org.bukkit.Chunk) -> kACR
    121:122:void onPhysics(org.bukkit.Chunk) -> GbPI
    126:127:void onHopper(org.bukkit.Chunk) -> qdWP
    131:132:void onFluid(org.bukkit.Chunk) -> kbdv
    137:138:void on(org.bukkit.event.world.ChunkUnloadEvent) -> ksfn
    142:149:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> ksfn
    156:176:void onTick() -> vbif
    181:181:java.lang.String getTickName() -> MAdt
    186:186:react.glang.GMap getSamples() -> PucD
    191:191:int getRedstonePerTick() -> lTnv
    196:196:int getRedstonePerSecond() -> upkd
    201:201:boolean isFirstTickList() -> kHyB
    206:206:long getFirstTick() -> ryBg
    211:211:long getLastTick() -> HBtu
    216:216:react.gmath.Average getaRSMS() -> mPBo
    221:221:react.gmath.Average getaRST() -> Wyva
    226:226:react.gmath.Average getaRSS() -> SeYg
react.controller.PhysicsController$1 -> bGNm$1:
    react.controller.PhysicsController this$0 -> rXCq
    1:168:void <init>(react.controller.PhysicsController) -> <init>
    173:174:void run() -> run
react.controller.PlayerController -> DPYw:
    react.glang.GList players -> wUph
    react.glang.GSet save -> WrhW
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> OOsA
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> ksfn
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> fKEC
    113:113:react.glang.GList getPlayers() -> Xkwf
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> ksfn
react.controller.PlayerController$1 -> DPYw$1:
    react.controller.PlayerController this$0 -> TPLt
    react.glang.GList val$toSave -> skhH
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> LPBG:
    react.rai.IRAI rai -> KpFo
    boolean raiEnabled -> FiHS
    17:17:void <init>() -> <init>
    25:35:void start() -> start
    40:41:void stop() -> stop
    46:54:void tick() -> tick
    19:19:react.rai.IRAI access$0(react.controller.RAIController) -> ksfn
react.controller.RAIController$1 -> LPBG$1:
    react.controller.RAIController this$0 -> UlcD
    1:46:void <init>(react.controller.RAIController) -> <init>
    51:52:void run() -> run
react.controller.ReactFremComputer -> Hdvh:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> nkoF
react.controller.ReactServerInfo -> NxKI:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> hsWf
    27:27:int dgetGameProtocol() -> Edan
    33:33:java.lang.String dgetGameVersion() -> DHMW
    39:39:java.lang.String dgetReactVersion() -> bqeW
    45:45:int dgetMaxPlayers() -> CDhW
    51:58:react.glang.GList dgetConnectedPlayers() -> hHbb
    64:64:int dgetViewDistance() -> Btid
    70:70:int dgetGamePort() -> KLaQ
    76:76:java.lang.String dgetGameAddress() -> GPvA
    82:89:react.glang.GList dgetRemotePlugins() -> ySDy
    95:102:react.glang.GList dgetWorlds() -> awTX
    108:108:react.glang.GList dgetActions() -> hkFk
    114:114:react.glang.GList dgetSamplers() -> AhuS
react.controller.RedstoneController -> uhWj:
    react.glang.GSet ignore -> SoIJ
    react.glang.GSet frozen -> VgSO
    react.glang.GMap queue -> yeFw
    react.glang.GMap freezeTimes -> iLex
    int redstonePerTick -> KNAX
    int redstonePerSecond -> uaJJ
    react.gmath.Average aRST -> nlud
    react.gmath.Average aRSS -> PKoy
    react.gmath.Average aRSMS -> ghbM
    boolean firstTickList -> vSJT
    long firstTick -> LbDe
    long lastTick -> yBaC
    react.glang.GMap trackers -> fKoi
    27:27:void <init>() -> <init>
    46:82:void start() -> start
    87:88:void on(org.bukkit.event.world.WorldLoadEvent) -> ksfn
    93:95:void on(org.bukkit.event.world.WorldUnloadEvent) -> ksfn
    100:106:void stop() -> stop
    110:115:void releaseChunk(org.bukkit.Chunk) -> VejA
    120:126:void tick() -> tick
    130:138:void checkChunks() -> sQQF
    142:159:void checkChunk(org.bukkit.Chunk) -> eYCp
    163:169:void queue(org.bukkit.block.Block) -> VejA
    173:173:boolean isFrozen(org.bukkit.Chunk) -> RPlW
    178:179:void freeze(org.bukkit.Chunk) -> OjGa
    183:190:void flushTickList() -> Lyty
    194:204:void tickNextTickList() -> Qxcm
    208:214:void unfreeze(org.bukkit.Chunk) -> MuCR
    218:225:void freeze(org.bukkit.Chunk,long) -> ksfn
    230:231:void on(org.bukkit.event.world.ChunkUnloadEvent) -> ksfn
    236:249:void on(org.bukkit.event.block.BlockPhysicsEvent) -> ksfn
    254:267:void on(org.bukkit.event.block.BlockFromToEvent) -> ksfn
    271:271:react.glang.GSet getIgnore() -> ccck
    276:276:react.glang.GSet getFrozen() -> Hdvh
    281:281:react.glang.GMap getQueue() -> NxKI
    286:286:react.glang.GMap getFreezeTimes() -> uhWj
    291:291:int getRedstonePerTick() -> lTnv
    296:296:int getRedstonePerSecond() -> upkd
    301:301:react.gmath.Average getaRST() -> Wyva
    306:306:react.gmath.Average getaRSS() -> SeYg
    311:311:react.gmath.Average getaRSMS() -> mPBo
    316:316:boolean isFirstTickList() -> kHyB
    321:321:long getFirstTick() -> ryBg
    326:326:long getLastTick() -> HBtu
react.controller.RemoteController -> BRec:
    react.remote.server.RemoteServer remoteServer -> TqpH
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> DGmD
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> ksfn
react.controller.RemoteController$1 -> BRec$1:
    react.controller.RemoteController this$0 -> WsJK
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> BRec$2:
    react.controller.RemoteController this$0 -> WsJK
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> iKen
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> GkIc
react.controller.SampleController -> Qoqj:
    react.glang.GMap samplers -> CVka
    react.surge.server.SuperSampler ss -> xXrr
    int cd -> DIPF
    27:33:void <init>() -> <init>
    37:63:boolean checkThreads() -> RICs
    68:73:void restartSuperSampler() -> eGhs
    77:78:void registerSampler(react.api.ISampler) -> nkoF
    82:82:react.api.ISampler getSampler(java.lang.String) -> MuCR
    87:130:void constructSamplers() -> aeoy
    135:138:void start() -> start
    143:146:void stop() -> stop
    152:152:void tick() -> tick
    156:156:react.surge.server.SuperSampler getSuperSampler() -> nRdP
    162:184:void onTick() -> vbif
    189:189:java.lang.String getTickName() -> MAdt
    194:194:react.glang.GMap getSamplers() -> JQlp
    199:199:react.surge.server.SuperSampler getSs() -> kblt
    204:204:int getCd() -> ogJL
    209:216:react.glang.GList getSamplerNames() -> pHIU
react.controller.SecurityController -> FVaA:
    java.lang.String ipa -> LXwJ
    react.glang.GList failures -> HoNe
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> kACR
    41:74:void checkForIP() -> OXku
    78:91:void scan(java.lang.Runnable) -> ksfn
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> FVaA$1:
    react.controller.SecurityController this$0 -> riEX
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> FVaA$2:
    java.lang.String val$ip -> mGrK
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> FVaA$3:
    java.lang.Thread val$t -> kAke
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> ghAC:
    react.glang.GMap etl -> Liux
    react.glang.GMap ttl -> dyNB
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> ksfn
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> ksfn
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> GbPI
    143:160:void releaseWorld(org.bukkit.World) -> qdWP
    164:181:double getUniversalEntityTick() -> xiRo
    186:203:double getUniversalEntityLimit() -> lUOJ
    208:225:double getUniversalTileLimit() -> ivYU
    230:247:double getUniversalTileTick() -> ctgm
    252:264:double getUniversalEntityDroppedTicks() -> mGQF
    269:281:double getUniversalTileDroppedTicks() -> cuHf
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> ksfn
    301:312:void setTileTickLimit(org.bukkit.World,double) -> IyWN
    316:321:double getEntityTickLimit(org.bukkit.World) -> kbdv
    326:331:double getTileTickLimit(org.bukkit.World) -> GbOr
    336:341:double getLastEntityTick(org.bukkit.World) -> KwKa
    346:351:double getLastTileTick(org.bukkit.World) -> XJLb
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> DHCd
    366:371:double getTileDroppedTicks(org.bukkit.World) -> UQdV
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> ksfn
react.controller.SpikeController -> avox:
    react.glang.GMap spikes -> HUYq
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> vbif
    111:111:java.lang.String getTickName() -> MAdt
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> DsAQ
    128:165:void whoFuckingDidThis(react.glang.Callback) -> ksfn
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> ksfn
react.controller.SpikeController$1 -> avox$1:
    react.controller.SpikeController this$0 -> pkOR
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> avox$1$1:
    react.controller.SpikeController$1 this$1 -> rGBE
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> avox$2:
    react.controller.SpikeController this$0 -> pkOR
    react.glang.GMap val$vv -> QpvB
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> avox$3:
    react.controller.SpikeController this$0 -> pkOR
    java.lang.Thread val$t -> kAke
    react.glang.Callback val$callback -> eYlY
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:163:void run() -> run
react.controller.TickTimeController -> BuIa:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> iSrq:
    16:16:void <init>() -> <init>
    21:27:void start() -> start
    32:38:void stop() -> stop
    43:55:void tick() -> tick
    60:61:void on(org.bukkit.event.world.WorldUnloadEvent) -> ksfn
react.event.ReactEvent -> MBDL:
    org.bukkit.event.HandlerList handlers -> hASx
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> jWWW:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> Hmhb:
    react.event.ScrollDirection direction -> uqkt
    boolean cancellled -> RRVk
    int amount -> KgTm
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> ElrI
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> BJYO
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> vbif:
    react.event.ScrollDirection DOWN -> Aagp
    react.event.ScrollDirection UP -> HTya
    react.event.ScrollDirection[] ENUM$VALUES -> lwrr
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.feature.INMSBinding -> WaFE:
    java.lang.String getPackageVersion() -> rooc
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> ksfn
react.feature.NMSBinding -> MAdt:
    java.lang.String packageVersion -> SDYD
    7:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> rooc
react.feature.NMSBinding10 -> PucD:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> ksfn
react.feature.NMSBinding11 -> lTnv:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> ksfn
react.feature.NMSBinding12 -> upkd:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> ksfn
react.feature.NMSBinding8 -> mPBo:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> ksfn
react.feature.NMSBinding9 -> Wyva:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> ksfn
react.gbench.Profiler -> SeYg:
    long nanos -> LrkK
    long startNano -> dWNH
    long millis -> XSix
    long startMillis -> NElU
    double time -> VUta
    boolean profiling -> Rbyl
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> KwKa
    78:78:double getTicks() -> nRfs
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> RHes
    93:93:double getHours() -> CEKe
    98:98:double getMilliseconds() -> MRhj
    103:103:long getNanoseconds() -> rEae
    108:108:long getNanos() -> MBHT
    113:113:long getStartNano() -> LyyN
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> cSHa
    128:128:double getTime() -> gEbJ
    133:133:boolean isProfiling() -> ylXv
react.gconcurrent.A -> Xkwf:
    react.gconcurrent.ParallelPoolManager mgr -> mjYV
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> Xkwf$1:
    react.gconcurrent.A this$0 -> AYYU
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> hsWf:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> Edan:
    react.gconcurrent.QueueMode mode -> hlLD
    react.glang.GList threads -> dEjl
    int next -> VMcr
    int threadCount -> FhiY
    java.util.Queue squeue -> OkTN
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> RIhc
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> tLhp
    22:23:void syncQueue(react.gconcurrent.Execution) -> ksfn
    long getNanoGate() -> sQVW
    29:42:void tickSyncQueue() -> qeBm
    46:48:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> aTrA
    93:100:int getTotalQueueSize() -> JAOe
    105:106:void start() -> start
    110:114:void shutdown() -> shutdown
    118:119:void <init>(int) -> <init>
    123:124:void queue(react.gconcurrent.Execution) -> IyWN
    128:128:int getSize() -> getSize
    133:140:int getQueueSize() -> tKgT
    145:145:react.gconcurrent.ParallelThread[] getThreads() -> NUku
    152:179:void updateThreadInformation() -> CLyy
    183:215:react.gconcurrent.ParallelThread nextThread() -> sYea
    220:226:void createThreads(int) -> XJLb
    230:230:react.gconcurrent.QueueMode getMode() -> HByU
    235:235:int getNext() -> CfoE
    240:240:int getThreadCount() -> getThreadCount
    245:245:java.util.Queue getSqueue() -> KwWc
    250:250:java.lang.String getKey() -> getKey
    255:255:react.gconcurrent.ThreadInformation getAverageInfo() -> yJUj
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> aTrQ
react.gconcurrent.ParallelThread -> DHMW:
    java.util.Queue queue -> wUrV
    react.gconcurrent.ThreadInformation info -> RIhc
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> MuCR
    68:75:void execute(react.gconcurrent.Execution) -> nkoF
    79:88:void execute() -> execute
    92:93:void queue(react.gconcurrent.Execution) -> IyWN
    97:97:java.util.Queue getQueue() -> cSHi
    102:102:react.gconcurrent.ThreadInformation getInfo() -> KoEc
react.gconcurrent.QueueMode -> bqeW:
    react.gconcurrent.QueueMode ROUND_ROBIN -> xbHK
    react.gconcurrent.QueueMode SMALLEST -> RAWx
    react.gconcurrent.QueueMode[] ENUM$VALUES -> psbA
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> CDhW:
    react.gconcurrent.ParallelPoolManager mgr -> mjYV
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> CDhW$1:
    react.gconcurrent.S this$0 -> tCxL
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> hHbb:
    long tick -> OIPs
    long atick -> qUBk
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> Btid:
    double ticksPerSecond -> DtFO
    int queuedSize -> ekRa
    boolean processing -> DtEo
    double utilization -> LXyE
    react.gmath.Average ticksPerSecondAverage -> Nxqe
    long tick -> OIPs
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> dgLV
    33:35:void setTicksPerSecond(double) -> kACR
    39:39:int getQueuedSize() -> lnbv
    44:45:void setQueuedSize(int) -> DHCd
    49:49:boolean isProcessing() -> QyGb
    54:55:void setProcessing(boolean) -> GbPI
    59:59:double getUtilization() -> xrFi
    64:65:void setUtilization(double) -> GbPI
    69:69:double getTicksPerSecondAverage() -> VfSq
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> uqMo
    89:89:int getId() -> getId
react.gformat.F -> KLaQ:
    java.text.NumberFormat NF -> Buly
    java.text.DecimalFormat DF -> IOof
    java.lang.String[] NAMES -> OtDy
    java.math.BigInteger THOUSAND -> JAny
    java.util.NavigableMap MAP -> hkhv
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> GbPI
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> ksfn
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> ksfn
    201:221:java.lang.String timeLong(long,int) -> ksfn
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> nkoF
    236:236:java.lang.String b(double) -> qdWP
    241:258:java.lang.String b(java.math.BigInteger) -> ksfn
    263:267:void instantiate() -> ksqA
    279:279:java.lang.String fileSize(long) -> leiL
    292:292:java.lang.String memSize(long) -> JkXd
    297:297:java.lang.String memSize(long,int) -> IyWN
    310:311:java.lang.String stamp(long) -> VejA
    327:361:java.lang.String ofSize(long,int) -> nkoF
    367:394:java.lang.String ofSize(long,int,int) -> ksfn
    408:413:java.lang.String trim(java.lang.String,int) -> IyWN
    426:446:java.lang.String cname(java.lang.String) -> qdWP
    460:472:java.lang.String repeat(java.lang.String,int) -> repeat
    484:491:java.lang.String mem(long) -> eYCp
    504:522:java.lang.String memx(long) -> RPlW
    536:537:java.lang.String f(long) -> OjGa
    549:550:java.lang.String f(int) -> UQdV
    564:573:java.lang.String f(double,int) -> IyWN
    589:598:java.lang.String fd(double,int) -> nkoF
    612:621:java.lang.String f(float,int) -> ksfn
    632:632:java.lang.String f(double) -> kbdv
    643:643:java.lang.String f(float) -> ksfn
    658:658:java.lang.String pc(double,int) -> leiL
    673:673:java.lang.String pc(float,int) -> IyWN
    686:686:java.lang.String pc(double) -> GbOr
    699:699:java.lang.String pc(float) -> IyWN
    715:715:java.lang.String pc(int,int,int) -> ksfn
    729:729:java.lang.String pc(int,int) -> nkoF
    745:745:java.lang.String pc(long,long,int) -> ksfn
    759:759:java.lang.String pc(long,long) -> leiL
    771:771:java.lang.String msSeconds(long) -> MuCR
    785:785:java.lang.String msSeconds(long,int) -> leiL
    797:797:java.lang.String nsMs(long) -> kACR
    811:811:java.lang.String nsMs(long,int) -> JkXd
    825:825:java.lang.String nsMsd(long,int) -> VejA
react.glang.AccessCallback -> GPvA:
    java.lang.Object get() -> get
react.glang.Adapter -> ySDy:
    java.lang.Object adapt(java.lang.Object) -> VejA
    java.lang.Object onAdapt(java.lang.Object) -> eYCp
react.glang.Callback -> awTX:
    java.lang.Object t -> PDAt
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> ksfn
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> hkFk:
    double i -> qnSg
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> KwKa
react.glang.FinalFloat -> AhuS:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> nkoF
react.glang.FinalInteger -> DGmD:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> OOsA
react.glang.FinalLong -> iKen:
    long i -> LiyK
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> GbPI
react.glang.FinalString -> GkIc:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> RICs:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> VejA
    java.lang.Object onAdapt(java.lang.Object) -> eYCp
react.glang.GBiset -> eGhs:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> xPeF
    java.lang.Object b -> JdTG
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> rFAl
    53:54:void setA(java.lang.Object) -> RPlW
    63:63:java.lang.Object getB() -> qvBu
    73:74:void setB(java.lang.Object) -> OjGa
react.glang.GList -> aeoy:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> leiL
    45:52:react.glang.GList grepDistance(int,int) -> JkXd
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> IyWN
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> gEaD
    188:190:react.glang.GList shuffleCopy() -> feBC
    198:199:void shuffle() -> dMYl
    210:236:react.glang.GList split() -> rFAO
    248:248:boolean hasIndex(int) -> fKEC
    258:259:java.lang.Object pickRandom() -> tnIo
    270:277:react.glang.GList stringList() -> BuNB
    288:292:void forEach(react.glang.Callback) -> IyWN
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> IEqC
    336:336:react.glang.GList cropFrom(int) -> vQcB
    341:373:react.glang.GList split(int) -> BcaS
    389:389:react.glang.GList cropTo(int) -> tSmF
    406:416:react.glang.GList crop(int,int) -> VejA
    427:431:react.glang.GList removeDuplicates() -> EeEA
    442:446:void removeAll(java.lang.Object) -> MuCR
    455:455:boolean hasDuplicates() -> fJmy
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> Kevc
    484:490:void push(java.lang.Object,int) -> ksfn
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> kACR
    528:532:void add(java.util.List) -> ksfn
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> Pufa
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> yRiN
    626:627:react.glang.GList qdel(java.lang.Object) -> GbPI
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> rgfp
    662:669:java.lang.Object popLast() -> saxc
    674:683:java.lang.Object popRandom() -> QxjN
react.glang.GListAdapter -> nRdP:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> IyWN
    java.lang.Object onAdapt(java.lang.Object) -> eYCp
react.glang.GMap -> JQlp:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> XBJF
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> ksfn
    64:81:react.glang.GMap flip() -> fluN
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> ksfn
    121:121:react.glang.GList k() -> IEqC
    131:131:react.glang.GSet kset() -> Tpqk
    141:141:react.glang.GList v() -> CEMX
    151:151:react.glang.GSet vset() -> cckh
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> IyWN
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> eYCp
    209:219:react.glang.GMap removeDuplicateValues() -> ggfi
    233:242:void put(react.glang.GList,react.glang.GList) -> ksfn
    251:267:react.glang.GList sortK() -> JAQq
    277:293:react.glang.GList sortV() -> TOOr
react.glang.GQuadraset -> kblt:
    java.lang.Object a -> xPeF
    java.lang.Object b -> JdTG
    java.lang.Object c -> nukD
    java.lang.Object d -> uqnT
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> rFAl
    25:26:void setA(java.lang.Object) -> RPlW
    30:30:java.lang.Object getB() -> qvBu
    35:36:void setB(java.lang.Object) -> OjGa
    40:40:java.lang.Object getC() -> hbYh
    45:46:void setC(java.lang.Object) -> qdWP
    50:50:java.lang.Object getD() -> wvuc
    55:56:void setD(java.lang.Object) -> kbdv
react.glang.GSet -> ogJL:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> pHIU:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> xPeF
    java.lang.Object b -> JdTG
    java.lang.Object c -> nukD
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> rFAl
    26:27:void setA(java.lang.Object) -> RPlW
    31:31:java.lang.Object getB() -> qvBu
    36:37:void setB(java.lang.Object) -> OjGa
    41:41:java.lang.Object getC() -> hbYh
    46:47:void setC(java.lang.Object) -> qdWP
react.gmath.Average -> OXku:
    double[] values -> Yxom
    double average -> dxoS
    boolean dirty -> bPfL
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> XJLb
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> YUmd
react.gmath.DoubleArrayUtils -> xiRo:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> ksfn
    17:19:void wrapRight(double[]) -> ksfn
    23:27:void fill(double[],double) -> fill
react.gmath.M -> lUOJ:
    int precision -> iLhq
    int modulus -> PKrP
    float[] sin -> uaMj
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> ksfn
    31:36:boolean r(java.lang.Double) -> IyWN
    51:51:double tps(long,int) -> eYCp
    63:63:double ticksFromNS(long) -> qdWP
    75:101:java.lang.String toRoman(int) -> EliS
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> eYCp
    144:216:int fromRoman(java.lang.String) -> kbdv
    226:226:long ns() -> cSKO
    236:236:long ms() -> QxkA
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> IyWN
    333:333:float sinLookup(int) -> OrVh
react.gnet.client.Client -> ivYU:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> MSlj
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> ksfn
    74:74:react.gnet.packet.PacketHandler getHandler() -> aTtR
react.gnet.client.IClient -> ctgm:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> ksfn
    react.gnet.packet.PacketHandler getHandler() -> aTtR
react.gnet.download.Download -> mGQF:
    react.gnet.download.DownloadState state -> DcFK
    react.gnet.download.DownloadType type -> ejrx
    react.gnet.download.DownloadStatus status -> AsMu
    react.gnet.download.DownloadMonitor monitor -> Osea
    java.net.URL url -> url
    java.io.File file -> Mdmx
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    24:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> qJqA
    92:92:react.gnet.download.DownloadType getType() -> AiYr
    97:97:react.gnet.download.DownloadStatus getStatus() -> bGWD
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> TONT
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> cuHf:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> ksfn
    void onDownloadStarted(react.gnet.download.Download) -> ksfn
    void onDownloadFinished(react.gnet.download.Download) -> IyWN
    void onDownloadFailed(react.gnet.download.Download) -> nkoF
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> ksfn
react.gnet.download.DownloadState -> DsAQ:
    react.gnet.download.DownloadState IDLE -> Pvhb
    react.gnet.download.DownloadState DOWNLOADING -> xYXg
    react.gnet.download.DownloadState FAILED -> cTMC
    react.gnet.download.DownloadState FINISHED -> uaQa
    react.gnet.download.DownloadState[] ENUM$VALUES -> afwX
    3:8:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadState[] values() -> values
    1:1:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
react.gnet.download.DownloadStatus -> ElrI:
    long bytesDownloaded -> sQyT
    long bytesTotal -> sIiK
    long bytesPerSecond -> VVWo
    long timeElapsed -> xGul
    10:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> JcSd
    25:25:long getBytesDownloaded() -> oDjN
    30:31:void setBytesDownloaded(long) -> kbdv
    35:35:long getBytesTotal() -> OHOe
    40:41:void setBytesTotal(long) -> GbOr
    45:45:long getBytesPerSecond() -> qudY
    50:51:void setBytesPerSecond(long) -> KwKa
    55:55:long getTimeElapsed() -> wLae
    60:61:void setTimeElapsed(long) -> XJLb
react.gnet.download.DownloadType -> BJYO:
    react.gnet.download.DownloadType DETERMINATE -> dqCT
    react.gnet.download.DownloadType INDETERMINATE -> iLkj
    react.gnet.download.DownloadType[] ENUM$VALUES -> Aaju
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.download.DownloadType[] values() -> values
    1:1:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
react.gnet.packet.IPacket -> nRfs:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> UcSL
    java.lang.String getPacketName() -> VvwQ
react.gnet.packet.IncompatablePacketException -> RHes:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> CEKe:
    react.gnet.packet.PacketBinding SERVER_BOUND -> QOXm
    react.gnet.packet.PacketBinding CLIENT_BOUND -> fLTc
    react.gnet.packet.PacketBinding[] ENUM$VALUES -> iMLr
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.gnet.packet.PacketBinding[] values() -> values
    1:1:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
react.gnet.packet.PacketException -> MRhj:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> rEae:
    react.glang.GList accept -> dxrS
    react.gnet.packet.PacketBinding side -> kBRE
    react.gnet.streams.OSS out -> oFNF
    react.gnet.streams.ISS in -> Hnqj
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> ksfn
    28:34:void accept(react.gnet.packet.IPacket) -> IyWN
    38:46:react.gnet.packet.IPacket findPacket(int) -> LiNF
    51:66:react.gnet.packet.IPacket read() -> SnNh
    71:77:void write(react.gnet.packet.IPacket) -> nkoF
react.gnet.packet.UnhandledPacketException -> MBHT:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> LyyN:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> aTtR
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> leiL
react.gnet.server.Server -> cSHa:
    int port -> port
    java.net.ServerSocket socket -> nSjq
    react.gnet.packet.PacketHandler handler -> MSlj
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> aTtR
    37:84:void run() -> run
    88:91:void pstart() -> anev
    95:96:void pstop() -> VTtT
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> leiL
react.gnet.streams.ISS -> gEbJ:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> BBjj
    boolean built -> QXHf
    byte[] readBuffer -> Utud
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> DYFE
    64:72:react.glang.GList readStringList() -> PKRt
    77:85:react.glang.GList readDoubleList() -> fdbu
    90:98:react.glang.GList readLongList() -> Lhxw
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> ksfn
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> ksfn
    136:137:react.gnet.streams.ISS gzip() -> quci
    142:147:void build() -> uOOk
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> IyWN
    435:436:void close() -> close
react.gnet.streams.OSS -> ylXv:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> QFgA
    react.gnet.streams.StreamBuilder bu -> BBjj
    boolean built -> QXHf
    byte[] writeBuffer -> ejqq
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> xykW
    41:42:react.gnet.streams.OSS gzip(int) -> XJMY
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> IyWN
    53:58:void build() -> uOOk
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> RPlW
    102:108:void writeDoubleList(react.glang.GList) -> OjGa
    112:118:void writeLongList(react.glang.GList) -> MuCR
    122:128:void writeStreamableList(react.glang.GList) -> kACR
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> TyeI
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> nkoF
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> sQVW:
    react.glang.GList constructors -> KgYK
    18:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> ksfn
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> ksfn
    49:50:void bind(react.gnet.streams.StreamConstructor) -> ksfn
    54:55:void bindGZIP(int) -> HmbV
    59:60:void bindGZIP() -> ofpN
    64:65:void bindCipher(javax.crypto.Cipher) -> nkoF
    69:70:void bindBuffer(int) -> Txtf
    74:75:void bindBuffer() -> WGXt
react.gnet.streams.StreamConstructor -> qeBm:
    java.io.InputStream constructInput(java.io.InputStream) -> ksfn
    java.io.OutputStream constructOutput(java.io.OutputStream) -> ksfn
react.gnet.streams.constructors.BufferedStreamConstructor -> aTrA:
    int bufferSize -> bufferSize
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> IyWN
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> IyWN
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> ksfn
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> ksfn
react.gnet.streams.constructors.CipherStreamConstructor -> JAOe:
    javax.crypto.Cipher cipher -> OseV
    17:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> nkoF
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> nkoF
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> ksfn
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> ksfn
react.gnet.streams.constructors.GZipStreamConstructor -> tKgT:
    int compressionLevel -> qvfF
    15:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> leiL
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> leiL
    1:1:java.io.InputStream constructInput(java.io.InputStream) -> ksfn
    1:1:java.io.OutputStream constructOutput(java.io.OutputStream) -> ksfn
react.gnet.streams.overlays.CGZIPInputStream -> NUku:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> CLyy:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> sYea:
    void toBytes(react.gnet.streams.OSS) -> ksfn
    void fromBytes(react.gnet.streams.ISS) -> ksfn
react.graph.ColossalView -> HByU:
    react.papyrus.BufferedFrame view -> QWgu
    react.glang.GMap buffers -> YySL
    react.glang.GMap graphs -> rXFf
    double level -> PmwJ
    double targetLevel -> ETfO
    int maxX -> sbxv
    int maxY -> VUuh
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> WrLr
    51:77:void render() -> xGWf
    81:98:void scroll(int) -> iBlA
    102:112:void recompile() -> SKnB
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> ksfn
    122:122:react.papyrus.BufferedFrame getView() -> EBdt
    127:127:react.glang.GMap getBuffers() -> QyMP
    132:132:react.glang.GMap getGraphs() -> awYf
    137:137:double getLevel() -> woII
    142:142:double getTargetLevel() -> yckx
    147:147:int getMaxX() -> Vnii
    152:152:int getMaxY() -> ECFY
react.graph.ColossalView$Builder -> HByU$ksfn:
    react.glang.GList graphs -> Ygro
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> ksfn
    171:191:react.graph.ColossalView compute() -> aDVM
react.graph.CubicleIterator -> CfoE:
    int[][] mapping -> HgCg
    int xCubes -> mPiw
    int yCubes -> lgYo
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> yQyh
    47:130:void insert(react.graph.GraphSize,int) -> ksfn
    134:145:void print() -> print
react.graph.Graph2D -> KwWc:
    11:12:void <init>(java.lang.String,long) -> <init>
    void onRender(react.papyrus.BufferedFrame) -> ksfn
react.graph.GraphCPUArc -> yJUj:
    byte fontColor -> mbMH
    byte backgroundColor -> WsPB
    double pct -> YEoq
    react.gmath.Average aax -> VDwK
    react.gmath.Average aay -> YOBS
    react.gmath.Average aaz -> XTNx
    long msx -> RJMj
    26:38:void <init>(byte) -> <init>
    42:47:void sample() -> uyVD
    52:90:void onRender(react.papyrus.BufferedFrame) -> ksfn
    94:94:byte getFontColor() -> vRRW
    99:100:void setFontColor(byte) -> ksfn
    104:104:byte getBackgroundColor() -> vQpv
    109:110:void setBackgroundColor(byte) -> IyWN
react.graph.GraphLagMap -> aTrQ:
    int grid -> rOXa
    org.bukkit.entity.Player viewer -> bsNx
    org.bukkit.util.Vector lastVector -> iLnQ
    int[] $SWITCH_TABLE$react$api$ChunkIssue -> gVrA
    29:35:void <init>(org.bukkit.entity.Player,int) -> <init>
    39:45:void zoomIn() -> RkNt
    49:55:void zoomOut() -> vcSr
    60:164:void onRender(react.papyrus.BufferedFrame) -> ksfn
    21:21:int[] $SWITCH_TABLE$react$api$ChunkIssue() -> XJMY
react.graph.GraphMemoryArc -> cSHi:
    byte fontColor -> mbMH
    byte backgroundColor -> WsPB
    double pct -> YEoq
    react.gmath.Average aax -> VDwK
    long msx -> RJMj
    long of -> DkYI
    26:37:void <init>(byte) -> <init>
    41:47:void sample() -> uyVD
    52:79:void onRender(react.papyrus.BufferedFrame) -> ksfn
    83:83:byte getFontColor() -> vRRW
    88:89:void setFontColor(byte) -> ksfn
    93:93:byte getBackgroundColor() -> vQpv
    98:99:void setBackgroundColor(byte) -> IyWN
react.graph.GraphMode -> KoEc:
    react.graph.GraphMode NORMAL -> FiOB
    react.graph.GraphMode ITEMFRAME -> iMNr
    react.graph.GraphMode EOD -> DkYK
    react.graph.GraphMode[] ENUM$VALUES -> qTfR
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.GraphMode[] values() -> values
    1:1:react.graph.GraphMode valueOf(java.lang.String) -> valueOf
react.graph.GraphSampleLine -> dgLV:
    double lx -> ekWA
    double ly -> IGbF
    react.api.ISampler sampler -> ebcq
    react.graph.IFormatter formatter -> UJdQ
    byte graphColor -> iwag
    byte backgroundColor -> WsPB
    byte borderColor -> eABO
    byte textColor -> kKCy
    int ticksLeftTitle -> dWPd
    int ticksOutTitle -> ChSx
    double nextPoint -> oWQA
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> uyVD
    51:183:void onRender(react.papyrus.BufferedFrame) -> ksfn
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> IyWN
    226:254:int getHue(int,int,int) -> nkoF
    259:281:void scaleFor(react.glang.GList) -> GbPI
    285:285:react.graph.IFormatter getFormatter() -> xXLB
    290:291:void setFormatter(react.graph.IFormatter) -> ksfn
    295:295:byte getGraphColor() -> HUAR
    300:301:void setGraphColor(byte) -> nkoF
    305:305:byte getBackgroundColor() -> vQpv
    310:311:void setBackgroundColor(byte) -> IyWN
    315:315:byte getBorderColor() -> ndNG
    320:321:void setBorderColor(byte) -> leiL
    325:325:byte getTextColor() -> EvJu
    330:331:void setTextColor(byte) -> JkXd
    335:335:react.api.ISampler getSampler() -> PJuV
react.graph.GraphSize -> lnbv:
    react.graph.GraphSize WIDE -> gWhw
    react.graph.GraphSize FULL -> bakj
    react.graph.GraphSize SQUARE -> jHAC
    int[] $SWITCH_TABLE$react$graph$GraphSize -> YhTC
    react.graph.GraphSize[] ENUM$VALUES -> MnBR
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> UbtP
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> BAlj
react.graph.GraphText -> QyGb:
    java.lang.String text -> text
    byte fontColor -> mbMH
    byte backgroundColor -> WsPB
    boolean wrote -> oqCC
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> ksfn
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> vRRW
    68:69:void setFontColor(byte) -> ksfn
    73:73:byte getBackgroundColor() -> vQpv
    78:79:void setBackgroundColor(byte) -> IyWN
react.graph.GraphingInstance -> xrFi:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> Ygro
    react.graph.ColossalView view -> rFet
    react.papyrus.Papyrus papyrus -> LbNU
    react.papyrus.IRenderer renderer -> gXIb
    boolean mapping -> VgGd
    react.glang.GList msgs -> EUHs
    react.surge.sched.Task waiter -> qwIL
    react.surge.sched.Task waiter2 -> uXaI
    int shift -> TGah
    int iv -> JBUY
    boolean notif -> opdw
    boolean doScrolling -> BnDv
    49:118:void <init>(org.bukkit.entity.Player) -> <init>
    122:122:boolean isDoScrolling() -> xFty
    127:128:void setDoScrolling(boolean) -> qdWP
    133:138:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> ksfn
    143:147:void on(org.bukkit.event.player.PlayerQuitEvent) -> ksfn
    151:155:void send(java.lang.String) -> GbOr
    161:161:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> ksfn
    166:205:void on(react.event.ReactScrollEvent) -> ksfn
    210:215:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> ksfn
    219:227:void destroy() -> destroy
    231:240:void toggle() -> MuOi
    244:245:void setGraphs(react.glang.GList) -> qdWP
    249:262:void enable() -> enable
    266:266:org.bukkit.inventory.ItemStack getItem() -> getItem
    271:276:void disable() -> disable
    280:284:void disableNoSave() -> EmXW
    288:288:org.bukkit.entity.Player getPlayer() -> getPlayer
    293:293:react.glang.GList getGraphs() -> yIxg
    298:298:react.graph.ColossalView getView() -> CNBO
    303:303:react.papyrus.Papyrus getPapyrus() -> JbuH
    308:309:void setPlayer(org.bukkit.entity.Player) -> setPlayer
    313:314:void setItem(org.bukkit.inventory.ItemStack) -> setItem
    318:319:void setView(react.graph.ColossalView) -> ksfn
    323:324:void setPapyrus(react.papyrus.Papyrus) -> ksfn
    328:329:void setRenderer(react.papyrus.IRenderer) -> ksfn
    333:334:void setMapping(boolean) -> nkoF
    338:339:void setMsgs(react.glang.GList) -> kbdv
    343:344:void setWaiter(react.surge.sched.Task) -> ksfn
    348:349:void setWaiter2(react.surge.sched.Task) -> IyWN
    353:354:void setShift(int) -> uFRW
    358:359:void setNotif(boolean) -> kbdv
    363:363:react.papyrus.IRenderer getRenderer() -> WGWg
    368:368:boolean isMapping() -> UbhM
    373:373:react.glang.GList getMsgs() -> iKka
    378:378:react.surge.sched.Task getWaiter() -> IOQU
    383:383:react.surge.sched.Task getWaiter2() -> rMtv
    388:388:int getShift() -> getShift
    393:393:boolean isNotif() -> PSeN
    398:414:void compile() -> AOjq
    418:433:void enableSly() -> Xtmv
    437:445:void disableSly() -> YUmu
    40:40:boolean access$0(react.graph.GraphingInstance) -> ksfn
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> IyWN
    46:46:boolean access$2(react.graph.GraphingInstance) -> nkoF
    46:46:void access$3(react.graph.GraphingInstance,boolean) -> ksfn
    44:44:int access$4(react.graph.GraphingInstance) -> leiL
    44:44:void access$5(react.graph.GraphingInstance,int) -> ksfn
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> JkXd
react.graph.GraphingInstance$1 -> xrFi$1:
    react.graph.GraphingInstance this$0 -> neQl
    org.bukkit.entity.Player val$player -> ujFe
    1:54:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    59:76:void run() -> run
react.graph.GraphingInstance$2 -> xrFi$2:
    react.graph.GraphingInstance this$0 -> neQl
    1:79:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    84:103:void run() -> run
react.graph.GraphingInstance$3 -> xrFi$3:
    react.graph.GraphingInstance this$0 -> neQl
    1:109:void <init>(react.graph.GraphingInstance) -> <init>
    114:116:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> ksfn
react.graph.IFormatter -> VfSq:
    java.lang.String from(double) -> DHCd
react.graph.IGraph -> uqMo:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> PKUB
    long getTimeViewport() -> CxSk
    void render(react.papyrus.BufferedFrame) -> nkoF
    double getMax() -> getMax
    void setMax(double) -> UQdV
react.graph.NormalGraph -> ksqA:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> ptHv
    long timeViewport -> CVsx
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> PKUB
    35:35:long getTimeViewport() -> CxSk
    41:42:void render(react.papyrus.BufferedFrame) -> nkoF
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> UQdV
    void onRender(react.papyrus.BufferedFrame) -> ksfn
react.graph.PlotBoard -> rFAl:
    react.glang.GMap plots -> IjIS
    int maxRecordings -> ebfm
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> LGXk
    33:33:long getAccurateTimeSpan() -> RYjl
    38:50:long getMedian(long,long) -> JkXd
    55:55:long getMinimumAccuracyRange() -> ThbV
    60:70:double getMaxValue() -> ArNl
    75:85:double getMinValue() -> uiAQ
    90:90:react.glang.GList sort(react.glang.GMap) -> IyWN
    95:105:long earilestRecording() -> lvvr
    110:120:long latestRecording() -> BuQh
    125:126:void reduceBefore(long) -> DHCd
    130:156:void reduceBetween(long,long) -> VejA
    160:160:boolean before(long,long) -> eYCp
    165:165:boolean after(long,long) -> RPlW
    170:170:boolean within(long,long,long) -> ksfn
    175:193:react.glang.GMap getBetween(long,long) -> OjGa
    198:200:void plot(long,double) -> ksfn
    204:204:boolean hasAt(long) -> UQdV
    209:209:double getAt(long) -> OOsA
    214:214:int getSize() -> getSize
react.graph.Point -> qvBu:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> gEaD:
    int iid -> qDGl
    react.graph.IGraph graph -> hJNk
    react.graph.GraphSize size -> gNyv
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> UsvV
    24:25:void setGraph(react.graph.IGraph) -> ksfn
    29:29:react.graph.GraphSize getSize() -> oUmL
    34:35:void setSize(react.graph.GraphSize) -> ksfn
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> feBC:
    react.graph.RenderMaxType UNLIMITED -> XvTs
    react.graph.RenderMaxType LIMITED -> OtKY
    react.graph.RenderMaxType[] ENUM$VALUES -> kRuw
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> dMYl:
    java.lang.String CRLF -> cmbo
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> KwKa
    162:198:java.lang.String toString(react.json.JSONObject) -> IyWN
react.json.HTTPTokener -> rFAO:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> tnIo:
    java.util.ArrayList myArrayList -> kliV
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> ksfn
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> JcIs
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> ivTX
    394:399:react.json.JSONObject getJSONObject(int) -> vsiC
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> XJLb
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> bWla
    515:515:boolean optBoolean(int) -> SKaT
    533:536:boolean optBoolean(int,boolean) -> IyWN
    551:551:double optDouble(int) -> cuBs
    569:572:double optDouble(int,double) -> ksfn
    587:587:int optInt(int) -> lejm
    605:608:int optInt(int,int) -> RPlW
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> IyWN
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> ksfn
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> ksfn
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> ksfn
    722:723:react.json.JSONArray optJSONArray(int) -> EAxL
    737:738:react.json.JSONObject optJSONObject(int) -> tdpd
    752:752:long optLong(int) -> NLrd
    770:773:long optLong(int,long) -> ksfn
    788:788:java.lang.String optString(int) -> awNR
    803:804:java.lang.String optString(int,java.lang.String) -> ksfn
    816:817:react.json.JSONArray put(boolean) -> GbOr
    830:831:react.json.JSONArray put(java.util.Collection) -> ksfn
    845:848:react.json.JSONArray put(double) -> OOsA
    860:861:react.json.JSONArray put(int) -> JYvi
    873:874:react.json.JSONArray put(long) -> fKEC
    887:888:react.json.JSONArray put(java.util.Map) -> ksfn
    902:903:react.json.JSONArray put(java.lang.Object) -> GbOr
    921:922:react.json.JSONArray put(int,boolean) -> nkoF
    939:940:react.json.JSONArray put(int,java.util.Collection) -> ksfn
    958:959:react.json.JSONArray put(int,double) -> IyWN
    977:978:react.json.JSONArray put(int,int) -> OjGa
    996:997:react.json.JSONArray put(int,long) -> IyWN
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> ksfn
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> ksfn
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> KwKa
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> ksfn
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> ksfn
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> ksfn
react.json.JSONException -> BuNB:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> dNcL
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> EeEA:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> ksfn
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> DHCd
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> ksfn
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> IyWN
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> KwKa
    379:456:java.lang.String toString(react.json.JSONArray) -> IyWN
    472:552:java.lang.String toString(react.json.JSONObject) -> IyWN
react.json.JSONObject -> fJmy:
    java.util.Map map -> map
    java.lang.Object NULL -> wVYb
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> ksfn
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> IyWN
    480:499:java.lang.String doubleToString(double) -> fKEC
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> UQdV
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> OOsA
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> fKEC
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> nkoF
    751:767:java.lang.String[] getNames(java.lang.Object) -> XJLb
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> IEqC
    855:855:boolean isNull(java.lang.String) -> vQcB
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> GHkA
    917:937:java.lang.String numberToString(java.lang.Number) -> ksfn
    949:949:java.lang.Object opt(java.lang.String) -> BcaS
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> ksfn
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> ksfn
    1018:1018:boolean optBoolean(java.lang.String) -> tSmF
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> ksfn
    1054:1054:double optDouble(java.lang.String) -> EliS
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> ksfn
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> ksfn
    1116:1119:double optDouble(java.lang.String,double) -> ksfn
    1134:1134:int optInt(java.lang.String) -> OrVh
    1152:1155:int optInt(java.lang.String,int) -> nkoF
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> LiNF
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> DYFE
    1198:1198:long optLong(java.lang.String) -> xykW
    1216:1219:long optLong(java.lang.String,long) -> ksfn
    1234:1234:java.lang.String optString(java.lang.String) -> XJMY
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> IyWN
    1255:1305:void populateMap(java.lang.Object) -> DHCd
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> IyWN
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> ksfn
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> IyWN
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> leiL
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> IyWN
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> ksfn
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> nkoF
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> leiL
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> JkXd
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> ksfn
    1590:1590:java.lang.Object remove(java.lang.String) -> HmbV
    1605:1640:boolean similar(java.lang.Object) -> KwKa
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> UQdV
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> nkoF
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> ksfn
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> ksfn
    2000:2004:void indent(java.io.Writer,int) -> ksfn
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> ksfn
react.json.JSONObject$Null -> fJmy$ksfn:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> Kevc:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> Pufa:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> yRiN:
    long character -> suAU
    boolean eof -> eof
    long index -> MSpQ
    long line -> COEu
    char previous -> rNyM
    java.io.Reader reader -> reader
    boolean usePrevious -> toRg
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> mhxb
    119:131:int dehexchar(char) -> ksfn
    136:136:boolean end() -> xGUf
    147:153:boolean more() -> RYlC
    164:198:char next() -> next
    213:218:char next(char) -> IyWN
    233:250:java.lang.String next(int) -> xXLB
    263:266:char nextClean() -> NDnU
    287:334:java.lang.String nextString(char) -> nkoF
    349:361:java.lang.String nextTo(char) -> leiL
    376:388:java.lang.String nextTo(java.lang.String) -> Txtf
    403:441:java.lang.Object nextValue() -> IXBl
    458:479:char skipTo(char) -> JkXd
    491:491:react.json.JSONException syntaxError(java.lang.String) -> iBlA
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> rgfp:
    int maxdepth -> XdqG
    boolean comma -> SweM
    char mode -> sknn
    react.json.JSONObject[] stack -> mbMv
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> yQyh
    157:164:react.json.JSONWriter array() -> ObEJ
    180:193:react.json.JSONWriter end(char,char) -> ksfn
    206:206:react.json.JSONWriter endArray() -> GtBW
    219:219:react.json.JSONWriter endObject() -> MSOo
    235:258:react.json.JSONWriter key(java.lang.String) -> uFRW
    274:285:react.json.JSONWriter object() -> OPeF
    299:310:void pop(char) -> VejA
    322:329:void push(react.json.JSONObject) -> leiL
    342:342:react.json.JSONWriter value(boolean) -> KwKa
    356:356:react.json.JSONWriter value(double) -> IEqC
    369:369:react.json.JSONWriter value(long) -> IEqC
    385:385:react.json.JSONWriter value(java.lang.Object) -> OOsA
react.json.XML -> saxc:
    java.lang.Character AMP -> oyTn
    java.lang.Character APOS -> ffJi
    java.lang.Character BANG -> ryli
    java.lang.Character EQ -> aEXl
    java.lang.Character GT -> NEqm
    java.lang.Character LT -> JBVv
    java.lang.Character QUEST -> HLrK
    java.lang.Character QUOT -> ceUA
    java.lang.Character SLASH -> XBpn
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> JcIs
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> ksfn
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> KwKa
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> QxjN:
    java.util.HashMap entity -> FWoe
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> dxTh
    108:133:java.lang.Object nextContent() -> EvLh
    149:166:java.lang.Object nextEntity(char) -> eYCp
    186:239:java.lang.Object nextMeta() -> qBeL
    261:334:java.lang.Object nextToken() -> feHl
    354:420:boolean skipPast(java.lang.String) -> ivTX
react.lagmap.LagMap -> XBJF:
    react.glang.GMap chunks -> Sffb
    13:16:void <init>() -> <init>
    20:27:react.glang.GMap getGrandTotalMilliseconds() -> JQwB
    32:47:react.glang.GMap getGrandTotal() -> YMaj
    52:61:void pump() -> QFKF
    65:71:void hit(org.bukkit.Location,react.api.ChunkIssue,double) -> ksfn
    75:81:void hit(org.bukkit.Chunk,react.api.ChunkIssue,double) -> ksfn
    85:85:react.glang.GMap getChunks() -> mrMm
react.lagmap.LagMapChunk -> fluN:
    react.glang.GMap hits -> YEsg
    org.bukkit.Chunk c -> Sepm
    14:18:void <init>(org.bukkit.Chunk) -> <init>
    22:36:react.glang.GMap getMS() -> LqpG
    41:65:double totalMS() -> FhOH
    70:77:double getMS(react.api.ChunkIssue) -> ksfn
    82:88:void hit(react.api.ChunkIssue,double) -> ksfn
    92:93:void hit(react.api.ChunkIssue) -> IyWN
    97:97:int getX() -> getX
    102:102:int getZ() -> getZ
    107:114:double totalScore() -> VnlJ
    119:119:react.glang.GMap getHits() -> HnRn
    124:133:void pump() -> QFKF
    138:138:int compareTo(react.lagmap.LagMapChunk) -> ksfn
    143:143:org.bukkit.Chunk getC() -> yJPG
    1:1:int compareTo(java.lang.Object) -> compareTo
react.papyrus.BufferedFrame -> Tpqk:
    byte[][] frame -> iDcB
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> ksfn
    90:97:void write(byte) -> VejA
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> ksfn
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> ksfn
    134:149:void fromBufferedImage(java.awt.image.BufferedImage,int,int) -> ksfn
    153:167:java.awt.image.BufferedImage toBufferedImage() -> kkfY
    175:182:void writeRainbowMul() -> OXsq
    189:196:void writeRainbowAdd() -> YDoN
    203:213:void writeSparks() -> MuQj
    217:223:boolean write(int,int,byte) -> ksfn
    228:250:int write(react.papyrus.BufferedFrame,int,int) -> ksfn
    255:272:void write(react.papyrus.BufferedFrame) -> leiL
    276:276:byte[][] getRawFrame() -> pGpk
    281:281:int getWidth() -> getWidth
    286:286:int getHeight() -> getHeight
react.papyrus.FrameColor -> CEMX:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> leiL
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> ksfn
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> cckh:
    org.bukkit.map.MapView getView() -> Tyeo
    react.papyrus.BufferedFrame getFrameBuffer() -> iLOC
    void addRenderer(react.papyrus.IRenderer) -> IyWN
    void clearRenderers() -> YgSH
    react.glang.GList getRenderers() -> qSfB
    void removeRenderer(react.papyrus.IRenderer) -> nkoF
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> pQDA
react.papyrus.IRenderer -> ggfi:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> ksfn
react.papyrus.Papyrus -> JAQq:
    org.bukkit.map.MapView map -> kllD
    react.papyrus.BufferedFrame frameBuffer -> ECjx
    react.papyrus.BufferedFrame lastFrameBuffer -> ujHn
    react.glang.GList renderers -> MKcO
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> Tyeo
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> iLOC
    51:52:void addRenderer(react.papyrus.IRenderer) -> IyWN
    57:58:void clearRenderers() -> YgSH
    63:63:react.glang.GList getRenderers() -> qSfB
    69:70:void removeRenderer(react.papyrus.IRenderer) -> nkoF
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> pQDA
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> IyWN
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> nkoF
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> leiL
react.papyrus.Papyrus$1 -> JAQq$1:
    react.papyrus.Papyrus this$0 -> mPnM
    org.bukkit.map.MapCanvas val$c -> VMlq
    org.bukkit.map.MapView val$v -> YFVE
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> TOOr:
    int spaceSize -> stbd
    java.lang.String fontChars -> kBXE
    int[][] fontData -> DtMs
    react.papyrus.ReactFont Font -> lpOV
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> hbYh:
    react.glang.GList subgoals -> ptKR
    java.lang.String tag -> nBnk
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> psFb
    26:44:void propigate() -> vtVr
    49:50:void addGoal(react.rai.IGoal) -> ksfn
    55:65:react.glang.GList getFailingSubgoals() -> KDWq
    71:71:boolean isFailing() -> mWxp
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> SKnm
    void onPropigated() -> Rjnj
react.rai.Goal$1 -> hbYh$1:
    react.rai.Goal this$0 -> Waor
    react.rai.IGoal val$i -> IOvV
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> wvuc:
    react.glang.GList getSubgoals() -> psFb
    void propigate() -> vtVr
    void onPropigated() -> Rjnj
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> KDWq
    boolean isFailing() -> mWxp
    boolean onCheckFailing() -> SKnm
    void update() -> update
    void addGoal(react.rai.IGoal) -> ksfn
react.rai.IRAI -> YUmd:
    react.glang.GList getGoals() -> flwT
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> ksfn
    react.glang.GList getEvents() -> qCDY
    void callEvent(react.rai.RAIEvent) -> ksfn
    react.glang.GList getListeners() -> qKTa
react.rai.RAI -> cSKO:
    react.glang.GList goals -> ghnf
    react.glang.GList events -> brqA
    react.glang.GList logEvents -> VNMM
    react.glang.GList listeners -> UAxB
    long since -> PDKH
    react.rai.RAI instance -> aonX
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> flwT
    41:42:void addGoal(react.rai.IGoal) -> ksfn
    47:77:void tick() -> tick
    82:82:react.glang.GList getEvents() -> qCDY
    88:95:void callEvent(react.rai.RAIEvent) -> ksfn
    100:100:react.glang.GList getListeners() -> qKTa
react.rai.RAIEvent -> QxkA:
    react.rai.RAIEventType type -> ydqU
    java.lang.String[] pars -> bbQG
    java.lang.String ovt -> pkYK
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> PTHT
    29:29:java.lang.String[] getPars() -> VDXH
    34:34:java.lang.String getOvt() -> bOip
react.rai.RAIEventType -> aTtR:
    react.rai.RAIEventType FIRE_ACTION -> WQOf
    react.rai.RAIEventType NOTE_GOAL_FAILING -> lNKQ
    react.rai.RAIEventType NOTE_GOAL_FIXED -> DtLv
    java.lang.String[] msgs -> ySnw
    react.rai.RAIEventType[] ENUM$VALUES -> XnEc
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> skMd
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> ksfn
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedEntityCounts -> qJqA:
    boolean failing -> ObjQ
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> SKnm
    91:134:void onPropigated() -> Rjnj
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> ksfn
react.rai.goals.GoalReducedEntityCounts$1 -> qJqA$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> BTUC
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> qJqA$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> BTUC
    org.bukkit.Chunk val$lx -> nKcW
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> AiYr:
    boolean failing -> ObjQ
    21:24:void <init>() -> <init>
    29:66:boolean onCheckFailing() -> SKnm
    72:76:void onPropigated() -> Rjnj
react.rai.goals.GoalStableChunkTime$1 -> AiYr$1:
    react.rai.goals.GoalStableChunkTime this$0 -> NFXF
    1:48:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    53:62:void run() -> run
react.rai.goals.GoalStableEntityTime -> bGWD:
    boolean failing -> ObjQ
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> Rjnj
    35:35:void letUp() -> XBLu
    40:77:boolean onCheckFailing() -> SKnm
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> ksfn
react.rai.goals.GoalStableEntityTime$1 -> bGWD$1:
    react.rai.goals.GoalStableEntityTime this$0 -> NNhH
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> TONT:
    boolean failing -> ObjQ
    react.glang.GMap reocc -> twiD
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> Rjnj
    88:125:boolean onCheckFailing() -> SKnm
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> ksfn
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> IyWN
react.rai.goals.GoalStableFluidTime$1 -> TONT$1:
    react.rai.goals.GoalStableFluidTime this$0 -> qTlg
    org.bukkit.Chunk val$lx -> nKcW
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> TONT$2:
    react.rai.goals.GoalStableFluidTime this$0 -> qTlg
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> JcSd:
    boolean failing -> ObjQ
    react.glang.GMap reocc -> twiD
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> Rjnj
    89:125:boolean onCheckFailing() -> SKnm
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> ksfn
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> IyWN
react.rai.goals.GoalStableHopperTime$1 -> JcSd$1:
    react.rai.goals.GoalStableHopperTime this$0 -> WIAu
    org.bukkit.Chunk val$lx -> nKcW
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> JcSd$2:
    react.rai.goals.GoalStableHopperTime this$0 -> WIAu
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> oDjN:
    int d -> d
    boolean failing -> ObjQ
    react.glang.GMap reocc -> twiD
    32:37:void <init>() -> <init>
    42:86:void onPropigated() -> Rjnj
    91:128:boolean onCheckFailing() -> SKnm
    28:28:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> ksfn
    27:27:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> IyWN
react.rai.goals.GoalStableRedstoneTime$1 -> oDjN$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> KyED
    org.bukkit.Chunk val$lx -> nKcW
    1:68:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    73:83:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> oDjN$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> KyED
    1:110:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    115:124:void run() -> run
react.rai.goals.GoalStableTickTime -> OHOe:
    boolean failing -> ObjQ
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> Rjnj
    34:58:boolean onCheckFailing() -> SKnm
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> ksfn
react.rai.goals.GoalStableTickTime$1 -> OHOe$1:
    react.rai.goals.GoalStableTickTime this$0 -> VpSQ
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.redstone.RedstoneEvent -> qudY:
    react.surge.util.MaterialBlock block -> EoBk
    org.bukkit.util.Vector vector -> Sfhj
    byte from -> GdGa
    byte to -> hdDo
    16:22:void <init>(org.bukkit.event.block.BlockRedstoneEvent) -> <init>
    26:26:react.surge.util.MaterialBlock getBlock() -> SLPT
    31:32:void setBlock(react.surge.util.MaterialBlock) -> ksfn
    36:36:org.bukkit.util.Vector getVector() -> Smqr
    41:42:void setVector(org.bukkit.util.Vector) -> ksfn
    46:46:byte getFrom() -> TWby
    51:52:void setFrom(byte) -> eYCp
    56:56:byte getTo() -> ogRD
    61:62:void setTo(byte) -> RPlW
react.redstone.RedstoneTracker -> wLae:
    org.bukkit.World world -> world
    react.controller.FeatureController fc -> klmV
    react.glang.GList events -> brqA
    boolean ticking -> mQQX
    react.surge.sched.Task task -> xYaM
    boolean nms -> pAIA
    int tr -> WPrN
    react.gmath.Average aav -> OQlB
    boolean handleTicking -> MuyK
    33:55:void <init>(org.bukkit.World) -> <init>
    59:61:void close() -> close
    65:98:void tick() -> tick
    103:127:void set(org.bukkit.Location,react.surge.util.MaterialBlock) -> IyWN
    131:152:void enact(react.redstone.RedstoneEvent) -> ksfn
    157:184:void on(org.bukkit.event.block.BlockRedstoneEvent) -> ksfn
react.redstone.RedstoneTracker$1 -> wLae$1:
    react.redstone.RedstoneTracker this$0 -> kBXq
    1:47:void <init>(react.redstone.RedstoneTracker,java.lang.String,int) -> <init>
    52:53:void run() -> run
react.remote.client.RemoteClient -> UcSL:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> hIqA
    boolean authenticated -> hktE
    react.remote.server.ServerInfo info -> ORKI
    react.glang.GMap frems -> ffNW
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> Btdo
    51:51:react.glang.GMap getFrames() -> HmuR
    56:75:int computeFrames() -> kcXr
    80:92:boolean clearToken() -> NVTr
    97:110:boolean updateServerInfo() -> nmBs
    115:129:boolean refreshToken() -> CMdV
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> nkoF
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> WrPw
    165:165:boolean isAuthenticated() -> CMcj
    170:170:react.remote.server.ServerInfo getInfo() -> XSQo
react.remote.client.packet.CPacketClearToken -> VvwQ:
    java.lang.String token -> hIqA
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> ksfn
    33:34:void fromBytes(react.gnet.streams.ISS) -> ksfn
    38:38:java.lang.String getToken() -> WrPw
    43:44:void setToken(java.lang.String) -> vsiC
react.remote.client.packet.CPacketComputeFrames -> SnNh:
    java.lang.String token -> hIqA
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> ksfn
    33:34:void fromBytes(react.gnet.streams.ISS) -> ksfn
    38:38:java.lang.String getToken() -> WrPw
    43:44:void setToken(java.lang.String) -> vsiC
react.remote.client.packet.CPacketGetInfo -> anev:
    java.lang.String token -> hIqA
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> ksfn
    33:34:void fromBytes(react.gnet.streams.ISS) -> ksfn
    38:38:java.lang.String getToken() -> WrPw
    43:44:void setToken(java.lang.String) -> vsiC
react.remote.client.packet.CPacketGetToken -> VTtT:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> ksfn
    36:38:void fromBytes(react.gnet.streams.ISS) -> ksfn
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> PKRt:
    java.lang.String token -> hIqA
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> ksfn
    33:34:void fromBytes(react.gnet.streams.ISS) -> ksfn
    38:38:java.lang.String getToken() -> WrPw
    43:44:void setToken(java.lang.String) -> vsiC
react.remote.client.packet.ClientPacket -> fdbu:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> ksfn
    void fromBytes(react.gnet.streams.ISS) -> ksfn
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> UcSL
    42:42:java.lang.String getPacketName() -> VvwQ
react.remote.client.packet.ClientPacketType -> Lhxw:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> fwOt
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> cvVl
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> ghpf
    react.remote.client.packet.ClientPacketType GET_INFO -> TGgc
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> brsJ
    react.remote.client.packet.ClientPacketType[] $VALUES -> igGa
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> quci:
    react.glang.GMap compute(long,long) -> nkoF
react.remote.server.KnownUser -> uOOk:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> TyeI:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> ksfn
    38:41:void fromBytes(react.gnet.streams.ISS) -> ksfn
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> ofpN:
    react.glang.GList users -> kKKE
    react.glang.GMap session -> ecJn
    react.glang.GMap lastCompute -> ioWp
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> iKen
    44:45:void registerUser(react.remote.server.KnownUser) -> ksfn
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> IyWN
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> bWla
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> leiL
    react.remote.server.IFrameComputer getFrameComputer() -> GkIc
    170:171:void markLastCompute(react.remote.server.KnownUser) -> nkoF
    175:180:long getLastCompute(react.remote.server.KnownUser) -> leiL
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> ksfn
    190:191:void deleteSession(react.remote.server.KnownUser) -> JkXd
    195:195:java.lang.String createToken() -> SfFI
react.remote.server.ServerInfo -> WGXt:
    java.lang.String motd -> WQRR
    int gameProtocol -> rXNk
    java.lang.String gameVersion -> KNPB
    java.lang.String reactVersion -> pAFy
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> WsTi
    int viewDistance -> viewDistance
    int gamePort -> cnFk
    java.lang.String gameAddress -> EfPn
    react.glang.GList remotePlugins -> bjfL
    react.glang.GList worlds -> SMYE
    react.glang.GList actions -> KhEI
    react.glang.GList samplers -> Wjes
    26:26:react.remote.server.ServerInfo empty() -> ArQm
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> ksfn
    146:159:void fromBytes(react.gnet.streams.ISS) -> ksfn
    java.lang.String dgetMotd() -> hsWf
    int dgetGameProtocol() -> Edan
    java.lang.String dgetGameVersion() -> DHMW
    java.lang.String dgetReactVersion() -> bqeW
    int dgetMaxPlayers() -> CDhW
    react.glang.GList dgetConnectedPlayers() -> hHbb
    int dgetViewDistance() -> Btid
    int dgetGamePort() -> KLaQ
    java.lang.String dgetGameAddress() -> GPvA
    react.glang.GList dgetRemotePlugins() -> ySDy
    react.glang.GList dgetWorlds() -> awTX
    react.glang.GList dgetActions() -> hkFk
    react.glang.GList dgetSamplers() -> AhuS
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> nSOo
    199:199:java.lang.String getGameVersion() -> owtx
    204:204:java.lang.String getReactVersion() -> AaOv
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> dUsY
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> DajG
    229:229:java.lang.String getGameAddress() -> EeNH
    234:234:react.glang.GList getRemotePlugins() -> YwwO
    239:239:react.glang.GList getWorlds() -> LPOh
    244:244:react.glang.GList getActions() -> hjdD
    249:249:react.glang.GList getSamplers() -> HKsO
react.remote.server.ServerInfo$1 -> WGXt$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> awTX
    37:37:int dgetViewDistance() -> Btid
    43:43:react.glang.GList dgetRemotePlugins() -> ySDy
    49:49:java.lang.String dgetReactVersion() -> bqeW
    55:55:java.lang.String dgetMotd() -> hsWf
    61:61:int dgetMaxPlayers() -> CDhW
    67:67:java.lang.String dgetGameVersion() -> DHMW
    73:73:int dgetGameProtocol() -> Edan
    79:79:int dgetGamePort() -> KLaQ
    85:85:java.lang.String dgetGameAddress() -> GPvA
    91:91:react.glang.GList dgetConnectedPlayers() -> hHbb
    97:97:react.glang.GList dgetActions() -> hkFk
    103:103:react.glang.GList dgetSamplers() -> AhuS
react.remote.server.packet.ComputedFrame -> WrLr:
    react.glang.GMap values -> raDT
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> ksfn
    28:36:void fromBytes(react.gnet.streams.ISS) -> ksfn
    40:40:react.glang.GMap getValues() -> BSRB
    45:46:void setValues(react.glang.GMap) -> nkoF
react.remote.server.packet.SPacketOk -> xGWf:
    boolean ok -> msVi
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> ksfn
    33:34:void fromBytes(react.gnet.streams.ISS) -> ksfn
    38:38:boolean isOk() -> pjXI
    43:44:void setOk(boolean) -> XJLb
react.remote.server.packet.SPacketSendFrames -> SKnB:
    react.glang.GMap frames -> RJUh
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> ksfn
    36:44:void fromBytes(react.gnet.streams.ISS) -> ksfn
    48:48:react.glang.GMap getFrames() -> HmuR
    53:54:void setFrames(react.glang.GMap) -> leiL
react.remote.server.packet.SPacketSendInfo -> EBdt:
    react.remote.server.ServerInfo info -> ORKI
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> ksfn
    33:34:void fromBytes(react.gnet.streams.ISS) -> ksfn
    38:38:react.remote.server.ServerInfo getInfo() -> XSQo
    43:44:void setInfo(react.remote.server.ServerInfo) -> ksfn
react.remote.server.packet.SPacketSendToken -> QyMP:
    java.lang.String token -> hIqA
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> ksfn
    33:34:void fromBytes(react.gnet.streams.ISS) -> ksfn
    38:38:java.lang.String getToken() -> WrPw
    43:44:void setToken(java.lang.String) -> vsiC
react.remote.server.packet.ServerPacket -> awYf:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> ksfn
    void fromBytes(react.gnet.streams.ISS) -> ksfn
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> UcSL
    42:42:java.lang.String getPacketName() -> VvwQ
react.remote.server.packet.ServerPacketType -> woII:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> KEaX
    react.remote.server.packet.ServerPacketType SEND_INFO -> Bmij
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> cuya
    react.remote.server.packet.ServerPacketType OK -> CVyq
    react.remote.server.packet.ServerPacketType[] $VALUES -> nnHs
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> yckx:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleAsyncQueue$1 -> yckx$1:
    react.sampler.SampleAsyncQueue this$0 -> LjhI
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleChunkTime -> Vnii:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleChunkTime$1 -> Vnii$1:
    react.sampler.SampleChunkTime this$0 -> QWsj
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleChunksLoaded -> ECFY:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleChunksLoaded$1 -> ECFY$1:
    react.sampler.SampleChunksLoaded this$0 -> hlWa
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleChunksLoadedPerSecond -> aDVM:
    react.gmath.Average a -> mbSq
    react.graph.IFormatter formatter -> UJdQ
    16:29:void <init>() -> <init>
    34:40:void construct() -> LGKt
    45:47:void sample() -> uyVD
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleChunksLoadedPerSecond$1 -> aDVM$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> YVxe
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> DHCd
react.sampler.SampleEntitiesDrops -> vRRW:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleEntitiesDrops$1 -> vRRW$1:
    react.sampler.SampleEntitiesDrops this$0 -> yLDl
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleEntitiesLiving -> vQpv:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleEntitiesLiving$1 -> vQpv$1:
    react.sampler.SampleEntitiesLiving this$0 -> Npkj
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleEntitiesTiles -> RkNt:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleEntitiesTiles$1 -> RkNt$1:
    react.sampler.SampleEntitiesTiles this$0 -> KFAM
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleEntitiesTotal -> vcSr:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleEntitiesTotal$1 -> vcSr$1:
    react.sampler.SampleEntitiesTotal this$0 -> KhCk
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleEntityDroppedTicks -> HUAR:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleEntityDroppedTicks$1 -> HUAR$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> MuyS
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleEntityTime -> ndNG:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleEntityTime$1 -> ndNG$1:
    react.sampler.SampleEntityTime this$0 -> kJkb
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleEntityTimeLock -> EvJu:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleEntityTimeLock$1 -> EvJu$1:
    react.sampler.SampleEntityTimeLock this$0 -> VgbU
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleExplosionTime -> PJuV:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleExplosionTime$1 -> PJuV$1:
    react.sampler.SampleExplosionTime this$0 -> AkIM
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleFluidPerSecond -> UbtP:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleFluidPerSecond$1 -> UbtP$1:
    react.sampler.SampleFluidPerSecond this$0 -> DtPt
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleFluidPerTick -> BAlj:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    46:53:void sample() -> uyVD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleFluidPerTick$1 -> BAlj$1:
    react.sampler.SampleFluidPerTick this$0 -> wyCP
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleFluidTickTime -> xFty:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleFluidTickTime$1 -> xFty$1:
    react.sampler.SampleFluidTickTime this$0 -> EDOh
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleFluidTickUtilization -> MuOi:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    46:53:void sample() -> uyVD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleFluidTickUtilization$1 -> MuOi$1:
    react.sampler.SampleFluidTickUtilization this$0 -> Xmhc
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleHopperPerSecond -> EmXW:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleHopperPerSecond$1 -> EmXW$1:
    react.sampler.SampleHopperPerSecond this$0 -> dFWj
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleHopperPerTick -> yIxg:
    react.graph.IFormatter formatter -> UJdQ
    18:29:void <init>() -> <init>
    34:40:void construct() -> LGKt
    47:54:void sample() -> uyVD
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleHopperPerTick$1 -> yIxg$1:
    react.sampler.SampleHopperPerTick this$0 -> igIU
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleHopperTickTime -> CNBO:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleHopperTickTime$1 -> CNBO$1:
    react.sampler.SampleHopperTickTime this$0 -> dpjq
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleHopperTickUtilization -> JbuH:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    46:53:void sample() -> uyVD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleHopperTickUtilization$1 -> JbuH$1:
    react.sampler.SampleHopperTickUtilization this$0 -> Vxfl
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleMemoryAllocated -> WGWg:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleMemoryAllocated$1 -> WGWg$1:
    react.sampler.SampleMemoryAllocated this$0 -> nSxE
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleMemoryAllocationPerSecond -> iKka:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleMemoryAllocationPerSecond$1 -> iKka$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> giWH
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleMemoryFree -> IOQU:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleMemoryFree$1 -> IOQU$1:
    react.sampler.SampleMemoryFree this$0 -> YNjv
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleMemoryMax -> rMtv:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleMemoryMax$1 -> rMtv$1:
    react.sampler.SampleMemoryMax this$0 -> raEr
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleMemoryUse -> PSeN:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleMemoryUse$1 -> PSeN$1:
    react.sampler.SampleMemoryUse this$0 -> Iiox
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SamplePhysicsTickTime -> AOjq:
    react.graph.IFormatter formatter -> UJdQ
    17:27:void <init>() -> <init>
    32:38:void construct() -> LGKt
    43:44:void sample() -> uyVD
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SamplePhysicsTickTime$1 -> AOjq$1:
    react.sampler.SamplePhysicsTickTime this$0 -> fDPU
    1:19:void <init>(react.sampler.SamplePhysicsTickTime) -> <init>
    24:24:java.lang.String from(double) -> DHCd
react.sampler.SampleRedstonePerSecond -> Xtmv:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleRedstonePerSecond$1 -> Xtmv$1:
    react.sampler.SampleRedstonePerSecond this$0 -> RdKA
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleRedstonePerTick -> YUmu:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    46:53:void sample() -> uyVD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleRedstonePerTick$1 -> YUmu$1:
    react.sampler.SampleRedstonePerTick this$0 -> gFrS
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleRedstoneTickTime -> PKUB:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleRedstoneTickTime$1 -> PKUB$1:
    react.sampler.SampleRedstoneTickTime this$0 -> sJUc
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleRedstoneTickUtilization -> CxSk:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    46:53:void sample() -> uyVD
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleRedstoneTickUtilization$1 -> CxSk$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> FqiN
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleSyncQueue -> LGXk:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleSyncQueue$1 -> LGXk$1:
    react.sampler.SampleSyncQueue this$0 -> qeqc
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleTickTime -> RYjl:
    react.graph.IFormatter formatter -> UJdQ
    react.gmath.Average aa -> NOMb
    17:29:void <init>() -> <init>
    34:40:void construct() -> LGKt
    45:47:void sample() -> uyVD
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleTickTime$1 -> RYjl$1:
    react.sampler.SampleTickTime this$0 -> Lawy
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> DHCd
react.sampler.SampleTickUtilization -> ThbV:
    react.graph.IFormatter formatter -> UJdQ
    react.gmath.Average aa -> NOMb
    17:29:void <init>() -> <init>
    34:40:void construct() -> LGKt
    45:47:void sample() -> uyVD
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleTickUtilization$1 -> ThbV$1:
    react.sampler.SampleTickUtilization this$0 -> qwSn
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> DHCd
react.sampler.SampleTicksPerSecond -> ArNl:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleTicksPerSecond$1 -> ArNl$1:
    react.sampler.SampleTicksPerSecond this$0 -> IsBn
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleTileDroppedTicks -> uiAQ:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleTileDroppedTicks$1 -> uiAQ$1:
    react.sampler.SampleTileDroppedTicks this$0 -> KVeQ
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleTileTime -> lvvr:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleTileTime$1 -> lvvr$1:
    react.sampler.SampleTileTime this$0 -> EDRh
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.sampler.SampleTileTimeLock -> BuQh:
    react.graph.IFormatter formatter -> UJdQ
    18:28:void <init>() -> <init>
    33:39:void construct() -> LGKt
    44:45:void sample() -> uyVD
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> xXLB
react.sampler.SampleTileTimeLock$1 -> BuQh$1:
    react.sampler.SampleTileTimeLock this$0 -> stiK
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> DHCd
react.security.checkpoints.SecurityCheckpointAlpha -> UsvV:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> Mtth
    78:148:void doScan(java.lang.Runnable) -> IyWN
    152:181:byte[] readResource(java.io.File,java.lang.String) -> ksfn
    186:217:react.glang.GMap scan(java.io.File) -> IyWN
    150:150:byte[] access$0(java.io.File,java.lang.String) -> IyWN
react.security.checkpoints.SecurityCheckpointAlpha$1 -> UsvV$1:
    java.lang.Runnable val$r -> raEc
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> UsvV$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> YqPH
    java.lang.Runnable val$r -> raEc
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> oUmL:
    java.lang.String ip -> THMu
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> GHkA:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> GHkA$1:
    react.security.locks.SecurityLockAlpha this$0 -> uXlS
    java.io.File val$f -> xrva
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> mhxb:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> IEqC
react.slate.PhantomSlate -> xGUf:
    react.glang.GList lines -> NqPe
    react.glang.GList viewers -> YNkA
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> WsXk
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> dMag
    44:45:void set(int,java.lang.String) -> IyWN
    50:51:void setLines(react.glang.GList) -> GbOr
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> uOOk
    91:95:void addViewer(org.bukkit.entity.Player) -> IEqC
    100:102:void removeViewer(org.bukkit.entity.Player) -> vQcB
    107:107:react.glang.GList getViewers() -> ycoa
    113:113:boolean isViewing(org.bukkit.entity.Player) -> BcaS
    119:120:void addLine(java.lang.String) -> SKaT
    125:126:void clearLines() -> pGsL
react.slate.Slate -> RYlC:
    void build() -> uOOk
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> dMag
    void set(int,java.lang.String) -> IyWN
    void setLines(react.glang.GList) -> GbOr
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> IEqC
    void addLine(java.lang.String) -> SKaT
    void clearLines() -> pGsL
    void removeViewer(org.bukkit.entity.Player) -> vQcB
    react.glang.GList getViewers() -> ycoa
    boolean isViewing(org.bukkit.entity.Player) -> BcaS
    void update() -> update
react.slate.SlateUtil -> NDnU:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> PTJI
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> EBgq
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> ksfn
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> IyWN
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> nkoF
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> ksfn
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> ksfn
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> IyWN
    186:196:java.lang.String convertJSON(java.lang.String) -> cuBs
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> IyWN
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> ksfn
react.surge.Main -> IXBl:
    react.glang.GList plugins -> VMpy
    react.glang.GMap pluginInstances -> LHeT
    react.glang.GList controllerSet -> hJUl
    react.glang.GMap anchors -> pbmx
    react.glang.GList classes -> DAOc
    java.lang.reflect.Field nsField -> WbXF
    java.lang.reflect.Field thField -> DsrT
    react.glang.GList tracks -> MmlB
    long nsf -> ndwe
    42:46:void <clinit>() -> <clinit>
    48:51:void <init>() -> <init>
    57:57:void onControllerRegistry() -> GcBQ
    62:81:long getNanoSync() -> APPV
    86:87:void requestResetNanos() -> rhLp
    91:99:void requestReload() -> ccpl
    105:114:void requestReload(java.lang.Runnable) -> nkoF
    119:133:int getThreadCount() -> getThreadCount
    144:202:void onStart(react.surge.util.Protocol) -> ksfn
    210:252:void onStop() -> MKAY
    258:258:void onPostInit() -> IqYH
    264:264:void onPreInit() -> PCHh
    268:279:void shutDownAmps() -> Vnld
    283:492:void initializeAmps() -> DHVl
    497:538:void doScan() -> prfr
    542:564:void scanForPoolDefiners() -> TFdN
    568:584:void scanForRawEvents() -> mOjq
    588:604:void scanForDynamicTrack() -> vQtc
    608:629:void scanForAmps() -> SedL
    634:645:void onTick() -> vbif
react.surge.Main$1 -> IXBl$1:
    1:91:void <init>() -> <init>
    97:97:void run() -> run
react.surge.PluginAmp -> ObEJ:
    react.surge.control.AmpedPlugin plugin -> ydwM
    boolean connected -> connected
    int masterTask -> JKPg
    java.lang.Runnable onReload -> OROk
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> TOWb
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> FpbX
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> ksfn
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> ksfn
    123:124:void stopTask(int) -> iTOv
    128:128:react.surge.control.AmpedPlugin getPlugin() -> PSlO
    133:133:int getMasterTask() -> RYrL
    138:138:java.lang.Runnable getOnReload() -> IWhb
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> ksfn
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> uyVD
    158:159:void setOnReload(java.lang.Runnable) -> leiL
    67:67:void access$0(react.surge.PluginAmp) -> ksfn
react.surge.PluginAmp$1 -> ObEJ$1:
    react.surge.PluginAmp this$0 -> EMBv
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> ObEJ$2:
    react.surge.PluginAmp this$0 -> EMBv
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> ObEJ$3:
    react.surge.PluginAmp this$0 -> EMBv
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> GtBW:
    react.surge.PluginAmp amp -> Cpqd
    react.glang.GList tickComponents -> fMDJ
    react.glang.GList atickComponents -> sRiA
    react.surge.sched.TaskManager taskmgr -> vTAx
    react.surge.hotload.HotloadManager hotloadmgr -> IabO
    java.lang.Thread mainThread -> lEdE
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> ksfn
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> lejm
    44:44:java.io.File folder() -> RIRH
    49:51:java.io.File getPluginJarFile() -> SfHA
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> leiL
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> RkUF
    74:74:react.glang.GList getTickComponents() -> dDsV
    79:79:react.glang.GList getAsyncTickComponents() -> kAYB
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> ksfn
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> IyWN
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> IyWN
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> RkTr
    126:126:boolean hasAmp() -> ycrQ
    131:131:react.surge.PluginAmp getAmp() -> QqBr
    136:136:react.surge.sched.TaskManager getTaskManager() -> WaRf
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> iUDa
react.surge.cluster.Cluster -> MSOo:
    react.surge.cluster.ClusterType type -> plDD
    java.lang.Object t -> PDAt
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> hbbP
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> OPeF:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> dxTh:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> EvLh:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> qBeL:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> feHl:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> JQwB:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> YMaj:
    react.surge.cluster.ClusterType INT -> KhHu
    react.surge.cluster.ClusterType BOOLEAN -> etSg
    react.surge.cluster.ClusterType STRING -> IQBH
    react.surge.cluster.ClusterType STRING_LIST -> lxhX
    react.surge.cluster.ClusterType DOUBLE -> DAQD
    react.surge.cluster.ClusterType LONG -> ghwu
    react.surge.cluster.ClusterType[] ENUM$VALUES -> Vowv
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> QFKF:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> ghvv
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> ksfn
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> ksfn
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> VoQI
react.surge.cluster.ConfigurationDataOutput -> mrMm:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> IyWN
react.surge.cluster.DataCluster -> LqpG:
    react.glang.GMap clusters -> keCi
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> uOVK
    29:33:void fromJson(react.json.JSONObject) -> JkXd
    37:44:react.json.JSONObject toJson() -> GRDT
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> rVlw
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> ksfn
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> EAxL
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> VejA
    194:195:void set(java.lang.String,int) -> JkXd
    199:200:void set(java.lang.String,boolean) -> nkoF
    204:205:void set(java.lang.String,double) -> nkoF
    209:210:void set(java.lang.String,long) -> nkoF
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> ksfn
react.surge.cluster.ICluster -> FhOH:
    react.surge.cluster.ClusterType getType() -> hbbP
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> VnlJ:
react.surge.cluster.IDataInput -> HnRn:
    react.surge.cluster.DataCluster read(java.io.File) -> nkoF
react.surge.cluster.IDataOutput -> kkfY:
    void write(react.surge.cluster.DataCluster,java.io.File) -> ksfn
react.surge.cluster.Key -> OXsq:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> YDoN:
    int value() -> value
react.surge.cluster.KeyStore -> MuQj:
react.surge.cluster.ReflectedConfigurationException -> pGpk:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> Tyeo:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> nkoF
react.surge.cluster.YamlDataOutput -> iLOC:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> ksfn
react.surge.collection.GSound -> YgSH:
    java.lang.String sound -> hBHP
    org.bukkit.Sound iSound -> gGUo
    java.lang.Float volume -> hAft
    java.lang.Float pitch -> KNVn
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> tSmF
    61:72:void play(org.bukkit.Location) -> JkXd
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> ksfn
    93:93:java.lang.String getSound() -> YfxA
    98:99:void setSound(java.lang.String) -> tdpd
    103:103:org.bukkit.Sound getiSound() -> dVUs
    108:109:void setiSound(org.bukkit.Sound) -> ksfn
    113:113:java.lang.Float getVolume() -> WPQO
    118:119:void setVolume(java.lang.Float) -> ksfn
    123:123:java.lang.Float getPitch() -> YfvS
    128:129:void setPitch(java.lang.Float) -> IyWN
react.surge.control.AmpedPlugin -> qSfB:
    react.glang.GList controllers -> JBbb
    react.gconcurrent.ParallelPoolManager pp -> OAPw
    react.surge.server.CoreTickThread ctt -> SEMS
    24:27:void <init>() -> <init>
    void doScan() -> prfr
    long getNanoSync() -> APPV
    int getThreadCount() -> getThreadCount
    39:39:void onLoad() -> onLoad
    46:85:void onEnable() -> onEnable
    90:96:void onDisable() -> onDisable
    101:101:react.glang.GList getControllers() -> BuYD
    107:108:void registerController(react.surge.control.IController) -> ksfn
    113:124:void onTick() -> vbif
    129:129:java.lang.String getTickName() -> MAdt
    135:135:react.gconcurrent.ParallelPoolManager getThreadPool() -> ObJY
    141:256:void destroyOldThreads() -> tmsk
    void onControllerRegistry() -> GcBQ
    void onStart(react.surge.util.Protocol) -> ksfn
    void onStop() -> MKAY
    void onPostInit() -> IqYH
    void onPreInit() -> PCHh
react.surge.control.AmpedPlugin$1 -> qSfB$1:
    react.surge.control.AmpedPlugin this$0 -> PTuL
    1:56:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    61:61:long getNanoGate() -> sQVW
react.surge.control.AmpedPlugin$2 -> qSfB$2:
    react.surge.control.AmpedPlugin this$0 -> PTuL
    1:154:void <init>(react.surge.control.AmpedPlugin) -> <init>
    159:249:void run() -> run
react.surge.control.Control -> pQDA:
react.surge.control.Controller -> psFb:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> vtVr:
react.surge.control.Enable -> KDWq:
react.surge.control.IController -> mWxp:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> SKnm:
react.surge.control.Plugin -> Rjnj:
react.surge.control.SurgePlugin -> flwT:
    void onStart(react.surge.util.Protocol) -> ksfn
    void onStop() -> MKAY
    void onPostInit() -> IqYH
    void onPreInit() -> PCHh
    void onControllerRegistry() -> GcBQ
    void registerController(react.surge.control.IController) -> ksfn
    react.glang.GList getControllers() -> BuYD
    react.gconcurrent.ParallelPoolManager getThreadPool() -> ObJY
react.surge.hotload.HotloadManager -> qCDY:
    react.glang.GMap filemods -> keDW
    react.glang.GMap filesizes -> fDQa
    react.glang.GMap fileacts -> yLIP
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> ksfn
    35:38:void untrack(java.io.File) -> leiL
    42:45:void untrackall() -> xaNu
    50:86:void onTick() -> vbif
    91:91:java.lang.String getTickName() -> MAdt
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> ksfn
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> IyWN
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> nkoF
react.surge.hotload.HotloadManager$1 -> qCDY$1:
    react.surge.hotload.HotloadManager this$0 -> MCYj
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> qKTa:
    boolean init -> DstK
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> FPGd
    java.lang.Class IChatBaseComponent -> RIxB
    java.lang.Class ChatSerializer -> ymjg
    java.lang.Class PacketPlayOutPlayerInfo -> lWDq
    java.lang.Class PlayerInfoData -> opoM
    java.lang.Class EnumPlayerInfoAction -> HVMm
    java.lang.Class GameProfile -> VFCy
    java.lang.Class EnumGamemode -> FqjM
    java.lang.Class TileEntitySkull -> KyJN
    java.lang.Class LoadingCache -> OlCy
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> PTHT:
    react.surge.nms.NMSX bountifulAPI -> Iiqk
    boolean useOldMethods -> HgOh
    java.lang.String nmsver -> xPuI
    java.lang.Object eTimes -> TsDA
    java.lang.Object eTitle -> uXmU
    java.lang.Object eSubtitle -> BnPF
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> ksfn
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> NLrd
    75:89:java.lang.Class getCBClass(java.lang.String) -> awNR
    96:104:java.lang.Object serializeChat(java.lang.String) -> JYvi
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> ksfn
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> ksfn
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> fCIS
    151:151:java.lang.String craftPackage() -> Daiw
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> ksfn
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> ksfn
    197:207:java.lang.Class getNMSClass(java.lang.String) -> xXLB
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> ksfn
    279:280:void clearTitle(org.bukkit.entity.Player) -> EliS
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> IyWN
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> ksfn
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> ksfn
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> Btdo
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> VejA
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> OjGa
    434:447:int ping(org.bukkit.entity.Player) -> OrVh
react.surge.nms.NMSX$1 -> PTHT$1:
    org.bukkit.entity.Player val$player -> ujFe
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> PTHT$2:
    org.bukkit.entity.Player val$player -> ujFe
    java.lang.String val$message -> rWsy
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> VDXH:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> prjG
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> ksfn
    68:82:void clearTitle(org.bukkit.entity.Player) -> EliS
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> ksfn
react.surge.nms.PacketUtil$V -> VDXH$ksfn:
    react.surge.nms.PacketUtil$V R17 -> KWFw
    react.surge.nms.PacketUtil$V R18 -> KEdf
    react.surge.nms.PacketUtil$V R19 -> MLMr
    react.surge.nms.PacketUtil$V R111 -> pkcy
    react.surge.nms.PacketUtil$V R110 -> hdNL
    react.surge.nms.PacketUtil$V R112 -> ekdb
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> urdB
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> bOip:
    java.lang.String title -> title
    java.lang.String subTitle -> HgRd
    java.lang.String action -> action
    java.lang.Integer fadeIn -> kTED
    java.lang.Integer fadeOut -> Ajlh
    java.lang.Integer stayTime -> bYkD
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> LiNF
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> RYqW
    79:80:void setSubTitle(java.lang.String) -> iTOv
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> lnnK
    99:100:void setFadeIn(java.lang.Integer) -> nkoF
    104:104:java.lang.Integer getFadeOut() -> SUEK
    109:110:void setFadeOut(java.lang.Integer) -> leiL
    114:114:java.lang.Integer getStayTime() -> lMKM
    119:120:void setStayTime(java.lang.Integer) -> JkXd
react.surge.nms.VersionBukkit -> skMd:
    react.surge.nms.VersionBukkit VU -> nByq
    react.surge.nms.VersionBukkit V7 -> sIyM
    react.surge.nms.VersionBukkit V8 -> dOOP
    react.surge.nms.VersionBukkit V9 -> DkfB
    react.surge.nms.VersionBukkit V11 -> dppn
    react.surge.nms.VersionBukkit V111 -> lghD
    react.surge.nms.VersionBukkit V112 -> VVfs
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> uGnL
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> JJKB
    27:32:boolean uc() -> CpJY
    37:67:react.surge.nms.VersionBukkit get() -> Mtuh
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> XBLu:
    void burst(java.lang.Object) -> fKEC
    void setTimeLock(double) -> vQcB
    double getEstimatedTimeUse() -> MKEn
    int flush() -> DPkg
    int flush(react.gbench.Profiler) -> ksfn
    void queue(java.lang.Object) -> IEqC
    void queue(java.util.List) -> nkoF
    void queue(java.lang.Object[]) -> ksfn
react.surge.sched.ICancellable -> SLPT:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> Smqr:
    void onTick() -> vbif
    java.lang.String getTickName() -> MAdt
react.surge.sched.ITask -> TWby:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> UIke
    java.lang.String getName() -> getName
    double getComputeTime() -> RQcs
    double getTotalComputeTime() -> RISg
    double getActiveTime() -> vlNQ
    boolean hasCompleted() -> JJLx
react.surge.sched.Task -> ogRD:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> VWGu
    double computeTime -> CFaS
    double totalComputeTime -> KxkF
    double activeTime -> UBcA
    boolean completed -> completed
    react.gbench.Profiler profiler -> PLeR
    react.gbench.Profiler activeProfiler -> gXXe
    int ticks -> hSKA
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> leiL
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> UIke
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> RQcs
    150:150:boolean hasCompleted() -> JJLx
    156:156:double getTotalComputeTime() -> RISg
    162:162:double getActiveTime() -> vlNQ
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> nkoF
    15:15:void access$1(react.surge.sched.Task,boolean) -> ksfn
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> leiL
    14:14:void access$3(react.surge.sched.Task,double) -> ksfn
    12:12:void access$4(react.surge.sched.Task,double) -> IyWN
    14:14:double access$5(react.surge.sched.Task) -> JkXd
    13:13:void access$6(react.surge.sched.Task,double) -> nkoF
    13:13:double access$7(react.surge.sched.Task) -> VejA
    12:12:double access$8(react.surge.sched.Task) -> eYCp
react.surge.sched.Task$1 -> ogRD$1:
    react.surge.sched.Task this$0 -> Dkeo
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> ogRD$2:
    react.surge.sched.Task this$0 -> Dkeo
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> ogRD$3:
    react.surge.sched.Task this$0 -> Dkeo
    int val$total -> HpBk
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> HmuR:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> VWGu
    double computeTime -> CFaS
    double totalComputeTime -> KxkF
    double activeTime -> UBcA
    boolean completed -> completed
    react.gbench.Profiler profiler -> PLeR
    react.gbench.Profiler activeProfiler -> gXXe
    int ticks -> hSKA
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> leiL
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> UIke
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> RQcs
    101:101:boolean hasCompleted() -> JJLx
    107:107:double getTotalComputeTime() -> RISg
    113:113:double getActiveTime() -> vlNQ
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> ksfn
    12:12:void access$1(react.surge.sched.TaskLater,double) -> ksfn
    13:13:double access$2(react.surge.sched.TaskLater) -> IyWN
    12:12:double access$3(react.surge.sched.TaskLater) -> nkoF
    13:13:void access$4(react.surge.sched.TaskLater,double) -> IyWN
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> leiL
    14:14:double access$6(react.surge.sched.TaskLater) -> JkXd
    14:14:void access$7(react.surge.sched.TaskLater,double) -> nkoF
react.surge.sched.TaskLater$1 -> HmuR$1:
    react.surge.sched.TaskLater this$0 -> etUb
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> kcXr:
    react.glang.GList tasks -> xrap
    react.glang.GMap taskProfiles -> LPyk
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> ksfn
    25:35:void onTick() -> vbif
    39:40:void putFinishingTask(react.surge.sched.ITask) -> IyWN
    44:53:void putTask(react.surge.sched.ITask) -> nkoF
    58:58:java.lang.String getTickName() -> MAdt
    63:63:react.glang.GList getTasks() -> feNo
    68:68:react.glang.GMap getTaskProfiles() -> LjFX
react.surge.sched.TaskProfile -> NVTr:
    double activeTime -> UBcA
    double computeTickTime -> ecSk
    double computeTime -> CFaS
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> vlNQ
    23:24:void setActiveTime(double) -> BcaS
    28:28:double getComputeTickTime() -> xrTH
    33:34:void setComputeTickTime(double) -> tSmF
    38:38:double getComputeTime() -> RQcs
    43:44:void setComputeTime(double) -> EliS
react.surge.server.AsyncTick -> nmBs:
react.surge.server.CPS -> CMdV:
    react.glang.GMap keys -> LYkW
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> uyVD
    46:99:void scan() -> woQG
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> nkoF
react.surge.server.CoreTickThread -> WrPw:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> CMcj:
    long memoryFree -> NiDB
    long memoryUsed -> AYks
    long memoryMax -> VhIm
    long lastMemoryUsed -> RRkd
    long memoryUsedAfterGC -> Sfrf
    long allocated -> GuRd
    long collected -> DIec
    long collections -> kSeq
    long sms -> GAly
    long memoryAllocatedPerTick -> HMbF
    long memoryCollectedPerTick -> GuSS
    long memoryFullyAllocatedPerTick -> iwsc
    long mah -> tDmb
    long mahs -> Obvw
    22:39:void <init>() -> <init>
    void onAllocationSet() -> ndVJ
    46:107:void run() -> run
    111:111:long getMemoryFree() -> YMge
    116:116:long getMemoryUsed() -> getMemoryUsed
    121:121:long getMemoryMax() -> KoSn
    126:126:long getLastMemoryUsed() -> LHCe
    131:131:long getMemoryUsedAfterGC() -> eQKQ
    136:136:long getAllocated() -> getAllocated
    141:141:long getCollected() -> iUFK
    146:146:long getCollections() -> VMOB
    151:151:long getSms() -> jNwF
    156:156:long getMemoryAllocatedPerTick() -> cRrm
    161:161:long getMemoryCollectedPerTick() -> XKEA
    166:166:long getMemoryFullyAllocatedPerTick() -> iCca
    171:171:long getMah() -> mOoe
    176:176:long getMahs() -> iUFT
react.surge.server.SuperSampler -> XSQo:
    react.gmath.Average ticksPerSecondL -> LtAn
    react.gmath.Average tickTimeL -> jPba
    react.gmath.Average mahL -> TbGX
    double ticksPerSecond -> DtFO
    double ticksPerSecondRaw -> RSPJ
    double tickTime -> foJp
    double tickTimeRaw -> BveN
    boolean running -> running
    boolean frozen -> RAka
    double tickUtilizationRaw -> Bvdi
    double tickUtilization -> uisO
    double leftoverTickTime -> whJU
    long memoryUse -> YiCt
    long memoryAllocated -> BfCq
    long memoryCollected -> nvaV
    long mahs -> Obvw
    int totalChunks -> hSME
    int totalEntities -> mkLn
    int totalDrops -> lxkF
    int totalTiles -> ORUb
    int totalLiving -> BKpO
    int chunksLoaded -> XmqQ
    int chunksUnloaded -> toeA
    react.surge.server.WorldMonitor worldMonitor -> eQuv
    react.surge.server.TPSMonitor tpsMonitor -> lVkQ
    react.surge.server.MemoryMonitor memoryMonitor -> EoNf
    java.lang.StackTraceElement[] lockStack -> uius
    react.glang.GMap spikes -> HUYq
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> vbif
    154:154:java.lang.String getTickName() -> MAdt
    159:159:react.gmath.Average getTicksPerSecondL() -> vIhY
    164:164:double getTicksPerSecond() -> dgLV
    169:169:double getTicksPerSecondRaw() -> DsOS
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> WjDm
    184:184:react.gmath.Average getTickTimeL() -> qTLU
    189:189:double getTickTime() -> FNaQ
    194:194:double getTickTimeRaw() -> OPje
    199:199:double getTickUtilizationRaw() -> GISk
    204:204:double getTickUtilization() -> QWRG
    209:209:double getLeftoverTickTime() -> YpKK
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> bqsU
    219:219:long getMemoryUse() -> Ukpd
    224:224:long getMemoryAllocated() -> WqwG
    229:229:long getMemoryCollected() -> SThj
    234:234:react.gmath.Average getMahL() -> WaVM
    239:239:long getMahs() -> iUFT
    244:244:int getTotalChunks() -> jFjH
    249:249:int getTotalEntities() -> PmcN
    254:254:int getTotalDrops() -> PeSH
    259:259:int getTotalTiles() -> bOtC
    264:264:int getTotalLiving() -> FOEN
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> sABu
    274:274:int getChunksLoaded() -> TWmI
    279:279:int getChunksUnloaded() -> iCes
    284:285:void setTicksPerSecondL(react.gmath.Average) -> ksfn
    289:290:void setTickTimeL(react.gmath.Average) -> IyWN
    294:295:void setMahL(react.gmath.Average) -> nkoF
    299:300:void setTicksPerSecond(double) -> kACR
    304:305:void setTicksPerSecondRaw(double) -> OrVh
    309:310:void setTickTime(double) -> LiNF
    314:315:void setTickTimeRaw(double) -> DYFE
    319:320:void setRunning(boolean) -> DHCd
    324:325:void setTickUtilizationRaw(double) -> xykW
    329:330:void setTickUtilization(double) -> XJMY
    334:335:void setLeftoverTickTime(double) -> HmbV
    339:340:void setMemoryUse(long) -> vQcB
    344:345:void setMemoryAllocated(long) -> BcaS
    349:350:void setMemoryCollected(long) -> tSmF
    354:355:void setMahs(long) -> EliS
    359:360:void setTotalChunks(int) -> LGKt
    364:365:void setTotalEntities(int) -> EAvd
    369:370:void setTotalDrops(int) -> uxtl
    374:375:void setTotalTiles(int) -> IhVi
    379:380:void setTotalLiving(int) -> qcwJ
    384:385:void setChunksLoaded(int) -> Husv
    389:390:void setChunksUnloaded(int) -> VUKF
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> ksfn
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> ksfn
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> ksfn
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> xHCA
    419:419:react.glang.GMap getSpikes() -> DsAQ
    31:31:void access$0(react.surge.server.SuperSampler,int) -> ksfn
    33:33:void access$1(react.surge.server.SuperSampler,int) -> IyWN
    34:34:void access$2(react.surge.server.SuperSampler,int) -> nkoF
    32:32:void access$3(react.surge.server.SuperSampler,int) -> leiL
    35:35:void access$4(react.surge.server.SuperSampler,int) -> JkXd
    36:36:void access$5(react.surge.server.SuperSampler,int) -> VejA
    37:37:void access$6(react.surge.server.SuperSampler,int) -> eYCp
    19:19:void access$7(react.surge.server.SuperSampler,double) -> ksfn
    21:21:void access$8(react.surge.server.SuperSampler,double) -> IyWN
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> ksfn
    19:19:double access$10(react.surge.server.SuperSampler) -> IyWN
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> nkoF
    21:21:double access$12(react.surge.server.SuperSampler) -> leiL
    18:18:void access$13(react.surge.server.SuperSampler,double) -> nkoF
    20:20:void access$14(react.surge.server.SuperSampler,double) -> leiL
    24:24:void access$15(react.surge.server.SuperSampler,double) -> JkXd
    20:20:double access$16(react.surge.server.SuperSampler) -> JkXd
    25:25:void access$17(react.surge.server.SuperSampler,double) -> VejA
    25:25:double access$18(react.surge.server.SuperSampler) -> VejA
    26:26:void access$19(react.surge.server.SuperSampler,double) -> eYCp
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> ksfn
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> eYCp
    27:27:void access$22(react.surge.server.SuperSampler,long) -> ksfn
    28:28:void access$23(react.surge.server.SuperSampler,long) -> IyWN
    29:29:void access$24(react.surge.server.SuperSampler,long) -> nkoF
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> RPlW
    30:30:void access$26(react.surge.server.SuperSampler,long) -> leiL
react.surge.server.SuperSampler$1 -> XSQo$1:
    react.surge.server.SuperSampler this$0 -> UShy
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> ksfn
react.surge.server.SuperSampler$2 -> XSQo$2:
    react.surge.server.SuperSampler this$0 -> UShy
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> FgvM
    106:107:void onSpike() -> xjEW
react.surge.server.SuperSampler$3 -> XSQo$3:
    react.surge.server.SuperSampler this$0 -> UShy
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> ndVJ
react.surge.server.TPSMonitor -> SfFI:
    double tickTimeMS -> hBOO
    double rawTicksPerSecond -> Dbyf
    react.gbench.Profiler tickProfiler -> kCHM
    react.gbench.Profiler tickTimeProfiler -> ubGU
    boolean ticked -> cLPj
    java.lang.Thread$State lastState -> Vgmc
    double actualTickTimeMS -> fLiC
    double ltt -> pcWj
    long lastTick -> yBaC
    boolean frozen -> RAka
    java.lang.StackTraceElement[] lockedStack -> GRpw
    double lmsx -> THVU
    23:40:void <init>() -> <init>
    void onTicked() -> FgvM
    void onSpike() -> xjEW
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> ksfn
    160:160:double getTickTimeMS() -> OQNd
    165:165:double getRawTicksPerSecond() -> TWmD
    170:170:react.gbench.Profiler getTickProfiler() -> gEqD
    175:175:boolean isTicked() -> tvip
    180:181:void markTick() -> OroM
    185:185:react.gbench.Profiler getTickTimeProfiler() -> oDvW
    190:190:java.lang.Thread$State getLastState() -> bqtp
    195:195:double getActualTickTimeMS() -> AjHw
    200:200:double getLtt() -> rqDb
    205:205:long getLastTick() -> HBtu
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> LaUm
react.surge.server.WorldMonitor -> ArQm:
    boolean chunksChanged -> XUCc
    boolean dropChanged -> UJxT
    boolean tileChanged -> YGEU
    boolean livingChanged -> gqnl
    boolean totalChanged -> bsae
    boolean updated -> YNrh
    int totalChunks -> hSME
    int totalDrops -> lxkF
    int totalTiles -> ORUb
    int totalLiving -> BKpO
    int totalEntities -> mkLn
    int chunksLoaded -> XmqQ
    int chunksUnloaded -> toeA
    long ms -> mOjq
    24:43:void <init>() -> <init>
    48:73:void run() -> run
    void updated(int,int,int,int,int,int,int) -> ksfn
    80:85:void on(org.bukkit.event.world.ChunkLoadEvent) -> IyWN
    90:95:void on(org.bukkit.event.world.ChunkUnloadEvent) -> ksfn
    100:101:void on(org.bukkit.event.entity.EntitySpawnEvent) -> ksfn
    106:107:void on(org.bukkit.event.entity.EntityDeathEvent) -> ksfn
    112:113:void on(org.bukkit.event.player.PlayerDropItemEvent) -> ksfn
    118:119:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> ksfn
    124:125:void on(org.bukkit.event.block.BlockPlaceEvent) -> ksfn
    130:131:void on(org.bukkit.event.block.BlockBreakEvent) -> ksfn
    135:136:void doUpdate() -> JdAP
    140:191:void sample() -> uyVD
    195:201:void sampleTotalCount() -> Pmap
    205:211:void sampleLivingCount() -> qnAc
    215:251:void sampleTileCount() -> Rjvk
    255:261:void sampleDropCount() -> WHCV
    265:271:void sampleChunkCount() -> QqEp
react.surge.text.PhantomSpinner -> nSOo:
    react.surge.text.ProgressSpinner s -> OAVF
    react.surge.text.ProgressSpinner c -> GRpP
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> owtx:
    java.lang.String[] chars -> jYUd
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> ELjT
    react.surge.text.ProgressSpinner NETWORK -> yKnE
    react.surge.text.ProgressSpinner CIRCLES -> HxVv
    react.surge.text.ProgressSpinner RANDOMS -> tgSD
    react.surge.text.ProgressSpinner MERGERS -> NiGb
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> ssfa
    65:65:int getIndex() -> getIndex
react.surge.util.Amounts -> AaOv:
    react.surge.util.Amounts SINGLE -> plGm
    react.surge.util.Amounts DUAL -> XTco
    react.surge.util.Amounts TRI -> rPNa
    react.surge.util.Amounts QUAD -> veKn
    react.surge.util.Amounts HEX -> Rttt
    react.surge.util.Amounts OCTA -> ifuo
    int a -> a
    react.surge.util.Amounts[] ENUM$VALUES -> iMcu
    5:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:23:int a() -> a
    29:37:java.lang.String to(int) -> TVse
    1:1:react.surge.util.Amounts[] values() -> values
    1:1:react.surge.util.Amounts valueOf(java.lang.String) -> valueOf
react.surge.util.Anchor -> dUsY:
    int value() -> value
react.surge.util.Area -> DajG:
    org.bukkit.Location location -> Qqqr
    java.lang.Double radius -> XvgI
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> ksfn
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> gVrA
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> VejA
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> eYCp
    109:109:boolean isWithin(org.bukkit.Location) -> RPlW
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> leiL
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> ksfn
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> GkXb
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> qTMn
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> OjGa
    257:257:java.lang.Double getRadius() -> XuYu
    268:269:void setRadius(java.lang.Double) -> nkoF
    278:283:org.bukkit.Location random() -> XmJO
react.surge.util.Axis -> EeNH:
    react.surge.util.Axis X -> ifvT
    react.surge.util.Axis Y -> suTm
    react.surge.util.Axis Z -> twwL
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> KpbI
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> KMRG
    29:29:org.bukkit.util.Vector negative() -> uhjY
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> YwwO:
    react.surge.util.BlastResistance BARRIER -> Mefe
    react.surge.util.BlastResistance BEDROCK -> VFNY
    react.surge.util.BlastResistance COMMAND -> CFem
    react.surge.util.BlastResistance ENDER_PORTAL -> kTJe
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> QXaK
    react.surge.util.BlastResistance ANVIL -> yLRB
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> iUtR
    react.surge.util.BlastResistance OBSIDIAN -> smCs
    react.surge.util.BlastResistance ENDER_CHEST -> BTfR
    react.surge.util.BlastResistance WATER -> vdiq
    react.surge.util.BlastResistance LAVA -> CiIe
    react.surge.util.BlastResistance STATIONARY_WATER -> qLid
    react.surge.util.BlastResistance DRAGON_EGG -> YqYJ
    react.surge.util.BlastResistance ENDER_STONE -> oFdA
    react.surge.util.BlastResistance COAL_BLOCK -> twuc
    react.surge.util.BlastResistance DIAMOND_BLOCK -> AIRc
    react.surge.util.BlastResistance EMERALD_BLOCK -> ahNl
    react.surge.util.BlastResistance GOLD_BLOCK -> NOVc
    react.surge.util.BlastResistance IRON_BLOCK -> HNFJ
    react.surge.util.BlastResistance REDSTONE_BLOCK -> iVUB
    react.surge.util.BlastResistance BRICK -> Tixn
    react.surge.util.BlastResistance BRICK_STAIRS -> Chho
    react.surge.util.BlastResistance HARD_CLAY -> tfsg
    react.surge.util.BlastResistance STONE -> RdSx
    react.surge.util.BlastResistance SMOOTH_BRICK -> VFLv
    react.surge.util.BlastResistance SMOOTH_STAIRS -> TGvU
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> xcAD
    react.surge.util.BlastResistance STONE_SLAB2 -> kulJ
    react.surge.util.BlastResistance IRON_DOOR -> iVTU
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> aEkY
    react.surge.util.BlastResistance IRON_TRAPDOOR -> IQLJ
    react.surge.util.BlastResistance MOB_SPAWNER -> DIkk
    react.surge.util.BlastResistance WEB -> hBSR
    react.surge.util.BlastResistance DISPENSER -> RdVo
    react.surge.util.BlastResistance DROPPER -> USlw
    react.surge.util.BlastResistance FURNACE -> LcFY
    react.surge.util.BlastResistance BURNING_FURNACE -> nwHb
    react.surge.util.BlastResistance BEACON -> xYqU
    react.surge.util.BlastResistance COAL_ORE -> UBlR
    react.surge.util.BlastResistance COCOA -> iwxs
    react.surge.util.BlastResistance DIAMOND_ORE -> sApq
    react.surge.util.BlastResistance EMERALD_ORE -> NNxp
    react.surge.util.BlastResistance FENCE -> hcuG
    react.surge.util.BlastResistance FENCE_GATE -> FXap
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> opyN
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> QOpV
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> Wbcf
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> nnWQ
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> THYS
    react.surge.util.BlastResistance ACACIA_FENCE -> Abew
    react.surge.util.BlastResistance BIRCH_FENCE -> ahRH
    react.surge.util.BlastResistance DARK_OAK_FENCE -> SMgC
    react.surge.util.BlastResistance SPRUCE_FENCE -> IalG
    react.surge.util.BlastResistance JUNGLE_FENCE -> NXIu
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> wVlp
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> EgAu
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> YNwU
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> Rtvp
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> AcFd
    react.surge.util.BlastResistance QUARTZ_STAIRS -> AQes
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> Rlht
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> FHED
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> NWkg
    react.surge.util.BlastResistance WOOD_STAIRS -> RSVy
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> Wsgu
    react.surge.util.BlastResistance ACACIA_DOOR -> CXMS
    react.surge.util.BlastResistance BIRCH_DOOR -> Ashp
    react.surge.util.BlastResistance DARK_OAK_DOOR -> LRGG
    react.surge.util.BlastResistance SPRUCE_DOOR -> EEAk
    react.surge.util.BlastResistance JUNGLE_DOOR -> xYsm
    react.surge.util.BlastResistance GOLD_ORE -> qwbu
    react.surge.util.BlastResistance HOPPER -> HpNT
    react.surge.util.BlastResistance IRON_ORE -> Yynh
    react.surge.util.BlastResistance LAPIS_BLOCK -> xcEb
    react.surge.util.BlastResistance LAPIS_ORE -> BUJC
    react.surge.util.BlastResistance QUARTZ_ORE -> wWQS
    react.surge.util.BlastResistance REDSTONE_ORE -> whRb
    react.surge.util.BlastResistance TRAP_DOOR -> cLXG
    react.surge.util.BlastResistance WOOD -> WYvS
    react.surge.util.BlastResistance CHEST -> MwNA
    react.surge.util.BlastResistance TRAPPED_CHEST -> sJcx
    react.surge.util.BlastResistance WORKBENCH -> GSYH
    react.surge.util.BlastResistance CAULDRON -> nwKP
    react.surge.util.BlastResistance LOG -> bQeF
    react.surge.util.BlastResistance LOG_2 -> yLVI
    react.surge.util.BlastResistance BOOKSHELF -> tUwL
    react.surge.util.BlastResistance BANNER -> BLYm
    react.surge.util.BlastResistance STANDING_BANNER -> BvmW
    react.surge.util.BlastResistance WALL_BANNER -> MLVw
    react.surge.util.BlastResistance JACK_O_LANTERN -> NGJR
    react.surge.util.BlastResistance MELON_BLOCK -> FGbg
    react.surge.util.BlastResistance SKULL -> MUIO
    react.surge.util.BlastResistance PUMPKIN -> mIRn
    react.surge.util.BlastResistance SIGN -> fLnK
    react.surge.util.BlastResistance SIGN_POST -> agqk
    react.surge.util.BlastResistance WALL_SIGN -> HUxx
    react.surge.util.BlastResistance QUARTZ_BLOCK -> FaUk
    react.surge.util.BlastResistance NOTE_BLOCK -> LkWj
    react.surge.util.BlastResistance RED_SANDSTONE -> tgXe
    react.surge.util.BlastResistance SANDSTONE -> dXKP
    react.surge.util.BlastResistance WOOL -> Nhld
    react.surge.util.BlastResistance MONSTER_EGG -> GAuQ
    react.surge.util.BlastResistance RAILS -> qxCI
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> LbgO
    react.surge.util.BlastResistance DETECTOR_RAIL -> CFjl
    react.surge.util.BlastResistance POWERED_RAIL -> dXKL
    react.surge.util.BlastResistance CLAY -> KEpn
    react.surge.util.BlastResistance DIRT -> rjDT
    react.surge.util.BlastResistance GRASS -> diLX
    react.surge.util.BlastResistance GRAVEL -> KxxK
    react.surge.util.BlastResistance SPONGE -> PgEp
    react.surge.util.BlastResistance BREWING_STAND -> tpNQ
    react.surge.util.BlastResistance STONE_BUTTON -> bkYU
    react.surge.util.BlastResistance WOOD_BUTTON -> lOCy
    react.surge.util.BlastResistance CAKE_BLOCK -> UeTH
    react.surge.util.BlastResistance ICE -> DteE
    react.surge.util.BlastResistance PACKED_ICE -> PECb
    react.surge.util.BlastResistance LEVER -> BwNe
    react.surge.util.BlastResistance MYCEL -> mbfq
    react.surge.util.BlastResistance PISTON_BASE -> QPVi
    react.surge.util.BlastResistance PISTON_EXTENSION -> oiMt
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> SMlP
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> dWmQ
    react.surge.util.BlastResistance GOLD_PLATE -> JnGA
    react.surge.util.BlastResistance IRON_PLATE -> vBlv
    react.surge.util.BlastResistance STONE_PLATE -> vmaa
    react.surge.util.BlastResistance WOOD_PLATE -> OuDD
    react.surge.util.BlastResistance SAND -> PgEO
    react.surge.util.BlastResistance SOUL_SAND -> WRGY
    react.surge.util.BlastResistance CACTUS -> ahUV
    react.surge.util.BlastResistance LADDER -> EfeI
    react.surge.util.BlastResistance NETHERRACK -> WHuR
    react.surge.util.BlastResistance GLASS -> oFjM
    react.surge.util.BlastResistance THIN_GLASS -> EfeO
    react.surge.util.BlastResistance STAINED_GLASS -> fgCc
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> nKwW
    react.surge.util.BlastResistance GLOWSTONE -> rXcw
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> GKHt
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> LRHS
    react.surge.util.BlastResistance SEA_LANTERN -> PLqf
    react.surge.util.BlastResistance BED_BLOCK -> MTit
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> cLYF
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> VEqr
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> CWoA
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> rOrd
    react.surge.util.BlastResistance LEAVES -> hmJP
    react.surge.util.BlastResistance LEAVES_2 -> xsfo
    react.surge.util.BlastResistance SNOW -> nejB
    int br -> AIXP
    react.surge.util.BlastResistance[] ENUM$VALUES -> USpk
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> hISX
    175:190:int get(org.bukkit.Material) -> ksfn
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> LPOh:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> eYCp
react.surge.util.C -> HKsO:
    react.surge.util.C BLACK -> KWWm
    react.surge.util.C DARK_BLUE -> BTlx
    react.surge.util.C DARK_GREEN -> EUew
    react.surge.util.C DARK_AQUA -> mAGh
    react.surge.util.C DARK_RED -> EgHo
    react.surge.util.C DARK_PURPLE -> UTUB
    react.surge.util.C GOLD -> bIWv
    react.surge.util.C GRAY -> puDy
    react.surge.util.C DARK_GRAY -> LQiq
    react.surge.util.C BLUE -> eJQi
    react.surge.util.C GREEN -> lxwk
    react.surge.util.C AQUA -> qfeP
    react.surge.util.C RED -> IYcL
    react.surge.util.C LIGHT_PURPLE -> RmNp
    react.surge.util.C YELLOW -> MwRG
    react.surge.util.C WHITE -> nULS
    react.surge.util.C MAGIC -> cvnn
    react.surge.util.C BOLD -> LYxl
    react.surge.util.C STRIKETHROUGH -> UCRI
    react.surge.util.C UNDERLINE -> nTix
    react.surge.util.C ITALIC -> UBpc
    react.surge.util.C RESET -> bbiR
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> VqHo
    char code -> TbRQ
    boolean isFormat -> wVtP
    java.lang.String toString -> tpNm
    java.util.Map BY_ID -> Asmk
    java.util.Map BY_CHAR -> gjJF
    java.util.Map dyeChatMap -> sljk
    java.util.Map chatHexMap -> xkYP
    java.util.Map dyeHexMap -> Asmg
    int[] $SWITCH_TABLE$surge$util$C -> iDyb
    react.surge.util.C[] ENUM$VALUES -> DkuC
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> BmLG
    378:378:java.lang.String hex() -> KVBp
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> RPlW
    434:442:react.surge.util.C getByChar(java.lang.String) -> LGKt
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> IyWN
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> ksfn
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> IyWN
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> nkoF
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> EAvd
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> uxtl
    560:578:java.lang.String generateColorTable() -> Edsu
    588:588:org.bukkit.ChatColor chatColor() -> qTQc
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> OjGa
    632:679:byte getItemMeta() -> FhWx
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> Ojag
react.surge.util.C$1 -> HKsO$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> HKsO$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> HKsO$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> HKsO$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> HKsO$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> HKsO$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> HKsO$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> HKsO$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> HKsO$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> HKsO$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> HKsO$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> HKsO$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> HKsO$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> HKsO$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> HKsO$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> HKsO$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> HKsO$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> HKsO$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> HKsO$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> HKsO$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> HKsO$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> HKsO$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> BSRB:
    double number -> UnFk
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> Txtf
    23:25:react.surge.util.CDou add(double) -> iBlA
    30:32:react.surge.util.CDou sub(double) -> yQyh
    37:37:double get() -> get
    42:48:void circ() -> JSCA
react.surge.util.CMD -> pjXI:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> kvTs
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> bigk
    51:53:void execute(org.bukkit.command.CommandSender) -> nkoF
    60:77:void execute() -> execute
react.surge.util.CNum -> Mtth:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> vsgM
    23:25:react.surge.util.CNum add(int) -> gNIg
    30:32:react.surge.util.CNum sub(int) -> lwLE
    37:37:int get() -> get
    42:48:void circ() -> JSCA
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> yIki
react.surge.util.Chunks -> dMag:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> OOsA
    33:40:react.glang.GList getLoadedChunks() -> ggum
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> IyWN
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> ksfn
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> ksfn
    98:98:boolean unload(org.bukkit.Chunk) -> GbOr
    114:124:int unload(react.glang.GList,boolean,boolean) -> ksfn
    138:138:int unload(react.glang.GList,boolean) -> ksfn
    150:150:int unload(react.glang.GList) -> KwKa
    166:166:boolean isLoaded(java.lang.String,int,int) -> ksfn
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> nkoF
    201:205:void load(react.glang.GList) -> XJLb
react.surge.util.Cuboid -> ycoa:
    java.lang.String worldName -> RAyF
    int x1 -> wNcX
    int y1 -> VFUY
    int z1 -> wNcV
    int x2 -> pAac
    int y2 -> EDgI
    int z2 -> Nyto
    int[] $SWITCH_TABLE$surge$util$Axis -> tope
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> nfPM
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> ksfn
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> nkoF
    93:93:boolean hasPlayers() -> Thoj
    98:110:react.glang.GList getPlayers() -> Xkwf
    115:166:react.glang.GList getEntities() -> yJff
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> kkWb
    287:287:org.bukkit.Location getLowerNE() -> NNLt
    298:298:org.bukkit.Location getUpperSW() -> EvVs
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> lfck
    348:348:int getSizeY() -> nKGl
    358:358:int getSizeZ() -> hAEn
    368:368:int getLowerX() -> Jcby
    378:378:int getLowerY() -> ESrx
    388:388:int getLowerZ() -> HDLD
    398:398:int getUpperX() -> oNKQ
    408:408:int getUpperY() -> oNJu
    418:418:int getUpperZ() -> iTjI
    428:438:org.bukkit.block.Block[] corners() -> YyAW
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> ksfn
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> IyWN
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> nkoF
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> leiL
    546:546:boolean contains(int,int,int) -> JkXd
    558:558:boolean contains(org.bukkit.block.Block) -> RPlW
    570:570:boolean contains(org.bukkit.Location) -> MuCR
    580:580:int volume() -> eaof
    591:601:byte averageLightLevel() -> nAvQ
    612:612:react.surge.util.Cuboid contract() -> WGeD
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> ksfn
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> IyWN
    708:715:boolean containsOnly(org.bukkit.Material) -> IyWN
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> ksfn
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> VejA
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> ksfn
    786:800:java.util.List getChunks() -> jGKd
    815:819:void fill(int,byte) -> ksfn
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> MAwO
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> nJfd
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> HfMX
react.surge.util.Cuboid$1 -> ycoa$1:
    react.surge.util.Cuboid this$0 -> EgKP
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> MuCR
    1:1:java.lang.Object onAdapt(java.lang.Object) -> eYCp
react.surge.util.Cuboid$CuboidDirection -> ycoa$ksfn:
    react.surge.util.Cuboid$CuboidDirection North -> Pwjq
    react.surge.util.Cuboid$CuboidDirection East -> xQii
    react.surge.util.Cuboid$CuboidDirection South -> tpRN
    react.surge.util.Cuboid$CuboidDirection West -> KOIv
    react.surge.util.Cuboid$CuboidDirection Up -> EUhk
    react.surge.util.Cuboid$CuboidDirection Down -> cUOU
    react.surge.util.Cuboid$CuboidDirection Horizontal -> rjKV
    react.surge.util.Cuboid$CuboidDirection Vertical -> qVFm
    react.surge.util.Cuboid$CuboidDirection Both -> neoC
    react.surge.util.Cuboid$CuboidDirection Unknown -> gYKB
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> nfPM
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> vdtp
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> qvTM
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> HfMX
react.surge.util.Cuboid$CuboidIterator -> ycoa$IyWN:
    org.bukkit.World w -> VVxm
    int baseX -> bcKx
    int baseY -> oaBA
    int baseZ -> CqdY
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> pAaN
    int sizeY -> XeoI
    int sizeZ -> jQRI
    react.surge.util.Cuboid this$0 -> EgKP
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> pGsL:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> PTJI:
    react.glang.GList buffer -> ptdd
    boolean dbg -> fLtl
    int kf -> MfPn
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> leiL
    41:49:void l(java.lang.Object,java.lang.String) -> IyWN
    53:54:void s(java.lang.Object,java.lang.String) -> nkoF
    58:69:void cdb() -> VxFh
    73:79:void v(java.lang.Object,java.lang.String) -> leiL
    83:84:void w(java.lang.Object,java.lang.String) -> JkXd
    88:89:void f(java.lang.Object,java.lang.String) -> VejA
    93:106:void l(java.lang.String) -> IhVi
    110:117:void s(java.lang.String) -> qcwJ
    121:135:void v(java.lang.String) -> Husv
    139:146:void w(java.lang.String) -> VUKF
    150:157:void f(java.lang.String) -> TVse
react.surge.util.DMSRequire -> EBgq:
    react.surge.util.DMSRequirement value() -> jGLL
react.surge.util.DMSRequirement -> GcBQ:
    react.surge.util.DMSRequirement SQL -> QGhc
    react.surge.util.DMSRequirement[] ENUM$VALUES -> WtNd
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> APPV:
    react.surge.util.Depend VAULT -> qLtH
    react.surge.util.Depend FAWE -> Dcfc
    react.surge.util.Depend WORLDEDIT -> oWnu
    react.surge.util.Depend PROTOLIB -> gXlK
    react.surge.util.Depend CITIZENS -> DBGG
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> JCWa
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> rhLp:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> fvUC
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> ccpl:
    react.surge.util.DimensionFace X -> ffiv
    react.surge.util.DimensionFace Y -> AANK
    react.surge.util.DimensionFace Z -> oPBv
    react.surge.util.DimensionFace[] ENUM$VALUES -> BDQF
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> MKAY:
    react.surge.util.Direction U -> nCmr
    react.surge.util.Direction D -> vdxC
    react.surge.util.Direction N -> DdIx
    react.surge.util.Direction S -> ReBa
    react.surge.util.Direction E -> XCoT
    react.surge.util.Direction W -> yTmj
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> wqLI
    int[] $SWITCH_TABLE$surge$util$Direction -> DBGe
    react.surge.util.Direction[] ENUM$VALUES -> iWBH
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> UtcK
    61:61:int x() -> rVqn
    66:66:int y() -> nSWY
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> wgCT
    81:81:react.glang.GList news() -> cRxA
    86:86:react.glang.GList udnews() -> dMjX
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> DYFE
    115:147:react.surge.util.Direction fromByte(byte) -> MuCR
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> IiRr
react.surge.util.DynamicConfiguration -> IqYH:
react.surge.util.DynamicTracker -> PCHh:
react.surge.util.Embedded -> Vnld:
    react.glang.GList get() -> UBAu
    void add(java.lang.Object) -> add
react.surge.util.FU -> DHVl:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> ksfn
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> IyWN
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> JkXd
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> VejA
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> prfr:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> vsgM
react.surge.util.Health -> TFdN:
    double hp -> YGRS
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> doom
    41:41:double getHearts() -> VUei
    51:51:double getHalfHearts() -> Nxbf
    61:61:int getFlatHalfHearts() -> klTo
react.surge.util.IO -> mOjq:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> vQtc:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> ksfn
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> ksfn
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> ksfn
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> ksfn
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> ksfn
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> IyWN
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> nkoF
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> leiL
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> ksfn
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> ksfn
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> ksfn
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> ksfn
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> JkXd
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> VejA
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> eYCp
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> RPlW
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> OjGa
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> ksfn
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> MuCR
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> kACR
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> ksfn
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> ksfn
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> IyWN
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> ksfn
react.surge.util.MSound -> SedL:
    react.surge.util.MSound AMBIENCE_CAVE -> aqLb
    react.surge.util.MSound AMBIENCE_RAIN -> vvXs
    react.surge.util.MSound AMBIENCE_THUNDER -> PLxG
    react.surge.util.MSound ANVIL_BREAK -> CXUp
    react.surge.util.MSound ANVIL_LAND -> YWrm
    react.surge.util.MSound ANVIL_USE -> PfkJ
    react.surge.util.MSound ARROW_HIT -> ptfg
    react.surge.util.MSound BURP -> iNPL
    react.surge.util.MSound CHEST_CLOSE -> Ijfu
    react.surge.util.MSound CHEST_OPEN -> THcd
    react.surge.util.MSound CLICK -> cCnK
    react.surge.util.MSound DOOR_CLOSE -> mblW
    react.surge.util.MSound DOOR_OPEN -> sKLV
    react.surge.util.MSound DRINK -> aOIk
    react.surge.util.MSound EAT -> fVHj
    react.surge.util.MSound EXPLODE -> cToQ
    react.surge.util.MSound FALL_BIG -> kTUx
    react.surge.util.MSound FALL_SMALL -> AAOm
    react.surge.util.MSound FIRE -> XCpn
    react.surge.util.MSound FIRE_IGNITE -> yndJ
    react.surge.util.MSound FIZZ -> yere
    react.surge.util.MSound FUSE -> slrK
    react.surge.util.MSound GLASS -> ukHo
    react.surge.util.MSound HURT_FLESH -> OSJQ
    react.surge.util.MSound ITEM_BREAK -> OJXs
    react.surge.util.MSound ITEM_PICKUP -> dqhV
    react.surge.util.MSound LAVA -> oyvo
    react.surge.util.MSound LAVA_POP -> uQVH
    react.surge.util.MSound LEVEL_UP -> DuNU
    react.surge.util.MSound MINECART_BASE -> tNSG
    react.surge.util.MSound MINECART_INSIDE -> yCni
    react.surge.util.MSound NOTE_BASS -> DIvq
    react.surge.util.MSound NOTE_PIANO -> SxgG
    react.surge.util.MSound NOTE_BASS_DRUM -> Tjgu
    react.surge.util.MSound NOTE_STICKS -> drGc
    react.surge.util.MSound NOTE_BASS_GUITAR -> nvsa
    react.surge.util.MSound NOTE_SNARE_DRUM -> bbnv
    react.surge.util.MSound NOTE_PLING -> XesF
    react.surge.util.MSound ORB_PICKUP -> NWty
    react.surge.util.MSound PISTON_EXTEND -> diVT
    react.surge.util.MSound PISTON_RETRACT -> AQqT
    react.surge.util.MSound PORTAL -> Lsqs
    react.surge.util.MSound PORTAL_TRAVEL -> BUUS
    react.surge.util.MSound PORTAL_TRIGGER -> vnJk
    react.surge.util.MSound SHOOT_ARROW -> Lbpn
    react.surge.util.MSound SPLASH -> VqOm
    react.surge.util.MSound SPLASH2 -> MDQj
    react.surge.util.MSound STEP_GRASS -> ShFc
    react.surge.util.MSound STEP_GRAVEL -> oyvN
    react.surge.util.MSound STEP_LADDER -> vKfR
    react.surge.util.MSound STEP_SAND -> YFrv
    react.surge.util.MSound STEP_SNOW -> fwle
    react.surge.util.MSound STEP_STONE -> cfSb
    react.surge.util.MSound STEP_WOOD -> msov
    react.surge.util.MSound STEP_WOOL -> tWBg
    react.surge.util.MSound SWIM -> vByC
    react.surge.util.MSound WATER -> sKQn
    react.surge.util.MSound WOOD_CLICK -> oPGX
    react.surge.util.MSound BAT_DEATH -> EEMo
    react.surge.util.MSound BAT_HURT -> eRii
    react.surge.util.MSound BAT_IDLE -> LRSN
    react.surge.util.MSound BAT_LOOP -> Khaj
    react.surge.util.MSound BAT_TAKEOFF -> AkeT
    react.surge.util.MSound BLAZE_BREATH -> uYhc
    react.surge.util.MSound BLAZE_DEATH -> XngS
    react.surge.util.MSound BLAZE_HIT -> eBIL
    react.surge.util.MSound CAT_HISS -> yesp
    react.surge.util.MSound CAT_HIT -> yvvD
    react.surge.util.MSound CAT_MEOW -> YrLL
    react.surge.util.MSound CAT_PURR -> KWaL
    react.surge.util.MSound CAT_PURREOW -> eRiv
    react.surge.util.MSound CHICKEN_IDLE -> mkbj
    react.surge.util.MSound CHICKEN_HURT -> IPym
    react.surge.util.MSound CHICKEN_EGG_POP -> JnQE
    react.surge.util.MSound CHICKEN_WALK -> CrLx
    react.surge.util.MSound COW_IDLE -> Ocjv
    react.surge.util.MSound COW_HURT -> gram
    react.surge.util.MSound COW_WALK -> dOfB
    react.surge.util.MSound CREEPER_HISS -> rrbA
    react.surge.util.MSound CREEPER_DEATH -> DAja
    react.surge.util.MSound ENDERDRAGON_DEATH -> Ijjw
    react.surge.util.MSound ENDERDRAGON_GROWL -> fEJm
    react.surge.util.MSound ENDERDRAGON_HIT -> bcSQ
    react.surge.util.MSound ENDERDRAGON_WINGS -> UByb
    react.surge.util.MSound ENDERMAN_DEATH -> coGX
    react.surge.util.MSound ENDERMAN_HIT -> ShIG
    react.surge.util.MSound ENDERMAN_IDLE -> xAMf
    react.surge.util.MSound ENDERMAN_TELEPORT -> HWHN
    react.surge.util.MSound ENDERMAN_SCREAM -> XfVf
    react.surge.util.MSound ENDERMAN_STARE -> uYgQ
    react.surge.util.MSound GHAST_SCREAM -> Tjjs
    react.surge.util.MSound GHAST_SCREAM2 -> pkyk
    react.surge.util.MSound GHAST_CHARGE -> Iayy
    react.surge.util.MSound GHAST_DEATH -> MTuM
    react.surge.util.MSound GHAST_FIREBALL -> yoDt
    react.surge.util.MSound GHAST_MOAN -> uIJL
    react.surge.util.MSound IRONGOLEM_DEATH -> seGI
    react.surge.util.MSound IRONGOLEM_HIT -> UwCK
    react.surge.util.MSound IRONGOLEM_THROW -> yCsd
    react.surge.util.MSound IRONGOLEM_WALK -> VOQc
    react.surge.util.MSound MAGMACUBE_WALK -> wOPK
    react.surge.util.MSound MAGMACUBE_WALK2 -> ahcE
    react.surge.util.MSound MAGMACUBE_JUMP -> yLeO
    react.surge.util.MSound PIG_IDLE -> xAPx
    react.surge.util.MSound PIG_DEATH -> Fitx
    react.surge.util.MSound PIG_WALK -> Lbub
    react.surge.util.MSound SHEEP_IDLE -> FsGc
    react.surge.util.MSound SHEEP_SHEAR -> tyKd
    react.surge.util.MSound SHEEP_WALK -> HFIT
    react.surge.util.MSound SILVERFISH_HIT -> hdgF
    react.surge.util.MSound SILVERFISH_KILL -> lhbe
    react.surge.util.MSound SILVERFISH_IDLE -> ViDW
    react.surge.util.MSound SILVERFISH_WALK -> hugx
    react.surge.util.MSound SKELETON_IDLE -> CPKN
    react.surge.util.MSound SKELETON_DEATH -> FbFX
    react.surge.util.MSound SKELETON_HURT -> TYkn
    react.surge.util.MSound SKELETON_WALK -> MoJs
    react.surge.util.MSound SLIME_ATTACK -> WbvD
    react.surge.util.MSound SLIME_WALK -> DRmq
    react.surge.util.MSound SLIME_WALK2 -> FivF
    react.surge.util.MSound SPIDER_IDLE -> lqRs
    react.surge.util.MSound SPIDER_DEATH -> uIIX
    react.surge.util.MSound SPIDER_WALK -> WQsx
    react.surge.util.MSound WITHER_DEATH -> OBMS
    react.surge.util.MSound WITHER_HURT -> QjUt
    react.surge.util.MSound WITHER_IDLE -> EVQB
    react.surge.util.MSound WITHER_SHOOT -> KWaU
    react.surge.util.MSound WITHER_SPAWN -> tWFx
    react.surge.util.MSound WOLF_BARK -> AJFW
    react.surge.util.MSound WOLF_DEATH -> hScm
    react.surge.util.MSound WOLF_GROWL -> COjv
    react.surge.util.MSound WOLF_HOWL -> QbDa
    react.surge.util.MSound WOLF_HURT -> EfqY
    react.surge.util.MSound WOLF_PANT -> pdLv
    react.surge.util.MSound WOLF_SHAKE -> AtYY
    react.surge.util.MSound WOLF_WALK -> nLdd
    react.surge.util.MSound WOLF_WHINE -> PENd
    react.surge.util.MSound ZOMBIE_METAL -> bQrE
    react.surge.util.MSound ZOMBIE_WOOD -> KXCH
    react.surge.util.MSound ZOMBIE_WOODBREAK -> yets
    react.surge.util.MSound ZOMBIE_IDLE -> LkfX
    react.surge.util.MSound ZOMBIE_DEATH -> gYQf
    react.surge.util.MSound ZOMBIE_HURT -> cewK
    react.surge.util.MSound ZOMBIE_INFECT -> Efqj
    react.surge.util.MSound ZOMBIE_UNFECT -> PVQC
    react.surge.util.MSound ZOMBIE_REMEDY -> cewH
    react.surge.util.MSound ZOMBIE_WALK -> YXYp
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> TtAf
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> PpEf
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> nMHd
    react.surge.util.MSound ZOMBIE_PIG_HURT -> edPU
    react.surge.util.MSound DIG_WOOL -> oPKf
    react.surge.util.MSound DIG_GRASS -> yCuT
    react.surge.util.MSound DIG_GRAVEL -> bbwV
    react.surge.util.MSound DIG_SAND -> qUpS
    react.surge.util.MSound DIG_SNOW -> CrPt
    react.surge.util.MSound DIG_STONE -> BLhi
    react.surge.util.MSound DIG_WOOD -> hBdr
    react.surge.util.MSound FIREWORK_BLAST -> FGtk
    react.surge.util.MSound FIREWORK_BLAST2 -> BMIc
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> lhdP
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> HhNl
    react.surge.util.MSound FIREWORK_TWINKLE -> NrQF
    react.surge.util.MSound FIREWORK_TWINKLE2 -> Eftr
    react.surge.util.MSound FIREWORK_LAUNCH -> yLfK
    react.surge.util.MSound SUCCESSFUL_HIT -> QivE
    react.surge.util.MSound HORSE_ANGRY -> wpsO
    react.surge.util.MSound HORSE_ARMOR -> eAkX
    react.surge.util.MSound HORSE_BREATHE -> racq
    react.surge.util.MSound HORSE_DEATH -> mlHB
    react.surge.util.MSound HORSE_GALLOP -> WIdT
    react.surge.util.MSound HORSE_HIT -> kvaX
    react.surge.util.MSound HORSE_IDLE -> GTIO
    react.surge.util.MSound HORSE_JUMP -> mcVF
    react.surge.util.MSound HORSE_LAND -> EVSX
    react.surge.util.MSound HORSE_SADDLE -> vLLv
    react.surge.util.MSound HORSE_SOFT -> RTGv
    react.surge.util.MSound HORSE_WOOD -> xcTi
    react.surge.util.MSound DONKEY_ANGRY -> yvyA
    react.surge.util.MSound DONKEY_DEATH -> hvLo
    react.surge.util.MSound DONKEY_HIT -> puSb
    react.surge.util.MSound DONKEY_IDLE -> wpuq
    react.surge.util.MSound HORSE_SKELETON_DEATH -> Cqqf
    react.surge.util.MSound HORSE_SKELETON_HIT -> vLQL
    react.surge.util.MSound HORSE_SKELETON_IDLE -> QHWB
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> qoef
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> vKou
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> WRXc
    react.surge.util.MSound VILLAGER_DEATH -> KyjO
    react.surge.util.MSound VILLAGER_HAGGLE -> Dcsd
    react.surge.util.MSound VILLAGER_HIT -> gjXV
    react.surge.util.MSound VILLAGER_IDLE -> EgXG
    react.surge.util.MSound VILLAGER_NO -> OApT
    react.surge.util.MSound VILLAGER_YES -> mtYr
    java.lang.String pre19sound -> ynlD
    java.lang.String post19sound -> qUqn
    org.bukkit.Sound resolvedSound -> yeyq
    react.surge.util.MSound[] ENUM$VALUES -> vmsD
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> MJkY
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> TOWb:
    org.bukkit.Material material -> cUYu
    java.lang.Byte data -> aOSt
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> ESuW
    79:80:void setData(java.lang.Byte) -> ksfn
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> FpbX:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> gNIg
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> CMnQ
    68:68:boolean isAnyOnline() -> dopa
    80:80:react.glang.GList inWorld(org.bukkit.World) -> fKEC
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> KwKa
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> ksfn
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> ksfn
    143:144:void disable(org.bukkit.entity.Player) -> xykW
    154:155:void enable(org.bukkit.entity.Player) -> XJMY
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> ksfn
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> IyWN
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> HmbV
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> ksfn
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> Txtf
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> nkoF
    300:300:boolean canFindPlayer(java.lang.String) -> lwLE
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> yIki
    338:345:react.glang.GList onlinePlayers() -> kdCp
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> iBlA
    368:371:void clear(org.bukkit.entity.Player) -> yQyh
    381:385:void clearEffects(org.bukkit.entity.Player) -> uFRW
    398:399:void heal(org.bukkit.entity.Player,double) -> ksfn
    409:410:void heal(org.bukkit.entity.Player) -> JcIs
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> ivTX
    432:433:void resetHunger(org.bukkit.entity.Player) -> vsiC
    443:444:void kill(org.bukkit.entity.Player) -> bWla
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> SKaT
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> cuBs
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> ksfn
react.surge.util.P$1 -> FpbX$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> MuCR
    1:1:java.lang.Object onAdapt(java.lang.Object) -> eYCp
react.surge.util.P$2 -> FpbX$2:
    java.lang.Double val$doff -> aOTT
    org.bukkit.entity.Player val$e -> heKC
    org.bukkit.entity.Entity[] val$result -> JCaL
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> kACR
react.surge.util.PE -> PSlO:
    react.surge.util.PE ABSORPTION -> oOkd
    react.surge.util.PE BLINDNESS -> pBMw
    react.surge.util.PE CONFUSION -> hdil
    react.surge.util.PE DAMAGE_RESISTANCE -> utAH
    react.surge.util.PE FAST_DIGGING -> Sgmp
    react.surge.util.PE FIRE_RESISTANCE -> UKpl
    react.surge.util.PE GLOWING -> QPgF
    react.surge.util.PE HARM -> COoE
    react.surge.util.PE HEAL -> Uvgr
    react.surge.util.PE HEALTH_BOOST -> JTeb
    react.surge.util.PE HUNGER -> ucBd
    react.surge.util.PE INCREASE_DAMAGE -> drRm
    react.surge.util.PE INVISIBILITY -> qUuD
    react.surge.util.PE JUMP -> jYpy
    react.surge.util.PE LEVITATION -> SWPW
    react.surge.util.PE LUCK -> UwHk
    react.surge.util.PE NIGHT_VISION -> CrUX
    react.surge.util.PE POISON -> ignu
    react.surge.util.PE REGENERATION -> TjtP
    react.surge.util.PE SATURATION -> pBPb
    react.surge.util.PE SLOW -> VOXO
    react.surge.util.PE SLOW_DIGGING -> NPRN
    react.surge.util.PE SPEED -> DuXb
    react.surge.util.PE UNLUCK -> ucCB
    react.surge.util.PE WATER_BREATHING -> sCJB
    react.surge.util.PE WEAKNESS -> igoB
    react.surge.util.PE WITHER -> LIhk
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> ksfn
    144:144:react.surge.util.PE d(int) -> VKxT
    156:156:react.surge.util.PE a(int) -> UbhM
    166:166:org.bukkit.potion.PotionEffect c() -> sjyb
    177:178:void c(org.bukkit.entity.LivingEntity) -> VejA
    182:183:void crm(org.bukkit.entity.LivingEntity) -> eYCp
    187:188:void rm(org.bukkit.entity.LivingEntity) -> RPlW
react.surge.util.ParticleEffect -> RYrL:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> hKYj
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> NOno
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> SVmx
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> RTKu
    react.surge.util.ParticleEffect WATER_BUBBLE -> wFdR
    react.surge.util.ParticleEffect WATER_SPLASH -> ffuX
    react.surge.util.ParticleEffect WATER_WAKE -> dqpe
    react.surge.util.ParticleEffect SUSPENDED -> Kpyb
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> kwFw
    react.surge.util.ParticleEffect CRIT -> yTyg
    react.surge.util.ParticleEffect CRIT_MAGIC -> DdVI
    react.surge.util.ParticleEffect SMOKE_NORMAL -> mbyO
    react.surge.util.ParticleEffect SMOKE_LARGE -> IABB
    react.surge.util.ParticleEffect SPELL -> JegK
    react.surge.util.ParticleEffect SPELL_INSTANT -> pcrH
    react.surge.util.ParticleEffect SPELL_MOB -> aGEq
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> aGIO
    react.surge.util.ParticleEffect SPELL_WITCH -> DdWy
    react.surge.util.ParticleEffect DRIP_WATER -> uQbd
    react.surge.util.ParticleEffect DRIP_LAVA -> BxDd
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> lNwt
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> uABQ
    react.surge.util.ParticleEffect TOWN_AURA -> ShSu
    react.surge.util.ParticleEffect NOTE -> JfKB
    react.surge.util.ParticleEffect PORTAL -> kegO
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> Aknr
    react.surge.util.ParticleEffect FLAME -> ptvU
    react.surge.util.ParticleEffect LAVA -> vDEC
    react.surge.util.ParticleEffect FOOTSTEP -> tEnH
    react.surge.util.ParticleEffect CLOUD -> AInB
    react.surge.util.ParticleEffect REDSTONE -> fVWT
    react.surge.util.ParticleEffect SNOWBALL -> TbdX
    react.surge.util.ParticleEffect SNOW_SHOVEL -> OSTs
    react.surge.util.ParticleEffect SLIME -> Nicw
    react.surge.util.ParticleEffect HEART -> gakL
    react.surge.util.ParticleEffect BARRIER -> MLnX
    react.surge.util.ParticleEffect ITEM_CRACK -> nMNL
    react.surge.util.ParticleEffect BLOCK_CRACK -> whho
    react.surge.util.ParticleEffect BLOCK_DUST -> KWjP
    react.surge.util.ParticleEffect WATER_DROP -> cxCG
    react.surge.util.ParticleEffect ITEM_TAKE -> liIv
    react.surge.util.ParticleEffect MOB_APPEARANCE -> ENHy
    react.surge.util.ParticleEffect DRAGON_BREATH -> pKCW
    react.surge.util.ParticleEffect END_ROD -> BxER
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> jQbJ
    react.surge.util.ParticleEffect SWEEP_ATTACK -> aiMs
    java.util.Map NAME_MAP -> bkoq
    java.util.Map ID_MAP -> groY
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> xIlL
    java.util.List properties -> wFiK
    react.surge.util.ParticleEffect[] ENUM$VALUES -> lXKt
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> PdvR
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> ksfn
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> kkWb
    557:565:react.surge.util.ParticleEffect fromId(int) -> uhTK
    577:578:boolean isWater(org.bukkit.Location) -> GbPI
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> ksfn
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> ksfn
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> ksfn
    665:681:void display(float,int,org.bukkit.Location,double) -> ksfn
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> ksfn
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> ksfn
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> ksfn
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> ksfn
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> ksfn
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> ksfn
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> ksfn
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> ksfn
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> ksfn
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> ksfn
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> ksfn
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> ksfn
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> ksfn
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> ksfn
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> RYrL$ksfn:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> RYrL$IyWN:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> RYrL$nkoF:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> FpkX
    1594:1594:float getValueY() -> RHyT
    1605:1605:float getValueZ() -> IiSm
react.surge.util.ParticleEffect$OrdinaryColor -> RYrL$leiL:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> FpkX
    1526:1526:float getValueY() -> RHyT
    1537:1537:float getValueZ() -> IiSm
react.surge.util.ParticleEffect$ParticleColor -> RYrL$JkXd:
    1383:1383:void <init>() -> <init>
    float getValueX() -> FpkX
    float getValueY() -> RHyT
    float getValueZ() -> IiSm
react.surge.util.ParticleEffect$ParticleColorException -> RYrL$VejA:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> RYrL$eYCp:
    org.bukkit.Material material -> cUYu
    byte data -> cxEY
    int[] packetData -> WdAb
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> AYIu
    1309:1309:java.lang.String getPacketDataString() -> LGiG
react.surge.util.ParticleEffect$ParticleDataException -> RYrL$RPlW:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> RYrL$OjGa:
    int version -> version
    java.lang.Class enumParticle -> dYDu
    java.lang.reflect.Constructor packetConstructor -> hdqM
    java.lang.reflect.Method getHandle -> orVp
    java.lang.reflect.Field playerConnection -> dOsM
    java.lang.reflect.Method sendPacket -> nLoi
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> wymf
    float offsetX -> BxGC
    float offsetY -> Bweb
    float offsetZ -> uYth
    float speed -> oXdW
    int amount -> KgTm
    boolean longDistance -> pJfG
    react.surge.util.ParticleEffect$ParticleData data -> mkpN
    java.lang.Object packet -> rbMb
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> qdWP
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> ksfn
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> IyWN
    2004:2018:void sendTo(org.bukkit.Location,double) -> IyWN
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> RYrL$OjGa$ksfn:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> RYrL$OjGa$IyWN:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> RYrL$OjGa$nkoF:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> RYrL$MuCR:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> YHER
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> orVT
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> hTOh
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> jshG
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> XDaE
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> RYrL$kACR:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> IWhb:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> VKxT
react.surge.util.Persist -> RIRH:
react.surge.util.Platform -> SfHA:
    boolean ENABLE -> ubfE
    double PROC_CPU -> groP
    11:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    253:258:java.lang.String getVersion() -> getVersion
    263:268:java.lang.String getName() -> getName
    273:273:com.sun.management.OperatingSystemMXBean getSystem() -> bYIc
    271:271:com.sun.management.OperatingSystemMXBean access$0() -> WPXv
react.surge.util.Platform$CPU -> SfHA$ksfn:
    198:198:void <init>() -> <init>
    202:207:int getAvailableProcessors() -> getAvailableProcessors
    212:217:double getCPULoad() -> wwgO
    222:227:double getProcessCPULoad() -> ThqB
    232:237:double getLiveProcessCPULoad() -> sjyY
    242:247:java.lang.String getArchitecture() -> VgGd
react.surge.util.Platform$ENVIRONMENT -> SfHA$IyWN:
    14:14:void <init>() -> <init>
    18:18:boolean canRunBatch() -> RIXb
    23:28:java.lang.String getJavaHome() -> LYIe
    33:38:java.lang.String getJavaVendor() -> xHFR
    43:48:java.lang.String getJavaVersion() -> Knwa
react.surge.util.Platform$MEMORY -> SfHA$nkoF:
    119:119:void <init>() -> <init>
react.surge.util.Platform$MEMORY$PHYSICAL -> SfHA$nkoF$ksfn:
    121:121:void <init>() -> <init>
    125:130:long getTotalMemory() -> gqHa
    135:140:long getFreeMemory() -> LHHa
    145:150:long getUsedMemory() -> wgEV
react.surge.util.Platform$MEMORY$VIRTUAL -> SfHA$nkoF$IyWN:
    154:154:void <init>() -> <init>
    158:163:long getTotalMemory() -> gqHa
    168:173:long getFreeMemory() -> LHHa
    178:183:long getUsedMemory() -> wgEV
    188:193:long getCommittedVirtualMemory() -> SDKy
react.surge.util.Platform$STORAGE -> SfHA$leiL:
    52:52:void <init>() -> <init>
    56:63:long getAbsoluteTotalSpace() -> UlUQ
    68:68:long getTotalSpace() -> getTotalSpace
    73:73:long getTotalSpace(java.io.File) -> eYCp
    78:85:long getAbsoluteFreeSpace() -> hjye
    90:90:long getFreeSpace() -> getFreeSpace
    95:95:long getFreeSpace(java.io.File) -> RPlW
    100:100:long getUsedSpace() -> UIse
    105:105:long getUsedSpace(java.io.File) -> OjGa
    110:110:long getAbsoluteUsedSpace() -> oMoB
    115:115:java.io.File[] getRoots() -> getRoots
react.surge.util.PluginUtil -> RkUF:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> JkXd
    78:88:void enable(java.lang.String) -> UbhM
    95:99:void enableAll() -> OkFj
    109:113:void disable(org.bukkit.plugin.Plugin) -> VejA
    120:124:void disableAll() -> bilN
    135:135:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> eYCp
    149:156:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> ksfn
    168:173:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> uhTK
    183:186:java.util.List getPluginNames(boolean) -> UQdV
    198:201:java.lang.String getPluginVersion(java.lang.String) -> DaXY
    214:236:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> RPlW
    251:330:java.util.List findByCommand(java.lang.String) -> PJhH
    351:352:void load(org.bukkit.plugin.Plugin) -> OjGa
    356:378:java.lang.String getPluginFileName(java.lang.String) -> xhnw
    383:405:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> ksfn
    418:470:void load(java.lang.String) -> load
    482:487:void reload(org.bukkit.plugin.Plugin) -> MuCR
    494:498:void reloadAll() -> Sepm
    510:636:void unload(org.bukkit.plugin.Plugin) -> kACR
react.surge.util.PoolCount -> dDsV:
react.surge.util.PoolDescriber -> kAYB:
react.surge.util.PoolNanoThrottle -> RkTr:
react.surge.util.PositionalSelector -> ycrQ:
    react.glang.GSet allowedChunks -> rPkU
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> jiSl
    39:40:void addChunk(org.bukkit.Chunk) -> XJLb
    44:44:react.glang.GSet getAllowedChunks() -> Yxce
react.surge.util.Protocol -> QqBr:
    react.surge.util.Protocol LATEST -> edYJ
    react.surge.util.Protocol R1_12_2 -> fUxX
    react.surge.util.Protocol R1_12_2_PRE -> Ocwg
    react.surge.util.Protocol R1_12_1 -> Ijvx
    react.surge.util.Protocol R1_12 -> YYEP
    react.surge.util.Protocol R1_11_2 -> nMOa
    react.surge.util.Protocol R1_11_1 -> HFRV
    react.surge.util.Protocol R1_11 -> xJLN
    react.surge.util.Protocol R1_10_2 -> YXcn
    react.surge.util.Protocol R1_10_1 -> aOYt
    react.surge.util.Protocol R1_10 -> kehh
    react.surge.util.Protocol R1_9_4 -> cMPJ
    react.surge.util.Protocol R1_9_3 -> dGbB
    react.surge.util.Protocol R1_9_2 -> XVAg
    react.surge.util.Protocol R1_9_1 -> FQMs
    react.surge.util.Protocol R1_9 -> daUR
    react.surge.util.Protocol R1_8_9 -> YPSx
    react.surge.util.Protocol R1_8_8 -> IIVJ
    react.surge.util.Protocol R1_8_7 -> AkrO
    react.surge.util.Protocol R1_8_6 -> tFOi
    react.surge.util.Protocol R1_8_5 -> HxwB
    react.surge.util.Protocol R1_8_4 -> TYul
    react.surge.util.Protocol R1_8_3 -> uRDO
    react.surge.util.Protocol R1_8_2 -> ShWg
    react.surge.util.Protocol R1_8_1 -> tWUG
    react.surge.util.Protocol R1_8 -> SgwG
    react.surge.util.Protocol R1_7_10 -> tVsc
    react.surge.util.Protocol R1_7_9 -> CHFw
    react.surge.util.Protocol R1_7_8 -> RLCU
    react.surge.util.Protocol R1_7_7 -> bdCD
    react.surge.util.Protocol R1_7_6 -> oHFI
    react.surge.util.Protocol R1_7_5 -> SNfA
    react.surge.util.Protocol R1_7_4 -> hKaB
    react.surge.util.Protocol R1_7_3 -> kejt
    react.surge.util.Protocol R1_7_2 -> HhXs
    react.surge.util.Protocol R1_7_1 -> Gmew
    react.surge.util.Protocol B1_6_4 -> RLDG
    react.surge.util.Protocol B1_6_3 -> wiNf
    react.surge.util.Protocol B1_6_2 -> iNck
    react.surge.util.Protocol B1_6_1 -> OJjG
    react.surge.util.Protocol B1_5_2 -> JwOE
    react.surge.util.Protocol B1_5_1 -> liNc
    react.surge.util.Protocol B1_5 -> XMRh
    react.surge.util.Protocol B1_4_7 -> wiNQ
    react.surge.util.Protocol B1_4_6 -> SyXV
    react.surge.util.Protocol B1_4_5 -> JelX
    react.surge.util.Protocol B1_4_4 -> yLox
    react.surge.util.Protocol B1_4_2 -> QsRS
    react.surge.util.Protocol B1_3_2 -> etys
    react.surge.util.Protocol B1_3_1 -> JTkE
    react.surge.util.Protocol B1_2_5 -> DmMK
    react.surge.util.Protocol B1_2_4 -> kKxQ
    react.surge.util.Protocol EARLIEST -> drXQ
    react.surge.util.Protocol UNKNOWN -> KWmj
    int version -> version
    java.lang.String packageVersion -> SDYD
    java.lang.String versionName -> GdtA
    boolean netty -> pBWB
    react.surge.util.Protocol[] ENUM$VALUES -> JULN
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> mGhl
    118:118:java.lang.String getPackageVersion() -> rooc
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> Kwkm
    142:150:react.surge.util.Protocol getProtocolVersion() -> JlYD
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> IyWN
    160:160:boolean isServerVersion() -> vlVX
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> AXkb
    175:175:boolean isActualVersion() -> hRKb
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> hblS
    200:200:int getMetaVersion() -> lgIN
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> WaRf:
    react.surge.util.Protocol from -> iWUE
    react.surge.util.Protocol to -> WuDL
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> Sepr
    21:21:react.surge.util.Protocol getTo() -> AGin
    26:26:boolean contains(react.surge.util.Protocol) -> nkoF
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> iUDa:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> feXS
    70:70:int randomNextInt() -> FqNY
    80:80:long randomNextLong() -> QOJf
    92:92:boolean isWithin(double) -> uFRW
    104:104:boolean isWithin(int) -> DaXY
    116:116:boolean isWithin(long) -> OrVh
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> JcIs
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> UQdV
react.surge.util.RawEvent -> hbbP:
react.surge.util.RayTrace -> VoQI:
    org.bukkit.Location start -> tOBl
    org.bukkit.util.Vector direction -> nLpU
    java.lang.Double maxDistance -> EooX
    java.lang.Double distanceCovered -> Nqxl
    java.lang.Double step -> EMlW
    java.lang.Boolean stop -> Xfdr
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> PKdn
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> kACR
    89:89:org.bukkit.Location getStart() -> wMUV
    94:95:void setStart(org.bukkit.Location) -> kbdv
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> fvXY
    114:115:void setMaxDistance(java.lang.Double) -> leiL
    119:119:java.lang.Double getDistanceCovered() -> ktem
    124:125:void setDistanceCovered(java.lang.Double) -> JkXd
    129:129:java.lang.Double getStep() -> SDMa
    134:135:void setStep(java.lang.Double) -> VejA
react.surge.util.ReflectionUtils -> uOVK:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> ksfn
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> ksfn
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> ksfn
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> ksfn
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> ksfn
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> ksfn
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> ksfn
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> ksfn
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> ksfn
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> ksfn
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> ksfn
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> ksfn
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> ksfn
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> ksfn
react.surge.util.ReflectionUtils$DataType -> uOVK$ksfn:
    react.surge.util.ReflectionUtils$DataType BYTE -> MoVg
    react.surge.util.ReflectionUtils$DataType SHORT -> Rmcy
    react.surge.util.ReflectionUtils$DataType INTEGER -> RBoy
    react.surge.util.ReflectionUtils$DataType LONG -> IAHM
    react.surge.util.ReflectionUtils$DataType CHARACTER -> bBAm
    react.surge.util.ReflectionUtils$DataType FLOAT -> ihYJ
    react.surge.util.ReflectionUtils$DataType DOUBLE -> hCSK
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> cEDm
    java.util.Map CLASS_MAP -> HOHh
    java.lang.Class primitive -> XEEg
    java.lang.Class reference -> NOwy
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> pmMn
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> nlmf
    704:704:java.lang.Class getReference() -> LjLo
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> IyWN
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> nkoF
    741:742:java.lang.Class getReference(java.lang.Class) -> leiL
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> ksfn
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> IyWN
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> IyWN
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> nkoF
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> ksfn
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> uOVK$IyWN:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> PhBX
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> ucJv
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> VXPs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> TtMu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> tWVY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> RSuK
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> bRbq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> qyBA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> yffD
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> JfPm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> QYbu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> tgwL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> oihy
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> iOGP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> liQG
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> QbSP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> OBYs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> aiQP
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> nECe
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> sCPy
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> mJPU
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> GRDT:
    void refresh() -> refresh
react.surge.util.SQLOperation -> rVlw:
    react.surge.util.SQLOperation LOAD -> gsSM
    react.surge.util.SQLOperation SAVE -> uHvC
    react.surge.util.SQLOperation[] ENUM$VALUES -> FIAx
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> YfxA:
    react.surge.util.ServerState START -> smdY
    react.surge.util.ServerState ENABLE -> LAak
    react.surge.util.ServerState DISABLE -> rjdc
    react.surge.util.ServerState STOP -> qyCr
    react.surge.util.ServerState RUNNING -> GTWm
    react.surge.util.ServerState[] ENUM$VALUES -> tOHd
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> dVUs:
    org.bukkit.Location location -> Qqqr
    org.bukkit.util.Vector offset -> ItQL
    org.bukkit.util.Vector size -> jQjy
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> GbOr
    90:94:org.bukkit.Location randomLocation() -> YpSH
    104:104:org.bukkit.Location randomSurface() -> gOHX
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> FOIi
    129:129:org.bukkit.util.Vector getSize() -> pIAf
react.surge.util.SnowLevel -> WPQO:
    byte level -> fxck
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> qvWp
    51:52:void setLevel(byte) -> kACR
react.surge.util.SuperCaller -> YfvS:
    void run() -> run
react.surge.util.T -> BuYD:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> IyWN
    32:35:void stop() -> stop
react.surge.util.TXT -> ObJY:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> eYCp
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> ksfn
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> ksfn
    99:99:java.lang.String line(react.surge.util.C,int) -> ksfn
    113:113:java.lang.String underline(react.surge.util.C,int) -> IyWN
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> ksfn
react.surge.util.Tag -> tmsk:
    java.lang.String value() -> value
react.surge.util.Timer -> xaNu:
    long tns -> MEHX
    long cns -> KWsT
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> qmgI
react.surge.util.VectorMath -> fCIS:
    int[] $SWITCH_TABLE$surge$util$Axis -> tope
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> CjOW
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> ksfn
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> ksfn
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> IyWN
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> nkoF
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> IyWN
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> IyWN
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> nkoF
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> leiL
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> JkXd
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> VejA
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> eYCp
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> RPlW
    111:111:double round(double,int) -> JkXd
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> ksfn
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> ksfn
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> ksfn
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> leiL
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> JkXd
    268:268:org.bukkit.util.Vector toVector(float,float) -> ksfn
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> ksfn
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> ksfn
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> OjGa
    337:340:double getSpeed(org.bukkit.util.Vector) -> MuCR
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> ksfn
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> kACR
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> ksfn
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> IyWN
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> nkoF
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> leiL
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> GbPI
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> nJfd
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> jXQa
react.surge.util.VectorMath$1 -> fCIS$1:
    org.bukkit.util.Vector val$vector -> AJTy
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> qdWP
    1:1:java.lang.Object onAdapt(java.lang.Object) -> eYCp
react.surge.util.W -> Daiw:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> OjGa
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> ksfn
    75:86:org.bukkit.entity.Entity getEntity(int) -> PJhH
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> ksfn
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> ksfn
    143:143:int getChunkX(org.bukkit.block.Block) -> MuCR
    155:155:int getChunkY(org.bukkit.block.Block) -> kACR
    168:169:void dropXp(org.bukkit.Location,int) -> IyWN
    180:180:int getChunkZ(org.bukkit.block.Block) -> GbPI
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> IyWN
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> ksfn
    232:239:react.glang.GList news(org.bukkit.Location) -> KwKa
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> ksfn
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> DHCd
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> IEqC
    300:300:org.bukkit.World toSync(org.bukkit.World) -> vQcB
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> qdWP
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> XJLb
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> UQdV
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> BlUi
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> ksfn
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> ksfn
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> ksfn
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> ksfn
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> ksfn
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> ksfn
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> ksfn
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> ksfn
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> OOsA
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> kbdv
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> DHCd
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> nkoF
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> ksfn
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> ksfn
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> ksfn
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> ksfn
react.surge.util.W$1 -> Daiw$1:
    java.lang.Double val$doff -> aOTT
    org.bukkit.entity.Entity val$e -> gruL
    org.bukkit.entity.Entity[] val$result -> JCaL
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> kACR
react.surge.util.Worlds -> prjG:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> LPOh
    33:33:boolean hasWorld(java.lang.String) -> bFlt
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> RYqW:
react.text.ColoredString -> lnnK:
    react.surge.util.C c -> MxLx
    java.lang.String s -> rHaL
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> Blpv
    42:43:void setC(react.surge.util.C) -> IyWN
    47:47:java.lang.String getS() -> IPCR
    52:53:void setS(java.lang.String) -> HSso
react.text.RTEX -> SUEK:
    react.glang.GList extras -> rkDx
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> OPrc
    44:58:react.json.JSONObject toJSON() -> tdpd
react.text.RTX -> lMKM:
    react.json.JSONArray base -> RnJm
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> VejA
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> IyWN
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> ksfn
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> ksfn
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> IyWN
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> nkoF
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> ksfn
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> IyWN
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> nkoF
    265:265:react.json.JSONArray toJSON() -> loWy
    276:277:void tellRawTo(org.bukkit.entity.Player) -> lejm
react.text.RawText -> JJKB:
    java.lang.String COLOR_BLACK -> QIDk
    java.lang.String COLOR_DARK_BLUE -> ubkf
    java.lang.String COLOR_DARK_GREEN -> hmgq
    java.lang.String COLOR_DARK_AQUA -> jtOS
    java.lang.String COLOR_DARK_RED -> tWWk
    java.lang.String COLOR_DARK_PURPLE -> NjLt
    java.lang.String COLOR_GOLD -> HNhe
    java.lang.String COLOR_GRAY -> Pgam
    java.lang.String COLOR_DARK_GRAY -> EhDL
    java.lang.String COLOR_BLUE -> IQlR
    java.lang.String COLOR_GREEN -> WlWI
    java.lang.String COLOR_AQUA -> raqf
    java.lang.String COLOR_RED -> hTUK
    java.lang.String COLOR_LIGHT_PURPLE -> FHcW
    java.lang.String COLOR_YELLOW -> QbUa
    java.lang.String COLOR_WHITE -> HqNC
    java.lang.String COLOR_NONE -> uAHd
    java.lang.String HEAD_TEXT -> NHLv
    java.lang.String HEAD_COLOR -> SNkV
    java.lang.String HEAD_BOLD -> AJXN
    java.lang.String HEAD_ITALIC -> nfjd
    java.lang.String HEAD_UNDERLINED -> CraT
    java.lang.String HEAD_STRIKETHROUGH -> TtRW
    java.lang.String HEAD_OBFUSCATED -> aaEs
    java.lang.String HEAD_CLICK_EVENT -> eJms
    java.lang.String HEAD_HOVER_EVENT -> gbWQ
    java.lang.String HEAD_ACTION -> wyvS
    java.lang.String HEAD_VALUE -> KXVT
    java.lang.String HEAD_EXTRA -> cLwu
    java.lang.String HEAD_ACTION_SHOW_TEXT -> WtjP
    java.lang.String HEAD_ACTION_COMMAND -> lhuQ
    java.util.ArrayList components -> iExy
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> SnFl
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> JkXd
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> ksfn
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> ksfn
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> ksfn
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> ksfn
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> ksfn
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> ksfn
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> ksfn
    307:313:java.lang.String compile() -> ktfB
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> ksfn

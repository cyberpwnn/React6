react.Config -> vkWA:
    react.glang.GMap worldConfigs -> vkWA
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> NxFK
    java.lang.String A_ENTITYCACHE_INTERVAL -> ejEe
    java.lang.String A_COMMANDOVERRIDE_TPS -> xFhA
    java.lang.String A_REACT_REMOTE_PORT -> YMPx
    java.lang.String A_REACT_REMOTE_ENABLED -> rUvs
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> WWlK
    java.lang.String A_POOL_MAXTHREADS -> clQA
    java.lang.String A_POOL_SYNC_NANOS -> sbKq
    java.lang.String A_ENTITYCACHE_ENABLED -> iSmV
    java.lang.String A_FASTLEAF_ENABLED -> srla
    java.lang.String A_FASTLEAF_ONDECAY -> qAqx
    java.lang.String A_FASTLEAF_INSTANT -> AWmR
    java.lang.String A_FASTLEAF_DECAYPERIOD -> RQLP
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> CoTN
    java.lang.String A_ENTITYSTACK_ENABLED -> PKEw
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> QUxa
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> pHAb
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> kjuU
    java.lang.String A_GLASS_SHOW_BLOCKS -> DHCm
    java.lang.String A_GLASS_SHOW_PARTICLES -> iBlQ
    java.lang.String A_ALLOW_CULL -> sHYI
    java.lang.String A_ALLOW_PURGE -> JQeO
    java.lang.String A_ALLOW_CACHE -> IFRO
    java.lang.String A_CULL_RULES -> YwcX
    java.lang.String A_RAI_TPS_HIGH_TICK -> vIRI
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> IyWE
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> FNJa
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> HeSx
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> NfeN
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> kIUl
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> mFjf
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> DPVr
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> DPVt
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> GQOp
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> IxxQ
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> UIWO
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> jVsH
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> wThQ
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> Oqxj
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> qKFr
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> XdBq
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> KwOS
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> JtKx
    java.lang.String A_RAI_FLUID_TIME_CEIL -> NoVe
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> VDIx
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> BInq
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> lfJt
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> eYFj
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> Hdsl
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> IgwQ
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> lwLi
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> ksiP
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> DHHC
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> KLXy
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> FonE
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> owcw
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> VTiL
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> LrAH
    java.lang.String A_USE_WORLD_CONFIGS -> NLqg
    java.lang.String A_LANGUAGE -> OPUi
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> srnU
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> quXx
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> nIlS
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> vQdP
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> lDGO
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> cJOA
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> SCPQ
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> imbK
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> oVAh
    java.lang.String A_RAI_ENTITY_PROPIGATE -> Ixwe
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> mymm
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> Dqxj
    int ENTITYCACHE_CHUNK_RADIUS -> GsTk
    int ENTITYCACHE_INTERVAL -> kcKC
    boolean COMMANDOVERRIDES_TPS -> KfNs
    int REACT_REMOTE_PORT -> nksF
    boolean REACT_REMOTE_ENABLED -> YoXQ
    int ENTITY_STACK_MAX_COUNT -> fRxu
    int POOL_MAXTHREADS -> PJiq
    long POOL_SYNC_NANOS -> pqyU
    boolean ENTITYCACHE_ENABLED -> CUfJ
    boolean FASTLEAF_ENABLED -> miQO
    boolean FASTLEAF_ONDECAY -> UIYS
    boolean FASTLEAF_INSTANT -> NLuE
    int FASTLEAF_DECAYPERIOD -> URIv
    boolean COMMANDOVERRIDES_MEMORY -> MRbh
    boolean ENTITYSTACK_ENABLED -> aCje
    int ENTITYSTACK_MINIMUM_GROUP -> EJjv
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> CxJf
    int ENTITYSTACK_MAXIMUM_HEALTH -> vRHP
    boolean GLASS_SHOW_BLOCKS -> VUNK
    boolean GLASS_SHOW_PARTICLES -> gNLk
    react.glang.GList ALLOW_CULL -> KCkn
    react.glang.GList ALLOW_PURGE -> SeVb
    react.glang.GList ALLOW_CACHE -> VDLP
    react.glang.GList CULL_RULES -> DXjP
    double RAI_TPS_HIGH_TICK -> OjLO
    long RAI_REDSTONE_TIME_FLOOR -> sPmy
    long RAI_REDSTONE_TIME_CEIL -> xGMI
    long RAI_REDSTONE_TIME_MUDDING -> sbPj
    double RAI_REDSTONE_TIME_FUNCTION -> hrrT
    double RAI_REDSTONE_TIME_OVERBLEED -> BSDq
    int RAI_REDSTONE_TIME_RADIUS -> OjJS
    int RAI_REDSTONE_TIME_PROPIGATION -> SSqw
    long RAI_HOPPER_TIME_FLOOR -> imco
    long RAI_HOPPER_TIME_CEIL -> bXOG
    long RAI_HOPPER_TIME_MUDDING -> vcIM
    double RAI_HOPPER_TIME_FUNCTION -> OYHa
    double RAI_HOPPER_TIME_OVERBLEED -> HSrl
    int RAI_HOPPER_TIME_RADIUS -> TNeX
    int RAI_HOPPER_TIME_PROPIGATION -> onuU
    int RAI_ENTITY_CHUNK_MULTIPLIER -> FyAx
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> wUKH
    int RAI_ENTITY_CHUNK_RADIUS -> SeTx
    long RAI_FLUID_TIME_FLOOR -> hPnH
    long RAI_FLUID_TIME_CEIL -> qdYf
    long RAI_FLUID_TIME_MUDDING -> ydBE
    double RAI_FLUID_TIME_FUNCTION -> pOsw
    double RAI_FLUID_TIME_OVERBLEED -> yuCG
    int RAI_FLUID_TIME_RADIUS -> JtMb
    int RAI_FLUID_TIME_PROPIGATION -> jVsv
    double SMEAR_TICK_ENTITIES_MAX_TICK -> jguf
    double SMEAR_TICK_TILES_MAX_TICK -> Cfij
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> GbVB
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> XSDw
    double SMEAR_TICK_ENTITIES_AMOUNT -> RsWE
    double SMEAR_TICK_TILES_AMOUNT -> uEuK
    boolean SMEAR_TICK_ENTITIES_ENABLE -> PuaR
    boolean SMEAR_TICK_TILES_ENABLE -> MSFU
    boolean HOPPER_OVERTICK_ENABLE -> wwPT
    boolean USE_WORLD_CONFIGS -> QVaQ
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> pjKS
    long RAI_CHUNK_TIME_CEIL -> oxJM
    long RAI_CHUNK_TIME_MUDDING -> Yfho
    double RAI_CHUNK_TIME_FUNCTION -> cRcd
    double RAI_CHUNK_TIME_OVERBLEED -> HSwI
    int RAI_CHUNK_TIME_RADIUS -> UAIc
    int RAI_CHUNK_TIME_PROPIGATION -> uhWy
    boolean RAI_CHUNK_TIME_PROPIGATE -> MJSV
    boolean RAI_FLUID_TIME_PROPIGATE -> dfgP
    boolean RAI_ENTITY_PROPIGATE -> kRIw
    boolean RAI_HOPPER_TIME_PROPIGATE -> biQr
    boolean RAI_REDSTONE_TIME_PROPIGATE -> uyYf
    boolean hrld -> pPXK
    boolean rns -> ySAw
    boolean rrl -> QpSA
    37:37:void <init>() -> <init>
    661:678:void doTrack(org.bukkit.plugin.Plugin) -> vkWA
    683:705:void onRead(org.bukkit.plugin.Plugin) -> NxFK
    709:739:void read(java.io.File,boolean) -> vkWA
    743:760:react.api.WorldConfig getWorldConfig(org.bukkit.World) -> vkWA
    765:773:void closeWorldConfig(org.bukkit.World) -> NxFK
    778:891:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> vkWA
    896:933:react.surge.cluster.DataCluster defaultConfig(boolean) -> vkWA
    938:1013:react.glang.GList getDefaultEntitiesForCaching() -> vkWA
    1018:1093:react.glang.GList getDefaultEntitiesForCulling() -> NxFK
    1098:1135:react.glang.GList getDefaultEntitiesForRemoval() -> ejEe
    1140:1169:react.glang.GList getDefaultCullRules() -> xFhA
    39:656:void <clinit>() -> <clinit>
react.Config$1 -> vkWA$1:
    java.io.File val$fConfig -> IWXy
    java.io.File val$fConfigExperimental -> AXTL
    org.bukkit.plugin.Plugin val$main -> TWXj
    665:665:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    669:673:void run() -> run
react.Config$2 -> vkWA$2:
    react.api.WorldConfig val$wc -> nuEd
    org.bukkit.World val$w -> xWnQ
    751:751:void <init>(react.api.WorldConfig,org.bukkit.World) -> <init>
    755:756:void run() -> run
react.Gate -> NxFK:
    react.glang.GMap defaultSettings -> WytQ
    react.glang.GSet refresh -> wfMm
    react.glang.GSet destroy -> FNQA
    39:39:void <init>() -> <init>
    47:137:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> vkWA
    143:174:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> vkWA
    179:179:int getChunkCountForView() -> YMPx
    184:184:int getMaxChunksForView() -> rUvs
    189:189:boolean hasFawe() -> WWlK
    194:215:void tickEntityNextTickListTick(org.bukkit.World) -> ejEe
    219:223:void resetEntityMaxTick(org.bukkit.World) -> xFhA
    227:227:int getEntityTickMax(org.bukkit.World) -> YMPx
    232:232:int getTileTickMax(org.bukkit.World) -> rUvs
    237:255:void tweakEntityTickMax(org.bukkit.World,int) -> vkWA
    259:276:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> vkWA
    281:285:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> vkWA
    289:301:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> vkWA
    306:310:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> NxFK
    314:332:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> vkWA
    336:340:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> WWlK
    345:348:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> vkWA
    353:356:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> NxFK
    361:361:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> ejEe
    366:366:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> xFhA
    371:371:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> YMPx
    376:376:boolean isBadForUnloading() -> clQA
    381:381:boolean canUnload(org.bukkit.World,int,int) -> vkWA
    388:404:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    410:421:void unloadChunk(org.bukkit.World,int,int) -> NxFK
    425:436:void removeEntity(org.bukkit.entity.Entity) -> vkWA
    440:451:void purgeEntity(org.bukkit.entity.Entity) -> NxFK
    455:466:void cullEntity(org.bukkit.entity.Entity) -> ejEe
    470:481:void cachedEntity(org.bukkit.entity.Entity) -> xFhA
    486:503:void updateBlock(org.bukkit.block.Block) -> vkWA
    507:511:java.lang.String header(java.lang.String,react.surge.util.C) -> vkWA
    516:516:java.lang.String header(react.surge.util.C) -> vkWA
    522:526:void updateFluid(org.bukkit.block.Block) -> NxFK
    530:531:void refresh(org.bukkit.Chunk) -> NxFK
    536:555:void refreshChunks() -> sbKq
    559:560:void sendBlockChange(org.bukkit.Location) -> vkWA
    41:43:void <clinit>() -> <clinit>
react.Gate$1 -> NxFK$1:
    react.api.SelectorPosition val$sel -> UcMR
    react.glang.Callback val$prog -> tCRM
    react.glang.Callback val$cb -> Vnbr
    48:48:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    52:135:void run() -> run
react.Gate$1$1 -> NxFK$1$1:
    java.lang.Object val$o -> DYMy
    java.lang.reflect.Constructor val$vectorConstruct -> CxMy
    java.lang.reflect.Constructor val$cuboidConstruct -> vcMv
    java.lang.reflect.Method val$faweFixMethod -> XBFG
    java.lang.Integer[] val$total -> Yfje
    java.lang.Integer[] val$sof -> iKew
    java.lang.Integer val$tot -> dwkb
    react.Gate$1 this$0 -> PeAn
    80:80:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],java.lang.Integer) -> <init>
    86:104:void run() -> run
react.Gate$1$2 -> NxFK$1$2:
    java.lang.Integer[] val$total -> Yfje
    react.Gate$1 this$0 -> PeAn
    109:109:void <init>(react.Gate$1,java.lang.String,int,java.lang.Integer[]) -> <init>
    115:123:void run() -> run
react.Gate$2 -> NxFK$2:
    int[] $SwitchMap$react$api$ActivationRangeType -> lCnQ
    289:289:void <clinit>() -> <clinit>
react.Info -> ejEe:
    java.lang.String CORE_REACT_DOT -> eGjN
    java.lang.String CORE_NAME -> aCmr
    java.lang.String CORE_CACHE -> Ipmr
    java.lang.String WORLD_CONFIGS -> lDNs
    java.lang.String CORE_DOTYML -> qJln
    java.lang.String COMMAND_REACT -> oVID
    java.lang.String COMMAND_RAI -> GryD
    java.lang.String COMMAND_ACT_DESCRIPTION -> wTmr
    java.lang.String COMMAND_ACT -> WPDi
    java.lang.String COMMAND_ACT_ALIAS_1 -> KMAs
    java.lang.String COMMAND_ACT_ALIAS_2 -> EKPd
    java.lang.String COMMAND_ACT_USAGE -> XJVW
    java.lang.String COMMAND_HELP_DESCRIPTION -> Bcgi
    java.lang.String COMMAND_HELP -> flov
    java.lang.String COMMAND_HELP_ALIAS_1 -> WXUJ
    java.lang.String COMMAND_HELP_ALIAS_2 -> RsYP
    java.lang.String COMMAND_HELP_USAGE -> GkJD
    java.lang.String COMMAND_STATUS_DESCRIPTION -> DinK
    java.lang.String COMMAND_STATUS -> FVbT
    java.lang.String COMMAND_STATUS_ALIAS_1 -> srtg
    java.lang.String COMMAND_STATUS_ALIAS_2 -> eYKb
    java.lang.String COMMAND_STATUS_USAGE -> DHKl
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> uqKb
    java.lang.String COMMAND_CPUSCORE -> UQlQ
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> TFXu
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> qJlP
    java.lang.String COMMAND_CPUSCORE_USAGE -> JQmQ
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> LrGP
    java.lang.String COMMAND_RELOAD -> GIDl
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> NLxB
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> cRcw
    java.lang.String COMMAND_RELOAD_USAGE -> ckum
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> STXU
    java.lang.String COMMAND_MONITOR -> xhrE
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> QpUS
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> cdFu
    java.lang.String COMMAND_MONITOR_USAGE -> aoCH
    java.lang.String COMMAND_VERSION_DESCRIPTION -> oUiu
    java.lang.String COMMAND_VERSION -> KLbc
    java.lang.String COMMAND_VERSION_ALIAS_1 -> aUSM
    java.lang.String COMMAND_VERSION_ALIAS_2 -> nBGJ
    java.lang.String COMMAND_VERSION_USAGE -> ogMH
    java.lang.String COMMAND_MAP_DESCRIPTION -> pYNX
    java.lang.String COMMAND_MAP -> aUSF
    java.lang.String COMMAND_MAP_ALIAS_1 -> cIuq
    java.lang.String COMMAND_MAP_ALIAS_2 -> cIvS
    java.lang.String COMMAND_MAP_USAGE -> KMCo
    java.lang.String COMMAND_GLASS_DESCRIPTION -> aLbV
    java.lang.String COMMAND_GLASS -> aLat
    java.lang.String COMMAND_GLASS_ALIAS_1 -> ETCg
    java.lang.String COMMAND_GLASS_ALIAS_2 -> mXTo
    java.lang.String COMMAND_GLASS_USAGE -> FWGJ
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> iKhK
    java.lang.String COMMAND_CBLAME -> xhts
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> avts
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> BJWt
    java.lang.String COMMAND_CBLAME_USAGE -> XBHS
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> esBF
    java.lang.String COMMAND_ACTIONLOG -> nJVh
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> rMrA
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> GQVo
    java.lang.String COMMAND_ACTIONLOG_USAGE -> qlpk
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> SCWj
    java.lang.String COMMAND_CAPABILITIES -> RPvD
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> Grxv
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> lTpf
    java.lang.String COMMAND_CAPABILITIES_USAGE -> yAco
    java.lang.String MSG_PERMISSION -> bOcV
    java.lang.String MSG_MONITORING_STARTED -> hYeT
    java.lang.String MSG_MONITORING_STOPPED -> nBDq
    java.lang.String MSG_ACTIONLOGGING_STARTED -> loCa
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> xrFN
    java.lang.String MSG_GLASS_STARTED -> aere
    java.lang.String MSG_GLASS_STOPPED -> Qout
    org.bukkit.Color COLOR_HOPPER -> QhFi
    org.bukkit.Color COLOR_BLOCK_UPDATE -> ogNj
    org.bukkit.Color COLOR_BLOCK_FROMTO -> iByR
    org.bukkit.Color COLOR_BLOCK_BURN -> DQAw
    org.bukkit.Color COLOR_BLOCK_DECAY -> EeGK
    org.bukkit.Color COLOR_BLOCK_FORM -> bhwy
    java.lang.String NAME_TICK -> aUUL
    java.lang.String NAME_MEMORY -> eXoa
    java.lang.String NAME_CHUNKS -> wMCj
    java.lang.String NAME_ENTITIES -> KCsg
    java.lang.String STATE_MONITORING_TAB -> ryIB
    java.lang.String STATE_MONITORING_ENABLED -> dpAN
    java.lang.String STATE_MONITORING_HIGH -> JQre
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> UAQd
    java.lang.String STATE_MAPPING_ENABLED -> ykyg
    java.lang.String STATE_SOUND_PLAYS -> dUlr
    java.lang.String STATE_MONITORING_POSTED -> AFus
    java.lang.String STATE_MONITORING_LASTTAB -> dUmM
    java.lang.String STATE_GLASSES_ENABLED -> gFCp
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> AFxI
    java.lang.String STATE_PLAYER_HOTBAR -> vkak
    java.lang.String STATE_PLAYER_SHIFT -> MBJD
    java.lang.String STATE_PLAYER_SCROLL -> GjkU
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> nIvy
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> ycht
    java.lang.String PERM_ACCESS -> lDQu
    java.lang.String PERM_MONITOR -> wTpx
    java.lang.String PERM_MONITOR_TITLE -> dELH
    java.lang.String PERM_MONITOR_ACTIONLOG -> AaJv
    java.lang.String PERM_MONITOR_MAP -> qKQC
    java.lang.String PERM_MONITOR_ENVIRONMENT -> cJYG
    java.lang.String PERM_MONITOR_GLASSES -> EeGD
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> gyHe
    java.lang.String PERM_ACT -> PdgW
    java.lang.String PERM_RAI -> uqRf
    java.lang.String PERM_RAI_CONTROL -> lwYf
    java.lang.String PERM_RAI_ACCESS -> QyLn
    java.lang.String PERM_RAI_MONITOR -> xWwr
    java.lang.String PERM_RELOAD -> dfon
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> kQsK
    java.lang.String SAMPLER_REDSTONE_TICK -> gMvP
    java.lang.String SAMPLER_ENTITY_TIME -> ccnL
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> aTvW
    java.lang.String SAMPLER_TILE_TIME_LOCK -> aUVx
    java.lang.String SAMPLER_TILE_TIME -> AaKo
    java.lang.String SAMPLER_TILE_DROPTICK -> tKlC
    java.lang.String SAMPLER_ENTITY_DROPTICK -> FMwS
    java.lang.String SAMPLER_REDSTONE_SECOND -> Rjlb
    java.lang.String SAMPLER_REDSTONE_TIME -> OXrQ
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> MRkq
    java.lang.String SAMPLER_HOPPER_TICK -> inPI
    java.lang.String SAMPLER_HOPPER_SECOND -> gpYP
    java.lang.String SAMPLER_HOPPER_TIME -> jqRL
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> Xtnm
    java.lang.String SAMPLER_FLUID_TICK -> Ukej
    java.lang.String SAMPLER_FLUID_SECOND -> jONm
    java.lang.String SAMPLER_FLUID_TIME -> vRPu
    java.lang.String SAMPLER_TPS -> fTEO
    java.lang.String SAMPLER_TICK -> wwXF
    java.lang.String SAMPLER_TIU -> aMEi
    java.lang.String SAMPLER_MEM -> sYhm
    java.lang.String SAMPLER_FREEMEM -> KTyS
    java.lang.String SAMPLER_MAXMEM -> uGAd
    java.lang.String SAMPLER_ALLOCMEM -> HnSn
    java.lang.String SAMPLER_MAHS -> aLhF
    java.lang.String SAMPLER_CHK -> aoLG
    java.lang.String SAMPLER_ATASK -> kQtb
    java.lang.String SAMPLER_STASK -> VCwJ
    java.lang.String SAMPLER_CHK_TIME -> nuRF
    java.lang.String SAMPLER_EXPLOSION_TIME -> QhMe
    java.lang.String SAMPLER_CHKS -> gNYp
    java.lang.String SAMPLER_ENT -> eQCw
    java.lang.String SAMPLER_ENTLIV -> DQFl
    java.lang.String SAMPLER_ENTDROP -> PeKG
    java.lang.String SAMPLER_ENTTILE -> SvdT
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> oEPE
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> qeIC
    java.lang.String ACTION_CULL_ENTITIES_NAME -> RcAJ
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> CgVO
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> XcoM
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> OYUL
    java.lang.String ACTION_UPDATE_FLUID_NAME -> eYSi
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> rgip
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> NVQw
    java.lang.String ACTION_LOCK_FLUID_STATUS -> Tyec
    java.lang.String ACTION_LOCK_FLUID_NAME -> aDVY
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> MmBJ
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> mPKF
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> gNYP
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> TFad
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> Smqk
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> aCul
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> ObFd
    java.lang.String ACTION_LOCK_HOPPER_NAME -> XdOt
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> lvxy
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> aUWw
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> TqUv
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> xaKD
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> ooao
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> MBMp
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> Cfsm
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> HvdS
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> EdlM
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> pafj
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> dVSm
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> ssaU
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> anlg
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> DsLG
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> pPfD
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> ymCB
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> HKrY
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> APOQ
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> TiII
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> hINS
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> xrNv
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> CESV
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> DGwN
    java.lang.String ACTION_FIX_LIGHTING_NAME -> GYqY
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> uyfm
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> rxmr
    java.lang.String ACTION_COLLECT_GARBAGE -> VLjj
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> DYXF
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> JIgN
    6:6:void <init>() -> <init>
    8:234:void <clinit>() -> <clinit>
react.Lang -> xFhA:
    java.lang.String BUNDLE_NAME -> YVSc
    java.util.ResourceBundle RESOURCE_BUNDLE -> KLjO
    java.util.ResourceBundle PRIMARY_BUNDLE -> tmqt
    13:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
    9:10:void <clinit>() -> <clinit>
react.React -> YMPx:
    react.React instance -> YERM
    react.controller.SampleController sampleController -> SKqA
    react.controller.PlayerController playerController -> SUCW
    react.controller.MonitorController monitorController -> ifBi
    react.controller.CommandController commandController -> NDql
    react.controller.ActionController actionController -> JRYK
    react.controller.FastDecayController fastDecayController -> pHTI
    react.controller.EntityStackController entityStackController -> uNqg
    react.controller.GlassController glassController -> eYUs
    react.controller.EntityCullController entityCullController -> cuVS
    react.controller.SpikeController spikeController -> cJbJ
    react.controller.SecurityController securityController -> TFfY
    react.controller.RedstoneController redstoneController -> MtvU
    react.controller.HopperController hopperController -> brRl
    react.controller.PhysicsController physicsController -> BmFv
    react.controller.TickTimeController tickTimeController -> aLlI
    react.controller.RAIController raiController -> woOG
    react.controller.FluidController fluidController -> qBiU
    react.controller.ChunkController chunkController -> LjDU
    react.controller.GraphController graphController -> DrmJ
    react.controller.ChronophyFluidController fluidChronophyController -> jhgi
    react.controller.EventController eventController -> ghPR
    react.controller.BlockInjectController blockInjectController -> uWfF
    react.controller.SmearTickController smearTickController -> XdUf
    react.controller.FeatureController featureController -> FOAL
    react.controller.HopperOvertickController hopperPlungeController -> lnmr
    react.controller.BenchmarkController benchmarkController -> eHWn
    react.controller.LanguageController languageController -> BKDC
    react.controller.RemoteController remoteController -> eHWk
    react.controller.ExplosiveController explosiveController -> GtGU
    react.controller.WorldController worldController -> DGyO
    44:44:void <init>() -> <init>
    142:150:void enable() -> enable
    156:156:void disable() -> disable
react.React$1 -> YMPx$1:
    react.React this$0 -> WrSk
    143:143:void <init>(react.React) -> <init>
    147:148:void run() -> run
react.action.ActionCollectGarbage -> rUvs:
    19:22:void <init>() -> <init>
    27:61:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionCollectGarbage$1 -> rUvs$1:
    react.action.source.IActionSource val$source -> dpHn
    react.action.ActionCollectGarbage this$0 -> gVnL
    30:30:void <init>(react.action.ActionCollectGarbage,react.action.source.IActionSource) -> <init>
    35:59:void run() -> run
react.action.ActionCollectGarbage$1$1 -> rUvs$1$1:
    long val$mbnex -> BApr
    long val$mbmem -> nAoi
    react.action.ActionCollectGarbage$1 this$1 -> pjXr
    40:40:void <init>(react.action.ActionCollectGarbage$1,long,long) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> WWlK:
    long ms -> WjAv
    int lcd -> WPOa
    32:59:void <init>() -> <init>
    64:150:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
    25:25:long access$002(react.action.ActionCullEntities,long) -> vkWA
    25:25:int access$100(react.action.ActionCullEntities) -> vkWA
    25:25:long access$000(react.action.ActionCullEntities) -> NxFK
react.action.ActionCullEntities$1 -> WWlK$1:
    react.action.ActionCullEntities this$0 -> cKAf
    37:37:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> iSmV
    37:37:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> WWlK$2:
    react.action.ActionCullEntities this$0 -> cKAf
    49:49:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> iSmV
    49:49:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> WWlK$3:
    react.glang.FinalInteger val$completed -> cuTm
    react.glang.FinalInteger val$total -> kQwg
    react.glang.FinalInteger val$totalCulled -> EeNU
    react.glang.FinalInteger val$totalChunked -> XdTV
    react.action.source.IActionSource val$source -> dpHn
    react.action.ActionCullEntities this$0 -> cKAf
    105:105:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> WWlK$4:
    react.action.source.IActionSource val$source -> dpHn
    react.glang.FinalInteger val$totalCulled -> EeNU
    react.glang.FinalInteger val$totalChunked -> XdTV
    react.action.ActionCullEntities this$0 -> cKAf
    137:137:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> clQA:
    25:39:void <init>() -> <init>
    44:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionFixLighting$1 -> clQA$1:
    react.action.ActionFixLighting this$0 -> mqpf
    29:29:void <init>(react.action.ActionFixLighting) -> <init>
    33:36:react.api.ISelector get() -> iSmV
    29:29:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> clQA$2:
    react.action.source.IActionSource val$source -> dpHn
    int val$ch -> jNuO
    react.action.ActionFixLighting this$0 -> mqpf
    78:78:void <init>(react.action.ActionFixLighting,react.action.source.IActionSource,int) -> <init>
    82:87:void run(java.lang.Integer) -> vkWA
    78:78:void run(java.lang.Object) -> vkWA
react.action.ActionFixLighting$3 -> clQA$3:
    react.action.ActionFixLighting this$0 -> mqpf
    89:89:void <init>(react.action.ActionFixLighting) -> <init>
    93:98:void run(java.lang.Double) -> vkWA
    89:89:void run(java.lang.Object) -> vkWA
react.action.ActionLockFluid -> sbKq:
    int lcd -> WPOa
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionLockFluid$1 -> sbKq$1:
    react.action.ActionLockFluid this$0 -> jiHg
    31:31:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> iSmV
    31:31:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> sbKq$2:
    react.action.ActionLockFluid this$0 -> jiHg
    43:43:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> iSmV
    43:43:java.lang.Object get() -> get
react.action.ActionLockHopper -> iSmV:
    int lcd -> WPOa
    26:53:void <init>() -> <init>
    58:103:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionLockHopper$1 -> iSmV$1:
    react.action.ActionLockHopper this$0 -> CfxE
    31:31:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> iSmV
    31:31:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> iSmV$2:
    react.action.ActionLockHopper this$0 -> CfxE
    43:43:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> iSmV
    43:43:java.lang.Object get() -> get
react.action.ActionLockRedstone -> srla:
    int lcd -> WPOa
    26:53:void <init>() -> <init>
    58:102:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionLockRedstone$1 -> srla$1:
    react.action.ActionLockRedstone this$0 -> DsLn
    31:31:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> iSmV
    31:31:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> srla$2:
    react.action.ActionLockRedstone this$0 -> DsLn
    43:43:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> iSmV
    43:43:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> qAqx:
    long ms -> WjAv
    int lcd -> WPOa
    boolean fail -> Oiys
    31:46:void <init>() -> <init>
    51:144:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> NxFK
    23:23:boolean access$000(react.action.ActionPurgeChunks) -> vkWA
    23:23:long access$102(react.action.ActionPurgeChunks,long) -> vkWA
    23:23:int access$200(react.action.ActionPurgeChunks) -> NxFK
    23:23:long access$100(react.action.ActionPurgeChunks) -> ejEe
    23:23:boolean access$002(react.action.ActionPurgeChunks,boolean) -> vkWA
react.action.ActionPurgeChunks$1 -> qAqx$1:
    react.action.ActionPurgeChunks this$0 -> Btvp
    36:36:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> iSmV
    36:36:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> qAqx$2:
    int val$dk -> pQFe
    java.lang.Object val$j -> XuUt
    react.glang.FinalInteger val$acompleted -> BmHG
    react.glang.FinalInteger val$completed -> cuTm
    react.glang.FinalInteger val$total -> kQwg
    react.glang.FinalInteger val$totalCulled -> EeNU
    react.glang.FinalInteger val$totalChunked -> XdTV
    react.action.source.IActionSource val$source -> dpHn
    react.api.ISelector[] val$selectors -> lMKT
    react.action.ActionPurgeChunks this$0 -> Btvp
    82:82:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource,react.api.ISelector[]) -> <init>
    86:123:void run() -> run
react.action.ActionPurgeChunks$2$1 -> qAqx$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> gyQL
    89:89:void <init>(react.action.ActionPurgeChunks$2) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> qAqx$3:
    react.action.source.IActionSource val$source -> dpHn
    react.glang.FinalInteger val$acompleted -> BmHG
    react.action.ActionPurgeChunks this$0 -> Btvp
    131:131:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> qAqx$4:
    org.bukkit.Chunk val$chunk -> Edml
    java.lang.Runnable val$cb -> LrSg
    react.action.ActionPurgeChunks this$0 -> Btvp
    149:149:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> AWmR:
    long ms -> WjAv
    int lcd -> WPOa
    34:61:void <init>() -> <init>
    66:153:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.action.source.IActionSource,react.api.ISelector[]) -> NxFK
    27:27:long access$002(react.action.ActionPurgeEntities,long) -> vkWA
    27:27:int access$100(react.action.ActionPurgeEntities) -> vkWA
    27:27:long access$000(react.action.ActionPurgeEntities) -> NxFK
    27:27:int access$102(react.action.ActionPurgeEntities,int) -> vkWA
react.action.ActionPurgeEntities$1 -> AWmR$1:
    react.action.ActionPurgeEntities this$0 -> woQP
    39:39:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> iSmV
    39:39:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> AWmR$2:
    react.action.ActionPurgeEntities this$0 -> woQP
    51:51:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> iSmV
    51:51:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> AWmR$3:
    react.glang.FinalInteger val$completed -> cuTm
    react.glang.FinalInteger val$total -> kQwg
    react.glang.FinalInteger val$totalCulled -> EeNU
    react.glang.FinalInteger val$totalChunked -> XdTV
    react.action.source.IActionSource val$source -> dpHn
    react.action.ActionPurgeEntities this$0 -> woQP
    107:107:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.action.source.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> AWmR$4:
    react.action.source.IActionSource val$source -> dpHn
    react.glang.FinalInteger val$totalCulled -> EeNU
    react.glang.FinalInteger val$totalChunked -> XdTV
    react.action.ActionPurgeEntities this$0 -> woQP
    139:139:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.action.source.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> AWmR$5:
    org.bukkit.entity.Entity val$i -> xrTS
    react.glang.FinalInteger val$cu -> FVrE
    int val$k -> tmwR
    org.bukkit.Chunk val$chunk -> Edml
    java.lang.Runnable val$cb -> LrSg
    react.action.ActionPurgeEntities this$0 -> woQP
    179:179:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> RQLP:
    int lcd -> WPOa
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionUnlockFluid$1 -> RQLP$1:
    react.action.ActionUnlockFluid this$0 -> WXcN
    30:30:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> iSmV
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> CoTN:
    int lcd -> WPOa
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionUnlockHopper$1 -> CoTN$1:
    react.action.ActionUnlockHopper this$0 -> ytum
    30:30:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> iSmV
    30:30:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> PKEw:
    int lcd -> WPOa
    25:40:void <init>() -> <init>
    45:84:void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.action.ActionUnlockRedstone$1 -> PKEw$1:
    react.action.ActionUnlockRedstone this$0 -> nJdG
    30:30:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> iSmV
    30:30:java.lang.Object get() -> get
react.action.source.AccessActionSource -> QUxa:
    9:9:void <init>() -> <init>
    14:21:void sendResponse(java.lang.String) -> vkWA
    26:33:void sendResponseSuccess(java.lang.String) -> NxFK
    38:45:void sendResponseError(java.lang.String) -> ejEe
    50:57:void sendResponseActing(java.lang.String) -> xFhA
react.action.source.ActionHandle -> pHAb:
    react.action.source.ActionHandle AUTOMATIC -> pbKr
    react.action.source.ActionHandle MANUAL -> LHCT
    react.action.source.ActionHandle MUTEX -> KLod
    react.action.source.ActionHandle[] $VALUES -> kkmX
    3:3:react.action.source.ActionHandle[] values() -> values
    3:3:react.action.source.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.action.source.ConsoleActionSource -> kjuU:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> vkWA
    18:19:void sendResponseSuccess(java.lang.String) -> NxFK
    24:25:void sendResponseError(java.lang.String) -> ejEe
    30:31:void sendResponseActing(java.lang.String) -> xFhA
react.action.source.IActionSource -> DHCm:
    void sendResponse(java.lang.String) -> vkWA
    void sendResponseSuccess(java.lang.String) -> NxFK
    void sendResponseError(java.lang.String) -> ejEe
    void sendResponseActing(java.lang.String) -> xFhA
react.action.source.PlayerActionSource -> iBlQ:
    org.bukkit.entity.Player p -> Bcux
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> vkWA
    30:31:void sendResponseSuccess(java.lang.String) -> NxFK
    36:37:void sendResponseError(java.lang.String) -> ejEe
    42:43:void sendResponseActing(java.lang.String) -> xFhA
react.action.source.RAIActionSource -> sHYI:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> vkWA
    16:17:void sendResponseSuccess(java.lang.String) -> NxFK
    22:23:void sendResponseError(java.lang.String) -> ejEe
    28:29:void sendResponseActing(java.lang.String) -> xFhA
react.api.Action -> JQeO:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> uOWe
    java.lang.String[] nodes -> QhSB
    react.action.source.ActionHandle handle -> bXaX
    react.api.ActionState state -> EePU
    react.api.ActionTargetType target -> XtwG
    react.api.ActionType type -> doha
    react.action.source.IActionSource currentSource -> lnpJ
    double progress -> lnpK
    react.glang.GMap defaultSelectors -> ThkJ
    28:29:void <init>(react.api.ActionType) -> <init>
    32:44:void <init>(java.lang.String,java.lang.String,react.action.source.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    49:64:react.api.ISelector[] biselect(react.api.ISelector[]) -> vkWA
    70:71:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> vkWA
    76:76:java.lang.String getName() -> getName
    82:82:java.lang.String getDescription() -> getDescription
    88:88:react.action.source.ActionHandle getHandleType() -> srla
    94:94:react.api.ActionState getState() -> qAqx
    100:100:java.lang.String getStatus() -> getStatus
    106:107:void setStatus(java.lang.String) -> YMPx
    112:112:double getProgress() -> getProgress
    118:119:void setProgress(double) -> setProgress
    124:124:react.api.ActionTargetType getTarget() -> AWmR
    130:130:react.api.ActionType getType() -> RQLP
    136:136:react.glang.GMap getDefaultSelectors() -> CoTN
    142:184:void act(react.action.source.IActionSource,react.api.ISelector[]) -> NxFK
    189:190:void completeAction() -> PKEw
    195:195:react.action.source.IActionSource getCurrentSource() -> QUxa
    201:201:java.lang.String[] getNodes() -> pHAb
    207:208:void setNodes(java.lang.String[]) -> vkWA
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
react.api.ActionAlreadyRunningException -> IFRO:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> YwcX:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionNotRunningException -> vIRI:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> IyWE:
    react.api.ActionState IDLE -> qCJY
    react.api.ActionState RUNNING -> sscd
    react.api.ActionState[] $VALUES -> KxDK
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> FNJa:
    react.api.ActionTargetType POSITIONAL -> pGwL
    react.api.ActionTargetType SYSTEM -> mPPX
    react.api.ActionTargetType[] $VALUES -> xPOd
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> HeSx:
    react.api.ActionType FIX_LIGHTING -> GQcs
    react.api.ActionType UNLOCK_FLUID -> rhPc
    react.api.ActionType LOCK_FLUID -> SmxX
    react.api.ActionType UNLOCK_HOPPER -> GQdV
    react.api.ActionType LOCK_HOPPER -> FVtE
    react.api.ActionType UNLOCK_REDSTONE -> cKFm
    react.api.ActionType LOCK_REDSTONE -> sADL
    react.api.ActionType CULL_ENTITIES -> GtJc
    react.api.ActionType COLLECT_GARBAGE -> ktaO
    react.api.ActionType PURGE_ENTITIES -> qeQN
    react.api.ActionType PURGE_CHUNKS -> lUaL
    java.lang.String name -> name
    java.lang.String description -> description
    react.action.source.ActionHandle handle -> bXaX
    react.api.ActionTargetType target -> XtwG
    react.api.ActionType[] $VALUES -> sISo
    6:6:react.api.ActionType[] values() -> values
    6:6:react.api.ActionType valueOf(java.lang.String) -> valueOf
    26:31:void <init>(java.lang.String,int,react.action.source.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    35:35:java.lang.String getName() -> getName
    40:40:java.lang.String getDescription() -> getDescription
    45:45:react.action.source.ActionHandle getHandle() -> kjuU
    50:50:react.api.ActionTargetType getTarget() -> AWmR
    6:18:void <clinit>() -> <clinit>
react.api.ActivationRangeType -> NfeN:
    react.api.ActivationRangeType ANIMALS -> dNJI
    react.api.ActivationRangeType MONSTERS -> iDGd
    react.api.ActivationRangeType MISC -> FyWo
    react.api.ActivationRangeType[] $VALUES -> agCc
    3:3:react.api.ActivationRangeType[] values() -> values
    3:3:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Address -> kIUl:
    int value() -> value
react.api.Async -> mFjf:
react.api.CPUBenchmark -> DPVr:
    org.bukkit.command.CommandSender sender -> sender
    int score -> BdYk
    java.lang.Runnable onFinish -> Xcxf
    17:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:91:void run() -> run
    95:95:org.bukkit.command.CommandSender getSender() -> getSender
    100:100:int getScore() -> getScore
    105:105:java.lang.Runnable getOnFinish() -> DHCm
    10:10:org.bukkit.command.CommandSender access$000(react.api.CPUBenchmark) -> vkWA
    10:10:int access$100(react.api.CPUBenchmark) -> NxFK
    10:10:java.lang.Runnable access$200(react.api.CPUBenchmark) -> ejEe
react.api.CPUBenchmark$1 -> DPVr$1:
    react.api.CPUBenchmark this$0 -> nuYU
    35:35:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> DPVr$2:
    react.api.CPUBenchmark this$0 -> nuYU
    78:78:void <init>(react.api.CPUBenchmark) -> <init>
    82:89:void run() -> run
react.api.CPUResult -> DPVt:
    react.api.CPUResult ULTRA_SLOW -> mjEh
    react.api.CPUResult VERY_SLOW -> EmdQ
    react.api.CPUResult SLOW -> KoUe
    react.api.CPUResult AVERAGE -> iwLF
    react.api.CPUResult GOOD -> bXdb
    react.api.CPUResult FAST -> yBSk
    react.api.CPUResult VERY_FAST -> esOu
    react.api.CPUResult ULTRA_FAST -> iehx
    java.lang.String m -> nlhX
    react.api.CPUResult[] $VALUES -> htHj
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> vkWA
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> GQOp:
    react.glang.GMap cache -> sISR
    12:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> NxFK
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> ejEe
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> iBlQ
    54:54:boolean has(java.lang.Object) -> xFhA
react.api.Capability -> IxxQ:
    react.api.Capability DUAL_WEILD -> ObOA
    react.api.Capability SCOREBOARD -> quqD
    react.api.Capability SCOREBOARD_ADVANCED -> ydWF
    react.api.Capability HOPPER -> UuAn
    react.api.Capability ENTITY_ATTRIBUTES -> ESpH
    react.api.Capability ENTITY_AI -> PnCF
    react.api.Capability ACTION_BAR -> wLmw
    react.api.Capability ENTITY_NAMES -> uWid
    react.api.Capability TITLE_BAR -> Widy
    react.api.Capability CHUNK_RELIGHTING -> vkmp
    react.api.Capability MONITOR_SUBMISSIVENESS -> vAYt
    react.api.Capability ACCELERATED_PING -> RITo
    react.api.Capability ENTITY_THROTTLING -> aVAg
    react.api.Capability TILE_THROTTLING -> WHDD
    react.api.Capability PASSENGERS -> wxBo
    react.glang.GList capabilities -> mHAo
    react.surge.util.Protocol version -> QqGB
    react.api.Flavor flavor -> qeOd
    java.lang.String plugin -> TGJp
    java.lang.String name -> name
    56:61:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor,java.lang.String) -> <init>
    65:66:void <init>(java.lang.String,react.surge.util.Protocol,react.api.Flavor) -> <init>
    70:71:void <init>(java.lang.String,react.surge.util.Protocol,java.lang.String) -> <init>
    75:76:void <init>(java.lang.String,java.lang.String) -> <init>
    80:81:void <init>(java.lang.String,react.api.Flavor) -> <init>
    85:86:void <init>(java.lang.String,react.surge.util.Protocol) -> <init>
    90:95:boolean isPluginCapable() -> sHYI
    100:100:boolean isFlavorCapable() -> JQeO
    105:105:boolean isVersionCapable() -> IFRO
    110:110:boolean isCapable() -> YwcX
    115:115:react.surge.util.Protocol getVersion() -> vIRI
    120:120:react.api.Flavor getFlavor() -> IyWE
    125:125:java.lang.String getPlugin() -> FNJa
    130:130:java.lang.String getName() -> getName
    135:149:void sendNotCapable(org.bukkit.entity.Player) -> vkWA
    153:167:void sendNotCapable(react.action.source.IActionSource) -> vkWA
    14:48:void <clinit>() -> <clinit>
react.api.CapabilityBasis -> UIWO:
    react.api.CapabilityBasis VERSION -> twJP
    react.api.CapabilityBasis FLAVOR -> LaXh
    react.api.CapabilityBasis PLUGIN -> GcJp
    react.api.CapabilityBasis[] $VALUES -> PSqt
    3:3:react.api.CapabilityBasis[] values() -> values
    3:3:react.api.CapabilityBasis valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ChunkIssue -> jVsH:
    react.api.ChunkIssue ENTITY -> YNMD
    react.api.ChunkIssue HOPPER -> mPVJ
    react.api.ChunkIssue REDSTONE -> sRFw
    react.api.ChunkIssue FLUID -> rqGX
    react.api.ChunkIssue PHYSICS -> bGeE
    react.api.ChunkIssue[] $VALUES -> IFmX
    3:3:react.api.ChunkIssue[] values() -> values
    3:3:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.api.Clip -> wThQ:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> Oqxj:
    org.bukkit.command.CommandSender sender -> sender
    13:15:void <init>(org.bukkit.command.CommandSender) -> <init>
    19:19:org.bukkit.command.CommandSender getSender() -> getSender
    25:26:void sendResponse(java.lang.String) -> vkWA
    31:32:void sendResponseSuccess(java.lang.String) -> NxFK
    37:38:void sendResponseError(java.lang.String) -> ejEe
    43:44:void sendResponseActing(java.lang.String) -> xFhA
react.api.CullList -> qKFr:
    react.glang.GSet toCull -> CxaX
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> YMPx
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> HeSx
react.api.DTest -> XdBq:
    6:6:void <init>() -> <init>
    11:62:int test() -> NfeN
react.api.EntityFlag -> KwOS:
    react.api.EntityFlag NAMED -> qeSW
    react.api.EntityFlag TAMED -> Typq
    react.api.EntityFlag STACKED -> qSor
    react.api.EntityFlag RIDDEN -> gNdA
    react.api.EntityFlag LEASHED -> lLqX
    java.lang.String m -> nlhX
    react.api.EntityFlag[] $VALUES -> AXfx
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> rUvs
    40:65:boolean is(org.bukkit.entity.Entity) -> WWlK
    71:71:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> JtKx:
    react.glang.GSet entityTypes -> GcLF
    11:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> kIUl
react.api.EntitySample -> NoVe:
    react.glang.GMap counts -> gpgG
    react.glang.GMap sets -> VnvO
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> mFjf
    45:45:react.glang.GList getTypes() -> DPVr
    50:57:int total() -> DPVt
    62:67:int get(org.bukkit.entity.EntityType) -> vkWA
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> NxFK
    84:96:void add(org.bukkit.entity.Entity) -> YMPx
react.api.Experimental -> VDIx:
react.api.Flavor -> BInq:
    react.api.Flavor ANY -> baWo
    react.api.Flavor SAFE_MODE -> kcaQ
    react.api.Flavor CRAFT_BUKKIT -> uyns
    react.api.Flavor BUKKIT -> rhUj
    react.api.Flavor SPIGOT -> Svnd
    react.api.Flavor SOGGY_SPIGOT -> KMTn
    react.api.Flavor PAPER_SPIGOT -> VLqc
    react.api.Flavor TACO_SPIGOT -> RjyH
    react.api.Flavor TORCH_SPIGOT -> bqvq
    react.api.Flavor FORGE_HACK -> iUJU
    react.api.Flavor SPONGE_HACK -> ktam
    react.api.Flavor[] $VALUES -> iKxQ
    6:6:react.api.Flavor[] values() -> values
    6:6:react.api.Flavor valueOf(java.lang.String) -> valueOf
    6:6:void <init>(java.lang.String,int) -> <init>
    22:69:react.api.Flavor getHostFlavor() -> GQOp
    74:79:boolean compatableWith(react.api.Flavor) -> vkWA
    84:84:java.lang.String fancyName() -> IxxQ
    6:18:void <clinit>() -> <clinit>
react.api.IAction -> lfJt:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.action.source.ActionHandle getHandleType() -> srla
    void act(react.action.source.IActionSource,react.api.ISelector[]) -> NxFK
    void enact(react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
    react.api.ActionState getState() -> qAqx
    react.api.ActionTargetType getTarget() -> AWmR
    void setNodes(java.lang.String[]) -> vkWA
    java.lang.String[] getNodes() -> pHAb
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> YMPx
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> RQLP
    react.glang.GMap getDefaultSelectors() -> CoTN
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> vkWA
    react.api.ISelector[] biselect(react.api.ISelector[]) -> vkWA
    react.action.source.IActionSource getCurrentSource() -> QUxa
    void completeAction() -> PKEw
react.api.ICache -> eYFj:
    react.glang.GSet get(java.lang.Object) -> NxFK
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> ejEe
    void clear() -> clear
    boolean has(java.lang.Object) -> xFhA
    react.glang.GList k() -> iBlQ
react.api.ICommand -> Hdsl:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> UIWO
    java.lang.String[] getPermissions() -> jVsH
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> rUvs
    react.api.SideGate getSideGate() -> wThQ
    void registerParameterDescription(java.lang.String,java.lang.String) -> vkWA
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.api.IRecord -> IgwQ:
    java.lang.String getRecordType() -> Oqxj
    long getRecordTime() -> qKFr
    react.json.JSONObject toJSON() -> XdBq
    java.lang.Object getRecordObject() -> KwOS
    void fromJSON(react.json.JSONObject) -> vkWA
react.api.IRecordBook -> lwLi:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> vkWA
    long getOldestRecordTime() -> JtKx
    void addRecord(react.api.IRecord) -> vkWA
    long getLatestRecordTime() -> NoVe
    int countRecords(long,long) -> vkWA
    react.glang.GMap getRecords(long,long) -> NxFK
    int purgeRecordsBefore(long) -> NxFK
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> ksiP:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> VDIx
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> BInq
    react.surge.util.C getAltColor() -> lfJt
    void setColor(react.surge.util.C,react.surge.util.C) -> vkWA
    int getInterval() -> getInterval
    void setInterval(int) -> NxFK
    void sample() -> eYFj
    java.lang.String get() -> get
    void construct() -> Hdsl
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> DHHC:
    react.api.SelectionMode getMode() -> IgwQ
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> YMPx
    react.glang.GSet getList() -> lwLi
    react.glang.GSet getPossibilities() -> ksiP
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUvs
    java.lang.String getName() -> getName
react.api.Injection -> KLXy:
    react.api.InjectionMethod value() -> DHHC
react.api.InjectionMethod -> FonE:
    react.api.InjectionMethod SWAP -> BmMu
    react.api.InjectionMethod SUBSTRATE -> aVCO
    react.api.InjectionMethod RELOAD -> gWUB
    react.api.InjectionMethod[] $VALUES -> VfdY
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Language -> owcw:
    java.lang.String value() -> value
react.api.MSampler -> VTiL:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> KLXy
react.api.MonitorHeading -> LrAH:
    react.api.ISampler head -> QODq
    react.glang.GList children -> aVCP
    java.lang.String name -> name
    14:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> vkWA
    27:27:react.api.ISampler getHead() -> FonE
    32:33:void setHead(react.api.ISampler) -> NxFK
    37:37:react.glang.GList getChildren() -> owcw
    42:42:java.lang.String getHeadText() -> VTiL
    47:60:java.lang.String getChildText() -> LrAH
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> vkWA
react.api.NoiseGenerator -> NLqg:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> OPUi:
    react.api.NoiseGenerator[] octaves -> QFSh
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> NLqg
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> srnU:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> UlRt
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> OPUi
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> quXx:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> vkWA
react.api.Permissable -> nIlS:
    react.api.Permissable ACCESS -> yRuf
    react.api.Permissable MONITOR -> tThM
    react.api.Permissable MONITOR_TITLE -> Vwfc
    react.api.Permissable MONITOR_ACTIONLOG -> WGeT
    react.api.Permissable MONITOR_MAP -> IrBS
    react.api.Permissable MONITOR_ENVIRONMENT -> VgFF
    react.api.Permissable MONITOR_GLASSES -> Kfec
    react.api.Permissable MONITOR_CHUNK_BLAME -> kdAQ
    react.api.Permissable RAI_MONITOR -> wxDn
    react.api.Permissable RAI_CONTROL -> VMSQ
    react.api.Permissable RAI_ACCESS -> SvnD
    react.api.Permissable RAI -> DbQr
    react.api.Permissable ACT -> aEEN
    react.api.Permissable RELOAD -> fvWX
    java.lang.String node -> kuEo
    react.api.Permissable[] $VALUES -> Kfgq
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    27:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> vkWA
    46:46:java.lang.String getNode() -> srnU
    7:22:void <clinit>() -> <clinit>
react.api.PluginSelfDeleter -> vQdP:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> YyBo
    java.lang.Runnable r -> clmF
    28:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> vkWA
react.api.ReactCommand -> lDGO:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> hHwv
    java.lang.String usage -> yRxg
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> xrYg
    react.api.SideGate sideGate -> uGMa
    16:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> rUvs
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> vkWA
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> UIWO
    47:47:java.lang.String[] getPermissions() -> jVsH
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> wThQ
react.api.ReactException -> cJOA:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> SCPQ:
    react.glang.GMap keystore -> kJQR
    boolean monitoring -> monitoring
    boolean highMonitor -> GRLW
    boolean actionlogging -> sQhL
    boolean glasses -> HfQN
    boolean mapping -> hQhk
    int monitorSelection -> Gbjr
    int plays -> pQOd
    boolean monitorPosted -> yKHr
    int monitorLastSelection -> wwfV
    int switchNotification -> wfdr
    int hotbarSlot -> AXkI
    boolean shift -> Vnvd
    int scroll -> lDbf
    double lastHeight -> Orsg
    boolean heightMovement -> QEtr
    org.bukkit.entity.Player p -> Bcux
    42:93:void <init>(org.bukkit.entity.Player) -> <init>
    99:106:void save() -> save
    112:119:void load() -> load
    123:123:boolean isMonitoring() -> quXx
    128:128:boolean isMapping() -> nIlS
    133:133:org.bukkit.entity.Player getP() -> vQdP
    138:140:void setMonitoring(boolean) -> NxFK
    144:146:void setMapping(boolean) -> ejEe
    150:150:int getMonitorSelection() -> lDGO
    155:157:void setMonitorSelection(int) -> ejEe
    161:161:int getHotbarSlot() -> cJOA
    166:168:void setHotbarSlot(int) -> xFhA
    172:172:boolean isShifting() -> SCPQ
    177:179:void setShifting(boolean) -> xFhA
    183:183:boolean isShift() -> imbK
    188:190:void setShift(boolean) -> YMPx
    194:194:int getScroll() -> oVAh
    199:201:void setScroll(int) -> YMPx
    205:205:int getMonitorLastSelection() -> Ixwe
    210:212:void setMonitorLastSelection(int) -> rUvs
    216:217:void setP(org.bukkit.entity.Player) -> NxFK
    221:221:double getLastHeight() -> mymm
    226:228:void setLastHeight(double) -> vkWA
    232:232:boolean isHeightMovement() -> Dqxj
    237:239:void setHeightMovement(boolean) -> rUvs
    243:243:int getSwitchNotification() -> GsTk
    248:250:void setSwitchNotification(int) -> WWlK
    254:254:boolean getMonitorPosted() -> kcKC
    259:261:void setMonitorPosted(boolean) -> WWlK
    265:265:int getPlays() -> KfNs
    270:272:void setPlays(int) -> clQA
    276:276:boolean isGlasses() -> nksF
    281:283:void setGlasses(boolean) -> clQA
    287:287:boolean isActionlogging() -> YoXQ
    292:294:void setActionlogging(boolean) -> sbKq
    24:40:void <clinit>() -> <clinit>
react.api.Record -> imbK:
    java.lang.String recordType -> sIVm
    long recordTime -> rhVl
    java.lang.Object object -> object
    12:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> Oqxj
    32:32:long getRecordTime() -> qKFr
    38:38:java.lang.Object getRecordObject() -> KwOS
    react.json.JSONObject toJSON() -> XdBq
    void fromJSON(react.json.JSONObject) -> vkWA
react.api.RecordBook -> oVAh:
    java.io.File recordFile -> UIqU
    react.json.JSONObject js -> HwSf
    java.lang.String type -> type
    21:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> vkWA
    79:87:react.api.IRecord getRecord(long) -> vkWA
    react.api.IRecord createDummyRecord(long,java.lang.String) -> vkWA
    95:107:long getOldestRecordTime() -> JtKx
    113:125:long getLatestRecordTime() -> NoVe
    130:130:boolean within(long,long,long) -> vkWA
    136:144:int countRecords(long,long) -> vkWA
    150:162:react.glang.GMap getRecords(long,long) -> NxFK
    168:181:int purgeRecordsBefore(long) -> NxFK
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> Ixwe:
react.api.SampledChunk -> mymm:
    org.bukkit.Chunk c -> oyCn
    react.glang.GMap counts -> gpgG
    12:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> fRxu
    26:38:void hit(react.api.ChunkIssue,int) -> vkWA
    42:42:org.bukkit.Chunk getC() -> PJiq
    47:47:react.glang.GMap getCounts() -> pqyU
react.api.SampledType -> Dqxj:
    react.api.SampledType ENTITY_TIME_LOCK -> Puxw
    react.api.SampledType TILE_TIME_LOCK -> hsmt
    react.api.SampledType ENTITY_TIME -> toBC
    react.api.SampledType TILE_TIME -> dMoI
    react.api.SampledType ENTITY_DROPTICK -> UthO
    react.api.SampledType TILE_DROPTICK -> pjeE
    react.api.SampledType REDSTONE_TICK_USAGE -> milL
    react.api.SampledType REDSTONE_TICK -> dpSe
    react.api.SampledType REDSTONE_SECOND -> Vwke
    react.api.SampledType REDSTONE_TIME -> aEHB
    react.api.SampledType HOPPER_TICK_USAGE -> Fplt
    react.api.SampledType HOPPER_TICK -> wnxD
    react.api.SampledType HOPPER_SECOND -> BuaX
    react.api.SampledType HOPPER_TIME -> kIqy
    react.api.SampledType FLUID_TICK_USAGE -> ohAk
    react.api.SampledType FLUID_TICK -> VMXQ
    react.api.SampledType FLUID_SECOND -> lUfk
    react.api.SampledType FLUID_TIME -> ioBI
    react.api.SampledType TPS -> xGgb
    react.api.SampledType TICK -> RALU
    react.api.SampledType TIU -> LHIn
    react.api.SampledType MEM -> uaBK
    react.api.SampledType FREEMEM -> iTlu
    react.api.SampledType MAXMEM -> dNNo
    react.api.SampledType ALLOCMEM -> NgbK
    react.api.SampledType MAHS -> Utfg
    react.api.SampledType CHK_TIME -> hIYq
    react.api.SampledType EXPLOSION_TIME -> BKNx
    react.api.SampledType CHK -> AjNx
    react.api.SampledType ATASK -> IqeP
    react.api.SampledType STASK -> vIpa
    react.api.SampledType CHKS -> opQQ
    react.api.SampledType ENT -> qdtc
    react.api.SampledType ENTLIV -> mGfp
    react.api.SampledType ENTDROP -> OQSc
    react.api.SampledType ENTTILE -> ktef
    java.lang.String node -> kuEo
    react.api.SampledType[] $VALUES -> PSun
    6:6:react.api.SampledType[] values() -> values
    6:6:react.api.SampledType valueOf(java.lang.String) -> valueOf
    49:49:react.api.ISampler get() -> CUfJ
    55:55:java.lang.String toString() -> toString
    59:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> srnU
    6:43:void <clinit>() -> <clinit>
react.api.Sampler -> GsTk:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> JBEH
    react.surge.util.C altColor -> CMqM
    int interval -> mijX
    18:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> BInq
    49:49:react.surge.util.C getAltColor() -> lfJt
    55:55:int getInterval() -> getInterval
    void sample() -> eYFj
    void construct() -> Hdsl
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> vkWA
    107:108:void setInterval(int) -> NxFK
react.api.Sector -> kcKC:
    int value() -> value
react.api.SelectionException -> KfNs:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> nksF:
    react.api.SelectionMode WHITELIST -> scLH
    react.api.SelectionMode BLACKLIST -> sRJW
    react.api.SelectionMode[] $VALUES -> axKK
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> YoXQ:
    java.lang.Class objectType -> VflF
    react.api.SelectionMode mode -> AjQD
    react.glang.GSet list -> Tqfk
    react.glang.GSet possibilities -> GsrJ
    int popoff -> SfSo
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> IgwQ
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> YMPx
    43:43:react.glang.GSet getList() -> lwLi
    49:49:react.glang.GSet getPossibilities() -> ksiP
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUvs
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> WWlK
    98:100:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> fRxu:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> ejEe
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUvs
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> clQA
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> PJiq:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> pqyU:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> ejEe
    29:30:void add(org.bukkit.Chunk,int) -> vkWA
    34:38:void add(org.bukkit.World) -> clQA
    42:46:void addAll() -> miQO
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUvs
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> clQA
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> CUfJ:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> rUvs
    87:87:java.lang.String getName() -> getName
react.api.Side -> miQO:
    react.api.Side PLAYERS -> IGUA
    react.api.Side CONSOLE -> QNlF
    java.lang.String ss -> DjiT
    react.api.Side[] $VALUES -> CEaj
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> UIYS
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> NxFK
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> UIYS:
    react.api.SideGate PLAYERS_ONLY -> BmSR
    react.api.SideGate CONSOLES_ONLY -> eYfI
    react.api.SideGate ANYTHING -> Jcik
    react.api.SideGate[] $VALUES -> LipP
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> vkWA
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> UIYS$1:
    int[] $SwitchMap$react$api$SideGate -> dxed
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> NLuE:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> xOym
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> NLuE
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> URIv:
    double wScale -> pICr
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> vkWA
react.api.SpecializedTickLimiter -> MRbh:
    double rMaxTime -> klXf
    long rStartTime -> yJla
    double rLastTime -> SfSG
    long rMark -> Hvsg
    double tMaxTime -> uaDL
    react.gmath.Average atimes -> TObi
    react.gmath.Average adropped -> cmQN
    int droppedTicks -> XvCL
    boolean entityTick -> xjLq
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> aCje:
    react.glang.GList sources -> DsXy
    react.glang.GList splooge -> IrHR
    react.glang.GSet destroy -> FNQA
    22:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> vkWA
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> NxFK
    void clipped(org.bukkit.Location) -> NxFK
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> ejEe
    boolean isAllowedSource(org.bukkit.Location) -> xFhA
    15:15:react.glang.GList access$000(react.api.SploogeCounter) -> vkWA
    15:15:react.glang.GList access$100(react.api.SploogeCounter) -> NxFK
    15:15:react.glang.GSet access$200(react.api.SploogeCounter) -> ejEe
react.api.SploogeCounter$1 -> aCje$1:
    java.util.Iterator val$it -> QNkB
    org.bukkit.Location val$start -> vRdL
    int val$maxDistance -> Cxfg
    react.api.SploogeCounter this$0 -> Wimy
    32:32:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
react.api.SploogeCounter$1$1 -> aCje$1$1:
    react.api.SploogeCounter$1 this$1 -> PBwD
    90:90:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> EJjv:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> CxJf:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> XdBq
    38:49:void fromJSON(react.json.JSONObject) -> vkWA
react.api.StackTraceRecordBook -> vRHP:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> NxFK
    5:5:react.api.IRecord createDummyRecord(long,java.lang.String) -> vkWA
react.api.StackedEntity -> VUNK:
    org.bukkit.entity.LivingEntity entity -> jrFH
    int count -> count
    double rmx -> Hvtd
    21:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> vkWA
    46:46:int getAbsoluteMaxCount() -> URIv
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> NxFK
    56:58:void update() -> update
    62:68:void signalSize() -> MRbh
    72:123:void updateHealth() -> aCje
    127:128:void heal(double) -> NxFK
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> EJjv
    142:142:int getEffectiveCount(double) -> ejEe
    147:147:double getEffectiveMaxHealth(int) -> sbKq
    152:152:double getRealMaxHealth() -> CxJf
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> vkWA
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> gNLk:
    react.glang.GList headings -> TrGb
    13:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> vkWA
    24:24:int getMaxSelection() -> vRHP
    29:37:int left(int) -> iSmV
    42:50:int right(int) -> srla
    55:55:react.api.MonitorHeading getHeadFor(int) -> qAqx
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> vkWA
    83:100:java.lang.String getHotbarFor(int,boolean) -> vkWA
react.api.Unused -> KCkn:
react.api.WorldConfig -> SeVb:
    boolean allowRai -> ESxh
    boolean allowActions -> pYgS
    boolean allowRelighting -> oouf
    boolean allowTileThrottling -> Snek
    boolean allowEntityThrottling -> pjiM
    boolean allowFastLeafDecay -> mHNR
    java.util.List assumeNoSideEffectsEntities -> QqRH
    18:39:void <init>() -> <init>
    43:43:java.io.File getConfigFile(org.bukkit.World) -> sbKq
    48:62:void save(org.bukkit.World) -> iSmV
    66:80:void load(org.bukkit.World) -> srla
react.binject.BlockInjector -> VDLP:
    react.surge.util.Protocol protocol -> XBaP
    java.lang.Class blocksClass -> bXoU
    13:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> vkWA
    29:56:void inject() -> VUNK
    61:61:react.surge.util.Protocol getVersion() -> vIRI
react.binject.IBlockInjector -> DXjP:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> vkWA
    void add(int,java.lang.String,java.lang.Object) -> vkWA
    java.lang.Object get(java.lang.String) -> get
    void inject() -> VUNK
    react.surge.util.Protocol getVersion() -> vIRI
react.binject.InjectedBlock -> OjLO:
    react.surge.util.Protocol getInjectProtocol() -> gNLk
    java.lang.String getInjectKey() -> KCkn
    java.lang.String getInjectCKey() -> SeVb
    int getInjectId() -> VDLP
react.binject.ReflectionUtil -> sPmy:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> vkWA
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> vkWA
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> vkWA
    41:54:void setAccessible(java.lang.reflect.Field) -> vkWA
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> vkWA
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> vkWA
react.binject.V10.BlockInjector10 -> xGMI:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> WWlK
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> vkWA
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> vkWA
react.binject.V11.BlockInjector11 -> sbPj:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> clQA
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> vkWA
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> vkWA
react.binject.V12.BlockInjector12 -> hrrT:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> sbKq
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> vkWA
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> vkWA
react.binject.V8.BlockInjector8 -> BSDq:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> iSmV
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> vkWA
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> vkWA
react.binject.V9.BlockInjector9 -> OjJS:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> srla
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> vkWA
    12:12:java.lang.Object get(java.lang.String) -> get
    12:12:void add(int,java.lang.String,java.lang.Object) -> vkWA
react.cache.CachedEntity -> SSqw:
    java.util.UUID uid -> JSKY
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> IFvN
    double x -> x
    double y -> y
    double z -> z
    double vx -> gpoM
    double vy -> CNUR
    double vz -> qKgu
    double dx -> pawQ
    double dy -> NNSw
    double dz -> ELJd
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> clQA
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> DXjP
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> OjLO
    120:121:void setVx(double) -> xFhA
    125:125:double getVy() -> sPmy
    130:131:void setVy(double) -> YMPx
    135:135:double getVz() -> xGMI
    140:141:void setVz(double) -> rUvs
    145:145:double getDx() -> sbPj
    150:151:void setDx(double) -> WWlK
    155:155:double getDy() -> hrrT
    160:161:void setDy(double) -> clQA
    165:165:double getDz() -> BSDq
    170:171:void setDz(double) -> sbKq
    175:175:java.util.UUID getUid() -> OjJS
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> imco:
    int age -> oyFr
    boolean ageLock -> sspd
    boolean breed -> CVfo
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> clQA
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> SSqw
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> imco
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> bXOG:
    org.bukkit.DyeColor dye -> nvDS
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> clQA
    30:30:org.bukkit.DyeColor getDye() -> bXOG
    35:36:void setDye(org.bukkit.DyeColor) -> vkWA
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> vcIM:
    react.glang.GList potionEffects -> wMYU
    boolean canPickupItems -> GtTL
    org.bukkit.inventory.ItemStack[] armorContents -> neCG
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> YgeY
    double maxHealth -> maxHealth
    int maxAir -> Daxj
    int air -> PLIw
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> clQA
    63:63:react.glang.GList getPotionEffects() -> vcIM
    68:69:void setPotionEffects(react.glang.GList) -> NxFK
    73:73:boolean isCanPickupItems() -> OYHa
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> HSrl
    138:139:void setMaxAir(int) -> AWmR
    143:143:int getAir() -> TNeX
    148:149:void setAir(int) -> RQLP
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> OYHa:
    boolean sheared -> BTDa
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> clQA
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> HSrl:
    org.bukkit.inventory.ItemStack is -> cBap
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> clQA
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> TNeX:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> onuU:
    react.chronophysics.HopperDirection DOWN -> MBcS
    react.chronophysics.HopperDirection NORTH -> HLfE
    react.chronophysics.HopperDirection SOUTH -> nluG
    react.chronophysics.HopperDirection EAST -> XBbd
    react.chronophysics.HopperDirection WEST -> cJqu
    int direction -> direction
    react.chronophysics.HopperDirection[] $VALUES -> LsFA
    6:6:react.chronophysics.HopperDirection[] values() -> values
    6:6:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> YMPx
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> vkWA
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> NxFK
    6:12:void <clinit>() -> <clinit>
react.chronophysics.HopperDirection$1 -> onuU$1:
    int[] $SwitchMap$react$chronophysics$HopperDirection -> jXXa
    23:23:void <clinit>() -> <clinit>
react.chronophysics.HopperWormhole -> FyAx:
    org.bukkit.block.Hopper source -> ySay
    react.glang.GList path -> JdOD
    org.bukkit.block.Hopper destination -> vtmH
    18:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> onuU
    31:31:react.glang.GList getPath() -> FyAx
    36:36:org.bukkit.block.Hopper getDestination() -> wUKH
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> vkWA
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> wUKH:
    org.bukkit.block.Hopper h -> EnQV
    14:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> vkWA
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> SeTx
    62:62:boolean isLockedByRedstone() -> hPnH
react.command.CommandAct -> SeTx:
    41:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> vkWA
    186:192:react.text.RTX getBeginningRTX() -> qdYf
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> vkWA
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> NxFK
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> ejEe
    331:346:react.glang.GList getSortedCommands() -> ydBE
    351:358:int getPageSize(int) -> CoTN
    363:363:boolean isValidPage(int,int) -> vkWA
    368:377:react.glang.GList getPage(int,int) -> NxFK
react.command.CommandActionLog -> hPnH:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandCPUScore -> qdYf:
    16:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandCapabilities -> ydBE:
    20:27:void <init>() -> <init>
    32:79:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandChunkBlame -> pOsw:
    24:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandChunkBlame$1 -> pOsw$1:
    org.bukkit.command.CommandSender val$sender -> QqSg
    react.command.CommandChunkBlame this$0 -> nBaM
    37:37:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> pOsw$1$1:
    java.lang.String val$i -> Yoya
    react.glang.GMap val$top -> cSdL
    int val$totalx -> cmWF
    react.command.CommandChunkBlame$1 this$1 -> hkdK
    66:66:void <init>(react.command.CommandChunkBlame$1,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> yuCG:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandHelp -> JtMb:
    28:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> vkWA
    69:75:react.text.RTX getBeginningRTX() -> qdYf
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> vkWA
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> NxFK
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> ejEe
    191:198:react.glang.GList getSortedCommands() -> ydBE
    203:210:int getPageSize(int) -> CoTN
    215:215:boolean isValidPage(int,int) -> vkWA
    220:229:react.glang.GList getPage(int,int) -> NxFK
react.command.CommandHighMonitor -> jVsv:
    16:25:void <init>() -> <init>
    30:33:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandMap -> jguf:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandMonitor -> Cfij:
    18:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandReload -> GbVB:
    19:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.command.CommandReload$1 -> GbVB$1:
    org.bukkit.command.CommandSender val$sender -> QqSg
    react.command.CommandReload this$0 -> QiDI
    32:32:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> GbVB$1$1:
    react.command.CommandReload$1 this$1 -> skcS
    37:37:void <init>(react.command.CommandReload$1,java.lang.String,int) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> XSDw:
    28:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
    52:61:org.bukkit.inventory.ItemStack makeBook() -> pOsw
    66:92:void addSpikePages(react.glang.GList) -> ejEe
    96:106:void addStatusPages(react.glang.GList) -> xFhA
    110:127:int findSlot(org.bukkit.entity.Player) -> ejEe
react.command.CommandVersion -> RsWE:
    18:25:void <init>() -> <init>
    30:44:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> vkWA
react.controller.ActionController -> uEuK:
    int kiv -> AYQy
    react.glang.GMap actions -> dNTx
    react.glang.GMap pending -> yvDy
    react.glang.GList tasks -> nltO
    22:22:void <init>() -> <init>
    33:74:void start() -> start
    78:79:void fire(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> vkWA
    83:136:boolean fireAction(react.api.ActionType,react.action.source.IActionSource,react.api.ISelector[]) -> NxFK
    141:141:react.api.IAction getAction(react.api.ActionType) -> vkWA
    146:147:void registerAction(react.api.IAction) -> vkWA
    153:153:void stop() -> stop
    158:232:void tick() -> tick
    236:236:react.glang.GList getActions() -> yuCG
    241:248:react.glang.GList getActionNames() -> JtMb
    24:24:void <clinit>() -> <clinit>
react.controller.BenchmarkController -> PuaR:
    react.api.CPUBenchmark finished -> MJsE
    boolean done -> AQDI
    int score -> BdYk
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    13:13:react.api.CPUBenchmark access$002(react.controller.BenchmarkController,react.api.CPUBenchmark) -> vkWA
    13:13:boolean access$102(react.controller.BenchmarkController,boolean) -> vkWA
    13:13:react.api.CPUBenchmark access$000(react.controller.BenchmarkController) -> vkWA
react.controller.BenchmarkController$1 -> PuaR$1:
    react.controller.BenchmarkController this$0 -> yJpU
    27:27:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
react.controller.BenchmarkController$1$1 -> PuaR$1$1:
    react.controller.BenchmarkController$1 this$1 -> wflu
    32:32:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
react.controller.BenchmarkController$1$1$1 -> PuaR$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> WrdB
    37:37:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> MSFU:
    react.glang.GMap rangeMapping -> GRSX
    react.binject.IBlockInjector injector -> xXnT
    boolean injected -> oFDN
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> jVsv
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> jguf
    115:115:react.binject.IBlockInjector getInjector() -> Cfij
    120:120:boolean isInjected() -> GbVB
react.controller.ChronophyFluidController -> wwPT:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> QVaQ:
    boolean firstTickList -> xYNm
    long firstTick -> LisR
    long lastTick -> kIxE
    react.gmath.Average aCSMS -> QNoN
    react.glang.GMap pluginLoads -> agOY
    react.glang.GMap playerLoads -> Mdeg
    int serverLoads -> ndcY
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> XSDw
    63:73:void tickNextTickList() -> RsWE
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> vkWA
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> vkWA
    171:171:boolean isFirstTickList() -> uEuK
    176:176:long getFirstTick() -> PuaR
    181:181:long getLastTick() -> MSFU
    186:186:react.gmath.Average getaCSMS() -> wwPT
    191:191:react.glang.GMap getPluginLoads() -> QVaQ
    196:196:react.glang.GMap getPlayerLoads() -> pjKS
    201:201:int getServerLoads() -> oxJM
    21:21:react.glang.GMap access$000(react.controller.ChunkController) -> vkWA
    21:21:int access$108(react.controller.ChunkController) -> NxFK
    21:21:react.glang.GMap access$200(react.controller.ChunkController) -> ejEe
react.controller.ChunkController$1 -> QVaQ$1:
    org.bukkit.event.world.ChunkLoadEvent val$e -> HfXW
    react.controller.ChunkController this$0 -> slCT
    131:131:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> ejEe
    131:131:void run(java.lang.Object) -> vkWA
react.controller.CommandController -> pjKS:
    react.glang.GList commands -> IqnG
    boolean k -> nTEv
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> sbKq
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> iSmV
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> vkWA
    317:317:react.glang.GList getCommands() -> Yfho
    322:323:void setCommands(react.glang.GList) -> YMPx
    327:327:boolean isK() -> cRcd
    332:333:void setK(boolean) -> iSmV
react.controller.EntityCullController -> oxJM:
    react.glang.GSet flags -> XSfW
    react.glang.GSet defer -> wgPr
    react.glang.GMap maxs -> MmYb
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> HSwI
    172:180:int cull(org.bukkit.Chunk) -> xFhA
    185:285:int partialCull(org.bukkit.Chunk) -> YMPx
react.controller.EntityStackController -> Yfho:
    react.glang.GList stacks -> mist
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> rUvs
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> ejEe
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> xFhA
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> vkWA
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> vkWA
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> YMPx
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> vkWA
react.controller.EntityStackController$1 -> Yfho$1:
    org.bukkit.event.entity.EntitySpawnEvent val$e -> jGXy
    react.controller.EntityStackController this$0 -> kSMH
    249:249:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> cRcd:
    react.glang.GMap slots -> hlFd
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> vkWA
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> vkWA
react.controller.ExplosiveController -> HSwI:
    boolean firstTickList -> xYNm
    long firstTick -> LisR
    long lastTick -> kIxE
    react.gmath.Average aCSMS -> QNoN
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> XSDw
    50:60:void tickNextTickList() -> RsWE
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> vkWA
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> vkWA
    89:89:boolean isFirstTickList() -> uEuK
    94:94:long getFirstTick() -> PuaR
    99:99:long getLastTick() -> MSFU
    104:104:react.gmath.Average getaCSMS() -> wwPT
react.controller.FastDecayController -> UAIc:
    31:31:void <init>() -> <init>
    36:37:void start() -> start
    42:43:void stop() -> stop
    48:54:void on(org.bukkit.event.block.BlockBreakEvent) -> vkWA
    59:70:void on(org.bukkit.event.block.LeavesDecayEvent) -> vkWA
    74:155:void checkBreak(org.bukkit.block.Block) -> ejEe
    159:190:void decay(org.bukkit.block.Block) -> xFhA
    195:252:react.glang.GList getDrops(org.bukkit.block.Block) -> YMPx
    258:262:void tick() -> tick
react.controller.FastDecayController$1 -> UAIc$1:
    react.glang.GMap val$locs -> HCwQ
    react.controller.FastDecayController this$0 -> uGWh
    89:89:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    93:93:boolean isAllowedSplooge(org.bukkit.Location) -> ejEe
    99:99:boolean isAllowedSource(org.bukkit.Location) -> xFhA
    105:124:void clipped(org.bukkit.Location) -> NxFK
    129:152:void finished() -> finished
react.controller.FastDecayController$1$1 -> UAIc$1$1:
    int val$i -> jrMI
    react.controller.FastDecayController$1 this$1 -> iUWR
    134:134:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,int) -> <init>
    138:148:void run() -> run
react.controller.FastDecayController$2 -> UAIc$2:
    org.bukkit.block.Block val$b -> cKUf
    react.controller.FastDecayController this$0 -> uGWh
    160:160:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    164:188:void run() -> run
react.controller.FastDecayController$3 -> UAIc$3:
    int[] $SwitchMap$org$bukkit$TreeSpecies -> vIyu
    201:201:void <clinit>() -> <clinit>
react.controller.FeatureController -> uhWy:
    react.feature.INMSBinding trueBinding -> brfJ
    17:17:void <init>() -> <init>
    24:63:void start() -> start
    68:69:void stop() -> stop
    75:75:void tick() -> tick
    79:79:java.lang.String findPackageVersion() -> UAIc
    85:85:java.lang.String getPackageVersion() -> uhWy
    90:90:boolean hasBinding() -> MJSV
    96:100:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> vkWA
react.controller.FluidController -> MJSV:
    react.glang.GSet ignore -> LivR
    int flowsPerTick -> Snht
    int flowsPerSecond -> qnPH
    react.gmath.Average aFST -> WsEr
    react.gmath.Average aFSS -> qwAO
    react.gmath.Average aFSMS -> yddj
    boolean firstTickList -> xYNm
    long firstTick -> LisR
    long lastTick -> kIxE
    react.glang.GSet frozen -> uhye
    react.glang.GMap queue -> xPaF
    react.glang.GMap freezeTimes -> fmoc
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> rUvs
    68:76:void checkChunks() -> dfgP
    80:97:void checkChunk(org.bukkit.Chunk) -> WWlK
    101:107:void queue(org.bukkit.block.Block) -> rUvs
    111:111:boolean isFrozen(org.bukkit.Chunk) -> clQA
    116:117:void freeze(org.bukkit.Chunk) -> sbKq
    121:127:void unfreeze(org.bukkit.Chunk) -> iSmV
    131:138:void freeze(org.bukkit.Chunk,long) -> vkWA
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> XSDw
    172:182:void tickNextTickList() -> RsWE
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> vkWA
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> vkWA
    248:248:react.glang.GSet getIgnore() -> kRIw
    253:253:int getTransfersPerTick() -> biQr
    258:258:int getTransfersPerSecond() -> uyYf
    263:263:react.gmath.Average getaFST() -> pPXK
    268:268:react.gmath.Average getaFSS() -> ySAw
    273:273:react.gmath.Average getaFSMS() -> QpSA
    278:278:boolean isFirstTickList() -> uEuK
    283:283:long getFirstTick() -> PuaR
    288:288:long getLastTick() -> MSFU
    293:293:react.glang.GSet getFrozen() -> IWXy
    298:298:react.glang.GMap getQueue() -> AXTL
    303:303:react.glang.GMap getFreezeTimes() -> TWXj
react.controller.GlassController -> dfgP:
    react.glang.GMap q -> Hvyy
    react.glang.GList g -> yeEo
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> xFhA
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> YMPx
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> rUvs
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> vkWA
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> vkWA
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> vkWA
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> vkWA
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> vkWA
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> vkWA
    33:33:react.glang.GList access$000(react.controller.GlassController) -> vkWA
react.controller.GlassController$1 -> dfgP$1:
    react.glang.GMap val$cc -> RlGd
    react.controller.GlassController this$0 -> NEhF
    85:85:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> dfgP$1$1:
    org.bukkit.Location val$i -> MSfV
    org.bukkit.entity.Player val$j -> JmAO
    react.controller.GlassController$1 this$1 -> WrfH
    107:107:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> kRIw:
    react.glang.GMap g -> EeaV
    react.glang.GMap gr -> PwCL
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> vkWA
    121:156:void toggleMapping(org.bukkit.entity.Player) -> WWlK
    160:160:react.glang.GMap getG() -> nuEd
    165:165:react.glang.GMap getGr() -> xWnQ
    28:28:react.glang.GMap access$000(react.controller.GraphController) -> vkWA
    28:28:react.glang.GMap access$100(react.controller.GraphController) -> NxFK
react.controller.GraphController$1 -> kRIw$1:
    react.controller.GraphController this$0 -> YMwa
    49:49:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> kRIw$2:
    react.controller.GraphController this$0 -> YMwa
    85:85:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> kRIw$3:
    org.bukkit.event.player.PlayerJoinEvent val$e -> jrKk
    react.controller.GraphController this$0 -> YMwa
    101:101:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> biQr:
    react.glang.GSet ignore -> LivR
    int transfersPerTick -> slDy
    int transfersPerSecond -> kRkQ
    react.gmath.Average aHST -> BeJH
    react.gmath.Average aHSS -> WHRW
    react.gmath.Average aHSMS -> NxoJ
    boolean firstTickList -> xYNm
    long firstTick -> LisR
    long lastTick -> kIxE
    react.glang.GSet frozen -> uhye
    react.glang.GMap queue -> xPaF
    react.glang.GMap freezeTimes -> fmoc
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> rUvs
    65:73:void checkChunks() -> dfgP
    77:94:void checkChunk(org.bukkit.Chunk) -> WWlK
    98:104:void queue(org.bukkit.block.Block) -> rUvs
    108:108:boolean isFrozen(org.bukkit.Chunk) -> clQA
    113:114:void freeze(org.bukkit.Chunk) -> sbKq
    118:124:void unfreeze(org.bukkit.Chunk) -> iSmV
    128:135:void freeze(org.bukkit.Chunk,long) -> vkWA
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> XSDw
    169:179:void tickNextTickList() -> RsWE
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> vkWA
    207:207:react.glang.GSet getIgnore() -> kRIw
    212:212:int getTransfersPerTick() -> biQr
    217:217:int getTransfersPerSecond() -> uyYf
    222:222:react.gmath.Average getaHST() -> WytQ
    227:227:react.gmath.Average getaHSS() -> wfMm
    232:232:react.gmath.Average getaHSMS() -> FNQA
    237:237:boolean isFirstTickList() -> uEuK
    242:242:long getFirstTick() -> PuaR
    247:247:long getLastTick() -> MSFU
    252:252:react.glang.GSet getFrozen() -> IWXy
    257:257:react.glang.GMap getQueue() -> AXTL
    262:262:react.glang.GMap getFreezeTimes() -> TWXj
react.controller.HopperOvertickController -> uyYf:
    react.glang.GList possiblePlunge -> AHVM
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> ejEe
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> vkWA
react.controller.LanguageController -> pPXK:
    java.io.File languageFolder -> wMaA
    int oldVersion -> msHT
    java.io.File dlf -> fwDd
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> UcMR
    160:221:void downloadAll(boolean) -> srla
    225:261:void downloadLanguage(java.lang.String) -> qAqx
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> AWmR
    315:315:java.io.File getFileForLanguage(java.lang.String) -> RQLP
    320:332:void writeDefaults() -> tCRM
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    31:31:int access$002(react.controller.LanguageController,int) -> vkWA
    31:31:void access$100(react.controller.LanguageController) -> vkWA
react.controller.LanguageController$1 -> pPXK$1:
    react.controller.LanguageController this$0 -> pIMJ
    67:67:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> pPXK$2:
    react.controller.LanguageController this$0 -> pIMJ
    81:81:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
react.controller.LanguageController$2$1 -> pPXK$2$1:
    react.controller.LanguageController$2 this$1 -> wEPW
    104:104:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> vkWA
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> vkWA
    121:121:void onDownloadStarted(react.gnet.download.Download) -> vkWA
    126:128:void onDownloadFinished(react.gnet.download.Download) -> NxFK
    134:134:void onDownloadFailed(react.gnet.download.Download) -> ejEe
react.controller.LanguageController$3 -> pPXK$3:
    react.controller.LanguageController this$0 -> pIMJ
    194:194:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> pPXK$3$1:
    react.controller.LanguageController$3 this$1 -> mQDq
    199:199:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> pPXK$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> nuir
    207:207:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> pPXK$4:
    java.io.File val$dld -> TPMT
    react.controller.LanguageController this$0 -> pIMJ
    228:228:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> vkWA
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> vkWA
    245:245:void onDownloadStarted(react.gnet.download.Download) -> vkWA
    250:251:void onDownloadFinished(react.gnet.download.Download) -> NxFK
    257:257:void onDownloadFailed(react.gnet.download.Download) -> ejEe
react.controller.MonitorController -> ySAw:
    int maxCooldown -> RIeq
    react.api.TitleMonitor titleMonitor -> MvMM
    react.glang.GMap posts -> cJuq
    react.slate.PhantomSlate sb -> AbGx
    boolean ready -> EwGD
    37:37:void <clinit>() -> <clinit>
    43:48:void <init>() -> <init>
    53:88:void start() -> start
    92:92:react.slate.PhantomSlate constructActionLogBoard() -> Vnbr
    97:115:void toggleActionLog(org.bukkit.entity.Player) -> clQA
    119:137:void toggleMonitoring(org.bukkit.entity.Player) -> sbKq
    142:152:void stop() -> stop
    156:175:void constructMonitor() -> DYMy
    179:184:float calcVolume(react.api.ReactPlayer) -> vkWA
    189:189:boolean canMonitor(org.bukkit.entity.Player) -> iSmV
    194:194:boolean canActionLog(org.bukkit.entity.Player) -> srla
    199:204:boolean isMonitoring(org.bukkit.entity.Player) -> qAqx
    209:214:boolean isActionLogging(org.bukkit.entity.Player) -> AWmR
    219:223:void startMonitoring(org.bukkit.entity.Player) -> RQLP
    227:238:void stopMonitoring(org.bukkit.entity.Player) -> CoTN
    242:247:void startActionLogging(org.bukkit.entity.Player) -> PKEw
    251:262:void stopActionLogging(org.bukkit.entity.Player) -> QUxa
    268:268:void tick() -> tick
    272:275:void changePost(react.api.ReactPlayer) -> NxFK
    279:291:void processPlayer(react.api.ReactPlayer) -> ejEe
    296:296:void handleActionLog(org.bukkit.entity.Player) -> pHAb
    300:324:void handleTriggers(react.api.ReactPlayer) -> xFhA
    328:367:void handleScrolling(react.api.ReactPlayer) -> YMPx
    371:399:void handleShifting(react.api.ReactPlayer) -> rUvs
    403:425:void handlePosting(react.api.ReactPlayer) -> WWlK
    429:447:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> vkWA
    452:466:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> vkWA
    471:501:void tickMonitor(react.api.ReactPlayer) -> clQA
    505:505:react.api.TitleMonitor getTitleMonitor() -> CxMy
    511:520:void on(org.bukkit.event.player.PlayerJoinEvent) -> vkWA
    525:534:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> vkWA
    539:552:void onTick() -> vcMv
    556:578:void updateActionBoard() -> XBFG
    583:583:java.lang.String getTickName() -> Yfje
    90:90:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> vkWA
    40:40:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> vkWA
    41:41:void access$2(react.controller.MonitorController,boolean) -> vkWA
    41:41:boolean access$3(react.controller.MonitorController) -> NxFK
    40:40:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> ejEe
react.controller.MonitorController$1 -> ySAw$1:
    react.controller.MonitorController this$0 -> KMcT
    1:68:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    73:86:void run() -> run
react.controller.MonitorController$2 -> ySAw$2:
    react.controller.MonitorController this$0 -> KMcT
    1:556:void <init>(react.controller.MonitorController) -> <init>
    561:576:void run() -> run
react.controller.PhysicsController -> QpSA:
    react.glang.GMap samples -> texj
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> srla
    51:52:void onHopper(org.bukkit.Chunk) -> qAqx
    56:57:void onFluid(org.bukkit.Chunk) -> AWmR
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> vkWA
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> vkWA
    80:91:void onTick() -> vcMv
    96:96:java.lang.String getTickName() -> Yfje
    101:101:react.glang.GMap getSamples() -> iKew
react.controller.PlayerController -> IWXy:
    react.glang.GList players -> TOla
    react.glang.GSet save -> RbxY
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> kjuU
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> vkWA
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> DHCm
    113:113:react.glang.GList getPlayers() -> dwkb
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> vkWA
react.controller.PlayerController$1 -> IWXy$1:
    react.glang.GList val$toSave -> uaLn
    react.controller.PlayerController this$0 -> LjYW
    52:52:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> AXTL:
    react.rai.IRAI rai -> hIeM
    boolean raiEnabled -> MKYY
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    18:18:react.rai.IRAI access$000(react.controller.RAIController) -> vkWA
react.controller.RAIController$1 -> AXTL$1:
    react.controller.RAIController this$0 -> HoOD
    49:49:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> TWXj:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> ejEe
react.controller.ReactServerInfo -> nuEd:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> PeAn
    27:27:int dgetGameProtocol() -> lCnQ
    33:33:java.lang.String dgetGameVersion() -> eGjN
    39:39:java.lang.String dgetReactVersion() -> aCmr
    45:45:int dgetMaxPlayers() -> Ipmr
    51:58:react.glang.GList dgetConnectedPlayers() -> lDNs
    64:64:int dgetViewDistance() -> qJln
    70:70:int dgetGamePort() -> oVID
    76:76:java.lang.String dgetGameAddress() -> GryD
    82:89:react.glang.GList dgetRemotePlugins() -> wTmr
    95:102:react.glang.GList dgetWorlds() -> WPDi
    108:108:react.glang.GList dgetActions() -> KMAs
    114:114:react.glang.GList dgetSamplers() -> EKPd
react.controller.RedstoneController -> xWnQ:
    react.glang.GSet ignore -> LivR
    react.glang.GSet frozen -> uhye
    react.glang.GMap queue -> xPaF
    react.glang.GMap freezeTimes -> fmoc
    int redstonePerTick -> nvKP
    int redstonePerSecond -> xGrK
    react.gmath.Average aRST -> QygE
    react.gmath.Average aRSS -> Jtqj
    react.gmath.Average aRSMS -> uWyn
    boolean firstTickList -> xYNm
    long firstTick -> LisR
    long lastTick -> kIxE
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> rUvs
    95:101:void tick() -> tick
    105:113:void checkChunks() -> dfgP
    117:134:void checkChunk(org.bukkit.Chunk) -> WWlK
    138:144:void queue(org.bukkit.block.Block) -> rUvs
    148:148:boolean isFrozen(org.bukkit.Chunk) -> clQA
    153:154:void freeze(org.bukkit.Chunk) -> sbKq
    158:165:void flushTickList() -> XSDw
    169:179:void tickNextTickList() -> RsWE
    183:189:void unfreeze(org.bukkit.Chunk) -> iSmV
    193:200:void freeze(org.bukkit.Chunk,long) -> vkWA
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> vkWA
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> vkWA
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> vkWA
    246:246:react.glang.GSet getIgnore() -> kRIw
    251:251:react.glang.GSet getFrozen() -> IWXy
    256:256:react.glang.GMap getQueue() -> AXTL
    261:261:react.glang.GMap getFreezeTimes() -> TWXj
    266:266:int getRedstonePerTick() -> XJVW
    271:271:int getRedstonePerSecond() -> Bcgi
    276:276:react.gmath.Average getaRST() -> flov
    281:281:react.gmath.Average getaRSS() -> WXUJ
    286:286:react.gmath.Average getaRSMS() -> RsYP
    291:291:boolean isFirstTickList() -> uEuK
    296:296:long getFirstTick() -> PuaR
    301:301:long getLastTick() -> MSFU
react.controller.RemoteController -> WytQ:
    react.remote.server.RemoteServer remoteServer -> YyMu
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> GkJD
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    12:12:void access$000(react.controller.RemoteController) -> vkWA
react.controller.RemoteController$1 -> WytQ$1:
    react.controller.RemoteController this$0 -> sswL
    20:20:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> WytQ$2:
    react.controller.RemoteController this$0 -> sswL
    37:37:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> DinK
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> FVbT
react.controller.SampleController -> wfMm:
    react.glang.GMap samplers -> BSjU
    react.surge.server.SuperSampler ss -> DkQN
    int cd -> EDAF
    29:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> srtg
    69:74:void restartSuperSampler() -> eYKb
    78:79:void registerSampler(react.api.ISampler) -> ejEe
    83:83:react.api.ISampler getSampler(java.lang.String) -> CoTN
    88:131:void constructSamplers() -> DHKl
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> uqKb
    187:209:void onTick() -> vcMv
    214:214:java.lang.String getTickName() -> Yfje
    219:219:react.glang.GMap getSamplers() -> UQlQ
    224:224:react.surge.server.SuperSampler getSs() -> TFXu
    229:229:int getCd() -> qJlP
    234:241:react.glang.GList getSamplerNames() -> JQmQ
    22:22:react.surge.server.SuperSampler access$000(react.controller.SampleController) -> vkWA
react.controller.SampleController$1 -> wfMm$1:
    react.controller.SampleController this$0 -> xbEX
    141:141:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> wfMm$2:
    react.controller.SampleController this$0 -> xbEX
    153:153:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> FNQA:
    java.lang.String ipa -> qKmd
    react.glang.GList failures -> hRVC
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> PKEw
    41:74:void checkForIP() -> LrGP
    78:91:void scan(java.lang.Runnable) -> vkWA
    97:97:void stop() -> stop
    103:103:void tick() -> tick
    12:12:void <clinit>() -> <clinit>
react.controller.SecurityController$1 -> FNQA$1:
    react.controller.SecurityController this$0 -> LHUD
    18:18:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> FNQA$2:
    java.lang.String val$ip -> OHmB
    30:30:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> FNQA$3:
    java.lang.Thread val$t -> LYVQ
    48:48:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> UcMR:
    react.glang.GMap etl -> Fhep
    react.glang.GMap ttl -> qmqM
    22:22:void <init>() -> <init>
    30:51:void start() -> start
    56:74:void stop() -> stop
    79:93:void on(org.bukkit.event.world.WorldLoadEvent) -> vkWA
    98:112:void on(org.bukkit.event.world.WorldUnloadEvent) -> vkWA
    118:118:void tick() -> tick
    122:139:void witholdWorld(org.bukkit.World) -> qAqx
    143:160:void releaseWorld(org.bukkit.World) -> AWmR
    164:181:double getUniversalEntityTick() -> GIDl
    186:203:double getUniversalEntityLimit() -> NLxB
    208:225:double getUniversalTileLimit() -> cRcw
    230:247:double getUniversalTileTick() -> ckum
    252:264:double getUniversalEntityDroppedTicks() -> STXU
    269:281:double getUniversalTileDroppedTicks() -> xhrE
    286:297:void setEntityTickLimit(org.bukkit.World,double) -> vkWA
    301:312:void setTileTickLimit(org.bukkit.World,double) -> NxFK
    316:321:double getEntityTickLimit(org.bukkit.World) -> RQLP
    326:331:double getTileTickLimit(org.bukkit.World) -> CoTN
    336:341:double getLastEntityTick(org.bukkit.World) -> PKEw
    346:351:double getLastTileTick(org.bukkit.World) -> QUxa
    356:361:double getEntityDroppedTicks(org.bukkit.World) -> pHAb
    366:371:double getTileDroppedTicks(org.bukkit.World) -> kjuU
    376:398:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> vkWA
react.controller.SpikeController -> tCRM:
    react.glang.GMap spikes -> yvHs
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> vcMv
    111:111:java.lang.String getTickName() -> Yfje
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> QpUS
    128:160:void whoFuckingDidThis(react.glang.Callback) -> vkWA
    25:25:react.glang.GMap access$000(react.controller.SpikeController) -> vkWA
react.controller.SpikeController$1 -> tCRM$1:
    react.controller.SpikeController this$0 -> fLPI
    35:35:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> tCRM$1$1:
    react.controller.SpikeController$1 this$1 -> WQFG
    40:40:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> tCRM$2:
    react.glang.GMap val$vv -> agTG
    react.controller.SpikeController this$0 -> fLPI
    75:75:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> tCRM$3:
    java.lang.Thread val$t -> LYVQ
    react.glang.Callback val$callback -> LjXK
    react.controller.SpikeController this$0 -> fLPI
    131:131:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> Vnbr:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.WorldController -> DYMy:
    12:12:void <init>() -> <init>
    17:23:void start() -> start
    28:34:void stop() -> stop
    40:40:void tick() -> tick
    45:46:void on(org.bukkit.event.world.WorldUnloadEvent) -> vkWA
react.event.ReactEvent -> CxMy:
    org.bukkit.event.HandlerList handlers -> NEie
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
    8:8:void <clinit>() -> <clinit>
react.event.ReactPlayerEvent -> vcMv:
    org.bukkit.entity.Player player -> player
    10:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> XBFG:
    react.event.ScrollDirection direction -> vdOP
    boolean cancellled -> SnlK
    int amount -> CWLy
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> cdFu
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> aoCH
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> Yfje:
    react.event.ScrollDirection DOWN -> GlJd
    react.event.ScrollDirection UP -> kBPI
    react.event.ScrollDirection[] $VALUES -> yCGw
    3:3:react.event.ScrollDirection[] values() -> values
    3:3:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.feature.INMSBinding -> iKew:
    java.lang.String getPackageVersion() -> uhWy
    void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> vkWA
react.feature.NMSBinding -> dwkb:
    java.lang.String packageVersion -> EwGw
    8:10:void <init>(java.lang.String) -> <init>
    15:15:java.lang.String getPackageVersion() -> uhWy
react.feature.NMSBinding10 -> PeAn:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> vkWA
react.feature.NMSBinding11 -> lCnQ:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> vkWA
react.feature.NMSBinding12 -> eGjN:
    15:16:void <init>(java.lang.String) -> <init>
    22:32:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> vkWA
react.feature.NMSBinding8 -> aCmr:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> vkWA
react.feature.NMSBinding9 -> Ipmr:
    14:15:void <init>(java.lang.String) -> <init>
    21:30:void setBlock(org.bukkit.Location,react.surge.util.MaterialBlock) -> vkWA
react.gbench.Profiler -> lDNs:
    long nanos -> GQxr
    long startNano -> TrQs
    long millis -> HLkq
    long startMillis -> tnmM
    double time -> APgi
    boolean profiling -> qebp
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> PKEw
    78:78:double getTicks() -> oUiu
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> KLbc
    93:93:double getHours() -> aUSM
    98:98:double getMilliseconds() -> nBGJ
    103:103:long getNanoseconds() -> ogMH
    108:108:long getNanos() -> pYNX
    113:113:long getStartNano() -> aUSF
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> cIuq
    128:128:double getTime() -> cIvS
    133:133:boolean isProfiling() -> KMCo
react.gconcurrent.A -> qJln:
    react.gconcurrent.ParallelPoolManager mgr -> xPdy
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> qJln$1:
    react.gconcurrent.A this$0 -> BCJM
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> oVID:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> GryD:
    react.gconcurrent.QueueMode mode -> ssyc
    react.glang.GList threads -> kRow
    int next -> VMeE
    int threadCount -> ceJt
    java.util.Queue squeue -> gygg
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> DkSO
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> BBjf
    22:23:void syncQueue(react.gconcurrent.Execution) -> vkWA
    long getNanoGate() -> aLbV
    29:51:void tickSyncQueue() -> aLat
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> ETCg
    102:109:int getTotalQueueSize() -> mXTo
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> NxFK
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> FWGJ
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> iKhK
    161:188:void updateThreadInformation() -> xhts
    192:224:react.gconcurrent.ParallelThread nextThread() -> avts
    229:235:void createThreads(int) -> QUxa
    239:239:react.gconcurrent.QueueMode getMode() -> BJWt
    244:244:int getNext() -> XBHS
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> esBF
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> nJVh
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> rMrA
react.gconcurrent.ParallelThread -> wTmr:
    java.util.Queue queue -> kRpC
    react.gconcurrent.ThreadInformation info -> DkSO
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> iSmV
    63:70:void execute(react.gconcurrent.Execution) -> ejEe
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> NxFK
    92:92:java.util.Queue getQueue() -> GQVo
    97:97:react.gconcurrent.ThreadInformation getInfo() -> qlpk
react.gconcurrent.QueueMode -> WPDi:
    react.gconcurrent.QueueMode ROUND_ROBIN -> LHWC
    react.gconcurrent.QueueMode SMALLEST -> IjAo
    react.gconcurrent.QueueMode[] ENUM$VALUES -> JmDn
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> KMAs:
    react.gconcurrent.ParallelPoolManager mgr -> xPdy
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> KMAs$1:
    react.gconcurrent.S this$0 -> NVmO
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> EKPd:
    long tick -> CqBD
    long atick -> VpHF
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> XJVW:
    double ticksPerSecond -> oWKe
    int queuedSize -> ECbW
    boolean processing -> LsJt
    double utilization -> WHWE
    react.gmath.Average ticksPerSecondAverage -> wNBW
    long tick -> CqBD
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> SCWj
    33:35:void setTicksPerSecond(double) -> srla
    39:39:int getQueuedSize() -> RPvD
    44:45:void setQueuedSize(int) -> pHAb
    49:49:boolean isProcessing() -> Grxv
    54:55:void setProcessing(boolean) -> qAqx
    59:59:double getUtilization() -> lTpf
    64:65:void setUtilization(double) -> qAqx
    69:69:double getTicksPerSecondAverage() -> yAco
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> bOcV
    89:89:int getId() -> getId
react.gformat.F -> Bcgi:
    java.text.NumberFormat NF -> LGvY
    java.text.DecimalFormat DF -> iCwj
    java.lang.String[] NAMES -> dxqk
    java.math.BigInteger THOUSAND -> JcvD
    java.util.NavigableMap MAP -> URrv
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> QUxa
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> vkWA
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> vkWA
    201:221:java.lang.String timeLong(long,int) -> vkWA
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> ejEe
    236:236:java.lang.String b(double) -> AWmR
    241:258:java.lang.String b(java.math.BigInteger) -> vkWA
    263:267:void instantiate() -> hYeT
    279:279:java.lang.String fileSize(long) -> xFhA
    292:292:java.lang.String memSize(long) -> YMPx
    305:306:java.lang.String stamp(long) -> rUvs
    322:349:java.lang.String ofSize(long,int) -> NxFK
    363:368:java.lang.String trim(java.lang.String,int) -> NxFK
    381:401:java.lang.String cname(java.lang.String) -> pHAb
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> WWlK
    459:477:java.lang.String memx(long) -> clQA
    491:492:java.lang.String f(long) -> sbKq
    504:505:java.lang.String f(int) -> kjuU
    519:528:java.lang.String f(double,int) -> NxFK
    544:553:java.lang.String fd(double,int) -> ejEe
    567:576:java.lang.String f(float,int) -> vkWA
    587:587:java.lang.String f(double) -> RQLP
    598:598:java.lang.String f(float) -> vkWA
    613:613:java.lang.String pc(double,int) -> xFhA
    628:628:java.lang.String pc(float,int) -> NxFK
    641:641:java.lang.String pc(double) -> CoTN
    654:654:java.lang.String pc(float) -> NxFK
    670:670:java.lang.String pc(int,int,int) -> vkWA
    684:684:java.lang.String pc(int,int) -> ejEe
    700:700:java.lang.String pc(long,long,int) -> vkWA
    714:714:java.lang.String pc(long,long) -> xFhA
    726:726:java.lang.String msSeconds(long) -> iSmV
    740:740:java.lang.String msSeconds(long,int) -> ejEe
    752:752:java.lang.String nsMs(long) -> srla
    766:766:java.lang.String nsMs(long,int) -> xFhA
    780:780:java.lang.String nsMsd(long,int) -> YMPx
react.glang.AccessCallback -> flov:
    java.lang.Object get() -> get
react.glang.Adapter -> WXUJ:
    java.lang.Object adapt(java.lang.Object) -> rUvs
    java.lang.Object onAdapt(java.lang.Object) -> WWlK
react.glang.Callback -> RsYP:
    java.lang.Object t -> fmwF
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> vkWA
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> GkJD:
    double i -> uOoS
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> PKEw
react.glang.FinalFloat -> DinK:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> ejEe
react.glang.FinalInteger -> FVbT:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> DHCm
react.glang.FinalLong -> srtg:
    long i -> PnXh
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> qAqx
react.glang.FinalString -> eYKb:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> DHKl:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> rUvs
    java.lang.Object onAdapt(java.lang.Object) -> WWlK
react.glang.GBiset -> uqKb:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> WYYx
    java.lang.Object b -> VDtk
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> nBDq
    53:54:void setA(java.lang.Object) -> clQA
    63:63:java.lang.Object getB() -> loCa
    73:74:void setB(java.lang.Object) -> sbKq
react.glang.GList -> UQlQ:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> xFhA
    45:52:react.glang.GList grepDistance(int,int) -> YMPx
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> NxFK
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> xrFN
    188:190:react.glang.GList shuffleCopy() -> aere
    198:199:void shuffle() -> Qout
    210:236:react.glang.GList split() -> QhFi
    248:248:boolean hasIndex(int) -> iBlQ
    258:259:java.lang.Object pickRandom() -> ogNj
    270:277:react.glang.GList stringList() -> iByR
    288:292:void forEach(react.glang.Callback) -> NxFK
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> sHYI
    336:336:react.glang.GList cropFrom(int) -> JQeO
    341:373:react.glang.GList split(int) -> IFRO
    389:389:react.glang.GList cropTo(int) -> YwcX
    406:416:react.glang.GList crop(int,int) -> rUvs
    427:431:react.glang.GList removeDuplicates() -> DQAw
    442:446:void removeAll(java.lang.Object) -> iSmV
    455:455:boolean hasDuplicates() -> EeGK
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> bhwy
    484:490:void push(java.lang.Object,int) -> vkWA
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> srla
    528:532:void add(java.util.List) -> vkWA
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> aUUL
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> eXoa
    626:627:react.glang.GList qdel(java.lang.Object) -> qAqx
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> wMCj
    662:669:java.lang.Object popLast() -> KCsg
    674:683:java.lang.Object popRandom() -> ryIB
react.glang.GListAdapter -> TFXu:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> NxFK
    java.lang.Object onAdapt(java.lang.Object) -> WWlK
react.glang.GMap -> qJlP:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> dpAN
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> vkWA
    64:81:react.glang.GMap flip() -> JQre
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> vkWA
    121:121:react.glang.GList k() -> iBlQ
    131:131:react.glang.GSet kset() -> UAQd
    141:141:react.glang.GList v() -> ykyg
    151:151:react.glang.GSet vset() -> dUlr
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> NxFK
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> WWlK
    209:219:react.glang.GMap removeDuplicateValues() -> AFus
    233:242:void put(react.glang.GList,react.glang.GList) -> vkWA
    251:267:react.glang.GList sortK() -> dUmM
    277:293:react.glang.GList sortV() -> gFCp
react.glang.GQuadraset -> JQmQ:
    java.lang.Object a -> WYYx
    java.lang.Object b -> VDtk
    java.lang.Object c -> sAXb
    java.lang.Object d -> LGxj
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> nBDq
    25:26:void setA(java.lang.Object) -> clQA
    30:30:java.lang.Object getB() -> loCa
    35:36:void setB(java.lang.Object) -> sbKq
    40:40:java.lang.Object getC() -> AFxI
    45:46:void setC(java.lang.Object) -> AWmR
    50:50:java.lang.Object getD() -> vkak
    55:56:void setD(java.lang.Object) -> RQLP
react.glang.GSet -> LrGP:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> GIDl:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> WYYx
    java.lang.Object b -> VDtk
    java.lang.Object c -> sAXb
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> nBDq
    26:27:void setA(java.lang.Object) -> clQA
    31:31:java.lang.Object getB() -> loCa
    36:37:void setB(java.lang.Object) -> sbKq
    41:41:java.lang.Object getC() -> AFxI
    46:47:void setC(java.lang.Object) -> AWmR
react.gmath.Average -> NLxB:
    double[] values -> sAYE
    double average -> kleF
    boolean dirty -> KMgW
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> QUxa
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> MBJD
react.gmath.DoubleArrayUtils -> cRcw:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> vkWA
    17:19:void wrapRight(double[]) -> vkWA
    23:27:void fill(double[],double) -> fill
react.gmath.M -> ckum:
    int precision -> OQbt
    int modulus -> TYBn
    float[] sin -> FNxg
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> vkWA
    31:36:boolean r(java.lang.Double) -> NxFK
    51:51:double tps(long,int) -> rUvs
    63:63:double ticksFromNS(long) -> AWmR
    75:101:java.lang.String toRoman(int) -> vIRI
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> WWlK
    144:216:int fromRoman(java.lang.String) -> kjuU
    226:226:long ns() -> GjkU
    236:236:long ms() -> nIvy
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> NxFK
    333:333:float sinLookup(int) -> IyWE
react.gnet.client.Client -> STXU:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> qKsF
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> vkWA
    74:74:react.gnet.packet.PacketHandler getHandler() -> ycht
react.gnet.client.IClient -> xhrE:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> vkWA
    react.gnet.packet.PacketHandler getHandler() -> ycht
react.gnet.download.Download -> QpUS:
    react.gnet.download.DownloadState state -> ELVj
    react.gnet.download.DownloadType type -> Vwyo
    react.gnet.download.DownloadStatus status -> mrjV
    react.gnet.download.DownloadMonitor monitor -> JmGE
    java.net.URL url -> url
    java.io.File file -> ognu
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> lDQu
    92:92:react.gnet.download.DownloadType getType() -> wTpx
    97:97:react.gnet.download.DownloadStatus getStatus() -> dELH
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> AaJv
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> cdFu:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> vkWA
    void onDownloadStarted(react.gnet.download.Download) -> vkWA
    void onDownloadFinished(react.gnet.download.Download) -> NxFK
    void onDownloadFailed(react.gnet.download.Download) -> ejEe
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> vkWA
react.gnet.download.DownloadState -> aoCH:
    react.gnet.download.DownloadState IDLE -> ecCG
    react.gnet.download.DownloadState DOWNLOADING -> tCxn
    react.gnet.download.DownloadState FAILED -> Eefx
    react.gnet.download.DownloadState FINISHED -> cCJe
    react.gnet.download.DownloadState[] $VALUES -> eQaO
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> oUiu:
    long bytesDownloaded -> xXvX
    long bytesTotal -> BvQa
    long bytesPerSecond -> GlOD
    long timeElapsed -> qedY
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> qKQC
    25:25:long getBytesDownloaded() -> cJYG
    30:31:void setBytesDownloaded(long) -> RQLP
    35:35:long getBytesTotal() -> EeGD
    40:41:void setBytesTotal(long) -> CoTN
    45:45:long getBytesPerSecond() -> gyHe
    50:51:void setBytesPerSecond(long) -> PKEw
    55:55:long getTimeElapsed() -> PdgW
    60:61:void setTimeElapsed(long) -> QUxa
react.gnet.download.DownloadType -> KLbc:
    react.gnet.download.DownloadType DETERMINATE -> JAqy
    react.gnet.download.DownloadType INDETERMINATE -> wMbu
    react.gnet.download.DownloadType[] $VALUES -> wpKI
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> aUSM:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> uqRf
    java.lang.String getPacketName() -> lwYf
react.gnet.packet.IncompatablePacketException -> nBGJ:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> ogMH:
    react.gnet.packet.PacketBinding SERVER_BOUND -> MurO
    react.gnet.packet.PacketBinding CLIENT_BOUND -> RJLx
    react.gnet.packet.PacketBinding[] $VALUES -> oxry
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> pYNX:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> aUSF:
    react.glang.GList accept -> qUFr
    react.gnet.packet.PacketBinding side -> qCdc
    react.gnet.streams.OSS out -> MSnj
    react.gnet.streams.ISS in -> qKuN
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> vkWA
    28:34:void accept(react.gnet.packet.IPacket) -> NxFK
    38:46:react.gnet.packet.IPacket findPacket(int) -> FNJa
    51:66:react.gnet.packet.IPacket read() -> QyLn
    71:77:void write(react.gnet.packet.IPacket) -> ejEe
react.gnet.packet.UnhandledPacketException -> cIuq:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> cIvS:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> ycht
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> xFhA
react.gnet.server.Server -> KMCo:
    int port -> port
    java.net.ServerSocket socket -> ydmt
    react.gnet.packet.PacketHandler handler -> qKsF
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> ycht
    37:84:void run() -> run
    88:91:void pstart() -> xWwr
    95:96:void pstop() -> dfon
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> xFhA
react.gnet.streams.ISS -> aLbV:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> JuYv
    boolean built -> GuCD
    byte[] readBuffer -> TrWC
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> HeSx
    64:72:react.glang.GList readStringList() -> kQsK
    77:85:react.glang.GList readDoubleList() -> gMvP
    90:98:react.glang.GList readLongList() -> ccnL
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> vkWA
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> vkWA
    136:137:react.gnet.streams.ISS gzip() -> aTvW
    142:147:void build() -> aUVx
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> NxFK
    435:436:void close() -> close
react.gnet.streams.OSS -> aLat:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> klgc
    react.gnet.streams.StreamBuilder bu -> JuYv
    boolean built -> GuCD
    byte[] writeBuffer -> dFPl
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> NfeN
    41:42:react.gnet.streams.OSS gzip(int) -> kIUl
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> NxFK
    53:58:void build() -> aUVx
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> clQA
    102:108:void writeDoubleList(react.glang.GList) -> sbKq
    112:118:void writeLongList(react.glang.GList) -> iSmV
    122:128:void writeStreamableList(react.glang.GList) -> srla
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> AaKo
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> ejEe
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> ETCg:
    react.glang.GList constructors -> BvSN
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> vkWA
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> vkWA
    49:50:void bind(react.gnet.streams.StreamConstructor) -> vkWA
    54:55:void bindGZIP(int) -> mFjf
    59:60:void bindGZIP() -> tKlC
    64:65:void bindCipher(javax.crypto.Cipher) -> ejEe
    69:70:void bindBuffer(int) -> DPVr
    74:75:void bindBuffer() -> FMwS
react.gnet.streams.StreamConstructor -> mXTo:
    java.io.InputStream constructInput(java.io.InputStream) -> vkWA
    java.io.OutputStream constructOutput(java.io.OutputStream) -> vkWA
react.gnet.streams.constructors.BufferedStreamConstructor -> FWGJ:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> NxFK
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> NxFK
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> vkWA
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> vkWA
react.gnet.streams.constructors.CipherStreamConstructor -> iKhK:
    javax.crypto.Cipher cipher -> OshU
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> ejEe
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> ejEe
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> vkWA
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> vkWA
react.gnet.streams.constructors.GZipStreamConstructor -> xhts:
    int compressionLevel -> xbKo
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> xFhA
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> xFhA
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> vkWA
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> vkWA
react.gnet.streams.overlays.CGZIPInputStream -> avts:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> BJWt:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> XBHS:
    void toBytes(react.gnet.streams.OSS) -> vkWA
    void fromBytes(react.gnet.streams.ISS) -> vkWA
react.graph.ColossalView -> esBF:
    react.papyrus.BufferedFrame view -> SoSg
    react.glang.GMap buffers -> DYvY
    react.glang.GMap graphs -> ETiR
    double level -> mGxi
    double targetLevel -> Xuqg
    int maxX -> vSTc
    int maxY -> Iifd
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> Rjlb
    51:77:void render() -> OXrQ
    81:98:void scroll(int) -> DPVt
    102:112:void recompile() -> MRkq
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> vkWA
    122:122:react.papyrus.BufferedFrame getView() -> inPI
    127:127:react.glang.GMap getBuffers() -> gpYP
    132:132:react.glang.GMap getGraphs() -> jqRL
    137:137:double getLevel() -> Xtnm
    142:142:double getTargetLevel() -> Ukej
    147:147:int getMaxX() -> jONm
    152:152:int getMaxY() -> vRPu
react.graph.ColossalView$Builder -> esBF$vkWA:
    react.glang.GList graphs -> QNyv
    160:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> vkWA
    171:191:react.graph.ColossalView compute() -> fTEO
react.graph.CubicleIterator -> nJVh:
    int[][] mapping -> eHsC
    int xCubes -> WPki
    int yCubes -> BBnl
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> GQOp
    47:130:void insert(react.graph.GraphSize,int) -> vkWA
    134:145:void print() -> print
react.graph.GraphSampleLine -> rMrA:
    double lx -> OYtM
    double ly -> jqsQ
    react.api.ISampler sampler -> fCda
    react.graph.IFormatter formatter -> SMPF
    byte graphColor -> Obee
    byte backgroundColor -> YEoX
    byte borderColor -> iMNW
    byte textColor -> SMOn
    int ticksLeftTitle -> ChWR
    int ticksOutTitle -> GkrQ
    double nextPoint -> esiG
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> eYFj
    51:183:void onRender(react.papyrus.BufferedFrame) -> vkWA
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> NxFK
    226:254:int getHue(int,int,int) -> ejEe
    259:281:void scaleFor(react.glang.GList) -> qAqx
    285:285:react.graph.IFormatter getFormatter() -> VDIx
    290:291:void setFormatter(react.graph.IFormatter) -> vkWA
    295:295:byte getGraphColor() -> wwXF
    300:301:void setGraphColor(byte) -> vkWA
    305:305:byte getBackgroundColor() -> aMEi
    310:311:void setBackgroundColor(byte) -> NxFK
    315:315:byte getBorderColor() -> sYhm
    320:321:void setBorderColor(byte) -> ejEe
    325:325:byte getTextColor() -> KTyS
    330:331:void setTextColor(byte) -> xFhA
    335:335:react.api.ISampler getSampler() -> uGAd
react.graph.GraphSize -> GQVo:
    react.graph.GraphSize WIDE -> rhlg
    react.graph.GraphSize FULL -> YguS
    react.graph.GraphSize SQUARE -> wUyL
    react.graph.GraphSize[] $VALUES -> kBVW
    3:3:react.graph.GraphSize[] values() -> values
    3:3:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> HnSn
    3:7:void <clinit>() -> <clinit>
react.graph.GraphSize$1 -> GQVo$1:
    int[] $SwitchMap$react$graph$GraphSize -> RInd
    11:11:void <clinit>() -> <clinit>
react.graph.GraphText -> qlpk:
    java.lang.String text -> text
    byte fontColor -> oxvE
    byte backgroundColor -> YEoX
    boolean wrote -> VMiv
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> vkWA
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> aLhF
    68:69:void setFontColor(byte) -> YMPx
    73:73:byte getBackgroundColor() -> aMEi
    78:79:void setBackgroundColor(byte) -> NxFK
react.graph.GraphingInstance -> SCWj:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> QNyv
    react.graph.ColossalView view -> DIWa
    react.papyrus.Papyrus papyrus -> RlRn
    react.papyrus.IRenderer renderer -> NWVB
    boolean mapping -> hQhk
    react.glang.GList msgs -> kmJI
    react.surge.sched.Task waiter -> PfLl
    react.surge.sched.Task waiter2 -> EemJ
    int shift -> Fhml
    boolean notif -> esgg
    48:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> vkWA
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> vkWA
    138:142:void send(java.lang.String) -> DHCm
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> vkWA
    153:165:void on(react.event.ReactScrollEvent) -> vkWA
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> vkWA
    179:187:void destroy() -> destroy
    191:200:void toggle() -> aoLG
    204:205:void setGraphs(react.glang.GList) -> AWmR
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> kQtb
    243:259:void compile() -> VCwJ
    32:32:boolean access$000(react.graph.GraphingInstance) -> vkWA
    32:32:react.glang.GList access$100(react.graph.GraphingInstance) -> NxFK
    32:32:boolean access$200(react.graph.GraphingInstance) -> ejEe
    32:32:boolean access$202(react.graph.GraphingInstance,boolean) -> vkWA
    32:32:int access$300(react.graph.GraphingInstance) -> xFhA
    32:32:int access$310(react.graph.GraphingInstance) -> YMPx
    32:32:int access$302(react.graph.GraphingInstance,int) -> vkWA
    32:32:react.graph.ColossalView access$400(react.graph.GraphingInstance) -> rUvs
react.graph.GraphingInstance$1 -> SCWj$1:
    org.bukkit.entity.Player val$player -> broN
    react.graph.GraphingInstance this$0 -> fCeu
    52:52:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> SCWj$2:
    react.graph.GraphingInstance this$0 -> fCeu
    77:77:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> SCWj$3:
    react.graph.GraphingInstance this$0 -> fCeu
    107:107:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> vkWA
react.graph.IFormatter -> RPvD:
    java.lang.String from(double) -> pHAb
react.graph.IGraph -> Grxv:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> nuRF
    long getTimeViewport() -> QhMe
    void render(react.papyrus.BufferedFrame) -> ejEe
    double getMax() -> getMax
    void setMax(double) -> kjuU
react.graph.NormalGraph -> lTpf:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> mGyo
    long timeViewport -> IXdy
    double max -> max
    13:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> nuRF
    35:35:long getTimeViewport() -> QhMe
    41:42:void render(react.papyrus.BufferedFrame) -> ejEe
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> kjuU
    void onRender(react.papyrus.BufferedFrame) -> vkWA
react.graph.PlotBoard -> yAco:
    react.glang.GMap plots -> mGys
    int maxRecordings -> tLns
    13:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> gNYp
    33:33:long getAccurateTimeSpan() -> eQCw
    38:50:long getMedian(long,long) -> YMPx
    55:55:long getMinimumAccuracyRange() -> DQFl
    60:70:double getMaxValue() -> PeKG
    75:85:double getMinValue() -> SvdT
    90:90:react.glang.GList sort(react.glang.GMap) -> NxFK
    95:105:long earilestRecording() -> oEPE
    110:120:long latestRecording() -> qeIC
    125:126:void reduceBefore(long) -> pHAb
    130:156:void reduceBetween(long,long) -> rUvs
    160:160:boolean before(long,long) -> WWlK
    165:165:boolean after(long,long) -> clQA
    170:170:boolean within(long,long,long) -> vkWA
    175:193:react.glang.GMap getBetween(long,long) -> sbKq
    198:200:void plot(long,double) -> vkWA
    204:204:boolean hasAt(long) -> kjuU
    209:209:double getAt(long) -> DHCm
    214:214:int getSize() -> getSize
react.graph.Point -> bOcV:
    int x -> x
    int y -> y
    9:12:void <init>() -> <init>
    15:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> hYeT:
    int iid -> dVqc
    react.graph.IGraph graph -> xbLt
    react.graph.GraphSize size -> xaku
    int id -> id
    11:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> RcAJ
    24:25:void setGraph(react.graph.IGraph) -> vkWA
    29:29:react.graph.GraphSize getSize() -> CgVO
    34:35:void setSize(react.graph.GraphSize) -> vkWA
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
    5:5:void <clinit>() -> <clinit>
react.graph.RenderMaxType -> nBDq:
    react.graph.RenderMaxType UNLIMITED -> wokN
    react.graph.RenderMaxType LIMITED -> cSnx
    react.graph.RenderMaxType[] $VALUES -> AkBc
    3:3:react.graph.RenderMaxType[] values() -> values
    3:3:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.json.HTTP -> loCa:
    java.lang.String CRLF -> QWlY
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> iBlQ
    162:198:java.lang.String toString(react.json.JSONObject) -> NxFK
react.json.HTTPTokener -> xrFN:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> aere:
    java.util.ArrayList myArrayList -> vmHR
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> vkWA
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> IxxQ
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> UIWO
    394:399:react.json.JSONObject getJSONObject(int) -> jVsH
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> sHYI
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> wThQ
    515:515:boolean optBoolean(int) -> Oqxj
    533:536:boolean optBoolean(int,boolean) -> NxFK
    551:551:double optDouble(int) -> qKFr
    569:572:double optDouble(int,double) -> vkWA
    587:587:int optInt(int) -> XdBq
    605:608:int optInt(int,int) -> clQA
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> NxFK
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> vkWA
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> vkWA
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> vkWA
    722:723:react.json.JSONArray optJSONArray(int) -> KwOS
    737:738:react.json.JSONObject optJSONObject(int) -> JtKx
    752:752:long optLong(int) -> NoVe
    770:773:long optLong(int,long) -> vkWA
    788:788:java.lang.String optString(int) -> VDIx
    803:804:java.lang.String optString(int,java.lang.String) -> vkWA
    816:817:react.json.JSONArray put(boolean) -> AWmR
    830:831:react.json.JSONArray put(java.util.Collection) -> vkWA
    845:848:react.json.JSONArray put(double) -> DHCm
    860:861:react.json.JSONArray put(int) -> BInq
    873:874:react.json.JSONArray put(long) -> iBlQ
    887:888:react.json.JSONArray put(java.util.Map) -> vkWA
    902:903:react.json.JSONArray put(java.lang.Object) -> CoTN
    921:922:react.json.JSONArray put(int,boolean) -> ejEe
    939:940:react.json.JSONArray put(int,java.util.Collection) -> vkWA
    958:959:react.json.JSONArray put(int,double) -> NxFK
    977:978:react.json.JSONArray put(int,int) -> sbKq
    996:997:react.json.JSONArray put(int,long) -> NxFK
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> vkWA
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> vkWA
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> PKEw
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> vkWA
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> vkWA
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> vkWA
react.json.JSONException -> Qout:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> psfl
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> QhFi:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> vkWA
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> JQeO
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> vkWA
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> NxFK
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> iBlQ
    379:456:java.lang.String toString(react.json.JSONArray) -> NxFK
    472:552:java.lang.String toString(react.json.JSONObject) -> NxFK
react.json.JSONObject -> ogNj:
    java.util.Map map -> map
    java.lang.Object NULL -> apLm
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> vkWA
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> NxFK
    480:499:java.lang.String doubleToString(double) -> iBlQ
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> IFRO
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> YwcX
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> vIRI
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> ejEe
    751:767:java.lang.String[] getNames(java.lang.Object) -> QUxa
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> IyWE
    855:855:boolean isNull(java.lang.String) -> FNJa
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> XcoM
    917:937:java.lang.String numberToString(java.lang.Number) -> vkWA
    949:949:java.lang.Object opt(java.lang.String) -> HeSx
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> vkWA
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> vkWA
    1018:1018:boolean optBoolean(java.lang.String) -> NfeN
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> vkWA
    1054:1054:double optDouble(java.lang.String) -> kIUl
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> vkWA
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> vkWA
    1116:1119:double optDouble(java.lang.String,double) -> vkWA
    1134:1134:int optInt(java.lang.String) -> mFjf
    1152:1155:int optInt(java.lang.String,int) -> ejEe
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> DPVr
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> DPVt
    1198:1198:long optLong(java.lang.String) -> GQOp
    1216:1219:long optLong(java.lang.String,long) -> vkWA
    1234:1234:java.lang.String optString(java.lang.String) -> IxxQ
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> NxFK
    1255:1305:void populateMap(java.lang.Object) -> pHAb
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> NxFK
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> vkWA
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> NxFK
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> xFhA
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> NxFK
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> vkWA
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> ejEe
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> xFhA
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> YMPx
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> vkWA
    1590:1590:java.lang.Object remove(java.lang.String) -> UIWO
    1605:1640:boolean similar(java.lang.Object) -> PKEw
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> kjuU
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> ejEe
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> vkWA
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> vkWA
    2000:2004:void indent(java.io.Writer,int) -> vkWA
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> vkWA
react.json.JSONObject$Null -> ogNj$vkWA:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> iByR:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> DQAw:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> EeGK:
    long character -> lMhT
    boolean eof -> eof
    long index -> HUcS
    long line -> SLtB
    char previous -> dpgh
    java.io.Reader reader -> reader
    boolean usePrevious -> eYwo
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> OYUL
    119:131:int dehexchar(char) -> vkWA
    136:136:boolean end() -> eYSi
    147:153:boolean more() -> rgip
    164:198:char next() -> next
    213:218:char next(char) -> NxFK
    233:250:java.lang.String next(int) -> lfJt
    263:266:char nextClean() -> NVQw
    287:334:java.lang.String nextString(char) -> ejEe
    349:361:java.lang.String nextTo(char) -> xFhA
    376:388:java.lang.String nextTo(java.lang.String) -> jVsH
    403:441:java.lang.Object nextValue() -> Tyec
    458:479:char skipTo(char) -> YMPx
    491:491:react.json.JSONException syntaxError(java.lang.String) -> wThQ
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> bhwy:
    int maxdepth -> rGMH
    boolean comma -> klkd
    char mode -> PUMP
    react.json.JSONObject[] stack -> PDKl
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> Oqxj
    157:164:react.json.JSONWriter array() -> aDVY
    180:193:react.json.JSONWriter end(char,char) -> vkWA
    206:206:react.json.JSONWriter endArray() -> MmBJ
    219:219:react.json.JSONWriter endObject() -> mPKF
    235:258:react.json.JSONWriter key(java.lang.String) -> qKFr
    274:285:react.json.JSONWriter object() -> gNYP
    299:310:void pop(char) -> rUvs
    322:329:void push(react.json.JSONObject) -> xFhA
    342:342:react.json.JSONWriter value(boolean) -> RQLP
    356:356:react.json.JSONWriter value(double) -> sHYI
    369:369:react.json.JSONWriter value(long) -> sHYI
    385:385:react.json.JSONWriter value(java.lang.Object) -> DHCm
react.json.XML -> aUUL:
    java.lang.Character AMP -> CFUa
    java.lang.Character APOS -> BLCc
    java.lang.Character BANG -> tDaT
    java.lang.Character EQ -> eRIT
    java.lang.Character GT -> ndre
    java.lang.Character LT -> TGgO
    java.lang.Character QUEST -> Objp
    java.lang.Character QUOT -> ryoq
    java.lang.Character SLASH -> IGeg
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> XdBq
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> vkWA
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> iBlQ
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> eXoa:
    java.util.HashMap entity -> GccI
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> TFad
    108:133:java.lang.Object nextContent() -> Smqk
    149:166:java.lang.Object nextEntity(char) -> WWlK
    186:239:java.lang.Object nextMeta() -> aCul
    261:334:java.lang.Object nextToken() -> ObFd
    354:420:boolean skipPast(java.lang.String) -> KwOS
react.papyrus.BufferedFrame -> wMCj:
    byte[][] frame -> rhnT
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    24:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> vkWA
    90:97:void write(byte) -> rUvs
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> vkWA
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> vkWA
    131:145:java.awt.image.BufferedImage toBufferedImage() -> XdOt
    153:160:void writeRainbowMul() -> lvxy
    167:174:void writeRainbowAdd() -> aUWw
    181:191:void writeSparks() -> TqUv
    195:201:boolean write(int,int,byte) -> vkWA
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> vkWA
    233:250:void write(react.papyrus.BufferedFrame) -> xFhA
    254:254:byte[][] getRawFrame() -> xaKD
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> KCsg:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> xFhA
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> vkWA
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
    11:11:void <clinit>() -> <clinit>
react.papyrus.IPapyrus -> ryIB:
    org.bukkit.map.MapView getView() -> ooao
    react.papyrus.BufferedFrame getFrameBuffer() -> MBMp
    void addRenderer(react.papyrus.IRenderer) -> vkWA
    void clearRenderers() -> Cfsm
    react.glang.GList getRenderers() -> HvdS
    void removeRenderer(react.papyrus.IRenderer) -> NxFK
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> EdlM
react.papyrus.IRenderer -> dpAN:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> vkWA
react.papyrus.Papyrus -> JQre:
    org.bukkit.map.MapView map -> DcKV
    react.papyrus.BufferedFrame frameBuffer -> SoVg
    react.papyrus.BufferedFrame lastFrameBuffer -> AQRT
    react.glang.GList renderers -> RIoa
    22:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> ooao
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> MBMp
    51:52:void addRenderer(react.papyrus.IRenderer) -> vkWA
    57:58:void clearRenderers() -> Cfsm
    63:63:react.glang.GList getRenderers() -> HvdS
    69:70:void removeRenderer(react.papyrus.IRenderer) -> NxFK
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> EdlM
    14:14:react.papyrus.BufferedFrame access$000(react.papyrus.Papyrus) -> vkWA
    14:14:react.glang.GList access$100(react.papyrus.Papyrus) -> NxFK
    14:14:react.papyrus.BufferedFrame access$200(react.papyrus.Papyrus) -> ejEe
react.papyrus.Papyrus$1 -> JQre$1:
    org.bukkit.map.MapCanvas val$c -> gGLk
    org.bukkit.map.MapView val$v -> NEsr
    react.papyrus.Papyrus this$0 -> COHI
    79:79:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> UAQd:
    int spaceSize -> DRIq
    java.lang.String fontChars -> VNLr
    int[][] fontData -> MKav
    react.papyrus.ReactFont Font -> ioTv
    288:289:void <init>() -> <init>
    292:334:void <init>(boolean) -> <init>
    17:281:void <clinit>() -> <clinit>
react.rai.Goal -> ykyg:
    react.glang.GList subgoals -> RIot
    java.lang.String tag -> mbPC
    12:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> pafj
    26:44:void propigate() -> dVSm
    49:50:void addGoal(react.rai.IGoal) -> vkWA
    55:65:react.glang.GList getFailingSubgoals() -> ssaU
    71:71:boolean isFailing() -> anlg
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> DsLG
    void onPropigated() -> pPfD
react.rai.Goal$1 -> ykyg$1:
    react.rai.IGoal val$i -> oNcS
    react.rai.Goal this$0 -> yvVr
    34:34:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> dUlr:
    react.glang.GList getSubgoals() -> pafj
    void propigate() -> dVSm
    void onPropigated() -> pPfD
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> ssaU
    boolean isFailing() -> anlg
    boolean onCheckFailing() -> DsLG
    void update() -> update
    void addGoal(react.rai.IGoal) -> vkWA
react.rai.IRAI -> AFus:
    react.glang.GList getGoals() -> ymCB
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> vkWA
    react.glang.GList getEvents() -> HKrY
    void callEvent(react.rai.RAIEvent) -> vkWA
    react.glang.GList getListeners() -> APOQ
react.rai.RAI -> dUmM:
    react.glang.GList goals -> fwQS
    react.glang.GList events -> VMoC
    react.glang.GList logEvents -> GlVu
    react.glang.GList listeners -> yKcB
    long since -> ecLS
    react.rai.RAI instance -> XLES
    22:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> ymCB
    41:42:void addGoal(react.rai.IGoal) -> vkWA
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> HKrY
    80:87:void callEvent(react.rai.RAIEvent) -> vkWA
    92:92:react.glang.GList getListeners() -> APOQ
react.rai.RAIEvent -> gFCp:
    react.rai.RAIEventType type -> hIql
    java.lang.String[] pars -> ynFg
    java.lang.String ovt -> kKKL
    10:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> TiII
    29:29:java.lang.String[] getPars() -> hINS
    34:34:java.lang.String getOvt() -> xrNv
react.rai.RAIEventType -> AFxI:
    react.rai.RAIEventType FIRE_ACTION -> bsVC
    react.rai.RAIEventType NOTE_GOAL_FAILING -> WHbJ
    react.rai.RAIEventType NOTE_GOAL_FIXED -> nKcH
    java.lang.String[] msgs -> Qhro
    react.rai.RAIEventType[] $VALUES -> VNOv
    5:5:react.rai.RAIEventType[] values() -> values
    5:5:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> CESV
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> vkWA
    5:9:void <clinit>() -> <clinit>
react.rai.goals.GoalReducedChunkLoad -> vkak:
    boolean failing -> YqLG
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> DsLG
    66:79:void onPropigated() -> pPfD
react.rai.goals.GoalReducedChunkLoad$1 -> vkak$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> pRJU
    43:43:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> vkak$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> pRJU
    69:69:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> MBJD:
    boolean failing -> YqLG
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> DsLG
    91:134:void onPropigated() -> pPfD
    22:22:boolean access$000(react.rai.goals.GoalReducedEntityCounts) -> vkWA
react.rai.goals.GoalReducedEntityCounts$1 -> MBJD$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> eAIa
    68:68:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> MBJD$2:
    org.bukkit.Chunk val$lx -> tVEm
    react.rai.goals.GoalReducedEntityCounts this$0 -> eAIa
    120:120:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> GjkU:
    boolean failing -> YqLG
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> DsLG
    78:128:void onPropigated() -> pPfD
react.rai.goals.GoalStableChunkTime$1 -> GjkU$1:
    react.rai.goals.GoalStableChunkTime this$0 -> riRD
    55:55:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> GjkU$2:
    java.lang.Object val$i -> qfOC
    react.rai.goals.GoalStableChunkTime this$0 -> riRD
    112:112:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> nIvy:
    boolean failing -> YqLG
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> pPfD
    35:35:void letUp() -> DGwN
    40:77:boolean onCheckFailing() -> DsLG
    15:15:boolean access$000(react.rai.goals.GoalStableEntityTime) -> vkWA
react.rai.goals.GoalStableEntityTime$1 -> nIvy$1:
    react.rai.goals.GoalStableEntityTime this$0 -> FFoP
    60:60:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> ycht:
    boolean failing -> YqLG
    react.glang.GMap reocc -> eAHX
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> pPfD
    88:125:boolean onCheckFailing() -> DsLG
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableFluidTime) -> vkWA
    24:24:boolean access$100(react.rai.goals.GoalStableFluidTime) -> NxFK
react.rai.goals.GoalStableFluidTime$1 -> ycht$1:
    org.bukkit.Chunk val$lx -> tVEm
    react.rai.goals.GoalStableFluidTime this$0 -> fDKY
    67:67:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> ycht$2:
    react.rai.goals.GoalStableFluidTime this$0 -> fDKY
    108:108:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> lDQu:
    boolean failing -> YqLG
    react.glang.GMap reocc -> eAHX
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> pPfD
    89:125:boolean onCheckFailing() -> DsLG
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableHopperTime) -> vkWA
    24:24:boolean access$100(react.rai.goals.GoalStableHopperTime) -> NxFK
react.rai.goals.GoalStableHopperTime$1 -> lDQu$1:
    org.bukkit.Chunk val$lx -> tVEm
    react.rai.goals.GoalStableHopperTime this$0 -> bjbd
    67:67:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> lDQu$2:
    react.rai.goals.GoalStableHopperTime this$0 -> bjbd
    108:108:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> wTpx:
    boolean failing -> YqLG
    react.glang.GMap reocc -> eAHX
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> pPfD
    89:126:boolean onCheckFailing() -> DsLG
    24:24:react.glang.GMap access$000(react.rai.goals.GoalStableRedstoneTime) -> vkWA
    24:24:boolean access$100(react.rai.goals.GoalStableRedstoneTime) -> NxFK
react.rai.goals.GoalStableRedstoneTime$1 -> wTpx$1:
    org.bukkit.Chunk val$lx -> tVEm
    react.rai.goals.GoalStableRedstoneTime this$0 -> ioWe
    67:67:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> wTpx$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> ioWe
    109:109:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> dELH:
    boolean failing -> YqLG
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> pPfD
    34:58:boolean onCheckFailing() -> DsLG
    14:14:boolean access$000(react.rai.goals.GoalStableTickTime) -> vkWA
react.rai.goals.GoalStableTickTime$1 -> dELH$1:
    react.rai.goals.GoalStableTickTime this$0 -> OYyr
    41:41:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> AaJv:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> VpQf
    boolean authenticated -> ecJr
    react.remote.server.ServerInfo info -> ioWk
    react.glang.GMap frems -> RtfP
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> eYFj
    51:51:react.glang.GMap getFrames() -> GYqY
    56:75:int computeFrames() -> uyfm
    80:92:boolean clearToken() -> rxmr
    97:110:boolean updateServerInfo() -> VLjj
    115:129:boolean refreshToken() -> DYXF
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> ejEe
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> JIgN
    165:165:boolean isAuthenticated() -> YVSc
    170:170:react.remote.server.ServerInfo getInfo() -> KLjO
react.remote.client.packet.CPacketClearToken -> qKQC:
    java.lang.String token -> VpQf
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> vkWA
    33:34:void fromBytes(react.gnet.streams.ISS) -> vkWA
    38:38:java.lang.String getToken() -> JIgN
    43:44:void setToken(java.lang.String) -> JtKx
react.remote.client.packet.CPacketComputeFrames -> cJYG:
    java.lang.String token -> VpQf
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> vkWA
    33:34:void fromBytes(react.gnet.streams.ISS) -> vkWA
    38:38:java.lang.String getToken() -> JIgN
    43:44:void setToken(java.lang.String) -> JtKx
react.remote.client.packet.CPacketGetInfo -> EeGD:
    java.lang.String token -> VpQf
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> vkWA
    33:34:void fromBytes(react.gnet.streams.ISS) -> vkWA
    38:38:java.lang.String getToken() -> JIgN
    43:44:void setToken(java.lang.String) -> JtKx
react.remote.client.packet.CPacketGetToken -> gyHe:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> vkWA
    36:38:void fromBytes(react.gnet.streams.ISS) -> vkWA
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> PdgW:
    java.lang.String token -> VpQf
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> vkWA
    33:34:void fromBytes(react.gnet.streams.ISS) -> vkWA
    38:38:java.lang.String getToken() -> JIgN
    43:44:void setToken(java.lang.String) -> JtKx
react.remote.client.packet.ClientPacket -> uqRf:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> vkWA
    void fromBytes(react.gnet.streams.ISS) -> vkWA
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> uqRf
    42:42:java.lang.String getPacketName() -> lwYf
react.remote.client.packet.ClientPacketType -> lwYf:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> ffMp
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> wooP
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> uYGj
    react.remote.client.packet.ClientPacketType GET_INFO -> AICg
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> dEuL
    react.remote.client.packet.ClientPacketType[] $VALUES -> GAcA
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> QyLn:
    react.glang.GMap compute(long,long) -> ejEe
react.remote.server.KnownUser -> xWwr:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> dfon:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> vkWA
    38:41:void fromBytes(react.gnet.streams.ISS) -> vkWA
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> kQsK:
    react.glang.GList users -> GlWJ
    react.glang.GMap session -> LIBb
    react.glang.GMap lastCompute -> JmQq
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> DinK
    44:45:void registerUser(react.remote.server.KnownUser) -> vkWA
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> NxFK
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> NoVe
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> xFhA
    react.remote.server.IFrameComputer getFrameComputer() -> FVbT
    170:171:void markLastCompute(react.remote.server.KnownUser) -> ejEe
    175:180:long getLastCompute(react.remote.server.KnownUser) -> xFhA
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> vkWA
    190:191:void deleteSession(react.remote.server.KnownUser) -> YMPx
    195:195:java.lang.String createToken() -> tmqt
react.remote.server.ServerInfo -> gMvP:
    java.lang.String motd -> QiUa
    int gameProtocol -> EURE
    java.lang.String gameVersion -> GAeT
    java.lang.String reactVersion -> lyEW
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> Fyvq
    int viewDistance -> viewDistance
    int gamePort -> ndvc
    java.lang.String gameAddress -> RBFJ
    react.glang.GList remotePlugins -> oWYQ
    react.glang.GList worlds -> MBvR
    react.glang.GList actions -> agcW
    react.glang.GList samplers -> vJkf
    26:26:react.remote.server.ServerInfo empty() -> YERM
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> vkWA
    146:159:void fromBytes(react.gnet.streams.ISS) -> vkWA
    java.lang.String dgetMotd() -> PeAn
    int dgetGameProtocol() -> lCnQ
    java.lang.String dgetGameVersion() -> eGjN
    java.lang.String dgetReactVersion() -> aCmr
    int dgetMaxPlayers() -> Ipmr
    react.glang.GList dgetConnectedPlayers() -> lDNs
    int dgetViewDistance() -> qJln
    int dgetGamePort() -> oVID
    java.lang.String dgetGameAddress() -> GryD
    react.glang.GList dgetRemotePlugins() -> wTmr
    react.glang.GList dgetWorlds() -> WPDi
    react.glang.GList dgetActions() -> KMAs
    react.glang.GList dgetSamplers() -> EKPd
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> SKqA
    199:199:java.lang.String getGameVersion() -> SUCW
    204:204:java.lang.String getReactVersion() -> ifBi
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> NDql
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> JRYK
    229:229:java.lang.String getGameAddress() -> pHTI
    234:234:react.glang.GList getRemotePlugins() -> uNqg
    239:239:react.glang.GList getWorlds() -> eYUs
    244:244:react.glang.GList getActions() -> yuCG
    249:249:react.glang.GList getSamplers() -> cuVS
react.remote.server.ServerInfo$1 -> gMvP$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> WPDi
    37:37:int dgetViewDistance() -> qJln
    43:43:react.glang.GList dgetRemotePlugins() -> wTmr
    49:49:java.lang.String dgetReactVersion() -> aCmr
    55:55:java.lang.String dgetMotd() -> PeAn
    61:61:int dgetMaxPlayers() -> Ipmr
    67:67:java.lang.String dgetGameVersion() -> eGjN
    73:73:int dgetGameProtocol() -> lCnQ
    79:79:int dgetGamePort() -> oVID
    85:85:java.lang.String dgetGameAddress() -> GryD
    91:91:react.glang.GList dgetConnectedPlayers() -> lDNs
    97:97:react.glang.GList dgetActions() -> KMAs
    103:103:react.glang.GList dgetSamplers() -> EKPd
react.remote.server.packet.ComputedFrame -> ccnL:
    react.glang.GMap values -> Jubq
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> vkWA
    28:36:void fromBytes(react.gnet.streams.ISS) -> vkWA
    40:40:react.glang.GMap getValues() -> cJbJ
    45:46:void setValues(react.glang.GMap) -> ejEe
react.remote.server.packet.SPacketOk -> aTvW:
    boolean ok -> dNiS
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> vkWA
    33:34:void fromBytes(react.gnet.streams.ISS) -> vkWA
    38:38:boolean isOk() -> TFfY
    43:44:void setOk(boolean) -> CoTN
react.remote.server.packet.SPacketSendFrames -> aUVx:
    react.glang.GMap frames -> pHyj
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> vkWA
    36:44:void fromBytes(react.gnet.streams.ISS) -> vkWA
    48:48:react.glang.GMap getFrames() -> GYqY
    53:54:void setFrames(react.glang.GMap) -> xFhA
react.remote.server.packet.SPacketSendInfo -> AaKo:
    react.remote.server.ServerInfo info -> ioWk
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> vkWA
    33:34:void fromBytes(react.gnet.streams.ISS) -> vkWA
    38:38:react.remote.server.ServerInfo getInfo() -> KLjO
    43:44:void setInfo(react.remote.server.ServerInfo) -> vkWA
react.remote.server.packet.SPacketSendToken -> tKlC:
    java.lang.String token -> VpQf
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> vkWA
    33:34:void fromBytes(react.gnet.streams.ISS) -> vkWA
    38:38:java.lang.String getToken() -> JIgN
    43:44:void setToken(java.lang.String) -> JtKx
react.remote.server.packet.ServerPacket -> FMwS:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> vkWA
    void fromBytes(react.gnet.streams.ISS) -> vkWA
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> uqRf
    42:42:java.lang.String getPacketName() -> lwYf
react.remote.server.packet.ServerPacketType -> Rjlb:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> JvBX
    react.remote.server.packet.ServerPacketType SEND_INFO -> SVIK
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> jYKQ
    react.remote.server.packet.ServerPacketType OK -> dpjg
    react.remote.server.packet.ServerPacketType[] $VALUES -> sAae
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> OXrQ:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleAsyncQueue$1 -> OXrQ$1:
    react.sampler.SampleAsyncQueue this$0 -> fwRX
    21:21:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleChunkTime -> MRkq:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleChunkTime$1 -> MRkq$1:
    react.sampler.SampleChunkTime this$0 -> nuwd
    21:21:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleChunksLoaded -> inPI:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleChunksLoaded$1 -> inPI$1:
    react.sampler.SampleChunksLoaded this$0 -> mbSx
    20:20:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleChunksLoadedPerSecond -> gpYP:
    react.gmath.Average a -> Qytv
    react.graph.IFormatter formatter -> SMPF
    16:29:void <init>() -> <init>
    34:40:void construct() -> Hdsl
    45:47:void sample() -> eYFj
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleChunksLoadedPerSecond$1 -> gpYP$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> MBti
    22:22:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> pHAb
react.sampler.SampleEntitiesDrops -> jqRL:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleEntitiesDrops$1 -> jqRL$1:
    react.sampler.SampleEntitiesDrops this$0 -> MeXk
    20:20:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleEntitiesLiving -> Xtnm:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleEntitiesLiving$1 -> Xtnm$1:
    react.sampler.SampleEntitiesLiving this$0 -> xrtC
    20:20:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleEntitiesTiles -> Ukej:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleEntitiesTiles$1 -> Ukej$1:
    react.sampler.SampleEntitiesTiles this$0 -> toXb
    20:20:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleEntitiesTotal -> jONm:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleEntitiesTotal$1 -> jONm$1:
    react.sampler.SampleEntitiesTotal this$0 -> eRKu
    20:20:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleEntityDroppedTicks -> vRPu:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleEntityDroppedTicks$1 -> vRPu$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> JKOF
    21:21:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleEntityTime -> fTEO:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleEntityTime$1 -> fTEO$1:
    react.sampler.SampleEntityTime this$0 -> kJjv
    21:21:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleEntityTimeLock -> wwXF:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleEntityTimeLock$1 -> wwXF$1:
    react.sampler.SampleEntityTimeLock this$0 -> gqdG
    21:21:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleExplosionTime -> aMEi:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleExplosionTime$1 -> aMEi$1:
    react.sampler.SampleExplosionTime this$0 -> cdwI
    20:20:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleFluidPerSecond -> sYhm:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleFluidPerSecond$1 -> sYhm$1:
    react.sampler.SampleFluidPerSecond this$0 -> NqMe
    21:21:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleFluidPerTick -> KTyS:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    46:53:void sample() -> eYFj
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleFluidPerTick$1 -> KTyS$1:
    react.sampler.SampleFluidPerTick this$0 -> Kxds
    21:21:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleFluidTickTime -> uGAd:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleFluidTickTime$1 -> uGAd$1:
    react.sampler.SampleFluidTickTime this$0 -> whDj
    21:21:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleFluidTickUtilization -> HnSn:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    46:53:void sample() -> eYFj
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleFluidTickUtilization$1 -> HnSn$1:
    react.sampler.SampleFluidTickUtilization this$0 -> OROq
    21:21:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleHopperPerSecond -> aLhF:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleHopperPerSecond$1 -> aLhF$1:
    react.sampler.SampleHopperPerSecond this$0 -> dEyg
    21:21:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleHopperPerTick -> aoLG:
    react.graph.IFormatter formatter -> SMPF
    19:29:void <init>() -> <init>
    34:40:void construct() -> Hdsl
    47:54:void sample() -> eYFj
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleHopperPerTick$1 -> aoLG$1:
    react.sampler.SampleHopperPerTick this$0 -> gqfo
    21:21:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleHopperTickTime -> kQtb:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleHopperTickTime$1 -> kQtb$1:
    react.sampler.SampleHopperTickTime this$0 -> rrFw
    21:21:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleHopperTickUtilization -> VCwJ:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    46:53:void sample() -> eYFj
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleHopperTickUtilization$1 -> VCwJ$1:
    react.sampler.SampleHopperTickUtilization this$0 -> iUjW
    21:21:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleMemoryAllocated -> nuRF:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleMemoryAllocated$1 -> nuRF$1:
    react.sampler.SampleMemoryAllocated this$0 -> Voub
    20:20:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleMemoryAllocationPerSecond -> QhMe:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleMemoryAllocationPerSecond$1 -> QhMe$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> yeYV
    20:20:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleMemoryFree -> gNYp:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleMemoryFree$1 -> gNYp$1:
    react.sampler.SampleMemoryFree this$0 -> mIEJ
    20:20:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleMemoryMax -> eQCw:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleMemoryMax$1 -> eQCw$1:
    react.sampler.SampleMemoryMax this$0 -> bHdv
    20:20:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleMemoryUse -> DQFl:
    react.graph.IFormatter formatter -> SMPF
    18:27:void <init>() -> <init>
    32:38:void construct() -> Hdsl
    43:44:void sample() -> eYFj
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleMemoryUse$1 -> DQFl$1:
    react.sampler.SampleMemoryUse this$0 -> nBvG
    20:20:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> pHAb
react.sampler.SampleRedstonePerSecond -> PeKG:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleRedstonePerSecond$1 -> PeKG$1:
    react.sampler.SampleRedstonePerSecond this$0 -> IjRL
    21:21:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleRedstonePerTick -> SvdT:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    46:53:void sample() -> eYFj
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleRedstonePerTick$1 -> SvdT$1:
    react.sampler.SampleRedstonePerTick this$0 -> fDPg
    21:21:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleRedstoneTickTime -> oEPE:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleRedstoneTickTime$1 -> oEPE$1:
    react.sampler.SampleRedstoneTickTime this$0 -> EoFv
    21:21:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleRedstoneTickUtilization -> qeIC:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    46:53:void sample() -> eYFj
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleRedstoneTickUtilization$1 -> qeIC$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> QXVh
    21:21:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleSyncQueue -> RcAJ:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleSyncQueue$1 -> RcAJ$1:
    react.sampler.SampleSyncQueue this$0 -> EfTT
    21:21:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleTickTime -> CgVO:
    react.graph.IFormatter formatter -> SMPF
    react.gmath.Average aa -> yLGN
    17:29:void <init>() -> <init>
    34:40:void construct() -> Hdsl
    45:47:void sample() -> eYFj
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleTickTime$1 -> CgVO$1:
    react.sampler.SampleTickTime this$0 -> MnKp
    22:22:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> pHAb
react.sampler.SampleTickUtilization -> XcoM:
    react.graph.IFormatter formatter -> SMPF
    react.gmath.Average aa -> yLGN
    17:29:void <init>() -> <init>
    34:40:void construct() -> Hdsl
    45:47:void sample() -> eYFj
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleTickUtilization$1 -> XcoM$1:
    react.sampler.SampleTickUtilization this$0 -> sJTo
    22:22:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> pHAb
react.sampler.SampleTicksPerSecond -> OYUL:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleTicksPerSecond$1 -> OYUL$1:
    react.sampler.SampleTicksPerSecond this$0 -> qDOX
    21:21:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleTileDroppedTicks -> eYSi:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleTileDroppedTicks$1 -> eYSi$1:
    react.sampler.SampleTileDroppedTicks this$0 -> IioY
    21:21:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleTileTime -> rgip:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleTileTime$1 -> rgip$1:
    react.sampler.SampleTileTime this$0 -> Perl
    21:21:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.sampler.SampleTileTimeLock -> NVQw:
    react.graph.IFormatter formatter -> SMPF
    19:28:void <init>() -> <init>
    33:39:void construct() -> Hdsl
    44:45:void sample() -> eYFj
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> VDIx
react.sampler.SampleTileTimeLock$1 -> NVQw$1:
    react.sampler.SampleTileTimeLock this$0 -> LawM
    21:21:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> pHAb
react.security.checkpoints.SecurityCheckpointAlpha -> Tyec:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> MtvU
    78:148:void doScan(java.lang.Runnable) -> NxFK
    152:181:byte[] readResource(java.io.File,java.lang.String) -> vkWA
    186:217:react.glang.GMap scan(java.io.File) -> NxFK
    33:33:byte[] access$000(java.io.File,java.lang.String) -> NxFK
react.security.checkpoints.SecurityCheckpointAlpha$1 -> Tyec$1:
    java.lang.Runnable val$r -> Ajio
    79:79:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> Tyec$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$0 -> sRdi
    138:138:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> aDVY:
    java.lang.String ip -> DcRK
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> MmBJ:
    16:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> MmBJ$1:
    java.io.File val$f -> SVKg
    react.security.locks.SecurityLockAlpha this$0 -> VEbD
    23:23:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> mPKF:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> iBlQ
react.slate.PhantomSlate -> gNYP:
    react.glang.GList lines -> bbWI
    react.glang.GList viewers -> ghuA
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> KxgW
    27:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> brRl
    44:45:void set(int,java.lang.String) -> NxFK
    50:51:void setLines(react.glang.GList) -> RQLP
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> aUVx
    91:95:void addViewer(org.bukkit.entity.Player) -> iBlQ
    100:102:void removeViewer(org.bukkit.entity.Player) -> sHYI
    107:107:react.glang.GList getViewers() -> BmFv
    113:113:boolean isViewing(org.bukkit.entity.Player) -> JQeO
    119:120:void addLine(java.lang.String) -> VDIx
    125:126:void clearLines() -> aLlI
react.slate.Slate -> TFad:
    void build() -> aUVx
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> brRl
    void set(int,java.lang.String) -> NxFK
    void setLines(react.glang.GList) -> RQLP
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> iBlQ
    void addLine(java.lang.String) -> VDIx
    void clearLines() -> aLlI
    void removeViewer(org.bukkit.entity.Player) -> sHYI
    react.glang.GList getViewers() -> BmFv
    boolean isViewing(org.bukkit.entity.Player) -> JQeO
    void update() -> update
react.slate.SlateUtil -> Smqk:
    19:19:void <init>() -> <init>
    28:28:org.bukkit.scoreboard.ScoreboardManager getManager() -> woOG
    38:38:org.bukkit.scoreboard.Scoreboard newBoard() -> qBiU
    52:62:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> vkWA
    67:77:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> NxFK
    91:101:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> ejEe
    116:130:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> vkWA
    143:155:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> vkWA
    169:181:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> NxFK
    186:196:java.lang.String convertJSON(java.lang.String) -> BInq
    201:217:java.lang.String[] convertJSON(java.lang.String[]) -> NxFK
    222:223:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> vkWA
react.surge.Main -> aCul:
    react.glang.GList plugins -> ghtb
    react.glang.GMap pluginInstances -> mPvd
    react.glang.GList controllerSet -> txPA
    react.glang.GMap anchors -> lVeL
    react.glang.GList classes -> bQWp
    java.lang.reflect.Field nsField -> RIyQ
    java.lang.reflect.Field thField -> oqQH
    react.glang.GList tracks -> igNP
    long nsf -> hIwX
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> LjDU
    90:109:long getNanoSync() -> DrmJ
    114:115:void requestResetNanos() -> jhgi
    119:127:void requestReload() -> ghPR
    131:134:void requestReload(java.lang.Runnable) -> ejEe
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> vkWA
    201:218:void onStop() -> uWfF
    224:224:void onPostInit() -> XdUf
    230:230:void onPreInit() -> FOAL
    234:245:void shutDownAmps() -> lnmr
    249:458:void initializeAmps() -> eHWn
    463:504:void doScan() -> BKDC
    508:530:void scanForPoolDefiners() -> eHWk
    534:550:void scanForRawEvents() -> GtGU
    554:570:void scanForDynamicTrack() -> DGyO
    574:595:void scanForAmps() -> WrSk
    600:611:void onTick() -> vcMv
react.surge.Main$1 -> aCul$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> ObFd:
    react.surge.control.AmpedPlugin plugin -> PfWX
    boolean connected -> connected
    int masterTask -> PCsW
    java.lang.Runnable onReload -> axiQ
    18:31:void <init>(react.surge.control.AmpedPlugin) -> <init>
    35:35:react.surge.control.AmpedPlugin getPluginInstance() -> dpHn
    40:40:boolean isConnected() -> isConnected
    45:65:void connect() -> connect
    69:81:void masterTick() -> gVnL
    85:89:void disconnect() -> disconnect
    93:103:int startTask(int,java.lang.Runnable) -> vkWA
    108:118:int startRepeatingTask(int,int,java.lang.Runnable) -> vkWA
    123:124:void stopTask(int) -> Hdsl
    128:128:react.surge.control.AmpedPlugin getPlugin() -> BApr
    133:133:int getMasterTask() -> nAoi
    138:138:java.lang.Runnable getOnReload() -> pjXr
    143:144:void setPlugin(react.surge.control.AmpedPlugin) -> vkWA
    148:149:void setConnected(boolean) -> setConnected
    153:154:void setMasterTask(int) -> IgwQ
    158:159:void setOnReload(java.lang.Runnable) -> xFhA
    67:67:void access$0(react.surge.PluginAmp) -> vkWA
react.surge.PluginAmp$1 -> ObFd$1:
    react.surge.PluginAmp this$0 -> hIwY
    1:23:void <init>(react.surge.PluginAmp) -> <init>
    29:29:void run() -> run
react.surge.PluginAmp$2 -> ObFd$2:
    react.surge.PluginAmp this$0 -> hIwY
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:54:void run() -> run
react.surge.PluginAmp$3 -> ObFd$3:
    react.surge.PluginAmp this$0 -> hIwY
    1:57:void <init>(react.surge.PluginAmp) -> <init>
    62:63:void run() -> run
react.surge.Surge -> XdOt:
    react.surge.PluginAmp amp -> xjha
    react.glang.GList tickComponents -> qoFI
    react.glang.GList atickComponents -> fDRk
    react.surge.sched.TaskManager taskmgr -> AjkE
    react.surge.hotload.HotloadManager hotloadmgr -> AHgc
    java.lang.Thread mainThread -> bjhn
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> vkWA
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> lfJt
    44:44:java.io.File folder() -> WjAv
    49:51:java.io.File getPluginJarFile() -> WPOa
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> xFhA
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> cKAf
    74:74:react.glang.GList getTickComponents() -> cuTm
    79:79:react.glang.GList getAsyncTickComponents() -> kQwg
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> vkWA
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> NxFK
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> NxFK
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> EeNU
    126:126:boolean hasAmp() -> XdTV
    131:131:react.surge.PluginAmp getAmp() -> mqpf
    136:136:react.surge.sched.TaskManager getTaskManager() -> jNuO
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> jiHg
react.surge.cluster.Cluster -> lvxy:
    react.surge.cluster.ClusterType type -> lVcj
    java.lang.Object t -> fmwF
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> CfxE
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> aUWw:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> TqUv:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> xaKD:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> ooao:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> MBMp:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> Cfsm:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> HvdS:
    react.surge.cluster.ClusterType INT -> PUSp
    react.surge.cluster.ClusterType BOOLEAN -> USbP
    react.surge.cluster.ClusterType STRING -> GBHy
    react.surge.cluster.ClusterType STRING_LIST -> EngL
    react.surge.cluster.ClusterType DOUBLE -> DJAk
    react.surge.cluster.ClusterType LONG -> mPts
    react.surge.cluster.ClusterType[] ENUM$VALUES -> PfVV
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> EdlM:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> UeEP
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> vkWA
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> vkWA
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> DsLn
react.surge.cluster.ConfigurationDataOutput -> pafj:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> NxFK
react.surge.cluster.DataCluster -> dVSm:
    react.glang.GMap clusters -> rXUP
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> Oiys
    29:33:void fromJson(react.json.JSONObject) -> YMPx
    37:44:react.json.JSONObject toJson() -> Btvp
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> pQFe
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> vkWA
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> eYFj
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> rUvs
    194:195:void set(java.lang.String,int) -> YMPx
    199:200:void set(java.lang.String,boolean) -> ejEe
    204:205:void set(java.lang.String,double) -> ejEe
    209:210:void set(java.lang.String,long) -> ejEe
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> vkWA
react.surge.cluster.ICluster -> ssaU:
    react.surge.cluster.ClusterType getType() -> CfxE
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> anlg:
react.surge.cluster.IDataInput -> DsLG:
    react.surge.cluster.DataCluster read(java.io.File) -> ejEe
react.surge.cluster.IDataOutput -> pPfD:
    void write(react.surge.cluster.DataCluster,java.io.File) -> vkWA
react.surge.cluster.Key -> ymCB:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> HKrY:
    int value() -> value
react.surge.cluster.KeyStore -> APOQ:
react.surge.cluster.ReflectedConfigurationException -> TiII:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> hINS:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> ejEe
react.surge.cluster.YamlDataOutput -> xrNv:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> vkWA
react.surge.collection.GSound -> CESV:
    java.lang.String sound -> FaId
    org.bukkit.Sound iSound -> Fhxn
    java.lang.Float volume -> KyIt
    java.lang.Float pitch -> PwXN
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> IFRO
    61:72:void play(org.bukkit.Location) -> rUvs
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> vkWA
    93:93:java.lang.String getSound() -> XuUt
    98:99:void setSound(java.lang.String) -> Hdsl
    103:103:org.bukkit.Sound getiSound() -> BmHG
    108:109:void setiSound(org.bukkit.Sound) -> vkWA
    113:113:java.lang.Float getVolume() -> lMKT
    118:119:void setVolume(java.lang.Float) -> vkWA
    123:123:java.lang.Float getPitch() -> gyQL
    128:129:void setPitch(java.lang.Float) -> NxFK
react.surge.control.AmpedPlugin -> DGwN:
    react.glang.GList controllers -> qMBU
    react.gconcurrent.ParallelPoolManager pp -> DcSp
    react.surge.server.CoreTickThread ctt -> aNWW
    24:50:void <init>() -> <init>
    void doScan() -> BKDC
    long getNanoSync() -> DrmJ
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:91:void onDisable() -> onDisable
    96:96:react.glang.GList getControllers() -> Edml
    102:103:void registerController(react.surge.control.IController) -> vkWA
    108:119:void onTick() -> vcMv
    124:124:java.lang.String getTickName() -> Yfje
    130:130:react.gconcurrent.ParallelPoolManager getThreadPool() -> LrSg
    136:251:void destroyOldThreads() -> woQP
    void onControllerRegistry() -> LjDU
    void onStart(react.surge.util.Protocol) -> vkWA
    void onStop() -> uWfF
    void onPostInit() -> XdUf
    void onPreInit() -> FOAL
react.surge.control.AmpedPlugin$1 -> DGwN$1:
    react.surge.control.AmpedPlugin this$0 -> fDUF
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> aLbV
react.surge.control.AmpedPlugin$2 -> DGwN$2:
    react.surge.control.AmpedPlugin this$0 -> fDUF
    1:149:void <init>(react.surge.control.AmpedPlugin) -> <init>
    154:244:void run() -> run
react.surge.control.Control -> GYqY:
react.surge.control.Controller -> uyfm:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> rxmr:
react.surge.control.Enable -> VLjj:
react.surge.control.IController -> DYXF:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> JIgN:
react.surge.control.Plugin -> YVSc:
react.surge.control.SurgePlugin -> KLjO:
    void onStart(react.surge.util.Protocol) -> vkWA
    void onStop() -> uWfF
    void onPostInit() -> XdUf
    void onPreInit() -> FOAL
    void onControllerRegistry() -> LjDU
    void registerController(react.surge.control.IController) -> vkWA
    react.glang.GList getControllers() -> Edml
    react.gconcurrent.ParallelPoolManager getThreadPool() -> LrSg
react.surge.hotload.HotloadManager -> tmqt:
    react.glang.GMap filemods -> xjkQ
    react.glang.GMap filesizes -> kmVe
    react.glang.GMap fileacts -> qfWS
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> vkWA
    35:38:void untrack(java.io.File) -> xFhA
    42:45:void untrackall() -> xrTS
    50:86:void onTick() -> vcMv
    91:91:java.lang.String getTickName() -> Yfje
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> vkWA
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> NxFK
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> ejEe
react.surge.hotload.HotloadManager$1 -> tmqt$1:
    react.surge.hotload.HotloadManager this$0 -> igQG
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> YERM:
    boolean init -> Juhc
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> BwCH
    java.lang.Class IChatBaseComponent -> GdOX
    java.lang.Class ChatSerializer -> yLLX
    java.lang.Class PacketPlayOutPlayerInfo -> rrKj
    java.lang.Class PlayerInfoData -> QOiS
    java.lang.Class EnumPlayerInfoAction -> QPIr
    java.lang.Class GameProfile -> kmVq
    java.lang.Class EnumGamemode -> PoJb
    java.lang.Class TileEntitySkull -> nmnO
    java.lang.Class LoadingCache -> WkNT
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> SKqA:
    react.surge.nms.NMSX bountifulAPI -> kCCP
    boolean useOldMethods -> EMHV
    java.lang.String nmsver -> OJDa
    java.lang.Object eTimes -> stlt
    java.lang.Object eTitle -> klvB
    java.lang.Object eSubtitle -> TrdM
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> vkWA
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> IgwQ
    75:89:java.lang.Class getCBClass(java.lang.String) -> lwLi
    96:104:java.lang.Object serializeChat(java.lang.String) -> ksiP
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> NxFK
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> vkWA
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> FVrE
    151:151:java.lang.String craftPackage() -> tmwR
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> vkWA
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> vkWA
    197:207:java.lang.Class getNMSClass(java.lang.String) -> DHHC
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> vkWA
    279:280:void clearTitle(org.bukkit.entity.Player) -> YwcX
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> NxFK
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> vkWA
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> vkWA
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> KLXy
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> rUvs
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> sbKq
    434:447:int ping(org.bukkit.entity.Player) -> vIRI
react.surge.nms.NMSX$1 -> SKqA$1:
    org.bukkit.entity.Player val$player -> broN
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> SKqA$2:
    org.bukkit.entity.Player val$player -> broN
    java.lang.String val$message -> BwCm
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> SUCW:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> WXcN
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> vkWA
    68:82:void clearTitle(org.bukkit.entity.Player) -> YwcX
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> vkWA
react.surge.nms.PacketUtil$V -> SUCW$vkWA:
    react.surge.nms.PacketUtil$V R17 -> tELR
    react.surge.nms.PacketUtil$V R18 -> eRQo
    react.surge.nms.PacketUtil$V R19 -> TXqO
    react.surge.nms.PacketUtil$V R111 -> kTCp
    react.surge.nms.PacketUtil$V R110 -> cmmi
    react.surge.nms.PacketUtil$V R112 -> bIHf
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> FXYo
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> ifBi:
    java.lang.String title -> title
    java.lang.String subTitle -> LjlX
    java.lang.String action -> action
    java.lang.Integer fadeIn -> whHP
    java.lang.Integer fadeOut -> xbYf
    java.lang.Integer stayTime -> CNqV
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> IyWE
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> ytum
    79:80:void setSubTitle(java.lang.String) -> FonE
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> nJdG
    99:100:void setFadeIn(java.lang.Integer) -> ejEe
    104:104:java.lang.Integer getFadeOut() -> pbKr
    109:110:void setFadeOut(java.lang.Integer) -> xFhA
    114:114:java.lang.Integer getStayTime() -> LHCT
    119:120:void setStayTime(java.lang.Integer) -> YMPx
react.surge.nms.VersionBukkit -> NDql:
    react.surge.nms.VersionBukkit VU -> MLND
    react.surge.nms.VersionBukkit V7 -> VyLC
    react.surge.nms.VersionBukkit V8 -> NiCY
    react.surge.nms.VersionBukkit V9 -> HVPY
    react.surge.nms.VersionBukkit V11 -> nByK
    react.surge.nms.VersionBukkit V111 -> WkMU
    react.surge.nms.VersionBukkit V112 -> HgRG
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> MwBW
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> KLod
    27:32:boolean uc() -> kkmX
    37:67:react.surge.nms.VersionBukkit get() -> Bcux
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> JRYK:
    void burst(java.lang.Object) -> iBlQ
    void setTimeLock(double) -> JQeO
    double getEstimatedTimeUse() -> uOWe
    int flush() -> QhSB
    int flush(react.gbench.Profiler) -> vkWA
    void queue(java.lang.Object) -> sHYI
    void queue(java.util.List) -> ejEe
    void queue(java.lang.Object[]) -> vkWA
react.surge.sched.ICancellable -> pHTI:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> uNqg:
    void onTick() -> vcMv
    java.lang.String getTickName() -> Yfje
react.surge.sched.ITask -> eYUs:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> bXaX
    java.lang.String getName() -> getName
    double getComputeTime() -> EePU
    double getTotalComputeTime() -> XtwG
    double getActiveTime() -> doha
    boolean hasCompleted() -> lnpJ
react.surge.sched.Task -> cuVS:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> aFEs
    double computeTime -> TGot
    double totalComputeTime -> qfYX
    double activeTime -> AkPd
    boolean completed -> completed
    react.gbench.Profiler profiler -> BmsF
    react.gbench.Profiler activeProfiler -> EMIc
    int ticks -> suPc
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> xFhA
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> bXaX
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> EePU
    150:150:boolean hasCompleted() -> lnpJ
    156:156:double getTotalComputeTime() -> XtwG
    162:162:double getActiveTime() -> doha
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> vkWA
    15:15:void access$1(react.surge.sched.Task,boolean) -> vkWA
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> NxFK
    14:14:void access$3(react.surge.sched.Task,double) -> vkWA
    12:12:void access$4(react.surge.sched.Task,double) -> NxFK
    14:14:double access$5(react.surge.sched.Task) -> ejEe
    13:13:void access$6(react.surge.sched.Task,double) -> ejEe
    13:13:double access$7(react.surge.sched.Task) -> xFhA
    12:12:double access$8(react.surge.sched.Task) -> YMPx
react.surge.sched.Task$1 -> cuVS$1:
    react.surge.sched.Task this$0 -> oWai
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> cuVS$2:
    react.surge.sched.Task this$0 -> oWai
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> cuVS$3:
    react.surge.sched.Task this$0 -> oWai
    int val$total -> HNCB
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> cJbJ:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> aFEs
    double computeTime -> TGot
    double totalComputeTime -> qfYX
    double activeTime -> AkPd
    boolean completed -> completed
    react.gbench.Profiler profiler -> BmsF
    react.gbench.Profiler activeProfiler -> EMIc
    int ticks -> suPc
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> xFhA
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> bXaX
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> EePU
    101:101:boolean hasCompleted() -> lnpJ
    107:107:double getTotalComputeTime() -> XtwG
    113:113:double getActiveTime() -> doha
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> vkWA
    12:12:void access$1(react.surge.sched.TaskLater,double) -> vkWA
    13:13:double access$2(react.surge.sched.TaskLater) -> NxFK
    12:12:double access$3(react.surge.sched.TaskLater) -> ejEe
    13:13:void access$4(react.surge.sched.TaskLater,double) -> NxFK
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> xFhA
    14:14:double access$6(react.surge.sched.TaskLater) -> YMPx
    14:14:void access$7(react.surge.sched.TaskLater,double) -> ejEe
react.surge.sched.TaskLater$1 -> cJbJ$1:
    react.surge.sched.TaskLater this$0 -> wNXQ
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> TFfY:
    react.glang.GList tasks -> nltO
    react.glang.GMap taskProfiles -> KFIr
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> vkWA
    25:35:void onTick() -> vcMv
    39:40:void putFinishingTask(react.surge.sched.ITask) -> NxFK
    44:53:void putTask(react.surge.sched.ITask) -> ejEe
    58:58:java.lang.String getTickName() -> Yfje
    63:63:react.glang.GList getTasks() -> lnpK
    68:68:react.glang.GMap getTaskProfiles() -> ThkJ
react.surge.sched.TaskProfile -> MtvU:
    double activeTime -> AkPd
    double computeTickTime -> THTN
    double computeTime -> TGot
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> doha
    23:24:void setActiveTime(double) -> IFRO
    28:28:double getComputeTickTime() -> qCJY
    33:34:void setComputeTickTime(double) -> YwcX
    38:38:double getComputeTime() -> EePU
    43:44:void setComputeTime(double) -> vIRI
react.surge.server.AsyncTick -> brRl:
react.surge.server.CPS -> BmFv:
    react.glang.GMap keys -> CGCT
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> owcw
    46:99:void scan() -> sscd
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> ejEe
react.surge.server.CoreTickThread -> aLlI:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> woOG:
    long memoryFree -> KVkH
    long memoryUsed -> Dbwe
    long memoryMax -> qTvl
    long lastMemoryUsed -> DAUJ
    long memoryUsedAfterGC -> nwCW
    long allocated -> tUns
    long collected -> huPd
    long collections -> GBOH
    long sms -> ceaW
    long memoryAllocatedPerTick -> BwDS
    long memoryCollectedPerTick -> wMwM
    long memoryFullyAllocatedPerTick -> tEOL
    long mah -> IHTs
    long mahs -> xkNB
    22:39:void <init>() -> <init>
    void onAllocationSet() -> KxDK
    46:98:void run() -> run
    102:102:long getMemoryFree() -> pGwL
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> mPPX
    117:117:long getLastMemoryUsed() -> xPOd
    122:122:long getMemoryUsedAfterGC() -> GQcs
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> rhPc
    137:137:long getCollections() -> SmxX
    142:142:long getSms() -> GQdV
    147:147:long getMemoryAllocatedPerTick() -> FVtE
    152:152:long getMemoryCollectedPerTick() -> cKFm
    157:157:long getMemoryFullyAllocatedPerTick() -> sADL
    162:162:long getMah() -> GtJc
    167:167:long getMahs() -> ktaO
react.surge.server.SuperSampler -> qBiU:
    react.gmath.Average ticksPerSecondL -> NiEO
    react.gmath.Average tickTimeL -> xkLq
    react.gmath.Average mahL -> VhKb
    double ticksPerSecond -> oWKe
    double ticksPerSecondRaw -> DQuI
    double tickTime -> UuiU
    double tickTimeRaw -> klwJ
    boolean running -> running
    boolean frozen -> nmod
    double tickUtilizationRaw -> jPav
    double tickUtilization -> eARV
    double leftoverTickTime -> OQth
    long memoryUse -> veEx
    long memoryAllocated -> RdOm
    long memoryCollected -> UBdg
    long mahs -> xkNB
    int totalChunks -> Vgjk
    int totalEntities -> oiBp
    int totalDrops -> TPdC
    int totalTiles -> agjU
    int totalLiving -> XnQp
    int chunksLoaded -> OkhD
    int chunksUnloaded -> YWaw
    react.surge.server.WorldMonitor worldMonitor -> vmVi
    react.surge.server.TPSMonitor tpsMonitor -> dhfP
    react.surge.server.MemoryMonitor memoryMonitor -> JCIQ
    java.lang.StackTraceElement[] lockStack -> TixD
    react.glang.GMap spikes -> yvHs
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> vcMv
    154:154:java.lang.String getTickName() -> Yfje
    159:159:react.gmath.Average getTicksPerSecondL() -> qeQN
    164:164:double getTicksPerSecond() -> SCWj
    169:169:double getTicksPerSecondRaw() -> lUaL
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> sISo
    184:184:react.gmath.Average getTickTimeL() -> dNJI
    189:189:double getTickTime() -> iDGd
    194:194:double getTickTimeRaw() -> FyWo
    199:199:double getTickUtilizationRaw() -> agCc
    204:204:double getTickUtilization() -> BdYk
    209:209:double getLeftoverTickTime() -> Xcxf
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> nuYU
    219:219:long getMemoryUse() -> mjEh
    224:224:long getMemoryAllocated() -> EmdQ
    229:229:long getMemoryCollected() -> KoUe
    234:234:react.gmath.Average getMahL() -> iwLF
    239:239:long getMahs() -> ktaO
    244:244:int getTotalChunks() -> bXdb
    249:249:int getTotalEntities() -> yBSk
    254:254:int getTotalDrops() -> esOu
    259:259:int getTotalTiles() -> iehx
    264:264:int getTotalLiving() -> nlhX
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> htHj
    274:274:int getChunksLoaded() -> sISR
    279:279:int getChunksUnloaded() -> ObOA
    284:285:void setTicksPerSecondL(react.gmath.Average) -> vkWA
    289:290:void setTickTimeL(react.gmath.Average) -> NxFK
    294:295:void setMahL(react.gmath.Average) -> ejEe
    299:300:void setTicksPerSecond(double) -> srla
    304:305:void setTicksPerSecondRaw(double) -> IyWE
    309:310:void setTickTime(double) -> FNJa
    314:315:void setTickTimeRaw(double) -> HeSx
    319:320:void setRunning(boolean) -> PKEw
    324:325:void setTickUtilizationRaw(double) -> NfeN
    329:330:void setTickUtilization(double) -> kIUl
    334:335:void setLeftoverTickTime(double) -> mFjf
    339:340:void setMemoryUse(long) -> JQeO
    344:345:void setMemoryAllocated(long) -> IFRO
    349:350:void setMemoryCollected(long) -> YwcX
    354:355:void setMahs(long) -> vIRI
    359:360:void setTotalChunks(int) -> lwLi
    364:365:void setTotalEntities(int) -> ksiP
    369:370:void setTotalDrops(int) -> DHHC
    374:375:void setTotalTiles(int) -> KLXy
    379:380:void setTotalLiving(int) -> FonE
    384:385:void setChunksLoaded(int) -> owcw
    389:390:void setChunksUnloaded(int) -> VTiL
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> vkWA
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> vkWA
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> vkWA
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> quqD
    419:419:react.glang.GMap getSpikes() -> QpUS
    31:31:void access$0(react.surge.server.SuperSampler,int) -> vkWA
    33:33:void access$1(react.surge.server.SuperSampler,int) -> NxFK
    34:34:void access$2(react.surge.server.SuperSampler,int) -> ejEe
    32:32:void access$3(react.surge.server.SuperSampler,int) -> xFhA
    35:35:void access$4(react.surge.server.SuperSampler,int) -> YMPx
    36:36:void access$5(react.surge.server.SuperSampler,int) -> rUvs
    37:37:void access$6(react.surge.server.SuperSampler,int) -> WWlK
    19:19:void access$7(react.surge.server.SuperSampler,double) -> vkWA
    21:21:void access$8(react.surge.server.SuperSampler,double) -> NxFK
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> vkWA
    19:19:double access$10(react.surge.server.SuperSampler) -> NxFK
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> ejEe
    21:21:double access$12(react.surge.server.SuperSampler) -> xFhA
    18:18:void access$13(react.surge.server.SuperSampler,double) -> ejEe
    20:20:void access$14(react.surge.server.SuperSampler,double) -> xFhA
    24:24:void access$15(react.surge.server.SuperSampler,double) -> YMPx
    20:20:double access$16(react.surge.server.SuperSampler) -> YMPx
    25:25:void access$17(react.surge.server.SuperSampler,double) -> rUvs
    25:25:double access$18(react.surge.server.SuperSampler) -> rUvs
    26:26:void access$19(react.surge.server.SuperSampler,double) -> WWlK
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> vkWA
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> WWlK
    27:27:void access$22(react.surge.server.SuperSampler,long) -> vkWA
    28:28:void access$23(react.surge.server.SuperSampler,long) -> NxFK
    29:29:void access$24(react.surge.server.SuperSampler,long) -> ejEe
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> clQA
    30:30:void access$26(react.surge.server.SuperSampler,long) -> xFhA
react.surge.server.SuperSampler$1 -> qBiU$1:
    react.surge.server.SuperSampler this$0 -> Gtsp
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> vkWA
react.surge.server.SuperSampler$2 -> qBiU$2:
    react.surge.server.SuperSampler this$0 -> Gtsp
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> ydWF
    106:107:void onSpike() -> UuAn
react.surge.server.SuperSampler$3 -> qBiU$3:
    react.surge.server.SuperSampler this$0 -> Gtsp
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> KxDK
react.surge.server.TPSMonitor -> LjDU:
    double tickTimeMS -> dWdW
    double rawTicksPerSecond -> LkSA
    react.gbench.Profiler tickProfiler -> lMyq
    react.gbench.Profiler tickTimeProfiler -> uafU
    boolean ticked -> CpxY
    java.lang.Thread$State lastState -> Sftv
    double actualTickTimeMS -> GcsL
    double ltt -> XUCb
    long lastTick -> kIxE
    boolean frozen -> nmod
    java.lang.StackTraceElement[] lockedStack -> yKnj
    double lmsx -> wVjL
    23:40:void <init>() -> <init>
    void onTicked() -> ydWF
    void onSpike() -> UuAn
    49:124:void run() -> run
    128:156:void processState(java.lang.Thread$State) -> vkWA
    160:160:double getTickTimeMS() -> ESpH
    165:165:double getRawTicksPerSecond() -> PnCF
    170:170:react.gbench.Profiler getTickProfiler() -> wLmw
    175:175:boolean isTicked() -> uWid
    180:181:void markTick() -> Widy
    185:185:react.gbench.Profiler getTickTimeProfiler() -> vkmp
    190:190:java.lang.Thread$State getLastState() -> vAYt
    195:195:double getActualTickTimeMS() -> RITo
    200:200:double getLtt() -> aVAg
    205:205:long getLastTick() -> MSFU
    210:210:boolean isFrozen() -> isFrozen
    215:215:java.lang.StackTraceElement[] getLockedStack() -> WHDD
react.surge.server.WorldMonitor -> DrmJ:
    boolean chunksChanged -> RJaC
    boolean dropChanged -> kTIL
    boolean tileChanged -> vlyM
    boolean livingChanged -> gaNb
    boolean totalChanged -> USgn
    boolean updated -> Rtqs
    int totalChunks -> Vgjk
    int totalDrops -> TPdC
    int totalTiles -> agjU
    int totalLiving -> XnQp
    int totalEntities -> oiBp
    int chunksLoaded -> OkhD
    int chunksUnloaded -> YWaw
    long ms -> WjAv
    24:43:void <init>() -> <init>
    48:68:void run() -> run
    void updated(int,int,int,int,int,int,int) -> vkWA
    75:80:void on(org.bukkit.event.world.ChunkLoadEvent) -> NxFK
    85:90:void on(org.bukkit.event.world.ChunkUnloadEvent) -> vkWA
    95:96:void on(org.bukkit.event.entity.EntitySpawnEvent) -> vkWA
    101:102:void on(org.bukkit.event.entity.EntityDeathEvent) -> vkWA
    107:108:void on(org.bukkit.event.player.PlayerDropItemEvent) -> vkWA
    113:114:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> vkWA
    119:120:void on(org.bukkit.event.block.BlockPlaceEvent) -> vkWA
    125:126:void on(org.bukkit.event.block.BlockBreakEvent) -> vkWA
    130:131:void doUpdate() -> wxBo
    135:186:void sample() -> eYFj
    190:196:void sampleTotalCount() -> mHAo
    200:206:void sampleLivingCount() -> QqGB
    210:219:void sampleTileCount() -> qeOd
    223:229:void sampleDropCount() -> TGJp
    233:239:void sampleChunkCount() -> twJP
react.surge.text.PhantomSpinner -> jhgi:
    react.surge.text.ProgressSpinner s -> cmqr
    react.surge.text.ProgressSpinner c -> pQuE
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> ghPR:
    java.lang.String[] chars -> aFIl
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> oNqg
    react.surge.text.ProgressSpinner NETWORK -> RlbH
    react.surge.text.ProgressSpinner CIRCLES -> GtsP
    react.surge.text.ProgressSpinner RANDOMS -> YiEv
    react.surge.text.ProgressSpinner MERGERS -> UTHt
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> LaXh
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> uWfF:
    int value() -> value
react.surge.util.Area -> XdUf:
    org.bukkit.Location location -> JJxG
    java.lang.Double radius -> eIda
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> vkWA
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> GcJp
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> WWlK
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> clQA
    109:109:boolean isWithin(org.bukkit.Location) -> sbKq
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> xFhA
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> vkWA
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> PSqt
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> YNMD
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> iSmV
    257:257:java.lang.Double getRadius() -> mPVJ
    268:269:void setRadius(java.lang.Double) -> ejEe
    278:283:org.bukkit.Location random() -> sRFw
react.surge.util.Axis -> FOAL:
    react.surge.util.Axis X -> hRoD
    react.surge.util.Axis Y -> vuib
    react.surge.util.Axis Z -> Fqou
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> cKoe
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> rqGX
    29:29:org.bukkit.util.Vector negative() -> bGeE
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> lnmr:
    react.surge.util.BlastResistance BARRIER -> dqWC
    react.surge.util.BlastResistance BEDROCK -> tpDI
    react.surge.util.BlastResistance COMMAND -> grON
    react.surge.util.BlastResistance ENDER_PORTAL -> urer
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> rqmV
    react.surge.util.BlastResistance ANVIL -> GdSU
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> AHoI
    react.surge.util.BlastResistance OBSIDIAN -> MTeE
    react.surge.util.BlastResistance ENDER_CHEST -> jPgV
    react.surge.util.BlastResistance WATER -> RleM
    react.surge.util.BlastResistance LAVA -> WbbX
    react.surge.util.BlastResistance STATIONARY_WATER -> kCIk
    react.surge.util.BlastResistance DRAGON_EGG -> FaSE
    react.surge.util.BlastResistance ENDER_STONE -> lxqA
    react.surge.util.BlastResistance COAL_BLOCK -> MwIT
    react.surge.util.BlastResistance DIAMOND_BLOCK -> kulb
    react.surge.util.BlastResistance EMERALD_BLOCK -> ohft
    react.surge.util.BlastResistance GOLD_BLOCK -> HMfY
    react.surge.util.BlastResistance IRON_BLOCK -> urhv
    react.surge.util.BlastResistance REDSTONE_BLOCK -> KVpC
    react.surge.util.BlastResistance BRICK -> AkVJ
    react.surge.util.BlastResistance BRICK_STAIRS -> Wbac
    react.surge.util.BlastResistance HARD_CLAY -> pJHL
    react.surge.util.BlastResistance STONE -> oOUN
    react.surge.util.BlastResistance SMOOTH_BRICK -> ahOO
    react.surge.util.BlastResistance SMOOTH_STAIRS -> dOTn
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> DAYo
    react.surge.util.BlastResistance STONE_SLAB2 -> UvNR
    react.surge.util.BlastResistance IRON_DOOR -> HNFL
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> mkRQ
    react.surge.util.BlastResistance IRON_TRAPDOOR -> QaQR
    react.surge.util.BlastResistance MOB_SPAWNER -> jagV
    react.surge.util.BlastResistance WEB -> RuUb
    react.surge.util.BlastResistance DISPENSER -> kvML
    react.surge.util.BlastResistance DROPPER -> PxAW
    react.surge.util.BlastResistance FURNACE -> XnUq
    react.surge.util.BlastResistance BURNING_FURNACE -> hKAJ
    react.surge.util.BlastResistance BEACON -> YylU
    react.surge.util.BlastResistance COAL_ORE -> oykS
    react.surge.util.BlastResistance COCOA -> dhil
    react.surge.util.BlastResistance DIAMOND_ORE -> LjvE
    react.surge.util.BlastResistance EMERALD_ORE -> hSTb
    react.surge.util.BlastResistance FENCE -> cefh
    react.surge.util.BlastResistance FENCE_GATE -> UupS
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> RAsO
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> QaSk
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> RBSw
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> gYBT
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> tfwE
    react.surge.util.BlastResistance ACACIA_FENCE -> yvgX
    react.surge.util.BlastResistance BIRCH_FENCE -> CGIJ
    react.surge.util.BlastResistance DARK_OAK_FENCE -> DImE
    react.surge.util.BlastResistance SPRUCE_FENCE -> kCKa
    react.surge.util.BlastResistance JUNGLE_FENCE -> nnWJ
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> MUGF
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> LAAs
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> uHVv
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> aFNS
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> DlNn
    react.surge.util.BlastResistance QUARTZ_STAIRS -> opyP
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> xYpj
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> sKBd
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> SEVM
    react.surge.util.BlastResistance WOOD_STAIRS -> LcFD
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> hleD
    react.surge.util.BlastResistance ACACIA_DOOR -> bYrT
    react.surge.util.BlastResistance BIRCH_DOOR -> AADJ
    react.surge.util.BlastResistance DARK_OAK_DOOR -> YiJl
    react.surge.util.BlastResistance SPRUCE_DOOR -> MCeM
    react.surge.util.BlastResistance JUNGLE_DOOR -> IGyS
    react.surge.util.BlastResistance GOLD_ORE -> ynVC
    react.surge.util.BlastResistance HOPPER -> LACF
    react.surge.util.BlastResistance IRON_ORE -> QOpm
    react.surge.util.BlastResistance LAPIS_BLOCK -> rjAs
    react.surge.util.BlastResistance LAPIS_ORE -> qxAD
    react.surge.util.BlastResistance QUARTZ_ORE -> PweE
    react.surge.util.BlastResistance REDSTONE_ORE -> CFkE
    react.surge.util.BlastResistance TRAP_DOOR -> CFkD
    react.surge.util.BlastResistance WOOD -> tfxv
    react.surge.util.BlastResistance CHEST -> rPSR
    react.surge.util.BlastResistance TRAPPED_CHEST -> WREj
    react.surge.util.BlastResistance WORKBENCH -> NFja
    react.surge.util.BlastResistance CAULDRON -> wpbn
    react.surge.util.BlastResistance LOG -> ARFb
    react.surge.util.BlastResistance LOG_2 -> IbPK
    react.surge.util.BlastResistance BOOKSHELF -> xIRa
    react.surge.util.BlastResistance BANNER -> JmcT
    react.surge.util.BlastResistance STANDING_BANNER -> FrXf
    react.surge.util.BlastResistance WALL_BANNER -> gYEA
    react.surge.util.BlastResistance JACK_O_LANTERN -> LACt
    react.surge.util.BlastResistance MELON_BLOCK -> yKuB
    react.surge.util.BlastResistance SKULL -> Wsfl
    react.surge.util.BlastResistance PUMPKIN -> fnqf
    react.surge.util.BlastResistance SIGN -> nCdm
    react.surge.util.BlastResistance SIGN_POST -> XTgR
    react.surge.util.BlastResistance WALL_SIGN -> mbdl
    react.surge.util.BlastResistance QUARTZ_BLOCK -> sRtP
    react.surge.util.BlastResistance NOTE_BLOCK -> nehM
    react.surge.util.BlastResistance RED_SANDSTONE -> mYrf
    react.surge.util.BlastResistance SANDSTONE -> agrg
    react.surge.util.BlastResistance WOOL -> WYuQ
    react.surge.util.BlastResistance MONSTER_EGG -> RBUV
    react.surge.util.BlastResistance RAILS -> QXcy
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> QPTR
    react.surge.util.BlastResistance DETECTOR_RAIL -> PDar
    react.surge.util.BlastResistance POWERED_RAIL -> PMRx
    react.surge.util.BlastResistance CLAY -> VgvF
    react.surge.util.BlastResistance DIRT -> tpNO
    react.surge.util.BlastResistance GRASS -> dFkK
    react.surge.util.BlastResistance GRAVEL -> EnvY
    react.surge.util.BlastResistance SPONGE -> AcIx
    react.surge.util.BlastResistance BREWING_STAND -> bIWM
    react.surge.util.BlastResistance STONE_BUTTON -> DteF
    react.surge.util.BlastResistance WOOD_BUTTON -> bAGG
    react.surge.util.BlastResistance CAKE_BLOCK -> gGeA
    react.surge.util.BlastResistance ICE -> hmKK
    react.surge.util.BlastResistance PACKED_ICE -> IrsD
    react.surge.util.BlastResistance LEVER -> FXhQ
    react.surge.util.BlastResistance MYCEL -> AHvS
    react.surge.util.BlastResistance PISTON_BASE -> IYaI
    react.surge.util.BlastResistance PISTON_EXTENSION -> XwOB
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> PDcM
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> yLXH
    react.surge.util.BlastResistance GOLD_PLATE -> lVrt
    react.surge.util.BlastResistance IRON_PLATE -> mIUf
    react.surge.util.BlastResistance STONE_PLATE -> aWTG
    react.surge.util.BlastResistance WOOD_PLATE -> plPd
    react.surge.util.BlastResistance SAND -> cKwY
    react.surge.util.BlastResistance SOUL_SAND -> xHrs
    react.surge.util.BlastResistance CACTUS -> SNKP
    react.surge.util.BlastResistance LADDER -> NXMf
    react.surge.util.BlastResistance NETHERRACK -> foUG
    react.surge.util.BlastResistance GLASS -> yDGP
    react.surge.util.BlastResistance THIN_GLASS -> QYFr
    react.surge.util.BlastResistance STAINED_GLASS -> oWjb
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> sJdn
    react.surge.util.BlastResistance GLOWSTONE -> iNIk
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> vurB
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> GBXU
    react.surge.util.BlastResistance SEA_LANTERN -> ymyH
    react.surge.util.BlastResistance BED_BLOCK -> slhW
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> yChw
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> nDKL
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> yKye
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> OdER
    react.surge.util.BlastResistance LEAVES -> XvoR
    react.surge.util.BlastResistance LEAVES_2 -> xHve
    react.surge.util.BlastResistance SNOW -> OtfO
    int br -> VEth
    react.surge.util.BlastResistance[] ENUM$VALUES -> nTlE
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> IFmX
    175:190:int get(org.bukkit.Material) -> vkWA
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> eHWn:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> WWlK
react.surge.util.C -> BKDC:
    react.surge.util.C BLACK -> pdDH
    react.surge.util.C DARK_BLUE -> FYKF
    react.surge.util.C DARK_GREEN -> xIVh
    react.surge.util.C DARK_AQUA -> bRIm
    react.surge.util.C DARK_RED -> RmOL
    react.surge.util.C DARK_PURPLE -> keUH
    react.surge.util.C GOLD -> mRHY
    react.surge.util.C GRAY -> kBol
    react.surge.util.C DARK_GRAY -> LtLf
    react.surge.util.C BLUE -> EoWv
    react.surge.util.C GREEN -> WYwv
    react.surge.util.C AQUA -> SNMa
    react.surge.util.C RED -> YiPg
    react.surge.util.C LIGHT_PURPLE -> KNfQ
    react.surge.util.C YELLOW -> tMjk
    react.surge.util.C WHITE -> nTkA
    react.surge.util.C MAGIC -> MCkI
    react.surge.util.C BOLD -> oFkW
    react.surge.util.C STRIKETHROUGH -> ORar
    react.surge.util.C UNDERLINE -> vusY
    react.surge.util.C ITALIC -> tomV
    react.surge.util.C RESET -> usPs
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> FHIA
    char code -> RJii
    boolean isFormat -> ShCT
    java.lang.String toString -> NyuQ
    java.util.Map BY_ID -> oiRi
    java.util.Map BY_CHAR -> Tjef
    java.util.Map dyeChatMap -> dhsN
    java.util.Map chatHexMap -> CyvQ
    java.util.Map dyeHexMap -> MDOO
    int[] $SWITCH_TABLE$surge$util$C -> UuyU
    react.surge.util.C[] ENUM$VALUES -> XToR
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> CxaX
    378:378:java.lang.String hex() -> qeSW
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> clQA
    434:442:react.surge.util.C getByChar(java.lang.String) -> VTiL
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> NxFK
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> vkWA
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> NxFK
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> ejEe
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> LrAH
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> NLqg
    560:578:java.lang.String generateColorTable() -> Typq
    588:588:org.bukkit.ChatColor chatColor() -> qSor
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> WWlK
    632:679:byte getItemMeta() -> gNdA
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> lLqX
react.surge.util.C$1 -> BKDC$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> BKDC$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> BKDC$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> BKDC$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> BKDC$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> BKDC$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> BKDC$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> BKDC$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> BKDC$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> BKDC$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> BKDC$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> BKDC$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> BKDC$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> BKDC$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> BKDC$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> BKDC$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> BKDC$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> BKDC$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> BKDC$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> BKDC$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> BKDC$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> BKDC$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> eHWk:
    double number -> rGft
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> DPVr
    23:25:react.surge.util.CDou add(double) -> DPVt
    30:32:react.surge.util.CDou sub(double) -> GQOp
    37:37:double get() -> get
    42:48:void circ() -> AXfx
react.surge.util.CMD -> GtGU:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> hJjt
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> GcLF
    51:53:void execute(org.bukkit.command.CommandSender) -> ejEe
    60:77:void execute() -> execute
react.surge.util.CNum -> DGyO:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> LrAH
    23:25:react.surge.util.CNum add(int) -> NLqg
    30:32:react.surge.util.CNum sub(int) -> OPUi
    37:37:int get() -> get
    42:48:void circ() -> AXfx
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> srnU
react.surge.util.Chunks -> WrSk:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> DHCm
    33:40:react.glang.GList getLoadedChunks() -> gpgG
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> NxFK
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> vkWA
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> vkWA
    98:98:boolean unload(org.bukkit.Chunk) -> RQLP
    114:124:int unload(react.glang.GList,boolean,boolean) -> vkWA
    138:138:int unload(react.glang.GList,boolean) -> vkWA
    150:150:int unload(react.glang.GList) -> CoTN
    166:166:boolean isLoaded(java.lang.String,int,int) -> vkWA
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> ejEe
    201:205:void load(react.glang.GList) -> PKEw
react.surge.util.Cuboid -> dpHn:
    java.lang.String worldName -> AcMn
    int x1 -> SpSq
    int y1 -> pAaC
    int z1 -> sllh
    int x2 -> QjKt
    int y2 -> MeoX
    int z2 -> NXQh
    int[] $SWITCH_TABLE$surge$util$Axis -> Juwr
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> ohqJ
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> vkWA
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> ejEe
    93:93:boolean hasPlayers() -> VnvO
    98:110:react.glang.GList getPlayers() -> dwkb
    115:166:react.glang.GList getEntities() -> baWo
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> quXx
    287:287:org.bukkit.Location getLowerNE() -> kcaQ
    298:298:org.bukkit.Location getUpperSW() -> uyns
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> rhUj
    348:348:int getSizeY() -> Svnd
    358:358:int getSizeZ() -> KMTn
    368:368:int getLowerX() -> VLqc
    378:378:int getLowerY() -> RjyH
    388:388:int getLowerZ() -> bqvq
    398:398:int getUpperX() -> iUJU
    408:408:int getUpperY() -> ktam
    418:418:int getUpperZ() -> iKxQ
    428:438:org.bukkit.block.Block[] corners() -> BmMu
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> vkWA
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> NxFK
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> ejEe
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> xFhA
    546:546:boolean contains(int,int,int) -> YMPx
    558:558:boolean contains(org.bukkit.block.Block) -> clQA
    570:570:boolean contains(org.bukkit.Location) -> srla
    580:580:int volume() -> aVCO
    591:601:byte averageLightLevel() -> gWUB
    612:612:react.surge.util.Cuboid contract() -> VfdY
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> vkWA
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> NxFK
    708:715:boolean containsOnly(org.bukkit.Material) -> NxFK
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> vkWA
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> rUvs
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> vkWA
    786:800:java.util.List getChunks() -> QODq
    815:819:void fill(int,byte) -> vkWA
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> aVCP
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> QFSh
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> UlRt
react.surge.util.Cuboid$1 -> dpHn$1:
    react.surge.util.Cuboid this$0 -> WQio
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> iSmV
    1:1:java.lang.Object onAdapt(java.lang.Object) -> WWlK
react.surge.util.Cuboid$CuboidDirection -> dpHn$vkWA:
    react.surge.util.Cuboid$CuboidDirection North -> Abnc
    react.surge.util.Cuboid$CuboidDirection East -> EwkG
    react.surge.util.Cuboid$CuboidDirection South -> eBBc
    react.surge.util.Cuboid$CuboidDirection West -> whWi
    react.surge.util.Cuboid$CuboidDirection Up -> mHxC
    react.surge.util.Cuboid$CuboidDirection Down -> UKeB
    react.surge.util.Cuboid$CuboidDirection Horizontal -> pRam
    react.surge.util.Cuboid$CuboidDirection Vertical -> jQPs
    react.surge.util.Cuboid$CuboidDirection Both -> RJlL
    react.surge.util.Cuboid$CuboidDirection Unknown -> cncC
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> ohqJ
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> huas
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> yRuf
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> UlRt
react.surge.util.Cuboid$CuboidIterator -> dpHn$NxFK:
    org.bukkit.World w -> Aspo
    int baseX -> nvrL
    int baseY -> pcex
    int baseZ -> BvtK
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> FsBI
    int sizeY -> BUQg
    int sizeZ -> bbnf
    react.surge.util.Cuboid this$0 -> WQio
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> gVnL:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> BApr:
    react.glang.GList buffer -> edHa
    boolean dbg -> RmRu
    int kf -> LlBa
    12:14:void <clinit>() -> <clinit>
    10:10:void <init>() -> <init>
    18:22:void flush() -> flush
    26:37:void log(java.lang.String,java.lang.String) -> xFhA
    41:49:void l(java.lang.Object,java.lang.String) -> NxFK
    53:54:void s(java.lang.Object,java.lang.String) -> ejEe
    58:69:void cdb() -> tThM
    73:79:void v(java.lang.Object,java.lang.String) -> xFhA
    83:84:void w(java.lang.Object,java.lang.String) -> YMPx
    88:89:void f(java.lang.Object,java.lang.String) -> rUvs
    93:106:void l(java.lang.String) -> OPUi
    110:117:void s(java.lang.String) -> srnU
    121:135:void v(java.lang.String) -> quXx
    139:146:void w(java.lang.String) -> nIlS
    150:157:void f(java.lang.String) -> vQdP
react.surge.util.DMSRequire -> nAoi:
    react.surge.util.DMSRequirement value() -> Vwfc
react.surge.util.DMSRequirement -> pjXr:
    react.surge.util.DMSRequirement SQL -> eRek
    react.surge.util.DMSRequirement[] ENUM$VALUES -> ihCp
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> WjAv:
    react.surge.util.Depend VAULT -> coCF
    react.surge.util.Depend FAWE -> SWCE
    react.surge.util.Depend WORLDEDIT -> DIts
    react.surge.util.Depend PROTOLIB -> euIC
    react.surge.util.Depend CITIZENS -> KVyr
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> SMpe
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> WPOa:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> WGeT
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> cKAf:
    react.surge.util.DimensionFace X -> ELwy
    react.surge.util.DimensionFace Y -> wOHm
    react.surge.util.DimensionFace Z -> coBX
    react.surge.util.DimensionFace[] ENUM$VALUES -> vvXr
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> cuTm:
    react.surge.util.Direction U -> UBtp
    react.surge.util.Direction D -> lpjh
    react.surge.util.Direction N -> ExMk
    react.surge.util.Direction S -> xRKW
    react.surge.util.Direction E -> mAKA
    react.surge.util.Direction W -> jsUu
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> urte
    int[] $SWITCH_TABLE$surge$util$Direction -> cwSV
    react.surge.util.Direction[] ENUM$VALUES -> veWV
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> IrBS
    61:61:int x() -> VgFF
    66:66:int y() -> Kfec
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> kdAQ
    81:81:react.glang.GList news() -> wxDn
    86:86:react.glang.GList udnews() -> VMSQ
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> FNJa
    115:147:react.surge.util.Direction fromByte(byte) -> clQA
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> SvnD
react.surge.util.DynamicConfiguration -> kQwg:
react.surge.util.DynamicTracker -> EeNU:
react.surge.util.Embedded -> XdTV:
    react.glang.GList get() -> DbQr
    void add(java.lang.Object) -> add
react.surge.util.FU -> mqpf:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> vkWA
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> NxFK
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> YMPx
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> rUvs
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> jNuO:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> lDGO
react.surge.util.Health -> jiHg:
    double hp -> diTa
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> aEEN
    41:41:double getHearts() -> fvWX
    51:51:double getHalfHearts() -> kuEo
    61:61:int getFlatHalfHearts() -> Kfgq
react.surge.util.IO -> CfxE:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> DsLn:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> vkWA
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> vkWA
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> vkWA
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> vkWA
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> vkWA
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> NxFK
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> ejEe
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> xFhA
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> vkWA
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> vkWA
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> vkWA
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> vkWA
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> YMPx
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> rUvs
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> WWlK
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> clQA
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> sbKq
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> vkWA
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> iSmV
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> srla
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> vkWA
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> vkWA
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> NxFK
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> vkWA
react.surge.util.MSound -> Oiys:
    react.surge.util.MSound AMBIENCE_CAVE -> uasR
    react.surge.util.MSound AMBIENCE_RAIN -> TsWq
    react.surge.util.MSound AMBIENCE_THUNDER -> HhEb
    react.surge.util.MSound ANVIL_BREAK -> ixfh
    react.surge.util.MSound ANVIL_LAND -> QYOk
    react.surge.util.MSound ANVIL_USE -> tNSP
    react.surge.util.MSound ARROW_HIT -> KNmJ
    react.surge.util.MSound BURP -> QYOl
    react.surge.util.MSound CHEST_CLOSE -> qVKV
    react.surge.util.MSound CHEST_OPEN -> blBb
    react.surge.util.MSound CLICK -> CqjB
    react.surge.util.MSound DOOR_CLOSE -> YOeT
    react.surge.util.MSound DOOR_OPEN -> RvEk
    react.surge.util.MSound DRINK -> iVcV
    react.surge.util.MSound EAT -> VppP
    react.surge.util.MSound EXPLODE -> etkX
    react.surge.util.MSound FALL_BIG -> WAPE
    react.surge.util.MSound FALL_SMALL -> hJnt
    react.surge.util.MSound FIRE -> Metx
    react.surge.util.MSound FIRE_IGNITE -> xtPu
    react.surge.util.MSound FIZZ -> YrJA
    react.surge.util.MSound FUSE -> dXUu
    react.surge.util.MSound GLASS -> yoDR
    react.surge.util.MSound HURT_FLESH -> IQVq
    react.surge.util.MSound ITEM_BREAK -> Hgeg
    react.surge.util.MSound ITEM_PICKUP -> jPtb
    react.surge.util.MSound LAVA -> CaIc
    react.surge.util.MSound LAVA_POP -> UBwY
    react.surge.util.MSound LEVEL_UP -> VNjt
    react.surge.util.MSound MINECART_BASE -> SovF
    react.surge.util.MSound MINECART_INSIDE -> BLdL
    react.surge.util.MSound NOTE_BASS -> mQnI
    react.surge.util.MSound NOTE_PIANO -> bAMP
    react.surge.util.MSound NOTE_BASS_DRUM -> FXnm
    react.surge.util.MSound NOTE_STICKS -> aNkW
    react.surge.util.MSound NOTE_BASS_GUITAR -> CaIV
    react.surge.util.MSound NOTE_SNARE_DRUM -> eSGp
    react.surge.util.MSound NOTE_PLING -> Vpnf
    react.surge.util.MSound ORB_PICKUP -> BwXG
    react.surge.util.MSound PISTON_EXTEND -> FjRK
    react.surge.util.MSound PISTON_RETRACT -> EELH
    react.surge.util.MSound PORTAL -> VpoL
    react.surge.util.MSound PORTAL_TRAVEL -> WRPL
    react.surge.util.MSound PORTAL_TRIGGER -> JKie
    react.surge.util.MSound SHOOT_ARROW -> DIyu
    react.surge.util.MSound SPLASH -> QYQp
    react.surge.util.MSound SPLASH2 -> HFGK
    react.surge.util.MSound STEP_GRASS -> mtTc
    react.surge.util.MSound STEP_GRAVEL -> FYRc
    react.surge.util.MSound STEP_LADDER -> KOPP
    react.surge.util.MSound STEP_SAND -> ULLU
    react.surge.util.MSound STEP_SNOW -> ubYg
    react.surge.util.MSound STEP_STONE -> Nqjr
    react.surge.util.MSound STEP_WOOD -> YrKV
    react.surge.util.MSound STEP_WOOL -> FPbI
    react.surge.util.MSound SWIM -> lpoq
    react.surge.util.MSound WATER -> Wbse
    react.surge.util.MSound WOOD_CLICK -> ExRs
    react.surge.util.MSound BAT_DEATH -> pdKX
    react.surge.util.MSound BAT_HURT -> ihHR
    react.surge.util.MSound BAT_IDLE -> yLan
    react.surge.util.MSound BAT_LOOP -> WRSJ
    react.surge.util.MSound BAT_TAKEOFF -> gQAF
    react.surge.util.MSound BLAZE_BREATH -> qDij
    react.surge.util.MSound BLAZE_DEATH -> Pwoo
    react.surge.util.MSound BLAZE_HIT -> MLcf
    react.surge.util.MSound CAT_HISS -> ORih
    react.surge.util.MSound CAT_HIT -> oPEx
    react.surge.util.MSound CAT_MEOW -> KNnV
    react.surge.util.MSound CAT_PURR -> ffmS
    react.surge.util.MSound CAT_PURREOW -> grbR
    react.surge.util.MSound CHICKEN_IDLE -> kmlh
    react.surge.util.MSound CHICKEN_HURT -> fgNO
    react.surge.util.MSound CHICKEN_EGG_POP -> YOes
    react.surge.util.MSound CHICKEN_WALK -> oXVk
    react.surge.util.MSound COW_IDLE -> tEau
    react.surge.util.MSound COW_HURT -> KNoB
    react.surge.util.MSound COW_WALK -> fxOb
    react.surge.util.MSound CREEPER_HISS -> jkIl
    react.surge.util.MSound CREEPER_DEATH -> oqhH
    react.surge.util.MSound ENDERDRAGON_DEATH -> nTqo
    react.surge.util.MSound ENDERDRAGON_GROWL -> bbqe
    react.surge.util.MSound ENDERDRAGON_HIT -> BniB
    react.surge.util.MSound ENDERDRAGON_WINGS -> XUUM
    react.surge.util.MSound ENDERMAN_DEATH -> ripB
    react.surge.util.MSound ENDERMAN_HIT -> yerk
    react.surge.util.MSound ENDERMAN_IDLE -> bJDJ
    react.surge.util.MSound ENDERMAN_TELEPORT -> aycv
    react.surge.util.MSound ENDERMAN_SCREAM -> aNog
    react.surge.util.MSound ENDERMAN_STARE -> IkNw
    react.surge.util.MSound GHAST_SCREAM -> QHRj
    react.surge.util.MSound GHAST_SCREAM2 -> Sgja
    react.surge.util.MSound GHAST_CHARGE -> OmAM
    react.surge.util.MSound GHAST_DEATH -> UKmm
    react.surge.util.MSound GHAST_FIREBALL -> HNYf
    react.surge.util.MSound GHAST_MOAN -> MTwg
    react.surge.util.MSound IRONGOLEM_DEATH -> PocY
    react.surge.util.MSound IRONGOLEM_HIT -> rrco
    react.surge.util.MSound IRONGOLEM_THROW -> sJsK
    react.surge.util.MSound IRONGOLEM_WALK -> gYRo
    react.surge.util.MSound MAGMACUBE_WALK -> HNWs
    react.surge.util.MSound MAGMACUBE_WALK2 -> IIKQ
    react.surge.util.MSound MAGMACUBE_JUMP -> xbrd
    react.surge.util.MSound PIG_IDLE -> drLI
    react.surge.util.MSound PIG_DEATH -> aNoJ
    react.surge.util.MSound PIG_WALK -> GuiB
    react.surge.util.MSound SHEEP_IDLE -> MoIi
    react.surge.util.MSound SHEEP_SHEAR -> Gdfr
    react.surge.util.MSound SHEEP_WALK -> ioxl
    react.surge.util.MSound SILVERFISH_HIT -> pAiW
    react.surge.util.MSound SILVERFISH_KILL -> thIN
    react.surge.util.MSound SILVERFISH_IDLE -> ULMg
    react.surge.util.MSound SILVERFISH_WALK -> sTCe
    react.surge.util.MSound SKELETON_IDLE -> XDUg
    react.surge.util.MSound SKELETON_DEATH -> PUoi
    react.surge.util.MSound SKELETON_HURT -> PUqp
    react.surge.util.MSound SKELETON_WALK -> gQEM
    react.surge.util.MSound SLIME_ATTACK -> NrPM
    react.surge.util.MSound SLIME_WALK -> yLfp
    react.surge.util.MSound SLIME_WALK2 -> UwEP
    react.surge.util.MSound SPIDER_IDLE -> tNYQ
    react.surge.util.MSound SPIDER_DEATH -> tyNE
    react.surge.util.MSound SPIDER_WALK -> Yqmu
    react.surge.util.MSound WITHER_DEATH -> MMIw
    react.surge.util.MSound WITHER_HURT -> QQEr
    react.surge.util.MSound WITHER_IDLE -> qwsk
    react.surge.util.MSound WITHER_SHOOT -> HVlM
    react.surge.util.MSound WITHER_SPAWN -> yLfi
    react.surge.util.MSound WOLF_BARK -> EDqf
    react.surge.util.MSound WOLF_DEATH -> GShq
    react.surge.util.MSound WOLF_GROWL -> lOQr
    react.surge.util.MSound WOLF_HOWL -> thLA
    react.surge.util.MSound WOLF_HURT -> AsyG
    react.surge.util.MSound WOLF_PANT -> wNpa
    react.surge.util.MSound WOLF_SHAKE -> lOQc
    react.surge.util.MSound WOLF_WALK -> hTFs
    react.surge.util.MSound WOLF_WHINE -> ORmy
    react.surge.util.MSound ZOMBIE_METAL -> bASq
    react.surge.util.MSound ZOMBIE_WOOD -> nUWR
    react.surge.util.MSound ZOMBIE_WOODBREAK -> rHRB
    react.surge.util.MSound ZOMBIE_IDLE -> PxUa
    react.surge.util.MSound ZOMBIE_DEATH -> ecoM
    react.surge.util.MSound ZOMBIE_HURT -> fgRl
    react.surge.util.MSound ZOMBIE_INFECT -> AAWA
    react.surge.util.MSound ZOMBIE_UNFECT -> Gujp
    react.surge.util.MSound ZOMBIE_REMEDY -> blGv
    react.surge.util.MSound ZOMBIE_WALK -> MLhh
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> SFJT
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> Vptq
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> svHn
    react.surge.util.MSound ZOMBIE_PIG_HURT -> EETT
    react.surge.util.MSound DIG_WOOL -> knUE
    react.surge.util.MSound DIG_GRASS -> SFMA
    react.surge.util.MSound DIG_GRAVEL -> Vpwg
    react.surge.util.MSound DIG_SAND -> SVmO
    react.surge.util.MSound DIG_SNOW -> IYpf
    react.surge.util.MSound DIG_STONE -> PMdS
    react.surge.util.MSound DIG_WOOD -> DBQH
    react.surge.util.MSound FIREWORK_BLAST -> PESl
    react.surge.util.MSound FIREWORK_BLAST2 -> tVlD
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> BMKq
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> giwX
    react.surge.util.MSound FIREWORK_TWINKLE -> pmBe
    react.surge.util.MSound FIREWORK_TWINKLE2 -> sSgg
    react.surge.util.MSound FIREWORK_LAUNCH -> GTLY
    react.surge.util.MSound SUCCESSFUL_HIT -> KiJK
    react.surge.util.MSound HORSE_ANGRY -> JTdX
    react.surge.util.MSound HORSE_ARMOR -> etrt
    react.surge.util.MSound HORSE_BREATHE -> JLSm
    react.surge.util.MSound HORSE_DEATH -> qVRa
    react.surge.util.MSound HORSE_GALLOP -> fpFL
    react.surge.util.MSound HORSE_HIT -> HEjn
    react.surge.util.MSound HORSE_IDLE -> KOUQ
    react.surge.util.MSound HORSE_JUMP -> yMIS
    react.surge.util.MSound HORSE_LAND -> heKE
    react.surge.util.MSound HORSE_SADDLE -> PpFu
    react.surge.util.MSound HORSE_SOFT -> tFJT
    react.surge.util.MSound HORSE_WOOD -> Wkhw
    react.surge.util.MSound DONKEY_ANGRY -> DJaK
    react.surge.util.MSound DONKEY_DEATH -> DuTs
    react.surge.util.MSound DONKEY_HIT -> Wsyv
    react.surge.util.MSound DONKEY_IDLE -> FPfo
    react.surge.util.MSound HORSE_SKELETON_DEATH -> lheI
    react.surge.util.MSound HORSE_SKELETON_HIT -> oqnM
    react.surge.util.MSound HORSE_SKELETON_IDLE -> hvKa
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> BoPL
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> EgWL
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> Akkh
    react.surge.util.MSound VILLAGER_DEATH -> UKqV
    react.surge.util.MSound VILLAGER_HAGGLE -> nDXO
    react.surge.util.MSound VILLAGER_HIT -> bcYI
    react.surge.util.MSound VILLAGER_IDLE -> RvOq
    react.surge.util.MSound VILLAGER_NO -> QakI
    react.surge.util.MSound VILLAGER_YES -> SFOJ
    java.lang.String pre19sound -> GupJ
    java.lang.String post19sound -> tEkx
    org.bukkit.Sound resolvedSound -> BLmV
    react.surge.util.MSound[] ENUM$VALUES -> TtEo
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> YyBo
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> Btvp:
    org.bukkit.Material material -> jkTO
    java.lang.Byte data -> YPPr
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> clmF
    79:80:void setData(java.lang.Byte) -> vkWA
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> pQFe:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> cJOA
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> hHwv
    68:68:boolean isAnyOnline() -> yRxg
    80:80:react.glang.GList inWorld(org.bukkit.World) -> iBlQ
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> CoTN
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> vkWA
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> vkWA
    143:144:void disable(org.bukkit.entity.Player) -> HeSx
    154:155:void enable(org.bukkit.entity.Player) -> NfeN
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> vkWA
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> NxFK
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> kIUl
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> vkWA
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> mFjf
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> ejEe
    300:300:boolean canFindPlayer(java.lang.String) -> SCPQ
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> imbK
    338:345:react.glang.GList onlinePlayers() -> xrYg
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> DPVr
    368:371:void clear(org.bukkit.entity.Player) -> DPVt
    381:385:void clearEffects(org.bukkit.entity.Player) -> GQOp
    398:399:void heal(org.bukkit.entity.Player,double) -> vkWA
    409:410:void heal(org.bukkit.entity.Player) -> IxxQ
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> UIWO
    432:433:void resetHunger(org.bukkit.entity.Player) -> jVsH
    443:444:void kill(org.bukkit.entity.Player) -> wThQ
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> Oqxj
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> qKFr
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> vkWA
react.surge.util.P$1 -> pQFe$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> iSmV
    1:1:java.lang.Object onAdapt(java.lang.Object) -> WWlK
react.surge.util.P$2 -> pQFe$2:
    java.lang.Double val$doff -> kDCM
    org.bukkit.entity.Player val$e -> jHoU
    org.bukkit.entity.Entity[] val$result -> bkkv
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> qAqx
react.surge.util.PE -> XuUt:
    react.surge.util.PE ABSORPTION -> YicD
    react.surge.util.PE BLINDNESS -> DJcy
    react.surge.util.PE CONFUSION -> lWgJ
    react.surge.util.PE DAMAGE_RESISTANCE -> NXar
    react.surge.util.PE FAST_DIGGING -> gXvw
    react.surge.util.PE FIRE_RESISTANCE -> mRYD
    react.surge.util.PE GLOWING -> aOVQ
    react.surge.util.PE HARM -> WJIc
    react.surge.util.PE HEAL -> bbya
    react.surge.util.PE HEALTH_BOOST -> coNj
    react.surge.util.PE HUNGER -> fUsl
    react.surge.util.PE INCREASE_DAMAGE -> bJIF
    react.surge.util.PE INVISIBILITY -> edRx
    react.surge.util.PE JUMP -> huly
    react.surge.util.PE LEVITATION -> EMfI
    react.surge.util.PE LUCK -> UwGk
    react.surge.util.PE NIGHT_VISION -> IRCL
    react.surge.util.PE POISON -> DcuG
    react.surge.util.PE REGENERATION -> KOWd
    react.surge.util.PE SATURATION -> GCLB
    react.surge.util.PE SLOW -> SxrA
    react.surge.util.PE SLOW_DIGGING -> GBje
    react.surge.util.PE SPEED -> qwvR
    react.surge.util.PE UNLUCK -> kfEO
    react.surge.util.PE WATER_BREATHING -> EDuM
    react.surge.util.PE WEAKNESS -> ahhV
    react.surge.util.PE WITHER -> rahF
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> vkWA
    144:144:react.surge.util.PE d(int) -> nIlS
    156:156:react.surge.util.PE a(int) -> vQdP
    166:166:org.bukkit.potion.PotionEffect c() -> uGMa
    177:178:void c(org.bukkit.entity.LivingEntity) -> rUvs
    182:183:void crm(org.bukkit.entity.LivingEntity) -> WWlK
    187:188:void rm(org.bukkit.entity.LivingEntity) -> clQA
react.surge.util.ParticleEffect -> BmHG:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> DArX
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> XMLm
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> sdnQ
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> xAYe
    react.surge.util.ParticleEffect WATER_BUBBLE -> sCKq
    react.surge.util.ParticleEffect WATER_SPLASH -> GvSK
    react.surge.util.ParticleEffect WATER_WAKE -> DAso
    react.surge.util.ParticleEffect SUSPENDED -> cgAb
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> DAsj
    react.surge.util.ParticleEffect CRIT -> JvkN
    react.surge.util.ParticleEffect CRIT_MAGIC -> whjS
    react.surge.util.ParticleEffect SMOKE_NORMAL -> galP
    react.surge.util.ParticleEffect SMOKE_LARGE -> oOpS
    react.surge.util.ParticleEffect SPELL -> NrVg
    react.surge.util.ParticleEffect SPELL_INSTANT -> plen
    react.surge.util.ParticleEffect SPELL_MOB -> BxDX
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> MoSb
    react.surge.util.ParticleEffect SPELL_WITCH -> UDGI
    react.surge.util.ParticleEffect DRIP_WATER -> AJLh
    react.surge.util.ParticleEffect DRIP_LAVA -> Nqum
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> AJLc
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> RvPr
    react.surge.util.ParticleEffect TOWN_AURA -> rYYh
    react.surge.util.ParticleEffect NOTE -> UDDx
    react.surge.util.ParticleEffect PORTAL -> XwbP
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> seMm
    react.surge.util.ParticleEffect FLAME -> XfaA
    react.surge.util.ParticleEffect LAVA -> CaVO
    react.surge.util.ParticleEffect FOOTSTEP -> Spbr
    react.surge.util.ParticleEffect CLOUD -> CGcT
    react.surge.util.ParticleEffect REDSTONE -> qoiJ
    react.surge.util.ParticleEffect SNOWBALL -> KNxf
    react.surge.util.ParticleEffect SNOW_SHOVEL -> vedx
    react.surge.util.ParticleEffect SLIME -> puVS
    react.surge.util.ParticleEffect HEART -> CHCg
    react.surge.util.ParticleEffect BARRIER -> DmHw
    react.surge.util.ParticleEffect ITEM_CRACK -> JDFg
    react.surge.util.ParticleEffect BLOCK_CRACK -> UnXp
    react.surge.util.ParticleEffect BLOCK_DUST -> VOXp
    react.surge.util.ParticleEffect WATER_DROP -> ukSj
    react.surge.util.ParticleEffect ITEM_TAKE -> TREA
    react.surge.util.ParticleEffect MOB_APPEARANCE -> elep
    react.surge.util.ParticleEffect DRAGON_BREATH -> ojBq
    react.surge.util.ParticleEffect END_ROD -> iWRw
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> iOCP
    react.surge.util.ParticleEffect SWEEP_ATTACK -> gbNf
    java.util.Map NAME_MAP -> QQNQ
    java.util.Map ID_MAP -> CPUa
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> ucFh
    java.util.List properties -> NXfI
    react.surge.util.ParticleEffect[] ENUM$VALUES -> eKGE
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> kJQR
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> vkWA
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> oVAh
    557:565:react.surge.util.ParticleEffect fromId(int) -> lDGO
    577:578:boolean isWater(org.bukkit.Location) -> AWmR
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> vkWA
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> vkWA
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> vkWA
    665:681:void display(float,int,org.bukkit.Location,double) -> vkWA
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> vkWA
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> vkWA
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> vkWA
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> vkWA
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> vkWA
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> vkWA
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> vkWA
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> vkWA
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> vkWA
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> vkWA
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> vkWA
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> vkWA
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> vkWA
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> vkWA
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> BmHG$vkWA:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> BmHG$NxFK:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> BmHG$ejEe:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> GRLW
    1594:1594:float getValueY() -> sQhL
    1605:1605:float getValueZ() -> HfQN
react.surge.util.ParticleEffect$OrdinaryColor -> BmHG$xFhA:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> GRLW
    1526:1526:float getValueY() -> sQhL
    1537:1537:float getValueZ() -> HfQN
react.surge.util.ParticleEffect$ParticleColor -> BmHG$YMPx:
    1383:1383:void <init>() -> <init>
    float getValueX() -> GRLW
    float getValueY() -> sQhL
    float getValueZ() -> HfQN
react.surge.util.ParticleEffect$ParticleColorException -> BmHG$rUvs:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> BmHG$WWlK:
    org.bukkit.Material material -> jkTO
    byte data -> BUbc
    int[] packetData -> qUyP
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> hQhk
    1309:1309:java.lang.String getPacketDataString() -> Gbjr
react.surge.util.ParticleEffect$ParticleDataException -> BmHG$clQA:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> BmHG$sbKq:
    int version -> version
    java.lang.Class enumParticle -> aWkW
    java.lang.reflect.Constructor packetConstructor -> cLqF
    java.lang.reflect.Method getHandle -> IsjR
    java.lang.reflect.Field playerConnection -> btan
    java.lang.reflect.Method sendPacket -> HFTM
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> yMPJ
    float offsetX -> MoVP
    float offsetY -> lGJY
    float offsetZ -> BgEF
    float speed -> AdAd
    int amount -> CWLy
    boolean longDistance -> vnYn
    react.surge.util.ParticleEffect$ParticleData data -> BweT
    java.lang.Object packet -> YrXP
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> RQLP
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> vkWA
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> NxFK
    2004:2018:void sendTo(org.bukkit.Location,double) -> NxFK
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> BmHG$sbKq$vkWA:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> BmHG$sbKq$NxFK:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> BmHG$sbKq$ejEe:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> BmHG$iSmV:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> RvTl
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> qEXN
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> SErY
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> gbMd
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> XxDn
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> BmHG$srla:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> lMKT:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> Ixwe
react.surge.util.Persist -> gyQL:
react.surge.util.PluginUtil -> Edml:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> YMPx
    81:85:void enableAll() -> pQOd
    95:99:void disable(org.bukkit.plugin.Plugin) -> rUvs
    106:110:void disableAll() -> yKHr
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> WWlK
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> vkWA
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> mymm
    169:172:java.util.List getPluginNames(boolean) -> QUxa
    184:187:java.lang.String getPluginVersion(java.lang.String) -> Dqxj
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> clQA
    237:316:java.util.List findByCommand(java.lang.String) -> GsTk
    337:338:void load(org.bukkit.plugin.Plugin) -> sbKq
    342:364:java.lang.String getPluginFileName(java.lang.String) -> kcKC
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> vkWA
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> iSmV
    480:484:void reloadAll() -> wwfV
    496:622:void unload(org.bukkit.plugin.Plugin) -> srla
react.surge.util.PoolCount -> LrSg:
react.surge.util.PoolDescriber -> woQP:
react.surge.util.PoolNanoThrottle -> xrTS:
react.surge.util.PositionalSelector -> FVrE:
    react.glang.GSet allowedChunks -> MMPq
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> wfdr
    39:40:void addChunk(org.bukkit.Chunk) -> PKEw
    44:44:react.glang.GSet getAllowedChunks() -> AXkI
react.surge.util.Protocol -> tmwR:
    react.surge.util.Protocol LATEST -> whjk
    react.surge.util.Protocol R1_12_2 -> thSO
    react.surge.util.Protocol R1_12_2_PRE -> blPN
    react.surge.util.Protocol R1_12_1 -> ralO
    react.surge.util.Protocol R1_12 -> yfaD
    react.surge.util.Protocol R1_11_2 -> cMOk
    react.surge.util.Protocol R1_11_1 -> kLVm
    react.surge.util.Protocol R1_11 -> NrXI
    react.surge.util.Protocol R1_10_2 -> CigQ
    react.surge.util.Protocol R1_10_1 -> mIkO
    react.surge.util.Protocol R1_10 -> hSnE
    react.surge.util.Protocol R1_9_4 -> rPil
    react.surge.util.Protocol R1_9_3 -> BnuT
    react.surge.util.Protocol R1_9_2 -> JLXl
    react.surge.util.Protocol R1_9_1 -> etyE
    react.surge.util.Protocol R1_9 -> RnBy
    react.surge.util.Protocol R1_8_9 -> rQJk
    react.surge.util.Protocol R1_8_8 -> lXJb
    react.surge.util.Protocol R1_8_7 -> KiOL
    react.surge.util.Protocol R1_8_6 -> Atbv
    react.surge.util.Protocol R1_8_5 -> MUaw
    react.surge.util.Protocol R1_8_4 -> daTl
    react.surge.util.Protocol R1_8_3 -> NGcb
    react.surge.util.Protocol R1_8_2 -> TQfA
    react.surge.util.Protocol R1_8_1 -> CPXJ
    react.surge.util.Protocol R1_8 -> SOEl
    react.surge.util.Protocol R1_7_10 -> SqHk
    react.surge.util.Protocol R1_7_9 -> YXgH
    react.surge.util.Protocol R1_7_8 -> GSsT
    react.surge.util.Protocol R1_7_7 -> gapT
    react.surge.util.Protocol R1_7_6 -> RdtV
    react.surge.util.Protocol R1_7_5 -> HVvY
    react.surge.util.Protocol R1_7_4 -> WRbE
    react.surge.util.Protocol R1_7_3 -> yoUN
    react.surge.util.Protocol R1_7_2 -> uQfK
    react.surge.util.Protocol R1_7_1 -> FarP
    react.surge.util.Protocol B1_6_4 -> oGcs
    react.surge.util.Protocol B1_6_3 -> Lkss
    react.surge.util.Protocol B1_6_2 -> oGcw
    react.surge.util.Protocol B1_6_1 -> nweN
    react.surge.util.Protocol B1_5_2 -> JfLq
    react.surge.util.Protocol B1_5_1 -> LSBA
    react.surge.util.Protocol B1_5 -> cweW
    react.surge.util.Protocol B1_4_7 -> eAvA
    react.surge.util.Protocol B1_4_6 -> BEEW
    react.surge.util.Protocol B1_4_5 -> uADp
    react.surge.util.Protocol B1_4_4 -> hTRD
    react.surge.util.Protocol B1_4_2 -> MwgH
    react.surge.util.Protocol B1_3_2 -> YjHq
    react.surge.util.Protocol B1_3_1 -> cwep
    react.surge.util.Protocol B1_2_5 -> Ponf
    react.surge.util.Protocol B1_2_4 -> dqwg
    react.surge.util.Protocol EARLIEST -> vLXB
    react.surge.util.Protocol UNKNOWN -> MoWQ
    int version -> version
    java.lang.String packageVersion -> EwGw
    java.lang.String versionName -> XMRq
    boolean netty -> HxyH
    react.surge.util.Protocol[] ENUM$VALUES -> BxIS
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> Vnvd
    118:118:java.lang.String getPackageVersion() -> uhWy
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> lDbf
    142:150:react.surge.util.Protocol getProtocolVersion() -> Orsg
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> NxFK
    160:160:boolean isServerVersion() -> QEtr
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> sIVm
    175:175:boolean isActualVersion() -> rhVl
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> UIqU
    200:200:int getMetaVersion() -> HwSf
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> WXcN:
    react.surge.util.Protocol from -> cLsx
    react.surge.util.Protocol to -> tEsv
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> oyCn
    21:21:react.surge.util.Protocol getTo() -> Puxw
    26:26:boolean contains(react.surge.util.Protocol) -> ejEe
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> ytum:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> hsmt
    70:70:int randomNextInt() -> toBC
    80:80:long randomNextLong() -> dMoI
    92:92:boolean isWithin(double) -> IxxQ
    104:104:boolean isWithin(int) -> cJOA
    116:116:boolean isWithin(long) -> IyWE
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> UIWO
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> kjuU
react.surge.util.RawEvent -> nJdG:
react.surge.util.RayTrace -> pbKr:
    org.bukkit.Location start -> ItNd
    org.bukkit.util.Vector direction -> xIpS
    java.lang.Double maxDistance -> fxab
    java.lang.Double distanceCovered -> IRLJ
    java.lang.Double step -> wrCG
    java.lang.Boolean stop -> xRaf
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> UthO
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> qAqx
    89:89:org.bukkit.Location getStart() -> pjeE
    94:95:void setStart(org.bukkit.Location) -> CoTN
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> milL
    114:115:void setMaxDistance(java.lang.Double) -> xFhA
    119:119:java.lang.Double getDistanceCovered() -> dpSe
    124:125:void setDistanceCovered(java.lang.Double) -> YMPx
    129:129:java.lang.Double getStep() -> Vwke
    134:135:void setStep(java.lang.Double) -> rUvs
react.surge.util.ReflectionUtils -> LHCT:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> vkWA
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> vkWA
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> vkWA
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> vkWA
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> vkWA
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> vkWA
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> vkWA
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> vkWA
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> vkWA
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> vkWA
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> vkWA
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> vkWA
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> vkWA
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> vkWA
react.surge.util.ReflectionUtils$DataType -> LHCT$vkWA:
    react.surge.util.ReflectionUtils$DataType BYTE -> YPXf
    react.surge.util.ReflectionUtils$DataType SHORT -> gbRu
    react.surge.util.ReflectionUtils$DataType INTEGER -> snFf
    react.surge.util.ReflectionUtils$DataType LONG -> VrCm
    react.surge.util.ReflectionUtils$DataType CHARACTER -> rrrW
    react.surge.util.ReflectionUtils$DataType FLOAT -> lXOe
    react.surge.util.ReflectionUtils$DataType DOUBLE -> pAxJ
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> nVEc
    java.util.Map CLASS_MAP -> gsSn
    java.lang.Class primitive -> iphi
    java.lang.Class reference -> VXQf
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> YHHD
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> aEHB
    704:704:java.lang.Class getReference() -> Fplt
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> NxFK
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> ejEe
    741:742:java.lang.Class getReference(java.lang.Class) -> xFhA
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> vkWA
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> NxFK
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> NxFK
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> ejEe
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> vkWA
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> LHCT$NxFK:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> ItMi
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> NHGn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> gkCU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> buDx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> XLsc
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> AReE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> UTmE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> Gmfp
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> Tbjr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> jYxL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> mJOr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> AIrs
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> sCPm
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> oHFU
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> lrBJ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> PMnI
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> jHvg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> rbQL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> mIpA
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> Rdwi
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> WItL
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> KLod:
    void refresh() -> refresh
react.surge.util.SQLOperation -> kkmX:
    react.surge.util.SQLOperation LOAD -> sLEb
    react.surge.util.SQLOperation SAVE -> aiSs
    react.surge.util.SQLOperation[] ENUM$VALUES -> Nilt
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> Bcux:
    react.surge.util.ServerState START -> whrR
    react.surge.util.ServerState ENABLE -> tEuv
    react.surge.util.ServerState DISABLE -> aaDI
    react.surge.util.ServerState STOP -> bcgB
    react.surge.util.ServerState RUNNING -> xuFs
    react.surge.util.ServerState[] ENUM$VALUES -> mdFS
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> uOWe:
    org.bukkit.Location location -> JJxG
    org.bukkit.util.Vector offset -> hStp
    org.bukkit.util.Vector size -> GCWQ
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> PKEw
    90:94:org.bukkit.Location randomLocation() -> wnxD
    104:104:org.bukkit.Location randomSurface() -> BuaX
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> kIqy
    129:129:org.bukkit.util.Vector getSize() -> ohAk
react.surge.util.SnowLevel -> QhSB:
    byte level -> AJUP
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> VMXQ
    51:52:void setLevel(byte) -> sbKq
react.surge.util.SuperCaller -> bXaX:
    void run() -> run
react.surge.util.T -> EePU:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> NxFK
    32:35:void stop() -> stop
react.surge.util.TXT -> XtwG:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> WWlK
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> vkWA
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> vkWA
    99:99:java.lang.String line(react.surge.util.C,int) -> vkWA
    113:113:java.lang.String underline(react.surge.util.C,int) -> NxFK
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> vkWA
react.surge.util.Tag -> doha:
    java.lang.String value() -> value
react.surge.util.Timer -> lnpJ:
    long tns -> bkvb
    long cns -> VFqT
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> lUfk
react.surge.util.VectorMath -> lnpK:
    int[] $SWITCH_TABLE$surge$util$Axis -> Juwr
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> qyCc
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> vkWA
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> vkWA
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> NxFK
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> ejEe
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> vkWA
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> NxFK
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> NxFK
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> ejEe
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> xFhA
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> YMPx
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> rUvs
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> WWlK
    111:111:double round(double,int) -> YMPx
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> vkWA
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> vkWA
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> vkWA
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> xFhA
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> YMPx
    268:268:org.bukkit.util.Vector toVector(float,float) -> vkWA
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> vkWA
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> vkWA
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> clQA
    337:340:double getSpeed(org.bukkit.util.Vector) -> sbKq
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> vkWA
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> iSmV
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> vkWA
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> NxFK
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> ejEe
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> xFhA
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> srla
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> QFSh
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> ioBI
react.surge.util.VectorMath$1 -> lnpK$1:
    org.bukkit.util.Vector val$vector -> gQSW
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> qAqx
    1:1:java.lang.Object onAdapt(java.lang.Object) -> WWlK
react.surge.util.W -> ThkJ:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> sbKq
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> vkWA
    75:86:org.bukkit.entity.Entity getEntity(int) -> SCPQ
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> vkWA
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> vkWA
    143:143:int getChunkX(org.bukkit.block.Block) -> iSmV
    155:155:int getChunkY(org.bukkit.block.Block) -> srla
    168:169:void dropXp(org.bukkit.Location,int) -> NxFK
    180:180:int getChunkZ(org.bukkit.block.Block) -> qAqx
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> NxFK
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> vkWA
    232:239:react.glang.GList news(org.bukkit.Location) -> QUxa
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> vkWA
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> QUxa
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> sHYI
    300:300:org.bukkit.World toSync(org.bukkit.World) -> JQeO
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> AWmR
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> pHAb
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> pHAb
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> KfNs
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> vkWA
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> vkWA
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> vkWA
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> vkWA
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> vkWA
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> vkWA
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> vkWA
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> vkWA
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> kjuU
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> RQLP
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> kjuU
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> ejEe
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> vkWA
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> vkWA
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> vkWA
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> vkWA
react.surge.util.W$1 -> ThkJ$1:
    java.lang.Double val$doff -> kDCM
    org.bukkit.entity.Entity val$e -> Bwju
    org.bukkit.entity.Entity[] val$result -> bkkv
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> qAqx
react.surge.util.Worlds -> qCJY:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> eYUs
    33:33:boolean hasWorld(java.lang.String) -> nksF
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> sscd:
react.text.ColoredString -> KxDK:
    react.surge.util.C c -> gIBO
    java.lang.String s -> Fasx
    24:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> xGgb
    42:43:void setC(react.surge.util.C) -> NxFK
    47:47:java.lang.String getS() -> RALU
    52:53:void setS(java.lang.String) -> YoXQ
react.text.RTEX -> pGwL:
    react.glang.GList extras -> PpSW
    23:25:void <init>(react.text.ColoredString[]) -> <init>
    28:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> LHIn
    44:58:react.json.JSONObject toJSON() -> XdBq
react.text.RTX -> mPPX:
    react.json.JSONArray base -> NOyX
    23:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> rUvs
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> NxFK
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> vkWA
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> vkWA
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> NxFK
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> ejEe
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> vkWA
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> NxFK
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> ejEe
    265:265:react.json.JSONArray toJSON() -> uaBK
    276:277:void tellRawTo(org.bukkit.entity.Player) -> XdBq
react.text.RawText -> xPOd:
    java.lang.String COLOR_BLACK -> MgJQ
    java.lang.String COLOR_DARK_BLUE -> bcdn
    java.lang.String COLOR_DARK_GREEN -> WAbf
    java.lang.String COLOR_DARK_AQUA -> vUNN
    java.lang.String COLOR_DARK_RED -> XnyG
    java.lang.String COLOR_DARK_PURPLE -> dXiU
    java.lang.String COLOR_GOLD -> XVGo
    java.lang.String COLOR_GRAY -> dOxk
    java.lang.String COLOR_DARK_GRAY -> MUgt
    java.lang.String COLOR_BLUE -> Xwjf
    java.lang.String COLOR_GREEN -> aXQt
    java.lang.String COLOR_AQUA -> cnyE
    java.lang.String COLOR_RED -> bSDg
    java.lang.String COLOR_LIGHT_PURPLE -> wGNk
    java.lang.String COLOR_YELLOW -> jYyx
    java.lang.String COLOR_WHITE -> dXmG
    java.lang.String COLOR_NONE -> hKft
    java.lang.String HEAD_TEXT -> iFYq
    java.lang.String HEAD_COLOR -> kfSM
    java.lang.String HEAD_BOLD -> DJos
    java.lang.String HEAD_ITALIC -> uRNI
    java.lang.String HEAD_UNDERLINED -> VrHS
    java.lang.String HEAD_STRIKETHROUGH -> QPvL
    java.lang.String HEAD_OBFUSCATED -> NGlo
    java.lang.String HEAD_CLICK_EVENT -> SOMP
    java.lang.String HEAD_HOVER_EVENT -> nwlK
    java.lang.String HEAD_ACTION -> rYeF
    java.lang.String HEAD_VALUE -> kvsT
    java.lang.String HEAD_EXTRA -> iOJs
    java.lang.String HEAD_ACTION_SHOW_TEXT -> Egdc
    java.lang.String HEAD_ACTION_COMMAND -> BUkp
    java.util.ArrayList components -> eJmO
    48:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> fRxu
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> YMPx
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> vkWA
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> vkWA
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> vkWA
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> vkWA
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> vkWA
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> vkWA
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> vkWA
    307:313:java.lang.String compile() -> iTlu
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> vkWA

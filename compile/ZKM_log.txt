[2017.10.30 08:55:24] Zelix KlassMaster (Cracked by CM&N) 8.0.8 - License #Cracked by CM&N
                      Unlimited
                      coolman
                      coolman@neth.er
                      Copyright 1997-2016 Zelix Pty Ltd (ABN 47 078 740 093)
                      All rights reserved
[2017.10.30 08:55:24] Preprocessing ZKM Script file "C:\Users\cyberpwn\Documents\development\workspace\React6\compile\script.zkm"
[2017.10.30 08:55:24] Parsing ZKM Script file "C:\Users\cyberpwn\Documents\development\workspace\React6\compile\script.zkm"
[2017.10.30 08:55:25] Setting classpath to "C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Users\cyberpwn\Documents\development\workspace\React6\lib\spigot-1.12.2.jar"
[2017.10.30 08:55:25] Opening classes...
API calls detected that may not be handled automatically...
In class react.controller.ActionController
    in method public void start()
        java.lang.Class.getConstructor(java.lang.Class[])
In class react.controller.CommandController
    in method public void begin()
        java.lang.Class.getConstructor(java.lang.Class[])
In class react.controller.SampleController
    in method private void constructSamplers()
        java.lang.Class.getConstructor(java.lang.Class[])
In class surge.Main
    in method private void initializeAmps()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.reflect.Method.getName()
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
    in method private void scanForAmps()
        java.lang.Class.forName(java.lang.String)
In class surge.cluster.ConfigurationDataInput
    in method public void read(surge.cluster.IConfigurable, java.io.File)
        java.lang.reflect.Field.getName()
        java.lang.reflect.Field.getName()
    in method public surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable)
        java.lang.reflect.Field.getName()
In class surge.cluster.ConfigurationDataOutput
    in method public void write(surge.cluster.IConfigurable, java.io.File)
        java.lang.reflect.Field.getName()
In class surge.json.JSONObject
    in method public JSONObject(java.lang.Object, java.lang.String[])
        java.lang.Class.getField(java.lang.String)
    in method public static java.lang.String[] getNames(java.lang.Object)
        java.lang.reflect.Field.getName()
    in method private void populateMap(java.lang.Object)
        java.lang.reflect.Method.getName()
    in method public static java.lang.Object wrap(java.lang.Object)
        java.lang.Package.getName()
In class surge.nms.NMSX
    in method static 
        java.lang.Package.getName()
    in method public static java.lang.String getVersion()
        java.lang.Package.getName()
    in method public static java.lang.Class getCBNMSClass(java.lang.String)
        java.lang.Class.forName(java.lang.String)
    in method public static java.lang.Class getCBClass(java.lang.String)
        java.lang.Class.forName(java.lang.String)
    in method public static java.lang.Object serializeChat(java.lang.String)
        java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])
    in method public static java.lang.String getBukkitVersion()
        java.lang.Package.getName()
    in method public static void showPickup(org.bukkit.entity.Player, org.bukkit.entity.Entity, org.bukkit.entity.Entity)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getDeclaredField(java.lang.String)
    in method public static void sendPacket(org.bukkit.entity.Player, java.lang.Object)
        java.lang.Class.getField(java.lang.String)
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
    in method public static java.lang.Class getNMSClass(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Package.getName()
    in method public static void sendTitle(org.bukkit.entity.Player, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String)
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getField(java.lang.String)
        java.lang.Class.getField(java.lang.String)
        java.lang.Class.getField(java.lang.String)
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
    in method public static void sendTabTitle(org.bukkit.entity.Player, java.lang.String, java.lang.String)
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getDeclaredField(java.lang.String)
    in method public static void sendActionBar(org.bukkit.entity.Player, java.lang.String)
        java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getDeclaredMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.forName(java.lang.String)
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getConstructor(java.lang.Class[])
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getDeclaredField(java.lang.String)
    in method public static int ping(org.bukkit.entity.Player)
        java.lang.Class.forName(java.lang.String)
        java.lang.Package.getName()
        java.lang.Class.getMethod(java.lang.String, java.lang.Class[])
        java.lang.Class.getDeclaredField(java.lang.String)
In class surge.util.PluginUtil
    in method public static void unload(org.bukkit.plugin.Plugin)
        java.lang.Class.getName()
        java.lang.Class.getDeclaredField(java.lang.String)
        java.lang.Class.getDeclaredField(java.lang.String)
        java.lang.Class.getDeclaredField(java.lang.String)
        java.lang.Class.getDeclaredField(java.lang.String)
In class surge.util.ReflectionUtils
    in method public static java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[])
        java.lang.Class.getConstructors()
    in method public static java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[])
        java.lang.reflect.Method.getName()
    in method public static java.lang.reflect.Field getField(java.lang.Class, boolean, java.lang.String)
        java.lang.Class.getField(java.lang.String)
        java.lang.Class.getDeclaredField(java.lang.String)
In class surge.util.ReflectionUtils$PackageType
    in method public java.lang.Class getClass(java.lang.String)
        java.lang.Class.forName(java.lang.String)
    in method public static java.lang.String getServerVersion()
        java.lang.Package.getName()

262 classes opened in 0 seconds. 79317K of memory used. 423466K of memory free.

[2017.10.30 08:55:26] Setting trim exclusions...
[2017.10.30 08:55:26] Trimming...
	Using 'C:\Users\cyberpwn\Documents\development\workspace\React6\compile\defaultTrimExclude.txt' for default trim exclusions
[2017.10.30 08:55:26] Setting exclusions...
[2017.10.30 08:55:26] Obfuscating classes...
	Using 'C:\Users\cyberpwn\Documents\development\workspace\React6\compile\defaultExclude.txt' for default exclusions
WARNING: You elected to collapse packages but all packages excluded from being renamed.
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double max'=>'double b' in class 'surge.util.Range'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double min'=>'double a' in class 'surge.util.Range'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'double activeTime'=>'double a' in class 'surge.sched.TaskProfile'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionHandle[] $VALUES'=>'react.api.ActionHandle[] a' in class 'react.api.ActionHandle'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.cluster.ClusterType[] $VALUES'=>'surge.cluster.ClusterType[] a' in class 'surge.cluster.ClusterType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'float i'=>'float a' in class 'surge.util.FinalFloat'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GList commands'=>'surge.collection.GList a' in class 'react.controller.CommandController'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean k'=>'boolean c' in class 'react.controller.CommandController'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean connected'=>'boolean b' in class 'surge.PluginAmp'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.control.AmpedPlugin plugin'=>'surge.control.AmpedPlugin a' in class 'surge.PluginAmp'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int masterTask'=>'int c' in class 'surge.PluginAmp'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object t'=>'java.lang.Object b' in class 'surge.cluster.Cluster'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.cluster.ClusterType type'=>'surge.cluster.ClusterType a' in class 'surge.cluster.Cluster'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long cns'=>'long b' in class 'surge.util.Timer'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long tns'=>'long a' in class 'surge.util.Timer'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GMap actions'=>'surge.collection.GMap a' in class 'react.controller.ActionController'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'float[] sin'=>'float[] b' in class 'surge.math.M'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'double[] fastsqrt'=>'double[] a' in class 'surge.math.M'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String worldName'=>'java.lang.String a' in class 'surge.util.Cuboid'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int x1'=>'int b' in class 'surge.util.Cuboid'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int y2'=>'int f' in class 'surge.util.Cuboid'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int y1'=>'int c' in class 'surge.util.Cuboid'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int z2'=>'int g' in class 'surge.util.Cuboid'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int x2'=>'int e' in class 'surge.util.Cuboid'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int z1'=>'int d' in class 'surge.util.Cuboid'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.pool.QueueMode[] $VALUES'=>'surge.pool.QueueMode[] a' in class 'surge.pool.QueueMode'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String path'=>'java.lang.String a' in class 'surge.util.ReflectionUtils$PackageType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.pool.ParallelPoolManager pp'=>'surge.pool.ParallelPoolManager b' in class 'surge.control.AmpedPlugin'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.server.CoreTickThread ctt'=>'surge.server.CoreTickThread c' in class 'surge.control.AmpedPlugin'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GMap posts'=>'surge.collection.GMap c' in class 'react.controller.MonitorController'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GList plugins'=>'surge.collection.GList d' in class 'surge.Main'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Throwable cause'=>'java.lang.Throwable a' in class 'surge.json.JSONException'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionTargetType target'=>'react.api.ActionTargetType d' in class 'react.api.ActionType'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionHandle handle'=>'react.api.ActionHandle c' in class 'react.api.ActionType'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionType[] $VALUES'=>'react.api.ActionType[] e' in class 'react.api.ActionType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'react.api.ActionType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String node'=>'java.lang.String a' in class 'react.api.Permissable'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.Permissable[] $VALUES'=>'react.api.Permissable[] b' in class 'react.api.Permissable'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.pool.ThreadInformation info'=>'surge.pool.ThreadInformation g' in class 'surge.pool.ParallelPoolManager'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int next'=>'int c' in class 'surge.pool.ParallelPoolManager'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String key'=>'java.lang.String f' in class 'surge.pool.ParallelPoolManager'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Queue squeue'=>'java.util.Queue e' in class 'surge.pool.ParallelPoolManager'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GList threads'=>'surge.collection.GList b' in class 'surge.pool.ParallelPoolManager'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.pool.QueueMode mode'=>'surge.pool.QueueMode a' in class 'surge.pool.ParallelPoolManager'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long index'=>'long c' in class 'surge.json.JSONTokener'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'char previous'=>'char e' in class 'surge.json.JSONTokener'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean eof'=>'boolean b' in class 'surge.json.JSONTokener'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long line'=>'long d' in class 'surge.json.JSONTokener'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.io.Reader reader'=>'java.io.Reader f' in class 'surge.json.JSONTokener'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long character'=>'long a' in class 'surge.json.JSONTokener'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.SelectionMode mode'=>'react.api.SelectionMode b' in class 'react.api.Selector'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Class objectType'=>'java.lang.Class a' in class 'react.api.Selector'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int popoff'=>'int e' in class 'react.api.Selector'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GSet list'=>'surge.collection.GSet c' in class 'react.api.Selector'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object a'=>'java.lang.Object b' in class 'surge.collection.GTriset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object c'=>'java.lang.Object d' in class 'surge.collection.GTriset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object b'=>'java.lang.Object c' in class 'surge.collection.GTriset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Integer fadeOut'=>'java.lang.Integer e' in class 'surge.nms.Title'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String subTitle'=>'java.lang.String b' in class 'surge.nms.Title'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String action'=>'java.lang.String c' in class 'surge.nms.Title'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Integer stayTime'=>'java.lang.Integer f' in class 'surge.nms.Title'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Integer fadeIn'=>'java.lang.Integer d' in class 'surge.nms.Title'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String title'=>'java.lang.String a' in class 'surge.nms.Title'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String search'=>'java.lang.String b' in class 'surge.util.Protocol'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int version'=>'int a' in class 'surge.util.Protocol'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.Protocol[] $VALUES'=>'surge.util.Protocol[] c' in class 'surge.util.Protocol'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Class reference'=>'java.lang.Class c' in class 'surge.util.ReflectionUtils$DataType'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map CLASS_MAP'=>'java.util.Map a' in class 'surge.util.ReflectionUtils$DataType'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Class primitive'=>'java.lang.Class b' in class 'surge.util.ReflectionUtils$DataType'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Float pitch'=>'java.lang.Float d' in class 'surge.collection.GSound'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Float volume'=>'java.lang.Float c' in class 'surge.collection.GSound'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Sound iSound'=>'org.bukkit.Sound b' in class 'surge.collection.GSound'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String sound'=>'java.lang.String a' in class 'surge.collection.GSound'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.json.JSONObject[] stack'=>'surge.json.JSONObject[] c' in class 'surge.json.JSONWriter'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean comma'=>'boolean a' in class 'surge.json.JSONWriter'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.io.Writer writer'=>'java.io.Writer e' in class 'surge.json.JSONWriter'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'char mode'=>'char b' in class 'surge.json.JSONWriter'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int top'=>'int d' in class 'surge.json.JSONWriter'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String pre19sound'=>'java.lang.String a' in class 'surge.util.MSound'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long memoryMax'=>'long c' in class 'surge.server.MemoryMonitor'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long collected'=>'long g' in class 'surge.server.MemoryMonitor'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long mahs'=>'long n' in class 'surge.server.MemoryMonitor'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long memoryUsed'=>'long b' in class 'surge.server.MemoryMonitor'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long memoryFree'=>'long a' in class 'surge.server.MemoryMonitor'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long sms'=>'long i' in class 'surge.server.MemoryMonitor'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long allocated'=>'long f' in class 'surge.server.MemoryMonitor'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long mah'=>'long m' in class 'surge.server.MemoryMonitor'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int i'=>'int a' in class 'surge.util.FinalInteger'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'char code'=>'char c' in class 'surge.util.C'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map BY_CHAR'=>'java.util.Map g' in class 'surge.util.C'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.String toString'=>'java.lang.String e' in class 'surge.util.C'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int intCode'=>'int b' in class 'surge.util.C'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean isFormat'=>'boolean d' in class 'surge.util.C'. Given that the prefix 'is' is common, only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (A)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map dyeChatMap'=>'java.util.Map h' in class 'surge.util.C'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map dyeHexMap'=>'java.util.Map j' in class 'surge.util.C'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map BY_ID'=>'java.util.Map f' in class 'surge.util.C'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.util.Map chatHexMap'=>'java.util.Map i' in class 'surge.util.C'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GMap samplers'=>'surge.collection.GMap a' in class 'react.controller.SampleController'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.server.SuperSampler ss'=>'surge.server.SuperSampler c' in class 'react.controller.SampleController'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.text.NumberFormat NF'=>'java.text.NumberFormat a' in class 'surge.util.F'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String[] NAMES'=>'java.lang.String[] c' in class 'surge.util.F'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.text.DecimalFormat DF'=>'java.text.DecimalFormat b' in class 'surge.util.F'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.math.BigInteger THOUSAND'=>'java.math.BigInteger d' in class 'surge.util.F'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.NavigableMap MAP'=>'java.util.NavigableMap e' in class 'surge.util.F'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.util.Vector direction'=>'org.bukkit.util.Vector b' in class 'surge.util.RayTrace'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Double step'=>'java.lang.Double e' in class 'surge.util.RayTrace'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Boolean stop'=>'java.lang.Boolean f' in class 'surge.util.RayTrace'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.Location start'=>'org.bukkit.Location a' in class 'surge.util.RayTrace'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int index'=>'int b' in class 'surge.text.ProgressSpinner'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String[] chars'=>'java.lang.String[] a' in class 'surge.text.ProgressSpinner'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GList buffer'=>'surge.collection.GList a' in class 'surge.util.D'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object d'=>'java.lang.Object e' in class 'surge.collection.GQuadraset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object a'=>'java.lang.Object b' in class 'surge.collection.GQuadraset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object c'=>'java.lang.Object d' in class 'surge.collection.GQuadraset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object b'=>'java.lang.Object c' in class 'surge.collection.GQuadraset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.World w'=>'org.bukkit.World a' in class 'surge.util.Cuboid$CuboidIterator'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int y'=>'int f' in class 'surge.util.Cuboid$CuboidIterator'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int x'=>'int e' in class 'surge.util.Cuboid$CuboidIterator'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int baseZ'=>'int d' in class 'surge.util.Cuboid$CuboidIterator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int baseY'=>'int c' in class 'surge.util.Cuboid$CuboidIterator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int z'=>'int g' in class 'surge.util.Cuboid$CuboidIterator'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int sizeZ'=>'int j' in class 'surge.util.Cuboid$CuboidIterator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int sizeY'=>'int i' in class 'surge.util.Cuboid$CuboidIterator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int sizeX'=>'int h' in class 'surge.util.Cuboid$CuboidIterator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int baseX'=>'int b' in class 'surge.util.Cuboid$CuboidIterator'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long ms'=>'long l' in class 'react.action.ActionPurgeEntities'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean updated'=>'boolean f' in class 'surge.server.WorldMonitor'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long ms'=>'long n' in class 'surge.server.WorldMonitor'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int totalTiles'=>'int i' in class 'surge.server.WorldMonitor'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int totalDrops'=>'int h' in class 'surge.server.WorldMonitor'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GList tasks'=>'surge.collection.GList a' in class 'surge.sched.TaskManager'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.collection.GList players'=>'surge.collection.GList a' in class 'react.controller.PlayerController'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double i'=>'double a' in class 'surge.util.FinalDouble'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionTargetType target'=>'react.api.ActionTargetType g' in class 'react.api.Action'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionHandle handle'=>'react.api.ActionHandle e' in class 'react.api.Action'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'react.api.Action'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String status'=>'java.lang.String c' in class 'react.api.Action'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionType type'=>'react.api.ActionType h' in class 'react.api.Action'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String[] nodes'=>'java.lang.String[] d' in class 'react.api.Action'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionState state'=>'react.api.ActionState f' in class 'react.api.Action'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'double progress'=>'double j' in class 'react.api.Action'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.util.Vector size'=>'org.bukkit.util.Vector c' in class 'surge.util.Shape'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.Location location'=>'org.bukkit.Location a' in class 'surge.util.Shape'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.util.Vector offset'=>'org.bukkit.util.Vector b' in class 'surge.util.Shape'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.Side[] $VALUES'=>'react.api.Side[] b' in class 'react.api.Side'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String ss'=>'java.lang.String a' in class 'react.api.Side'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.hotload.HotloadManager hotloadmgr'=>'surge.hotload.HotloadManager e' in class 'surge.Surge'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.PluginAmp amp'=>'surge.PluginAmp a' in class 'surge.Surge'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Thread mainThread'=>'java.lang.Thread f' in class 'surge.Surge'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.sched.TaskManager taskmgr'=>'surge.sched.TaskManager d' in class 'surge.Surge'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GMap filesizes'=>'surge.collection.GMap b' in class 'surge.hotload.HotloadManager'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GMap fileacts'=>'surge.collection.GMap c' in class 'surge.hotload.HotloadManager'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GMap filemods'=>'surge.collection.GMap a' in class 'surge.hotload.HotloadManager'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Map map'=>'java.util.Map a' in class 'surge.json.JSONObject'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long tick'=>'long f' in class 'surge.pool.ThreadInformation'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean processing'=>'boolean c' in class 'surge.pool.ThreadInformation'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int id'=>'int g' in class 'surge.pool.ThreadInformation'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int queuedSize'=>'int b' in class 'surge.pool.ThreadInformation'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.text.ProgressSpinner c'=>'surge.text.ProgressSpinner b' in class 'surge.text.PhantomSpinner'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.text.ProgressSpinner s'=>'surge.text.ProgressSpinner a' in class 'surge.text.PhantomSpinner'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'double activeTime'=>'double f' in class 'surge.sched.Task'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.math.Profiler profiler'=>'surge.math.Profiler h' in class 'surge.sched.Task'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String b' in class 'surge.sched.Task'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int ticks'=>'int j' in class 'surge.sched.Task'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean repeating'=>'boolean c' in class 'surge.sched.Task'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean completed'=>'boolean g' in class 'surge.sched.Task'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int id'=>'int a' in class 'surge.sched.Task'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.DimensionFace[] $VALUES'=>'surge.util.DimensionFace[] a' in class 'surge.util.DimensionFace'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int width'=>'int a' in class 'surge.util.Dimension'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int height'=>'int b' in class 'surge.util.Dimension'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int depth'=>'int c' in class 'surge.util.Dimension'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'boolean profiling'=>'boolean f' in class 'surge.math.Profiler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long nanos'=>'long a' in class 'surge.math.Profiler'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long startNano'=>'long b' in class 'surge.math.Profiler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long millis'=>'long c' in class 'surge.math.Profiler'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double time'=>'double e' in class 'surge.math.Profiler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object a'=>'java.lang.Object b' in class 'surge.collection.GBiset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Object b'=>'java.lang.Object c' in class 'surge.collection.GBiset'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GMap clusters'=>'surge.collection.GMap a' in class 'surge.cluster.DataCluster'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionTargetType[] $VALUES'=>'react.api.ActionTargetType[] a' in class 'react.api.ActionTargetType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'java.lang.Thread$State lastState'=>'java.lang.Thread$State f' in class 'surge.server.TPSMonitor'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double ltt'=>'double h' in class 'surge.server.TPSMonitor'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'double tickTimeMS'=>'double a' in class 'surge.server.TPSMonitor'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean ticked'=>'boolean e' in class 'surge.server.TPSMonitor'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long lastTick'=>'long i' in class 'surge.server.TPSMonitor'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int y'=>'int b' in class 'surge.util.Axis'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int x'=>'int a' in class 'surge.util.Axis'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int z'=>'int c' in class 'surge.util.Axis'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.Axis[] $VALUES'=>'surge.util.Axis[] d' in class 'surge.util.Axis'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String string'=>'java.lang.String a' in class 'surge.util.FinalString'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double hp'=>'double a' in class 'surge.util.Health'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String[] aliases'=>'java.lang.String[] b' in class 'react.api.ReactCommand'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'react.api.SideGate sideGate'=>'react.api.SideGate f' in class 'react.api.ReactCommand'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String usage'=>'java.lang.String d' in class 'react.api.ReactCommand'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String command'=>'java.lang.String a' in class 'react.api.ReactCommand'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.Cuboid$CuboidDirection[] $VALUES'=>'surge.util.Cuboid$CuboidDirection[] a' in class 'surge.util.Cuboid$CuboidDirection'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int version'=>'int b' in class 'surge.nms.NMSClass'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean init'=>'boolean a' in class 'surge.nms.NMSClass'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Byte data'=>'java.lang.Byte b' in class 'surge.util.MaterialBlock'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.Material material'=>'org.bukkit.Material a' in class 'surge.util.MaterialBlock'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GList children'=>'surge.collection.GList b' in class 'react.api.MonitorHeading'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String c' in class 'react.api.MonitorHeading'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ISampler head'=>'react.api.ISampler a' in class 'react.api.MonitorHeading'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double max'=>'double b' in class 'surge.util.CDou'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double number'=>'double a' in class 'surge.util.CDou'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.entity.Player p'=>'org.bukkit.entity.Player a' in class 'react.api.ReactPlayer'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.pool.ThreadInformation info'=>'surge.pool.ThreadInformation b' in class 'surge.pool.ParallelThread'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.util.Queue queue'=>'java.util.Queue a' in class 'surge.pool.ParallelThread'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double average'=>'double b' in class 'surge.math.Average'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double[] values'=>'double[] a' in class 'surge.math.Average'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean dirty'=>'boolean c' in class 'surge.math.Average'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.math.Average mahL'=>'surge.math.Average c' in class 'surge.server.SuperSampler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean running'=>'boolean h' in class 'surge.server.SuperSampler'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.server.TPSMonitor tpsMonitor'=>'surge.server.TPSMonitor x' in class 'surge.server.SuperSampler'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.math.Average tickTimeL'=>'surge.math.Average b' in class 'surge.server.SuperSampler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'long memoryUse'=>'long l' in class 'surge.server.SuperSampler'. Only 9 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long mahs'=>'long o' in class 'surge.server.SuperSampler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int totalTiles'=>'int s' in class 'surge.server.SuperSampler'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'double tickTime'=>'double f' in class 'surge.server.SuperSampler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int totalDrops'=>'int r' in class 'surge.server.SuperSampler'. Only 10 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.ActionState[] $VALUES'=>'react.api.ActionState[] a' in class 'react.api.ActionState'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.entity.Player p'=>'org.bukkit.entity.Player a' in class 'react.api.PlayerActionSource'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.BlastResistance[] $VALUES'=>'surge.util.BlastResistance[] b' in class 'surge.util.BlastResistance'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int br'=>'int a' in class 'surge.util.BlastResistance'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.math.Average a'=>'surge.math.Average i' in class 'react.sampler.SampleChunksLoadedPerSecond'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'byte level'=>'byte a' in class 'surge.util.SnowLevel'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int max'=>'int b' in class 'surge.util.CNum'. Only 3 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int number'=>'int a' in class 'surge.util.CNum'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.SelectionMode[] $VALUES'=>'react.api.SelectionMode[] a' in class 'react.api.SelectionMode'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.SideGate[] $VALUES'=>'react.api.SideGate[] a' in class 'react.api.SideGate'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String c' in class 'react.api.Sampler'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String id'=>'java.lang.String b' in class 'react.api.Sampler'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.util.C altColor'=>'surge.util.C f' in class 'react.api.Sampler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'int interval'=>'int g' in class 'react.api.Sampler'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.C color'=>'surge.util.C e' in class 'react.api.Sampler'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'double value'=>'double a' in class 'react.api.Sampler'. Only 5 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'long i'=>'long a' in class 'surge.util.FinalLong'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'surge.collection.GList headings'=>'surge.collection.GList a' in class 'react.api.TitleMonitor'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int y'=>'int b' in class 'surge.util.Direction'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int x'=>'int a' in class 'surge.util.Direction'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'int z'=>'int c' in class 'surge.util.Direction'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.Cuboid$CuboidDirection f'=>'surge.util.Cuboid$CuboidDirection d' in class 'surge.util.Direction'. Only 1 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.Double radius'=>'java.lang.Double b' in class 'surge.util.Area'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is vulnerable to brute force attack : Field mapping 'org.bukkit.Location location'=>'org.bukkit.Location a' in class 'surge.util.Area'. Only 8 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'boolean virtual'=>'boolean c' in class 'surge.util.CMD'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.command.CommandSender sender'=>'org.bukkit.command.CommandSender b' in class 'surge.util.CMD'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String command'=>'java.lang.String a' in class 'surge.util.CMD'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String node'=>'java.lang.String a' in class 'react.api.SampledType'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'react.api.SampledType[] $VALUES'=>'react.api.SampledType[] b' in class 'react.api.SampledType'. Only 7 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'org.bukkit.command.CommandSender sender'=>'org.bukkit.command.CommandSender a' in class 'react.api.CommandSenderActionSource'. Only 6 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'java.lang.String name'=>'java.lang.String a' in class 'surge.util.Depend'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.Protocol to'=>'surge.util.Protocol b' in class 'surge.util.ProtocolRange'. Only 2 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
WARNING: Auto Reflection Handling : AutoReflection hash is very vulnerable to brute force attack : Field mapping 'surge.util.Protocol from'=>'surge.util.Protocol a' in class 'surge.util.ProtocolRange'. Only 4 characters have to be guessed in field name. If field is not actually accessed via Reflection then use ZKM Script 'accessedByReflection' statement to specify only those classes, methods and fields that are accessed by Reflection. (B)
[2017.10.30 08:55:28] Saving 263 classes in "C:\Users\cyberpwn\Documents\development\workspace\React6\compile"
WARNING: File 'C:\Users\cyberpwn\Documents\development\workspace\React6\compile\in.jar' already exists in 'C:\Users\cyberpwn\Documents\development\workspace\React6\compile'. Renaming to 'C:\Users\cyberpwn\Documents\development\workspace\React6\compile\in.jar.BACKUP'.
[2017.10.30 08:55:28] Terminating normally.

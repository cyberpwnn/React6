org.cyberpwn.gbench.Profiler -> DYFQ:
    long nanos -> DYFQ
    long startNano -> gMhS
    long millis -> idpH
    long startMillis -> cJLm
    double time -> cuAU
    boolean profiling -> kYuC
    15:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> DYFQ
    78:78:double getTicks() -> DYFQ
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> gMhS
    93:93:double getHours() -> idpH
    98:98:double getMilliseconds() -> cJLm
    103:103:long getNanoseconds() -> cuAU
    108:108:long getNanos() -> kYuC
    113:113:long getStartNano() -> WWlE
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> jhRt
    128:128:double getTime() -> KKxJ
    133:133:boolean isProfiling() -> KwMR
org.cyberpwn.gconcurrent.A -> gMhS:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> WWlE
    7:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.A$1 -> gMhS$1:
    org.cyberpwn.gconcurrent.A this$0 -> jhRt
    1:9:void <init>(org.cyberpwn.gconcurrent.A) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.Execution -> idpH:
    4:4:void <init>() -> <init>
org.cyberpwn.gconcurrent.ParallelPoolManager -> cJLm:
    org.cyberpwn.gconcurrent.QueueMode mode -> KKxJ
    org.cyberpwn.glang.GList threads -> KwMR
    int next -> DHEY
    int threadCount -> fdXQ
    java.util.Queue squeue -> oMOY
    java.lang.String key -> key
    org.cyberpwn.gconcurrent.ThreadInformation info -> HnCv
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> Smbb
    22:23:void syncQueue(org.cyberpwn.gconcurrent.Execution) -> DYFQ
    long getNanoGate() -> DHEY
    29:42:void tickSyncQueue() -> fdXQ
    46:48:void <init>(java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    50:69:void <init>(int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    73:88:long lock() -> oMOY
    93:94:void start() -> start
    98:102:void shutdown() -> shutdown
    106:107:void <init>(int) -> <init>
    111:112:void queue(org.cyberpwn.gconcurrent.Execution) -> gMhS
    116:116:int getSize() -> getSize
    121:128:int getQueueSize() -> HnCv
    133:133:org.cyberpwn.gconcurrent.ParallelThread[] getThreads() -> Smbb
    140:167:void updateThreadInformation() -> SCOW
    171:203:org.cyberpwn.gconcurrent.ParallelThread nextThread() -> jFQD
    208:214:void createThreads(int) -> gMhS
    218:218:org.cyberpwn.gconcurrent.QueueMode getMode() -> iBkb
    223:223:int getNext() -> JjvV
    228:228:int getThreadCount() -> getThreadCount
    233:233:java.util.Queue getSqueue() -> hakf
    238:238:java.lang.String getKey() -> getKey
    243:243:org.cyberpwn.gconcurrent.ThreadInformation getAverageInfo() -> vjsq
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> TNaI
org.cyberpwn.gconcurrent.ParallelThread -> cuAU:
    java.util.Queue queue -> SCOW
    org.cyberpwn.gconcurrent.ThreadInformation info -> HnCv
    11:17:void <init>(java.lang.String,int) -> <init>
    22:54:void run() -> run
    58:62:void conditionallySleep(double) -> DYFQ
    68:75:void execute(org.cyberpwn.gconcurrent.Execution) -> idpH
    79:89:void execute() -> execute
    93:94:void queue(org.cyberpwn.gconcurrent.Execution) -> gMhS
    98:98:java.util.Queue getQueue() -> BlRb
    103:103:org.cyberpwn.gconcurrent.ThreadInformation getInfo() -> TVqQ
org.cyberpwn.gconcurrent.QueueMode -> kYuC:
    org.cyberpwn.gconcurrent.QueueMode ROUND_ROBIN -> jFQD
    org.cyberpwn.gconcurrent.QueueMode SMALLEST -> iBkb
    org.cyberpwn.gconcurrent.QueueMode[] ENUM$VALUES -> JjvV
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:org.cyberpwn.gconcurrent.QueueMode[] values() -> values
    1:1:org.cyberpwn.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
org.cyberpwn.gconcurrent.S -> WWlE:
    org.cyberpwn.gconcurrent.ParallelPoolManager mgr -> WWlE
    7:17:void <init>() -> <init>
org.cyberpwn.gconcurrent.S$1 -> WWlE$1:
    org.cyberpwn.gconcurrent.S this$0 -> hakf
    1:9:void <init>(org.cyberpwn.gconcurrent.S) -> <init>
    14:15:void run() -> run
org.cyberpwn.gconcurrent.TICK -> jhRt:
    long tick -> vjsq
    5:5:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
org.cyberpwn.gconcurrent.ThreadInformation -> KKxJ:
    double ticksPerSecond -> TNaI
    int queuedSize -> BlRb
    boolean processing -> TVqQ
    double utilization -> lfHb
    org.cyberpwn.gmath.Average ticksPerSecondAverage -> NfbX
    long tick -> vjsq
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> lfHb
    33:35:void setTicksPerSecond(double) -> gMhS
    39:39:int getQueuedSize() -> NfbX
    44:45:void setQueuedSize(int) -> idpH
    49:49:boolean isProcessing() -> KwKm
    54:55:void setProcessing(boolean) -> DYFQ
    59:59:double getUtilization() -> lKtr
    64:65:void setUtilization(double) -> idpH
    69:69:double getTicksPerSecondAverage() -> xWiB
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> lfGn
    89:89:int getId() -> getId
org.cyberpwn.gformat.F -> KwMR:
    java.text.NumberFormat NF -> KwKm
    java.text.DecimalFormat DF -> lKtr
    java.lang.String[] NAMES -> xWiB
    java.math.BigInteger THOUSAND -> lfGn
    java.util.NavigableMap MAP -> IEpj
    22:33:void <clinit>() -> <clinit>
    17:17:void <init>() -> <init>
    37:54:java.lang.String capitalize(java.lang.String) -> capitalize
    59:66:java.lang.String capitalizeWords(java.lang.String) -> DYFQ
    71:86:java.lang.String time(double,int) -> DYFQ
    91:91:java.lang.String b(int) -> b
    96:96:java.lang.String b(long) -> DYFQ
    101:101:java.lang.String b(double) -> cJLm
    106:123:java.lang.String b(java.math.BigInteger) -> DYFQ
    128:132:void instantiate() -> IEpj
    144:144:java.lang.String fileSize(long) -> gMhS
    157:157:java.lang.String memSize(long) -> idpH
    170:171:java.lang.String stamp(long) -> cJLm
    187:214:java.lang.String ofSize(long,int) -> DYFQ
    228:233:java.lang.String trim(java.lang.String,int) -> DYFQ
    246:266:java.lang.String cname(java.lang.String) -> gMhS
    280:292:java.lang.String repeat(java.lang.String,int) -> repeat
    304:311:java.lang.String mem(long) -> cuAU
    324:342:java.lang.String memx(long) -> kYuC
    356:357:java.lang.String f(long) -> WWlE
    369:370:java.lang.String f(int) -> cJLm
    384:393:java.lang.String f(double,int) -> gMhS
    409:418:java.lang.String fd(double,int) -> idpH
    432:441:java.lang.String f(float,int) -> DYFQ
    452:452:java.lang.String f(double) -> cuAU
    463:463:java.lang.String f(float) -> DYFQ
    478:478:java.lang.String pc(double,int) -> cJLm
    493:493:java.lang.String pc(float,int) -> gMhS
    506:506:java.lang.String pc(double) -> kYuC
    519:519:java.lang.String pc(float) -> gMhS
    535:535:java.lang.String pc(int,int,int) -> DYFQ
    549:549:java.lang.String pc(int,int) -> DYFQ
    565:565:java.lang.String pc(long,long,int) -> DYFQ
    579:579:java.lang.String pc(long,long) -> DYFQ
    591:591:java.lang.String msSeconds(long) -> jhRt
    605:605:java.lang.String msSeconds(long,int) -> gMhS
    617:617:java.lang.String nsMs(long) -> KKxJ
    631:631:java.lang.String nsMs(long,int) -> idpH
    645:645:java.lang.String nsMsd(long,int) -> cJLm
org.cyberpwn.glang.AccessCallback -> DHEY:
    java.lang.Object get() -> get
org.cyberpwn.glang.Adapter -> fdXQ:
    java.lang.Object adapt(java.lang.Object) -> DYFQ
    java.lang.Object onAdapt(java.lang.Object) -> gMhS
org.cyberpwn.glang.Callback -> oMOY:
    java.lang.Object t -> pibu
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> idpH
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
org.cyberpwn.glang.FinalDouble -> HnCv:
    double i -> hPii
    19:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> WWlE
org.cyberpwn.glang.FinalFloat -> Smbb:
    float i -> i
    19:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> idpH
org.cyberpwn.glang.FinalInteger -> SCOW:
    int i -> i
    19:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> cuAU
org.cyberpwn.glang.FinalLong -> jFQD:
    long i -> jVpM
    19:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> KwMR
org.cyberpwn.glang.FinalString -> iBkb:
    java.lang.String string -> string
    19:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
org.cyberpwn.glang.GAdapter -> JjvV:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> DYFQ
    java.lang.Object onAdapt(java.lang.Object) -> gMhS
org.cyberpwn.glang.GBiset -> hakf:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> gUwS
    java.lang.Object b -> SnCD
    30:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> pibu
    53:54:void setA(java.lang.Object) -> cJLm
    63:63:java.lang.Object getB() -> hPii
    73:74:void setB(java.lang.Object) -> cuAU
org.cyberpwn.glang.GList -> vjsq:
    long serialVersionUID -> serialVersionUID
    29:30:void <init>() -> <init>
    40:46:void <init>(java.util.Set) -> <init>
    56:62:void <init>(java.util.Collection) -> <init>
    72:78:void <init>(java.util.Iterator) -> <init>
    88:90:void <init>(java.lang.Object[]) -> <init>
    101:109:void <init>(java.util.List) -> <init>
    118:145:java.lang.Object mostCommon() -> jVpM
    155:157:org.cyberpwn.glang.GList shuffleCopy() -> gUwS
    165:166:void shuffle() -> SnCD
    177:203:org.cyberpwn.glang.GList split() -> mXJL
    215:215:boolean hasIndex(int) -> kYuC
    225:226:java.lang.Object pickRandom() -> rold
    237:244:org.cyberpwn.glang.GList stringList() -> jFRj
    255:259:void forEach(org.cyberpwn.glang.Callback) -> DYFQ
    268:268:int last() -> last
    282:287:int getIndexOrLast(int) -> WWlE
    303:303:org.cyberpwn.glang.GList cropFrom(int) -> jhRt
    308:340:org.cyberpwn.glang.GList split(int) -> KKxJ
    356:356:org.cyberpwn.glang.GList cropTo(int) -> KwMR
    373:383:org.cyberpwn.glang.GList crop(int,int) -> gMhS
    394:398:org.cyberpwn.glang.GList removeDuplicates() -> Vekj
    409:413:void removeAll(java.lang.Object) -> kYuC
    422:422:boolean hasDuplicates() -> Ubhi
    430:438:void sort() -> sort
    451:457:void push(java.lang.Object,int) -> DYFQ
    468:472:void add(java.lang.Object[]) -> add
    483:484:org.cyberpwn.glang.GList qadd(java.lang.Object) -> WWlE
    495:499:void add(java.util.List) -> DYFQ
    511:543:java.lang.String toString(java.lang.String) -> toString
    553:555:org.cyberpwn.glang.GList reverse() -> rMjA
    564:564:java.lang.String toString() -> toString
    574:581:org.cyberpwn.glang.GList copy() -> YVCf
    593:594:org.cyberpwn.glang.GList qdel(java.lang.Object) -> jhRt
    604:611:java.lang.Object pop() -> pop
    616:625:java.lang.Object popRandom() -> nlRS
org.cyberpwn.glang.GList$1 -> vjsq$1:
    org.cyberpwn.glang.GList this$0 -> mXJL
    431:431:void <init>(org.cyberpwn.glang.GList) -> <init>
    435:435:int compare(java.lang.Object,java.lang.Object) -> compare
org.cyberpwn.glang.GListAdapter -> TNaI:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> gMhS
    java.lang.Object onAdapt(java.lang.Object) -> gMhS
org.cyberpwn.glang.GMap -> BlRb:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:org.cyberpwn.glang.GMap copy() -> kAEl
    53:54:org.cyberpwn.glang.GMap qput(java.lang.Object,java.lang.Object) -> DYFQ
    64:81:org.cyberpwn.glang.GMap flip() -> hrqE
    87:94:java.lang.String toString() -> toString
    106:111:org.cyberpwn.glang.GMap append(org.cyberpwn.glang.GMap) -> DYFQ
    121:121:org.cyberpwn.glang.GList k() -> ejIC
    131:131:org.cyberpwn.glang.GSet kset() -> LrAp
    141:141:org.cyberpwn.glang.GList v() -> imbd
    151:151:org.cyberpwn.glang.GSet vset() -> myoN
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> gMhS
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:org.cyberpwn.glang.GList get(org.cyberpwn.glang.GList) -> DYFQ
    209:219:org.cyberpwn.glang.GMap removeDuplicateValues() -> uEpn
    233:242:void put(org.cyberpwn.glang.GList,org.cyberpwn.glang.GList) -> DYFQ
    251:267:org.cyberpwn.glang.GList sortK() -> qSWa
    277:293:org.cyberpwn.glang.GList sortV() -> gNKO
org.cyberpwn.glang.GQuadraset -> TVqQ:
    java.lang.Object a -> gUwS
    java.lang.Object b -> SnCD
    java.lang.Object c -> rold
    java.lang.Object d -> jFRj
    11:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> pibu
    25:26:void setA(java.lang.Object) -> cJLm
    30:30:java.lang.Object getB() -> hPii
    35:36:void setB(java.lang.Object) -> cuAU
    40:40:java.lang.Object getC() -> GbRS
    45:46:void setC(java.lang.Object) -> KKxJ
    50:50:java.lang.Object getD() -> PmJn
    55:56:void setD(java.lang.Object) -> KwMR
org.cyberpwn.glang.GSet -> lfHb:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
org.cyberpwn.glang.GTriset -> NfbX:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> gUwS
    java.lang.Object b -> SnCD
    java.lang.Object c -> rold
    13:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> pibu
    26:27:void setA(java.lang.Object) -> cJLm
    31:31:java.lang.Object getB() -> hPii
    36:37:void setB(java.lang.Object) -> cuAU
    41:41:java.lang.Object getC() -> GbRS
    46:47:void setC(java.lang.Object) -> KKxJ
org.cyberpwn.gmath.Average -> KwKm:
    double[] values -> Vekj
    double average -> Ubhi
    boolean dirty -> rMjA
    10:15:void <init>(int) -> <init>
    19:21:void put(double) -> jhRt
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> EmKl
org.cyberpwn.gmath.DoubleArrayUtils -> lKtr:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> DYFQ
    17:19:void wrapRight(double[]) -> DYFQ
    23:27:void fill(double[],double) -> fill
org.cyberpwn.gmath.M -> xWiB:
    int precision -> YVCf
    int modulus -> nlRS
    float[] sin -> kAEl
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> DYFQ
    31:36:boolean r(java.lang.Double) -> DYFQ
    51:51:double tps(long,int) -> cuAU
    63:63:double ticksFromNS(long) -> DHEY
    75:101:java.lang.String toRoman(int) -> DHEY
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> idpH
    144:216:int fromRoman(java.lang.String) -> idpH
    226:226:long ns() -> RsRH
    236:236:long ms() -> KTiq
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> gMhS
    333:333:float sinLookup(int) -> fdXQ
org.cyberpwn.json.HTTP -> lfGn:
    java.lang.String CRLF -> hrqE
    35:35:void <init>() -> <init>
    93:127:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> cJLm
    162:198:java.lang.String toString(org.cyberpwn.json.JSONObject) -> DYFQ
org.cyberpwn.json.HTTPTokener -> IEpj:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
org.cyberpwn.json.JSONArray -> pibu:
    java.util.ArrayList myArrayList -> ejIC
    94:96:void <init>() -> <init>
    108:143:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    167:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> DYFQ
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> oMOY
    352:358:int getInt(int) -> getInt
    374:379:org.cyberpwn.json.JSONArray getJSONArray(int) -> HnCv
    394:399:org.cyberpwn.json.JSONObject getJSONObject(int) -> Smbb
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> cuAU
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> SCOW
    515:515:boolean optBoolean(int) -> jFQD
    533:536:boolean optBoolean(int,boolean) -> DYFQ
    551:551:double optDouble(int) -> iBkb
    569:572:double optDouble(int,double) -> DYFQ
    587:587:int optInt(int) -> JjvV
    605:608:int optInt(int,int) -> cJLm
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> gMhS
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> DYFQ
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> DYFQ
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> DYFQ
    722:723:org.cyberpwn.json.JSONArray optJSONArray(int) -> hakf
    737:738:org.cyberpwn.json.JSONObject optJSONObject(int) -> vjsq
    752:752:long optLong(int) -> TNaI
    770:773:long optLong(int,long) -> DYFQ
    788:788:java.lang.String optString(int) -> BlRb
    803:804:java.lang.String optString(int,java.lang.String) -> DYFQ
    816:817:org.cyberpwn.json.JSONArray put(boolean) -> gMhS
    830:831:org.cyberpwn.json.JSONArray put(java.util.Collection) -> DYFQ
    845:848:org.cyberpwn.json.JSONArray put(double) -> KKxJ
    860:861:org.cyberpwn.json.JSONArray put(int) -> TVqQ
    873:874:org.cyberpwn.json.JSONArray put(long) -> fdXQ
    887:888:org.cyberpwn.json.JSONArray put(java.util.Map) -> DYFQ
    902:903:org.cyberpwn.json.JSONArray put(java.lang.Object) -> DHEY
    921:922:org.cyberpwn.json.JSONArray put(int,boolean) -> gMhS
    939:940:org.cyberpwn.json.JSONArray put(int,java.util.Collection) -> DYFQ
    958:959:org.cyberpwn.json.JSONArray put(int,double) -> gMhS
    977:978:org.cyberpwn.json.JSONArray put(int,int) -> cuAU
    996:997:org.cyberpwn.json.JSONArray put(int,long) -> gMhS
    1015:1016:org.cyberpwn.json.JSONArray put(int,java.util.Map) -> DYFQ
    1037:1053:org.cyberpwn.json.JSONArray put(int,java.lang.Object) -> DYFQ
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> fdXQ
    1126:1135:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.JSONArray) -> DYFQ
    1153:1156:java.lang.String toString() -> toString
    1174:1178:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> DYFQ
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> DYFQ
org.cyberpwn.json.JSONException -> hPii:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> LrAp
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
org.cyberpwn.json.JSONML -> jVpM:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(org.cyberpwn.json.XMLTokener,boolean,org.cyberpwn.json.JSONArray) -> DYFQ
    301:301:org.cyberpwn.json.JSONArray toJSONArray(java.lang.String) -> kYuC
    320:320:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.XMLTokener) -> DYFQ
    340:340:org.cyberpwn.json.JSONObject toJSONObject(org.cyberpwn.json.XMLTokener) -> gMhS
    360:360:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> cJLm
    379:456:java.lang.String toString(org.cyberpwn.json.JSONArray) -> gMhS
    472:552:java.lang.String toString(org.cyberpwn.json.JSONObject) -> DYFQ
org.cyberpwn.json.JSONObject -> gUwS:
    java.util.Map map -> map
    java.lang.Object NULL -> imbd
    159:161:void <init>() -> <init>
    179:189:void <init>(org.cyberpwn.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(org.cyberpwn.json.JSONTokener) -> <init>
    262:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:org.cyberpwn.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> DYFQ
    455:467:org.cyberpwn.json.JSONObject append(java.lang.String,java.lang.Object) -> gMhS
    480:499:java.lang.String doubleToString(double) -> KwMR
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> WWlE
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:org.cyberpwn.json.JSONArray getJSONArray(java.lang.String) -> jhRt
    691:696:org.cyberpwn.json.JSONObject getJSONObject(java.lang.String) -> KKxJ
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(org.cyberpwn.json.JSONObject) -> gMhS
    751:767:java.lang.String[] getNames(java.lang.Object) -> oMOY
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:org.cyberpwn.json.JSONObject increment(java.lang.String) -> KwMR
    855:855:boolean isNull(java.lang.String) -> DHEY
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:org.cyberpwn.json.JSONArray names() -> ktIG
    917:937:java.lang.String numberToString(java.lang.Number) -> DYFQ
    949:949:java.lang.Object opt(java.lang.String) -> fdXQ
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> DYFQ
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> DYFQ
    1018:1018:boolean optBoolean(java.lang.String) -> oMOY
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> DYFQ
    1054:1054:double optDouble(java.lang.String) -> HnCv
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> DYFQ
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> DYFQ
    1116:1119:double optDouble(java.lang.String,double) -> DYFQ
    1134:1134:int optInt(java.lang.String) -> Smbb
    1152:1155:int optInt(java.lang.String,int) -> gMhS
    1169:1170:org.cyberpwn.json.JSONArray optJSONArray(java.lang.String) -> SCOW
    1183:1184:org.cyberpwn.json.JSONObject optJSONObject(java.lang.String) -> jFQD
    1198:1198:long optLong(java.lang.String) -> iBkb
    1216:1219:long optLong(java.lang.String,long) -> DYFQ
    1234:1234:java.lang.String optString(java.lang.String) -> JjvV
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> DYFQ
    1255:1305:void populateMap(java.lang.Object) -> HnCv
    1320:1321:org.cyberpwn.json.JSONObject put(java.lang.String,boolean) -> gMhS
    1337:1338:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Collection) -> DYFQ
    1354:1355:org.cyberpwn.json.JSONObject put(java.lang.String,double) -> gMhS
    1371:1372:org.cyberpwn.json.JSONObject put(java.lang.String,int) -> idpH
    1388:1389:org.cyberpwn.json.JSONObject put(java.lang.String,long) -> gMhS
    1405:1406:org.cyberpwn.json.JSONObject put(java.lang.String,java.util.Map) -> DYFQ
    1425:1437:org.cyberpwn.json.JSONObject put(java.lang.String,java.lang.Object) -> idpH
    1455:1463:org.cyberpwn.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> cJLm
    1482:1486:org.cyberpwn.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> cuAU
    1501:1512:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> DYFQ
    1590:1590:java.lang.Object remove(java.lang.String) -> hakf
    1605:1640:boolean similar(java.lang.Object) -> fdXQ
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> Smbb
    1751:1760:org.cyberpwn.json.JSONArray toJSONArray(org.cyberpwn.json.JSONArray) -> idpH
    1779:1782:java.lang.String toString() -> toString
    1802:1806:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> DYFQ
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> DYFQ
    2000:2004:void indent(java.io.Writer,int) -> DYFQ
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> DYFQ
    153:153:void <clinit>() -> <clinit>
org.cyberpwn.json.JSONObject$1 -> gUwS$1:
org.cyberpwn.json.JSONObject$Null -> gUwS$DYFQ:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(org.cyberpwn.json.JSONObject$1) -> <init>
org.cyberpwn.json.JSONString -> SnCD:
    java.lang.String toJSONString() -> toJSONString
org.cyberpwn.json.JSONStringer -> mXJL:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
org.cyberpwn.json.JSONTokener -> rold:
    long character -> myoN
    boolean eof -> eof
    long index -> uEpn
    long line -> qSWa
    char previous -> gNKO
    java.io.Reader reader -> reader
    boolean usePrevious -> GbRS
    60:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> eGby
    119:131:int dehexchar(char) -> DYFQ
    136:136:boolean end() -> WFjk
    147:153:boolean more() -> bXML
    164:198:char next() -> next
    213:218:char next(char) -> gMhS
    233:250:java.lang.String next(int) -> lfHb
    263:268:char nextClean() -> ftxt
    287:334:java.lang.String nextString(char) -> idpH
    349:362:java.lang.String nextTo(char) -> cJLm
    376:388:java.lang.String nextTo(java.lang.String) -> vjsq
    403:441:java.lang.Object nextValue() -> tePi
    458:479:char skipTo(char) -> cuAU
    491:491:org.cyberpwn.json.JSONException syntaxError(java.lang.String) -> TNaI
    501:501:java.lang.String toString() -> toString
org.cyberpwn.json.JSONWriter -> jFRj:
    int maxdepth -> PmJn
    boolean comma -> EmKl
    char mode -> RsRH
    org.cyberpwn.json.JSONObject[] stack -> KTiq
    int top -> top
    java.io.Writer writer -> writer
    98:104:void <init>(java.io.Writer) -> <init>
    117:141:org.cyberpwn.json.JSONWriter append(java.lang.String) -> BlRb
    157:164:org.cyberpwn.json.JSONWriter array() -> qcvm
    180:193:org.cyberpwn.json.JSONWriter end(char,char) -> DYFQ
    206:206:org.cyberpwn.json.JSONWriter endArray() -> iLBr
    219:219:org.cyberpwn.json.JSONWriter endObject() -> kHvn
    235:258:org.cyberpwn.json.JSONWriter key(java.lang.String) -> TVqQ
    274:285:org.cyberpwn.json.JSONWriter object() -> SKcM
    299:310:void pop(char) -> kYuC
    322:329:void push(org.cyberpwn.json.JSONObject) -> idpH
    342:342:org.cyberpwn.json.JSONWriter value(boolean) -> idpH
    356:356:org.cyberpwn.json.JSONWriter value(double) -> DHEY
    369:369:org.cyberpwn.json.JSONWriter value(long) -> oMOY
    385:385:org.cyberpwn.json.JSONWriter value(java.lang.Object) -> SCOW
org.cyberpwn.json.XML -> Vekj:
    java.lang.Character AMP -> ktIG
    java.lang.Character APOS -> eGby
    java.lang.Character BANG -> WFjk
    java.lang.Character EQ -> bXML
    java.lang.Character GT -> ftxt
    java.lang.Character LT -> tePi
    java.lang.Character QUEST -> qcvm
    java.lang.Character QUOT -> iLBr
    java.lang.Character SLASH -> kHvn
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> lfHb
    150:339:boolean parse(org.cyberpwn.json.XMLTokener,org.cyberpwn.json.JSONObject,java.lang.String) -> DYFQ
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:org.cyberpwn.json.JSONObject toJSONObject(java.lang.String) -> cJLm
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
    40:64:void <clinit>() -> <clinit>
org.cyberpwn.json.XMLTokener -> Ubhi:
    java.util.HashMap entity -> SKcM
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> Veml
    108:133:java.lang.Object nextContent() -> oLsJ
    149:166:java.lang.Object nextEntity(char) -> WWlE
    186:239:java.lang.Object nextMeta() -> qKIb
    261:334:java.lang.Object nextToken() -> KTmH
    354:420:boolean skipPast(java.lang.String) -> NfbX
    45:51:void <clinit>() -> <clinit>
react.Config -> rMjA:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> Veml
    java.lang.String A_ENTITYCACHE_INTERVAL -> oLsJ
    java.lang.String A_DROPSTACK_RADIUS -> qKIb
    java.lang.String A_DROPSTACK_STACKDROPS -> KTmH
    java.lang.String A_DROPSTACK_USEDEFAULT -> lelm
    java.lang.String A_DROPSTACK_SMOOTHSTACK -> kYxd
    java.lang.String A_POOL_MAXTHREADS -> xhoP
    java.lang.String A_POOL_SYNC_NANOS -> OXhn
    java.lang.String A_ENTITYCACHE_ENABLED -> tutk
    java.lang.String A_FASTLEAF_ENABLED -> qBXK
    java.lang.String A_FASTLEAF_ONDECAY -> QNOG
    java.lang.String A_FASTLEAF_INSTANT -> UtMj
    java.lang.String A_FASTLEAF_DECAYPERIOD -> lfMX
    java.lang.String A_DROPSTACK_MINAGE -> xrAG
    java.lang.String A_ENTITYSTACK_ENABLED -> XSBw
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> GruB
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> Tpig
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> Qxau
    java.lang.String A_GLASS_SHOW_BLOCKS -> EJlD
    java.lang.String A_GLASS_SHOW_PARTICLES -> vIVk
    java.lang.String A_ALLOW_CULL -> RsTl
    java.lang.String A_ALLOW_PURGE -> EmNG
    java.lang.String A_ALLOW_CACHE -> YgFb
    java.lang.String A_CULL_RULES -> fJgq
    int ENTITYCACHE_CHUNK_RADIUS -> Wypy
    int ENTITYCACHE_INTERVAL -> qSYN
    double DROPSTACK_RADIUS -> FyBS
    boolean DROPSTACK_STACKDROPS -> wLYU
    boolean DROPSTACK_USEDEFAULT -> bGLr
    boolean DROPSTACK_SMOOTHSTACK -> NMSv
    int POOL_MAXTHREADS -> ejHl
    long POOL_SYNC_NANOS -> FMln
    boolean ENTITYCACHE_ENABLED -> TWWC
    boolean FASTLEAF_ENABLED -> FNNN
    boolean FASTLEAF_ONDECAY -> JHwa
    boolean FASTLEAF_INSTANT -> Ellu
    int FASTLEAF_DECAYPERIOD -> OXhU
    int DROPSTACK_MINAGE -> YMSy
    boolean ENTITYSTACK_ENABLED -> ksig
    int ENTITYSTACK_MINIMUM_GROUP -> SuvF
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> yJOL
    int ENTITYSTACK_MAXIMUM_HEALTH -> LFmm
    boolean GLASS_SHOW_BLOCKS -> LWpB
    boolean GLASS_SHOW_PARTICLES -> URId
    org.cyberpwn.glang.GList ALLOW_CULL -> ghBQ
    org.cyberpwn.glang.GList ALLOW_PURGE -> wDKt
    org.cyberpwn.glang.GList ALLOW_CACHE -> kQjV
    org.cyberpwn.glang.GList CULL_RULES -> kblF
    boolean hrld -> CEGa
    boolean rns -> kcLj
    boolean rrl -> OjLs
    int[] $SWITCH_TABLE$org$bukkit$entity$EntityType -> bXQa
    111:225:void <clinit>() -> <clinit>
    34:34:void <init>() -> <init>
    230:247:void doTrack(org.bukkit.plugin.Plugin) -> DYFQ
    252:274:void onRead(org.bukkit.plugin.Plugin) -> gMhS
    278:308:void read(java.io.File,boolean) -> DYFQ
    313:432:surge.cluster.DataCluster read(surge.cluster.DataCluster,boolean) -> DYFQ
    437:474:surge.cluster.DataCluster defaultConfig(boolean) -> cJLm
    479:548:org.cyberpwn.glang.GList getDefaultEntitiesForCaching() -> lelm
    553:624:org.cyberpwn.glang.GList getDefaultEntitiesForCulling() -> kYxd
    629:662:org.cyberpwn.glang.GList getDefaultEntitiesForRemoval() -> xhoP
    667:691:org.cyberpwn.glang.GList getDefaultCullRules() -> OXhn
    34:34:int[] $SWITCH_TABLE$org$bukkit$entity$EntityType() -> tutk
react.Config$1 -> rMjA$1:
    java.io.File val$fConfig -> VUNs
    java.io.File val$fConfigExperimental -> Btgg
    org.bukkit.plugin.Plugin val$main -> uVvm
    1:233:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    238:242:void run() -> run
react.Config$2 -> rMjA$2:
    int[] $SwitchMap$org$bukkit$entity$EntityType -> WXRX
    483:483:void <clinit>() -> <clinit>
react.Gate -> YVCf:
    12:12:void <init>() -> <init>
    16:19:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> DYFQ
    24:24:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> gMhS
    29:29:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> idpH
    34:34:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> cJLm
    39:40:void unloadChunk(org.bukkit.Chunk) -> DYFQ
    44:45:void unloadChunk(org.bukkit.World,int,int) -> DYFQ
    49:55:void removeEntity(org.bukkit.entity.Entity) -> DYFQ
    59:65:void purgeEntity(org.bukkit.entity.Entity) -> gMhS
    69:75:void cullEntity(org.bukkit.entity.Entity) -> idpH
    79:85:void cachedEntity(org.bukkit.entity.Entity) -> cJLm
    89:100:void cacheEntity(org.bukkit.entity.Entity) -> cuAU
    104:104:int restoreEntities(org.bukkit.Chunk) -> gMhS
react.Info -> nlRS:
    java.lang.String CORE_REACT_DOT -> hrtL
    java.lang.String CORE_NAME -> OHKH
    java.lang.String CORE_CACHE -> wenB
    java.lang.String CORE_DOTYML -> FxeG
    java.lang.String COMMAND_REACT -> Mtgq
    java.lang.String COMMAND_ACT_DESCRIPTION -> kRJg
    java.lang.String COMMAND_ACT -> lwPl
    java.lang.String COMMAND_ACT_ALIAS_1 -> LiTj
    java.lang.String COMMAND_ACT_ALIAS_2 -> KnbS
    java.lang.String COMMAND_ACT_USAGE -> lvpO
    java.lang.String COMMAND_HELP_DESCRIPTION -> IpmC
    java.lang.String COMMAND_HELP -> Xtes
    java.lang.String COMMAND_HELP_ALIAS_1 -> uVvJ
    java.lang.String COMMAND_HELP_ALIAS_2 -> UHxs
    java.lang.String COMMAND_HELP_USAGE -> IpkL
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> uqJJ
    java.lang.String COMMAND_CPUSCORE -> Lhre
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> HBtF
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> clUM
    java.lang.String COMMAND_CPUSCORE_USAGE -> hQPh
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> nuFI
    java.lang.String COMMAND_RELOAD -> ncbu
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> uOFT
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> jWVx
    java.lang.String COMMAND_RELOAD_USAGE -> tBpm
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> idwp
    java.lang.String COMMAND_MONITOR -> AhvI
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> qmQR
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> rNPs
    java.lang.String COMMAND_MONITOR_USAGE -> RsYD
    java.lang.String COMMAND_GLASS_DESCRIPTION -> ycfP
    java.lang.String COMMAND_GLASS -> qlnx
    java.lang.String COMMAND_GLASS_ALIAS_1 -> uNhU
    java.lang.String COMMAND_GLASS_ALIAS_2 -> xrEU
    java.lang.String COMMAND_GLASS_USAGE -> DYNk
    java.lang.String MSG_PERMISSION -> JQnW
    java.lang.String MSG_MONITORING_STARTED -> oxKi
    java.lang.String MSG_MONITORING_STOPPED -> Kncp
    java.lang.String MSG_GLASS_STARTED -> vAJa
    java.lang.String MSG_GLASS_STOPPED -> LaGB
    org.bukkit.Color COLOR_HOPPER -> rNPW
    org.bukkit.Color COLOR_BLOCK_UPDATE -> LOcy
    org.bukkit.Color COLOR_BLOCK_FROMTO -> ykuh
    org.bukkit.Color COLOR_BLOCK_BURN -> Smhu
    org.bukkit.Color COLOR_BLOCK_DECAY -> Ubma
    org.bukkit.Color COLOR_BLOCK_FORM -> iBtU
    java.lang.String NAME_TICK -> HdyL
    java.lang.String NAME_MEMORY -> jqLa
    java.lang.String NAME_CHUNKS -> qvAW
    java.lang.String NAME_ENTITIES -> uNgg
    java.lang.String STATE_MONITORING_TAB -> dfid
    java.lang.String STATE_MONITORING_ENABLED -> vcLm
    java.lang.String STATE_MAPPING_ENABLED -> hkEl
    java.lang.String STATE_SOUND_PLAYS -> byxO
    java.lang.String STATE_MONITORING_POSTED -> WFsm
    java.lang.String STATE_MONITORING_LASTTAB -> JQoh
    java.lang.String STATE_GLASSES_ENABLED -> skIA
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> BRiQ
    java.lang.String STATE_PLAYER_HOTBAR -> afSx
    java.lang.String STATE_PLAYER_SHIFT -> tmjp
    java.lang.String STATE_PLAYER_SCROLL -> YfmC
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> LrJN
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> dfkj
    java.lang.String PERM_ACCESS -> flql
    java.lang.String PERM_MONITOR -> qdaS
    java.lang.String PERM_MONITOR_TITLE -> AaHV
    java.lang.String PERM_MONITOR_MAP -> WWvP
    java.lang.String PERM_MONITOR_ENVIRONMENT -> xiUn
    java.lang.String PERM_MONITOR_GLASSES -> BtlD
    java.lang.String PERM_ACT -> Kvvd
    java.lang.String PERM_RELOAD -> eYNn
    java.lang.String SAMPLER_TPS -> UQon
    java.lang.String SAMPLER_TICK -> KUUG
    java.lang.String SAMPLER_TIU -> ydIE
    java.lang.String SAMPLER_MEM -> MckP
    java.lang.String SAMPLER_FREEMEM -> YEIe
    java.lang.String SAMPLER_MAXMEM -> fTAA
    java.lang.String SAMPLER_ALLOCMEM -> rVat
    java.lang.String SAMPLER_MAHS -> AOfu
    java.lang.String SAMPLER_CHK -> BIxk
    java.lang.String SAMPLER_CHKS -> YgLa
    java.lang.String SAMPLER_ENT -> iBuy
    java.lang.String SAMPLER_ENTLIV -> EvFD
    java.lang.String SAMPLER_ENTDROP -> lTpe
    java.lang.String SAMPLER_ENTTILE -> pXki
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> fJoH
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> eHLb
    java.lang.String ACTION_CULL_ENTITIES_NAME -> MBGe
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> Fovf
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> JAOS
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> bhuf
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> HCXx
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> YxOF
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> YgLu
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> yRhh
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> DGop
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> KoIL
    6:6:void <init>() -> <init>
    8:119:void <clinit>() -> <clinit>
react.React -> kAEl:
    react.React instance -> hPxF
    react.controller.SampleController sampleController -> AGXF
    react.controller.PlayerController playerController -> kstD
    react.controller.MonitorController monitorController -> vtTR
    react.controller.CommandController commandController -> GkMS
    react.controller.ActionController actionController -> uyaX
    react.controller.EntityCacheController entityCacheController -> YxPu
    react.controller.DropMergeController dropMergeController -> bWvd
    react.controller.FastDecayController fastDecayController -> XSKV
    react.controller.EntityStackController entityStackController -> vsrm
    react.controller.GlassController glassController -> DQCH
    react.controller.NMSController nmsController -> mhwa
    react.controller.EntityCullController entityCullController -> gNTt
    react.controller.FastTNTController fastTntController -> DreN
    23:23:void <init>() -> <init>
    71:71:void enable() -> enable
    77:77:void disable() -> disable
react.action.ActionCullEntities -> hrqE:
    long ms -> AOhA
    int lcd -> wfTp
    31:58:void <init>() -> <init>
    63:149:void enact(react.api.IActionSource,react.api.ISelector[]) -> DYFQ
    153:155:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> DYFQ
    26:26:void access$0(react.action.ActionCullEntities,long) -> DYFQ
    27:27:int access$1(react.action.ActionCullEntities) -> DYFQ
    26:26:long access$2(react.action.ActionCullEntities) -> gMhS
react.action.ActionCullEntities$1 -> hrqE$1:
    react.action.ActionCullEntities this$0 -> vbqN
    1:35:void <init>(react.action.ActionCullEntities) -> <init>
    40:43:react.api.ISelector get() -> qBXK
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> hrqE$2:
    react.action.ActionCullEntities this$0 -> vbqN
    1:47:void <init>(react.action.ActionCullEntities) -> <init>
    52:55:react.api.ISelector get() -> qBXK
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> hrqE$3:
    react.action.ActionCullEntities this$0 -> vbqN
    org.cyberpwn.glang.FinalInteger val$completed -> AFxR
    org.cyberpwn.glang.FinalInteger val$total -> ktSd
    org.cyberpwn.glang.FinalInteger val$totalCulled -> oflq
    org.cyberpwn.glang.FinalInteger val$totalChunked -> UlCm
    react.api.IActionSource val$source -> Xtkr
    1:103:void <init>(react.action.ActionCullEntities,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    108:128:void run() -> run
react.action.ActionCullEntities$4 -> hrqE$4:
    react.action.ActionCullEntities this$0 -> vbqN
    react.api.IActionSource val$source -> Xtkr
    org.cyberpwn.glang.FinalInteger val$totalCulled -> oflq
    org.cyberpwn.glang.FinalInteger val$totalChunked -> UlCm
    1:135:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger) -> <init>
    140:146:void run() -> run
react.action.ActionPurgeChunks -> ejIC:
    long ms -> AOhA
    int lcd -> wfTp
    28:43:void <init>() -> <init>
    48:121:void enact(react.api.IActionSource,react.api.ISelector[]) -> DYFQ
    125:137:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> gMhS
    23:23:void access$0(react.action.ActionPurgeChunks,long) -> DYFQ
    24:24:int access$1(react.action.ActionPurgeChunks) -> DYFQ
    23:23:long access$2(react.action.ActionPurgeChunks) -> gMhS
react.action.ActionPurgeChunks$1 -> ejIC$1:
    react.action.ActionPurgeChunks this$0 -> gxgs
    1:32:void <init>(react.action.ActionPurgeChunks) -> <init>
    37:40:react.api.ISelector get() -> qBXK
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> ejIC$2:
    react.action.ActionPurgeChunks this$0 -> gxgs
    org.cyberpwn.glang.FinalInteger val$completed -> AFxR
    org.cyberpwn.glang.FinalInteger val$total -> ktSd
    org.cyberpwn.glang.FinalInteger val$totalCulled -> oflq
    org.cyberpwn.glang.FinalInteger val$totalChunked -> UlCm
    react.api.IActionSource val$source -> Xtkr
    1:75:void <init>(react.action.ActionPurgeChunks,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    80:100:void run() -> run
react.action.ActionPurgeChunks$3 -> ejIC$3:
    react.action.ActionPurgeChunks this$0 -> gxgs
    react.api.IActionSource val$source -> Xtkr
    org.cyberpwn.glang.FinalInteger val$completed -> AFxR
    1:107:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger) -> <init>
    112:118:void run() -> run
react.action.ActionPurgeChunks$4 -> ejIC$4:
    react.action.ActionPurgeChunks this$0 -> gxgs
    org.bukkit.Chunk val$chunk -> RHgY
    java.lang.Runnable val$cb -> kAOX
    1:125:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    130:135:void run() -> run
react.action.ActionPurgeEntities -> LrAp:
    long ms -> AOhA
    int lcd -> wfTp
    33:60:void <init>() -> <init>
    65:152:void enact(react.api.IActionSource,react.api.ISelector[]) -> DYFQ
    156:199:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> gMhS
    28:28:void access$0(react.action.ActionPurgeEntities,long) -> DYFQ
    29:29:int access$1(react.action.ActionPurgeEntities) -> DYFQ
    28:28:long access$2(react.action.ActionPurgeEntities) -> gMhS
    29:29:void access$3(react.action.ActionPurgeEntities,int) -> DYFQ
react.action.ActionPurgeEntities$1 -> LrAp$1:
    react.action.ActionPurgeEntities this$0 -> YxOu
    1:37:void <init>(react.action.ActionPurgeEntities) -> <init>
    42:45:react.api.ISelector get() -> qBXK
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> LrAp$2:
    react.action.ActionPurgeEntities this$0 -> YxOu
    1:49:void <init>(react.action.ActionPurgeEntities) -> <init>
    54:57:react.api.ISelector get() -> qBXK
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> LrAp$3:
    react.action.ActionPurgeEntities this$0 -> YxOu
    org.cyberpwn.glang.FinalInteger val$completed -> AFxR
    org.cyberpwn.glang.FinalInteger val$total -> ktSd
    org.cyberpwn.glang.FinalInteger val$totalCulled -> oflq
    org.cyberpwn.glang.FinalInteger val$totalChunked -> UlCm
    react.api.IActionSource val$source -> Xtkr
    1:105:void <init>(react.action.ActionPurgeEntities,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger,react.api.IActionSource) -> <init>
    110:130:void run() -> run
react.action.ActionPurgeEntities$4 -> LrAp$4:
    react.action.ActionPurgeEntities this$0 -> YxOu
    react.api.IActionSource val$source -> Xtkr
    org.cyberpwn.glang.FinalInteger val$totalCulled -> oflq
    org.cyberpwn.glang.FinalInteger val$totalChunked -> UlCm
    1:137:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,org.cyberpwn.glang.FinalInteger,org.cyberpwn.glang.FinalInteger) -> <init>
    143:149:void run() -> run
react.action.ActionPurgeEntities$5 -> LrAp$5:
    react.action.ActionPurgeEntities this$0 -> YxOu
    org.bukkit.entity.Entity val$i -> SLLF
    org.cyberpwn.glang.FinalInteger val$cu -> xFre
    int val$k -> iBxF
    org.bukkit.Chunk val$chunk -> RHgY
    java.lang.Runnable val$cb -> kAOX
    1:177:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,org.cyberpwn.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    182:190:void run() -> run
react.api.Action -> imbd:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> sQWF
    java.lang.String[] nodes -> mPFN
    react.api.ActionHandle handle -> eHOB
    react.api.ActionState state -> bhwf
    react.api.ActionTargetType target -> xOdX
    react.api.ActionType type -> xPEX
    react.api.IActionSource currentSource -> vbpN
    double progress -> biYB
    org.cyberpwn.glang.GMap defaultSelectors -> rpWC
    23:24:void <init>(react.api.ActionType) -> <init>
    27:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> DYFQ
    65:66:void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> DYFQ
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> QNOG
    89:89:react.api.ActionState getState() -> UtMj
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> KwKm
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> lfMX
    125:125:react.api.ActionType getType() -> xrAG
    131:131:org.cyberpwn.glang.GMap getDefaultSelectors() -> XSBw
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> gMhS
    151:152:void completeAction() -> GruB
    157:157:react.api.IActionSource getCurrentSource() -> Tpig
    163:163:java.lang.String[] getNodes() -> Qxau
    169:170:void setNodes(java.lang.String[]) -> DYFQ
    void enact(react.api.IActionSource,react.api.ISelector[]) -> DYFQ
react.api.ActionAlreadyRunningException -> myoN:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> uEpn:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> qSWa:
    react.api.ActionHandle AUTOMATIC -> JJEK
    react.api.ActionHandle MANUAL -> FEhM
    react.api.ActionHandle MUTEX -> VCtu
    react.api.ActionHandle[] $VALUES -> DYUF
    3:3:react.api.ActionHandle[] values() -> values
    3:3:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.ActionNotRunningException -> gNKO:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> GbRS:
    react.api.ActionState IDLE -> OPbc
    react.api.ActionState RUNNING -> VDVW
    react.api.ActionState[] $VALUES -> IFaO
    3:3:react.api.ActionState[] values() -> values
    3:3:react.api.ActionState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionTargetType -> PmJn:
    react.api.ActionTargetType POSITIONAL -> KUXX
    react.api.ActionTargetType SYSTEM -> iLNG
    react.api.ActionTargetType[] $VALUES -> inPK
    3:3:react.api.ActionTargetType[] values() -> values
    3:3:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.ActionType -> EmKl:
    react.api.ActionType CULL_ENTITIES -> LPJw
    react.api.ActionType PURGE_ENTITIES -> CpEP
    react.api.ActionType PURGE_CHUNKS -> maKA
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> eHOB
    react.api.ActionTargetType target -> xOdX
    react.api.ActionType[] $VALUES -> tnOa
    5:5:react.api.ActionType[] values() -> values
    5:5:react.api.ActionType valueOf(java.lang.String) -> valueOf
    17:22:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    26:26:java.lang.String getName() -> getName
    31:31:java.lang.String getDescription() -> getDescription
    36:36:react.api.ActionHandle getHandle() -> EJlD
    41:41:react.api.ActionTargetType getTarget() -> lfMX
    5:9:void <clinit>() -> <clinit>
react.api.Address -> RsRH:
    int value() -> value
react.api.CPUBenchmark -> KTiq:
    org.bukkit.command.CommandSender sender -> sender
    int score -> PBeN
    15:20:void <init>(org.bukkit.command.CommandSender) -> <init>
    25:57:void run() -> run
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> DYFQ
    13:13:int access$1(react.api.CPUBenchmark) -> gMhS
react.api.CPUBenchmark$1 -> KTiq$1:
    react.api.CPUBenchmark this$0 -> EmWp
    1:25:void <init>(react.api.CPUBenchmark) -> <init>
    30:31:void run() -> run
react.api.CPUBenchmark$2 -> KTiq$2:
    react.api.CPUBenchmark this$0 -> EmWp
    1:48:void <init>(react.api.CPUBenchmark) -> <init>
    53:55:void run() -> run
react.api.CPUResult -> ktIG:
    react.api.CPUResult ULTRA_SLOW -> JJDF
    react.api.CPUResult VERY_SLOW -> TXBD
    react.api.CPUResult SLOW -> UJCS
    react.api.CPUResult AVERAGE -> bGXA
    react.api.CPUResult GOOD -> sjkG
    react.api.CPUResult FAST -> iwAI
    react.api.CPUResult VERY_FAST -> gEdm
    react.api.CPUResult ULTRA_FAST -> ejRs
    java.lang.String m -> HKlq
    react.api.CPUResult[] $VALUES -> mWwe
    3:3:react.api.CPUResult[] values() -> values
    3:3:react.api.CPUResult valueOf(java.lang.String) -> valueOf
    17:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> NfbX
    3:12:void <clinit>() -> <clinit>
react.api.CacheBase -> eGby:
    org.cyberpwn.glang.GMap cache -> Elvy
    12:14:void <init>() -> <init>
    19:19:org.cyberpwn.glang.GSet get(java.lang.Object) -> jFQD
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> iBkb
    42:43:void clear() -> clear
    48:48:org.cyberpwn.glang.GList k() -> ejIC
    54:54:boolean has(java.lang.Object) -> JjvV
react.api.Clip -> WFjk:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> bXML:
    org.bukkit.command.CommandSender sender -> sender
    12:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> lKtr
    30:31:void sendResponseSuccess(java.lang.String) -> xWiB
    36:37:void sendResponseError(java.lang.String) -> lfGn
    42:43:void sendResponseActing(java.lang.String) -> IEpj
react.api.ConsoleActionSource -> ftxt:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> lKtr
    18:19:void sendResponseSuccess(java.lang.String) -> xWiB
    24:25:void sendResponseError(java.lang.String) -> lfGn
    30:31:void sendResponseActing(java.lang.String) -> IEpj
react.api.CullList -> tePi:
    org.cyberpwn.glang.GSet toCull -> lMEb
    11:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> kYuC
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> vIVk
react.api.DTest -> qcvm:
    3:3:void <init>() -> <init>
    7:58:int test() -> RsTl
react.api.EntityFlag -> iLBr:
    react.api.EntityFlag NAMED -> jprH
    react.api.EntityFlag TAMED -> xWvp
    react.api.EntityFlag STACKED -> DQCd
    react.api.EntityFlag RIDDEN -> BSNm
    react.api.EntityFlag LEASHED -> fCCe
    java.lang.String m -> HKlq
    react.api.EntityFlag[] $VALUES -> DsFg
    8:8:react.api.EntityFlag[] values() -> values
    8:8:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
    19:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:org.cyberpwn.glang.GSet getFlags(org.bukkit.entity.Entity) -> WWlE
    40:60:boolean is(org.bukkit.entity.Entity) -> jhRt
    66:66:java.lang.String toString() -> toString
    8:14:void <clinit>() -> <clinit>
react.api.EntityGroup -> kHvn:
    org.cyberpwn.glang.GSet entityTypes -> oVMh
    11:13:void <init>() -> <init>
    17:17:org.cyberpwn.glang.GSet getEntityTypes() -> EmNG
react.api.EntitySample -> SKcM:
    org.cyberpwn.glang.GMap counts -> JlGU
    org.cyberpwn.glang.GMap sets -> MBKf
    16:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:org.cyberpwn.glang.GList getAll() -> YgFb
    45:45:org.cyberpwn.glang.GList getTypes() -> fJgq
    50:57:int total() -> Wypy
    62:67:int get(org.bukkit.entity.EntityType) -> DYFQ
    72:79:org.cyberpwn.glang.GSet getSet(org.bukkit.entity.EntityType) -> gMhS
    84:96:void add(org.bukkit.entity.Entity) -> kYuC
react.api.Experimental -> Veml:
react.api.IAction -> oLsJ:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> QNOG
    void act(react.api.IActionSource,react.api.ISelector[]) -> gMhS
    void enact(react.api.IActionSource,react.api.ISelector[]) -> DYFQ
    react.api.ActionState getState() -> UtMj
    react.api.ActionTargetType getTarget() -> lfMX
    void setNodes(java.lang.String[]) -> DYFQ
    java.lang.String[] getNodes() -> Qxau
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> KwKm
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> xrAG
    org.cyberpwn.glang.GMap getDefaultSelectors() -> XSBw
    void setDefaultSelector(java.lang.Class,org.cyberpwn.glang.AccessCallback) -> DYFQ
    react.api.ISelector[] biselect(react.api.ISelector[]) -> DYFQ
    react.api.IActionSource getCurrentSource() -> Tpig
    void completeAction() -> GruB
react.api.IActionSource -> qKIb:
    void sendResponse(java.lang.String) -> lKtr
    void sendResponseSuccess(java.lang.String) -> xWiB
    void sendResponseError(java.lang.String) -> lfGn
    void sendResponseActing(java.lang.String) -> IEpj
react.api.ICache -> KTmH:
    org.cyberpwn.glang.GSet get(java.lang.Object) -> jFQD
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> iBkb
    void clear() -> clear
    boolean has(java.lang.Object) -> JjvV
    org.cyberpwn.glang.GList k() -> ejIC
react.api.ICommand -> lelm:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> qSYN
    java.lang.String[] getPermissions() -> FyBS
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    react.api.SideGate getSideGate() -> wLYU
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> DYFQ
react.api.ISampler -> kYxd:
    java.lang.String getID() -> getID
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    surge.util.C getColor() -> bGLr
    surge.util.C getAltColor() -> NMSv
    void setColor(surge.util.C,surge.util.C) -> DYFQ
    int getInterval() -> getInterval
    void setInterval(int) -> KwKm
    void sample() -> ejHl
    java.lang.String get() -> get
    void construct() -> FMln
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> xhoP:
    react.api.SelectionMode getMode() -> TWWC
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> hakf
    org.cyberpwn.glang.GSet getList() -> FNNN
    org.cyberpwn.glang.GSet getPossibilities() -> JHwa
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> cuAU
    java.lang.String getName() -> getName
react.api.Injection -> OXhn:
    react.api.InjectionMethod value() -> Ellu
react.api.InjectionMethod -> tutk:
    react.api.InjectionMethod SWAP -> YpCJ
    react.api.InjectionMethod SUBSTRATE -> rFEQ
    react.api.InjectionMethod RELOAD -> lfWA
    react.api.InjectionMethod[] $VALUES -> URSg
    3:3:react.api.InjectionMethod[] values() -> values
    3:3:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:7:void <clinit>() -> <clinit>
react.api.Lang -> qBXK:
    java.lang.String value() -> value
react.api.MSampler -> QNOG:
    6:6:void <init>() -> <init>
    10:10:surge.server.SuperSampler ss() -> OXhU
react.api.MonitorHeading -> UtMj:
    react.api.ISampler head -> fluV
    org.cyberpwn.glang.GList children -> psDM
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> DYFQ
    27:27:react.api.ISampler getHead() -> YMSy
    32:33:void setHead(react.api.ISampler) -> gMhS
    37:37:org.cyberpwn.glang.GList getChildren() -> ksig
    42:42:java.lang.String getHeadText() -> SuvF
    47:60:java.lang.String getChildText() -> yJOL
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(org.cyberpwn.glang.GList) -> gMhS
react.api.NoiseGenerator -> lfMX:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> xrAG:
    react.api.NoiseGenerator[] octaves -> aoIP
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> LFmm
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> XSBw:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> pjRe
    17:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    44:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> LWpB
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
    13:14:void <clinit>() -> <clinit>
react.api.PerlinOctaveGenerator -> GruB:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> DYFQ
react.api.Permissable -> Tpig:
    react.api.Permissable ACCESS -> rFFA
    react.api.Permissable MONITOR -> FNXo
    react.api.Permissable MONITOR_TITLE -> opDY
    react.api.Permissable MONITOR_MAP -> MuSM
    react.api.Permissable MONITOR_ENVIRONMENT -> XmAo
    react.api.Permissable MONITOR_GLASSES -> kRUi
    react.api.Permissable ACT -> DGuA
    react.api.Permissable RELOAD -> IOUA
    java.lang.String node -> xPIx
    react.api.Permissable[] $VALUES -> GYno
    7:7:react.api.Permissable[] values() -> values
    7:7:react.api.Permissable valueOf(java.lang.String) -> valueOf
    21:31:void <init>(java.lang.String,int,java.lang.String) -> <init>
    35:35:boolean has(org.bukkit.command.CommandSender) -> DYFQ
    40:40:java.lang.String getNode() -> URId
    7:16:void <clinit>() -> <clinit>
react.api.PlayerActionSource -> Qxau:
    org.bukkit.entity.Player p -> pXsQ
    12:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> lKtr
    30:31:void sendResponseSuccess(java.lang.String) -> xWiB
    36:37:void sendResponseError(java.lang.String) -> lfGn
    42:43:void sendResponseActing(java.lang.String) -> IEpj
react.api.ReactActionSource -> EJlD:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> lKtr
    16:17:void sendResponseSuccess(java.lang.String) -> xWiB
    22:23:void sendResponseError(java.lang.String) -> lfGn
    28:29:void sendResponseActing(java.lang.String) -> IEpj
react.api.ReactCommand -> vIVk:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> ejWN
    java.lang.String usage -> DPfN
    java.lang.String description -> description
    react.api.SideGate sideGate -> YDqB
    13:15:void <init>() -> <init>
    20:20:java.lang.String getCommand() -> getCommand
    26:26:java.lang.String[] getAliases() -> qSYN
    32:32:java.lang.String[] getPermissions() -> FyBS
    38:38:java.lang.String getUsage() -> getUsage
    44:44:java.lang.String getDescription() -> getDescription
    50:50:react.api.SideGate getSideGate() -> wLYU
react.api.ReactException -> RsTl:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    11:13:void <init>() -> <init>
react.api.ReactPlayer -> EmNG:
    org.cyberpwn.glang.GMap keystore -> IXFN
    boolean monitoring -> monitoring
    boolean glasses -> YftD
    boolean mapping -> aCve
    int monitorSelection -> CEPn
    int plays -> MSOP
    boolean monitorPosted -> XcoQ
    int monitorLastSelection -> rFGe
    int switchNotification -> gEfq
    int hotbarSlot -> rWIc
    boolean shift -> uiCl
    int scroll -> KCwP
    double lastHeight -> OQDx
    boolean heightMovement -> pHPx
    org.bukkit.entity.Player p -> pXsQ
    23:37:void <clinit>() -> <clinit>
    40:84:void <init>(org.bukkit.entity.Player) -> <init>
    90:97:void save() -> save
    103:110:void load() -> load
    114:114:boolean isMonitoring() -> ghBQ
    119:119:boolean isMapping() -> wDKt
    124:124:org.bukkit.entity.Player getP() -> kQjV
    129:130:void setMonitoring(boolean) -> cuAU
    134:135:void setMapping(boolean) -> kYuC
    139:139:int getMonitorSelection() -> kblF
    144:145:void setMonitorSelection(int) -> lKtr
    149:149:int getHotbarSlot() -> CEGa
    154:155:void setHotbarSlot(int) -> xWiB
    159:159:boolean isShifting() -> kcLj
    164:165:void setShifting(boolean) -> WWlE
    169:169:boolean isShift() -> OjLs
    174:175:void setShift(boolean) -> jhRt
    179:179:int getScroll() -> bXQa
    184:185:void setScroll(int) -> lfGn
    189:189:int getMonitorLastSelection() -> VUNs
    194:195:void setMonitorLastSelection(int) -> IEpj
    199:200:void setP(org.bukkit.entity.Player) -> DYFQ
    204:204:double getLastHeight() -> Btgg
    209:210:void setLastHeight(double) -> fdXQ
    214:214:boolean isHeightMovement() -> uVvm
    219:220:void setHeightMovement(boolean) -> KKxJ
    224:224:int getSwitchNotification() -> WXRX
    229:230:void setSwitchNotification(int) -> pibu
    234:234:boolean getMonitorPosted() -> hrtL
    239:240:void setMonitorPosted(boolean) -> KwMR
    244:244:int getPlays() -> OHKH
    249:250:void setPlays(int) -> hPii
    254:254:boolean isGlasses() -> wenB
    259:260:void setGlasses(boolean) -> DHEY
react.api.SampledType -> YgFb:
    react.api.SampledType TPS -> opBb
    react.api.SampledType TICK -> JbwS
    react.api.SampledType TIU -> nuOr
    react.api.SampledType MEM -> sYkQ
    react.api.SampledType FREEMEM -> RkPQ
    react.api.SampledType MAXMEM -> CUsA
    react.api.SampledType ALLOCMEM -> aLij
    react.api.SampledType MAHS -> jqWb
    react.api.SampledType CHK -> uGCf
    react.api.SampledType CHKS -> VLkC
    react.api.SampledType ENT -> GIOs
    react.api.SampledType ENTLIV -> PCIX
    react.api.SampledType ENTDROP -> pPec
    react.api.SampledType ENTTILE -> SmuG
    java.lang.String node -> xPIx
    react.api.SampledType[] $VALUES -> Gbap
    5:5:react.api.SampledType[] values() -> values
    5:5:react.api.SampledType valueOf(java.lang.String) -> valueOf
    25:35:void <init>(java.lang.String,int,java.lang.String) -> <init>
    39:39:java.lang.String getNode() -> URId
    5:20:void <clinit>() -> <clinit>
react.api.Sampler -> fJgq:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    surge.util.C color -> Ihgy
    surge.util.C altColor -> Mcrn
    int interval -> yBMr
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:surge.util.C getColor() -> bGLr
    49:49:surge.util.C getAltColor() -> NMSv
    55:55:int getInterval() -> getInterval
    void sample() -> ejHl
    void construct() -> FMln
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(surge.util.C,surge.util.C) -> DYFQ
    107:108:void setInterval(int) -> KwKm
react.api.Sector -> Wypy:
    int value() -> value
react.api.SelectionException -> qSYN:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> FyBS:
    react.api.SelectionMode WHITELIST -> IqYf
    react.api.SelectionMode BLACKLIST -> AOnF
    react.api.SelectionMode[] $VALUES -> baPE
    3:3:react.api.SelectionMode[] values() -> values
    3:3:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.api.Selector -> wLYU:
    java.lang.Class objectType -> fvLf
    react.api.SelectionMode mode -> uXEN
    org.cyberpwn.glang.GSet list -> iDAR
    org.cyberpwn.glang.GSet possibilities -> GIQL
    int popoff -> pPdl
    15:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> TWWC
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> hakf
    43:43:org.cyberpwn.glang.GSet getList() -> FNNN
    49:49:org.cyberpwn.glang.GSet getPossibilities() -> JHwa
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> cuAU
    57:88:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> kYuC
    93:95:int pop() -> pop
    12:12:void <clinit>() -> <clinit>
react.api.SelectorEntityType -> bGLr:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> idpH
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> cuAU
    65:113:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> WWlE
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> NMSv:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> ejHl:
    16:17:void <init>() -> <init>
    21:22:void add(org.bukkit.Chunk) -> idpH
    26:27:void add(org.bukkit.Chunk,int) -> DYFQ
    31:35:void add(org.bukkit.World) -> DYFQ
    39:43:void addAll() -> FxeG
    48:91:int parse(org.bukkit.command.CommandSender,java.lang.String) -> cuAU
    96:277:org.cyberpwn.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> WWlE
    283:283:java.lang.String getName() -> getName
react.api.Side -> FMln:
    react.api.Side PLAYERS -> GjsL
    react.api.Side CONSOLE -> EJys
    java.lang.String ss -> yuRN
    react.api.Side[] $VALUES -> gFIy
    6:6:react.api.Side[] values() -> values
    6:6:react.api.Side valueOf(java.lang.String) -> valueOf
    14:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> Mtgq
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> gMhS
    6:9:void <clinit>() -> <clinit>
react.api.SideGate -> TWWC:
    react.api.SideGate PLAYERS_ONLY -> MuTQ
    react.api.SideGate CONSOLES_ONLY -> bOkl
    react.api.SideGate ANYTHING -> QVkf
    react.api.SideGate[] $VALUES -> MRpN
    3:3:react.api.SideGate[] values() -> values
    3:3:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> DYFQ
    3:7:void <clinit>() -> <clinit>
react.api.SideGate$1 -> TWWC$1:
    int[] $SwitchMap$react$api$SideGate -> vIdp
    13:13:void <clinit>() -> <clinit>
react.api.SimplexNoiseGenerator -> FNNN:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> iTaQ
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> kRJg
    15:30:void <clinit>() -> <clinit>
react.api.SimplexOctaveGenerator -> JHwa:
    double wScale -> vkgm
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> DYFQ
react.api.StackedEntity -> Ellu:
    org.bukkit.entity.LivingEntity entity -> mqni
    int count -> count
    double rmx -> tmrT
    19:30:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    34:34:int getAbsoluteMaxCount() -> lwPl
    39:39:int getMaxCount(org.bukkit.entity.LivingEntity) -> DYFQ
    44:46:void update() -> update
    50:56:void signalSize() -> LiTj
    60:101:void updateHealth() -> KnbS
    105:106:void heal(double) -> oMOY
    110:111:void setHealth(double) -> setHealth
    115:115:int getEffectiveCount() -> lvpO
    120:120:int getEffectiveCount(double) -> HnCv
    125:125:double getEffectiveMaxHealth(int) -> jVpM
    130:130:double getRealMaxHealth() -> IpmC
    135:135:double getHealth() -> getHealth
    140:146:void setMaxHealth(double) -> setMaxHealth
    150:150:double getMaxHealth() -> getMaxHealth
    155:155:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    160:160:int getCount() -> getCount
react.api.TitleMonitor -> OXhU:
    org.cyberpwn.glang.GList headings -> BJbK
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> DYFQ
    24:24:int getMaxSelection() -> Xtes
    29:37:int left(int) -> gUwS
    42:50:int right(int) -> SnCD
    55:55:react.api.MonitorHeading getHeadFor(int) -> mXJL
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> DYFQ
    83:100:java.lang.String getHotbarFor(int,boolean) -> idpH
react.cache.CachedEntity -> YMSy:
    java.util.UUID uid -> uXCy
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> BJah
    double x -> x
    double y -> y
    double z -> z
    double vx -> eGtQ
    double vy -> gxnA
    double vz -> bPLx
    double dx -> NERy
    double dy -> kAUI
    double dz -> uqUc
    27:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> KKxJ
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> uVvJ
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> UHxs
    120:121:void setVx(double) -> Smbb
    125:125:double getVy() -> IpkL
    130:131:void setVy(double) -> SCOW
    135:135:double getVz() -> uqJJ
    140:141:void setVz(double) -> jFQD
    145:145:double getDx() -> Lhre
    150:151:void setDx(double) -> iBkb
    155:155:double getDy() -> HBtF
    160:161:void setDy(double) -> JjvV
    165:165:double getDz() -> clUM
    170:171:void setDz(double) -> hakf
    175:175:java.util.UUID getUid() -> hQPh
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> ksig:
    int age -> lnkX
    boolean ageLock -> TFdK
    boolean breed -> bqnp
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> KKxJ
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> nuFI
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> ncbu
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> SuvF:
    org.bukkit.DyeColor dye -> Vnob
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> KKxJ
    30:30:org.bukkit.DyeColor getDye() -> uOFT
    35:36:void setDye(org.bukkit.DyeColor) -> DYFQ
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> yJOL:
    org.cyberpwn.glang.GList potionEffects -> rqAR
    boolean canPickupItems -> HCdO
    org.bukkit.inventory.ItemStack[] armorContents -> Svgd
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> QVoT
    double maxHealth -> maxHealth
    int maxAir -> cmEu
    int air -> AOpJ
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> KKxJ
    63:63:org.cyberpwn.glang.GList getPotionEffects() -> jWVx
    68:69:void setPotionEffects(org.cyberpwn.glang.GList) -> idpH
    73:73:boolean isCanPickupItems() -> tBpm
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> idwp
    138:139:void setMaxAir(int) -> rold
    143:143:int getAir() -> AhvI
    148:149:void setAir(int) -> jFRj
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> LFmm:
    boolean sheared -> rEjy
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> KKxJ
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> LWpB:
    org.bukkit.inventory.ItemStack is -> HKuM
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> KKxJ
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> URId:
    7:7:void <init>() -> <init>
react.command.CommandAct -> ghBQ:
    28:36:void <init>() -> <init>
    41:128:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> DYFQ
react.command.CommandCPUScore -> wDKt:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> DYFQ
react.command.CommandGlasses -> kQjV:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> DYFQ
react.command.CommandHelp -> kblF:
    14:22:void <init>() -> <init>
    27:28:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> DYFQ
react.command.CommandMonitor -> CEGa:
    16:24:void <init>() -> <init>
    29:31:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> DYFQ
react.command.CommandReload -> kcLj:
    17:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> DYFQ
react.controller.ActionController -> OjLs:
    int kiv -> eiyh
    org.cyberpwn.glang.GMap actions -> pjYi
    org.cyberpwn.glang.GMap pending -> DGyU
    20:20:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    27:67:void start() -> start
    71:72:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> DYFQ
    76:97:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> gMhS
    102:102:react.api.IAction getAction(react.api.ActionType) -> DYFQ
    107:108:void registerAction(react.api.IAction) -> DYFQ
    114:114:void stop() -> stop
    119:133:void tick() -> tick
    137:137:org.cyberpwn.glang.GList getActions() -> qmQR
react.controller.CommandController -> bXQa:
    org.cyberpwn.glang.GList commands -> Tpxc
    boolean k -> LibJ
    25:25:void <init>() -> <init>
    33:34:void start() -> start
    39:40:void stop() -> stop
    44:88:void begin() -> begin
    93:97:void tick() -> tick
    101:102:void msg(org.bukkit.command.CommandSender,java.lang.String) -> jhRt
    106:107:void f(org.bukkit.command.CommandSender,java.lang.String) -> KKxJ
    112:196:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
react.controller.DropMergeController -> VUNs:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:46:void on(org.bukkit.event.entity.ItemMergeEvent) -> DYFQ
    51:106:void tick() -> tick
    110:185:void stack(org.bukkit.entity.Item,org.bukkit.entity.Item) -> DYFQ
    189:265:void merge(org.bukkit.entity.Item,org.bukkit.entity.Item) -> gMhS
react.controller.DropMergeController$1 -> VUNs$1:
    react.controller.DropMergeController this$0 -> fKYb
    org.bukkit.World val$i -> tTbT
    1:63:void <init>(react.controller.DropMergeController,org.bukkit.World) -> <init>
    70:103:void run() -> run
react.controller.EntityCacheController -> Btgg:
    org.cyberpwn.glang.GMap caches -> PTKg
    int cachedEntities -> hHoE
    int cachedDrops -> BKER
    49:49:boolean enabled() -> enabled
    44:55:void <init>() -> <init>
    59:73:void push(org.bukkit.World) -> gMhS
    77:91:void pop(org.bukkit.Chunk) -> cJLm
    95:140:void pop(org.bukkit.entity.Entity) -> KwMR
    144:152:boolean hasUid(java.util.UUID,org.bukkit.Chunk) -> DYFQ
    157:195:int push(org.bukkit.Chunk) -> cuAU
    200:204:void cworld(org.bukkit.World) -> idpH
    209:215:void on(org.bukkit.event.world.WorldLoadEvent) -> DYFQ
    220:226:void on(org.bukkit.event.world.ChunkUnloadEvent) -> DYFQ
    231:238:void on(org.bukkit.event.world.WorldUnloadEvent) -> DYFQ
    243:244:void start() -> start
    249:250:void stop() -> stop
    254:254:boolean isCached(org.bukkit.Chunk) -> kYuC
    260:269:void on(org.bukkit.event.entity.EntitySpawnEvent) -> DYFQ
    274:344:void tick() -> tick
    348:348:org.cyberpwn.glang.GMap getCaches() -> rNPs
    353:353:int getCachedEntities() -> RsYD
    358:358:int getCachedDrops() -> ycfP
    363:363:int getCachedTotals() -> qlnx
react.controller.EntityCullController -> uVvm:
    org.cyberpwn.glang.GSet flags -> DrlI
    org.cyberpwn.glang.GSet defer -> xrQJ
    org.cyberpwn.glang.GMap maxs -> AjEO
    18:18:void <init>() -> <init>
    27:31:void start() -> start
    37:37:void stop() -> stop
    43:43:void tick() -> tick
    47:167:void repopulateRules() -> uNhU
    171:179:int cull(org.bukkit.Chunk) -> WWlE
    184:284:int partialCull(org.bukkit.Chunk) -> jhRt
react.controller.EntityStackController -> WXRX:
    org.cyberpwn.glang.GList stacks -> BRsu
    18:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:52:void tick() -> tick
    56:83:void stack(org.cyberpwn.glang.GList) -> cJLm
    87:92:boolean isStacked(org.bukkit.entity.LivingEntity) -> gMhS
    97:110:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> idpH
    116:134:void on(org.bukkit.event.entity.EntityDamageEvent) -> DYFQ
    138:153:void merge(react.api.StackedEntity,react.api.StackedEntity) -> DYFQ
    157:203:void checkNear(org.bukkit.entity.LivingEntity) -> cJLm
    208:230:void on(org.bukkit.event.entity.EntitySpawnEvent) -> DYFQ
react.controller.EntityStackController$1 -> WXRX$1:
    react.controller.EntityStackController this$0 -> vAWE
    org.bukkit.event.entity.EntitySpawnEvent val$e -> CDub
    1:215:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    220:227:void run() -> run
react.controller.FastDecayController -> hrtL:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> DYFQ
    48:54:void on(org.bukkit.event.block.BlockBurnEvent) -> DYFQ
    59:65:void on(org.bukkit.event.block.LeavesDecayEvent) -> DYFQ
    69:145:void checkBreak(org.bukkit.block.Block) -> DYFQ
    151:151:void tick() -> tick
react.controller.FastDecayController$1 -> hrtL$1:
    react.controller.FastDecayController this$0 -> ncqb
    org.cyberpwn.glang.GMap val$locs -> lTyx
    1:78:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,org.cyberpwn.glang.GMap) -> <init>
    83:83:boolean isAllowedSplooge(org.bukkit.Location) -> DYFQ
    89:89:boolean isAllowedSource(org.bukkit.Location) -> gMhS
    95:114:void clipped(org.bukkit.Location) -> idpH
    119:142:void finished() -> finished
react.controller.FastDecayController$1$1 -> hrtL$1$1:
    react.controller.FastDecayController$1 this$1 -> SmvM
    org.cyberpwn.glang.GMap val$locs -> lTyx
    int val$i -> Mldw
    1:123:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,org.cyberpwn.glang.GMap,int) -> <init>
    128:138:void run() -> run
react.controller.FastTNTController -> OHKH:
    java.util.Queue q -> Rjrk
    21:21:void <init>() -> <init>
    28:30:void start() -> start
    35:36:void stop() -> stop
    41:56:void tick() -> tick
    61:62:void on(org.bukkit.event.block.BlockBreakEvent) -> DYFQ
    67:71:void on(org.bukkit.event.block.BlockExplodeEvent) -> DYFQ
    76:80:void on(org.bukkit.event.entity.EntityExplodeEvent) -> DYFQ
react.controller.GlassController -> wenB:
    org.cyberpwn.glang.GMap q -> FWPU
    org.cyberpwn.glang.GList g -> Hmvj
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:124:void tick() -> tick
    128:128:boolean isUsingGlasses(org.bukkit.entity.Player) -> gMhS
    133:133:boolean canUseGlasses(org.bukkit.entity.Player) -> idpH
    138:154:void toggleGlasses(org.bukkit.entity.Player) -> cJLm
    159:164:void on(org.bukkit.event.block.BlockPhysicsEvent) -> DYFQ
    169:174:void on(org.bukkit.event.block.BlockFromToEvent) -> DYFQ
    179:184:void on(org.bukkit.event.block.BlockBurnEvent) -> DYFQ
    189:194:void on(org.bukkit.event.block.BlockFormEvent) -> DYFQ
    199:204:void on(org.bukkit.event.block.BlockFadeEvent) -> DYFQ
    209:221:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> DYFQ
    36:36:org.cyberpwn.glang.GList access$0(react.controller.GlassController) -> DYFQ
react.controller.GlassController$1 -> wenB$1:
    react.controller.GlassController this$0 -> kcYo
    org.cyberpwn.glang.GMap val$cc -> dogN
    1:79:void <init>(react.controller.GlassController,org.cyberpwn.glang.GMap) -> <init>
    84:122:void run() -> run
react.controller.GlassController$1$1 -> wenB$1$1:
    react.controller.GlassController$1 this$1 -> oxWW
    org.bukkit.Location val$i -> EePq
    org.bukkit.entity.Player val$j -> RREE
    1:101:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    106:111:void run() -> run
react.controller.MonitorController -> FxeG:
    int maxCooldown -> sQbW
    react.api.TitleMonitor titleMonitor -> APSX
    org.cyberpwn.glang.GMap posts -> ofyA
    31:31:void <clinit>() -> <clinit>
    35:39:void <init>() -> <init>
    44:55:void start() -> start
    59:75:void toggleMonitoring(org.bukkit.entity.Player) -> cuAU
    80:82:void stop() -> stop
    86:105:void constructMonitor() -> xrEU
    109:114:float calcVolume(react.api.ReactPlayer) -> DYFQ
    119:119:boolean canMonitor(org.bukkit.entity.Player) -> kYuC
    124:129:boolean isMonitoring(org.bukkit.entity.Player) -> WWlE
    134:138:void startMonitoring(org.bukkit.entity.Player) -> jhRt
    142:153:void stopMonitoring(org.bukkit.entity.Player) -> KKxJ
    159:159:void tick() -> tick
    163:166:void changePost(react.api.ReactPlayer) -> gMhS
    170:179:void processPlayer(react.api.ReactPlayer) -> idpH
    183:207:void handleTriggers(react.api.ReactPlayer) -> cJLm
    211:250:void handleScrolling(react.api.ReactPlayer) -> cuAU
    254:282:void handleShifting(react.api.ReactPlayer) -> kYuC
    286:308:void handlePosting(react.api.ReactPlayer) -> WWlE
    312:330:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> DYFQ
    335:349:java.lang.String prefixForSub(react.api.ReactPlayer,surge.util.C,int) -> DYFQ
    354:361:void tickMonitor(react.api.ReactPlayer) -> jhRt
    365:365:react.api.TitleMonitor getTitleMonitor() -> DYNk
    371:375:void on(org.bukkit.event.player.PlayerJoinEvent) -> DYFQ
    380:389:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> DYFQ
    394:405:void onTick() -> JQnW
    410:410:java.lang.String getTickName() -> oxKi
react.controller.NMSController -> Mtgq:
    react.core.IFeatureSet core -> ThlD
    15:15:void <clinit>() -> <clinit>
    17:28:void <init>() -> <init>
    32:61:void handleNMS() -> Kncp
    65:95:react.core.IFeatureSet findCore(java.lang.String) -> pibu
    103:103:void start() -> start
    110:110:void stop() -> stop
    117:117:void tick() -> tick
react.controller.PlayerController -> kRJg:
    org.cyberpwn.glang.GList players -> Bcvh
    12:12:void <init>() -> <init>
    19:21:void start() -> start
    26:27:void stop() -> stop
    33:33:void tick() -> tick
    37:45:boolean has(org.bukkit.entity.Player) -> KwMR
    50:61:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> DHEY
    66:66:org.cyberpwn.glang.GList getPlayers() -> vAJa
    72:77:void on(org.bukkit.event.player.PlayerQuitEvent) -> DYFQ
react.controller.SampleController -> lwPl:
    org.cyberpwn.glang.GMap samplers -> IXKh
    surge.server.SuperSampler ss -> cuXG
    23:28:void <init>() -> <init>
    32:33:void registerSampler(react.api.ISampler) -> idpH
    37:37:react.api.ISampler getSampler(java.lang.String) -> hPii
    42:85:void constructSamplers() -> LaGB
    90:93:void start() -> start
    98:101:void stop() -> stop
    107:107:void tick() -> tick
    111:111:surge.server.SuperSampler getSuperSampler() -> rNPW
    117:133:void onTick() -> JQnW
    138:138:java.lang.String getTickName() -> oxKi
react.controller.SploogeCounter -> LiTj:
    org.cyberpwn.glang.GList sources -> gqBy
    org.cyberpwn.glang.GList splooge -> PCNR
    org.cyberpwn.glang.GSet destroy -> hkTt
    21:96:void <init>(int,int,org.bukkit.Location) -> <init>
    100:147:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> DYFQ
    152:152:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> gMhS
    void clipped(org.bukkit.Location) -> idpH
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> DYFQ
    boolean isAllowedSource(org.bukkit.Location) -> gMhS
    18:18:org.cyberpwn.glang.GList access$0(react.controller.SploogeCounter) -> DYFQ
    17:17:org.cyberpwn.glang.GList access$1(react.controller.SploogeCounter) -> gMhS
    19:19:org.cyberpwn.glang.GSet access$2(react.controller.SploogeCounter) -> idpH
react.controller.SploogeCounter$1 -> LiTj$1:
    react.controller.SploogeCounter this$0 -> qvPQ
    java.util.Iterator val$it -> APRl
    org.bukkit.Location val$start -> baTN
    int val$maxDistance -> uFfV
    1:31:void <init>(react.controller.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:94:void run() -> run
    31:31:react.controller.SploogeCounter access$0(react.controller.SploogeCounter$1) -> DYFQ
react.controller.SploogeCounter$1$1 -> LiTj$1$1:
    react.controller.SploogeCounter$1 this$1 -> bPQx
    1:81:void <init>(react.controller.SploogeCounter$1) -> <init>
    86:92:void run() -> run
react.core.FeatureSet -> KnbS:
    3:3:void <init>() -> <init>
react.core.FeatureType -> lvpO:
    react.core.FeatureType WORLD -> Coky
    react.core.FeatureType[] $VALUES -> loPv
    3:3:react.core.FeatureType[] values() -> values
    3:3:react.core.FeatureType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:5:void <clinit>() -> <clinit>
react.core.IEssentialsFeature -> IpmC:
react.core.IFeature -> Xtes:
react.core.IFeatureSet -> uVvJ:
    react.core.IFeatureWorld getWorldFeature() -> LOcy
react.core.IFeatureWorld -> UHxs:
    org.cyberpwn.glang.GList getDirtyChunks() -> ykuh
    void setBlockFast(org.bukkit.Location,surge.util.MaterialBlock) -> DYFQ
    void refreshChunk(org.bukkit.Chunk) -> KKxJ
react.core.Support -> IpkL:
    react.core.FeatureType value() -> Smhu
react.core.v1_12R1.FeatureWorld -> uqJJ:
    org.cyberpwn.glang.GList dirty -> Mcvx
    18:21:void <init>() -> <init>
    27:34:void setBlockFast(org.bukkit.Location,surge.util.MaterialBlock) -> DYFQ
    40:40:void refreshChunk(org.bukkit.Chunk) -> KKxJ
    47:47:org.cyberpwn.glang.GList getDirtyChunks() -> ykuh
react.core.v1_12R1.V1_12R1 -> Lhre:
    react.core.v1_12R1.FeatureWorld featureWorld -> pbKb
    14:27:void <init>() -> <init>
    32:32:react.core.IFeatureWorld getWorldFeature() -> LOcy
react.core.v1_12R1.V1_12R1$1 -> Lhre$1:
    react.core.v1_12R1.V1_12R1 this$0 -> fTLk
    1:16:void <init>(react.core.v1_12R1.V1_12R1,java.lang.String,int) -> <init>
    21:25:void run() -> run
react.sampler.SampleChunksLoaded -> HBtF:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleChunksLoadedPerSecond -> clUM:
    org.cyberpwn.gmath.Average a -> EvRF
    12:14:void <init>() -> <init>
    19:25:void construct() -> FMln
    30:32:void sample() -> ejHl
    37:37:java.lang.String get() -> get
react.sampler.SampleEntitiesDrops -> hQPh:
    12:12:void <init>() -> <init>
    17:23:void construct() -> FMln
    28:29:void sample() -> ejHl
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesLiving -> nuFI:
    12:12:void <init>() -> <init>
    17:23:void construct() -> FMln
    28:29:void sample() -> ejHl
    34:35:java.lang.String get() -> get
react.sampler.SampleEntitiesTiles -> ncbu:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleEntitiesTotal -> uOFT:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocated -> jWVx:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryAllocationPerSecond -> tBpm:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryFree -> idwp:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryMax -> AhvI:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleMemoryUse -> qmQR:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleTickTime -> rNPs:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleTickUtilization -> RsYD:
    11:11:void <init>() -> <init>
    16:22:void construct() -> FMln
    27:28:void sample() -> ejHl
    33:33:java.lang.String get() -> get
react.sampler.SampleTicksPerSecond -> ycfP:
    12:12:void <init>() -> <init>
    17:23:void construct() -> FMln
    28:29:void sample() -> ejHl
    34:39:java.lang.String get() -> get
surge.Main -> qlnx:
    org.cyberpwn.glang.GList plugins -> BdYQ
    org.cyberpwn.glang.GMap pluginInstances -> HwKA
    org.cyberpwn.glang.GList controllerSet -> uhiU
    org.cyberpwn.glang.GMap anchors -> tnVx
    org.cyberpwn.glang.GList classes -> DPjh
    java.lang.reflect.Field nsField -> RQcP
    java.lang.reflect.Field thField -> upyB
    org.cyberpwn.glang.GList tracks -> cJcW
    long nsf -> VLmt
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> Ubma
    90:109:long getNanoSync() -> iBtU
    114:115:void requestResetNanos() -> HdyL
    119:122:void requestReload() -> jqLa
    127:141:int getThreadCount() -> getThreadCount
    150:182:void onStart(surge.util.Protocol) -> DYFQ
    189:206:void onStop() -> qvAW
    212:212:void onPostInit() -> uNgg
    218:218:void onPreInit() -> dfid
    222:233:void shutDownAmps() -> vcLm
    237:446:void initializeAmps() -> hkEl
    451:484:void doScan() -> byxO
    488:510:void scanForPoolDefiners() -> WFsm
    514:530:void scanForRawEvents() -> JQoh
    534:550:void scanForDynamicTrack() -> skIA
    554:575:void scanForAmps() -> BRiQ
    580:591:void onTick() -> JQnW
surge.PluginAmp -> uNhU:
    surge.control.AmpedPlugin plugin -> psKt
    boolean connected -> connected
    int masterTask -> WYCR
    17:21:void <init>(surge.control.AmpedPlugin) -> <init>
    25:25:surge.control.AmpedPlugin getPluginInstance() -> afSx
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> tmjp
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> DYFQ
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> DYFQ
    113:114:void stopTask(int) -> Vekj
    57:57:void access$0(surge.PluginAmp) -> DYFQ
surge.PluginAmp$1 -> uNhU$1:
    surge.PluginAmp this$0 -> DQKw
    1:37:void <init>(surge.PluginAmp) -> <init>
    42:44:void run() -> run
surge.PluginAmp$2 -> uNhU$2:
    surge.PluginAmp this$0 -> DQKw
    1:47:void <init>(surge.PluginAmp) -> <init>
    52:53:void run() -> run
surge.Surge -> xrEU:
    surge.PluginAmp amp -> aLlx
    org.cyberpwn.glang.GList tickComponents -> NMgg
    org.cyberpwn.glang.GList atickComponents -> dfwi
    surge.sched.TaskManager taskmgr -> skSi
    surge.hotload.HotloadManager hotloadmgr -> Knqm
    java.lang.Thread mainThread -> TNxY
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> DYFQ
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> jVpM
    44:44:java.io.File folder() -> YfmC
    49:51:java.io.File getPluginJarFile() -> LrJN
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> idpH
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> dfkj
    74:74:org.cyberpwn.glang.GList getTickComponents() -> flql
    79:79:org.cyberpwn.glang.GList getAsyncTickComponents() -> qdaS
    84:91:void registerTicked(surge.sched.IMasterTickComponent) -> DYFQ
    95:102:void unregisterTicked(surge.sched.IMasterTickComponent) -> gMhS
    106:111:surge.PluginAmp createAmp(surge.control.AmpedPlugin) -> DYFQ
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> AaHV
    126:126:boolean hasAmp() -> WWvP
    131:131:surge.PluginAmp getAmp() -> xiUn
    136:136:surge.sched.TaskManager getTaskManager() -> BtlD
    141:141:surge.hotload.HotloadManager getHotloadManager() -> Kvvd
surge.cluster.Cluster -> DYNk:
    surge.cluster.ClusterType type -> MSUg
    java.lang.Object t -> pibu
    8:12:void <init>(surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:surge.cluster.ClusterType getType() -> eYNn
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
surge.cluster.ClusterBoolean -> JQnW:
    7:8:void <init>(java.lang.Boolean) -> <init>
surge.cluster.ClusterDouble -> oxKi:
    7:8:void <init>(java.lang.Double) -> <init>
surge.cluster.ClusterInt -> Kncp:
    7:8:void <init>(java.lang.Integer) -> <init>
surge.cluster.ClusterLong -> vAJa:
    7:8:void <init>(java.lang.Long) -> <init>
surge.cluster.ClusterString -> LaGB:
    7:8:void <init>(java.lang.String) -> <init>
surge.cluster.ClusterStringList -> rNPW:
    9:10:void <init>(java.util.List) -> <init>
surge.cluster.ClusterType -> LOcy:
    surge.cluster.ClusterType INT -> dVVv
    surge.cluster.ClusterType BOOLEAN -> FNaX
    surge.cluster.ClusterType STRING -> XAtt
    surge.cluster.ClusterType STRING_LIST -> skWR
    surge.cluster.ClusterType DOUBLE -> xHBq
    surge.cluster.ClusterType LONG -> tfIq
    surge.cluster.ClusterType[] ENUM$VALUES -> Mcxk
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.cluster.ClusterType[] values() -> values
    1:1:surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
surge.cluster.ConfigurationDataInput -> ykuh:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> hYuF
    12:12:void <init>() -> <init>
    17:127:void read(surge.cluster.IConfigurable,java.io.File) -> DYFQ
    132:257:surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) -> DYFQ
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> UQon
surge.cluster.ConfigurationDataOutput -> Smhu:
    12:12:void <init>() -> <init>
    17:143:void write(surge.cluster.IConfigurable,java.io.File) -> gMhS
surge.cluster.DataCluster -> Ubma:
    org.cyberpwn.glang.GMap clusters -> palb
    17:20:void <init>() -> <init>
    24:24:org.cyberpwn.glang.GList keys() -> KUUG
    29:33:void fromJson(org.cyberpwn.json.JSONObject) -> cJLm
    37:44:org.cyberpwn.json.JSONObject toJson() -> ydIE
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> MckP
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> DYFQ
    104:104:boolean contains(java.lang.String) -> contains
    109:109:surge.cluster.ClusterType getType(java.lang.String) -> gUwS
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> kYuC
    194:195:void set(java.lang.String,int) -> cJLm
    199:200:void set(java.lang.String,boolean) -> idpH
    204:205:void set(java.lang.String,double) -> idpH
    209:210:void set(java.lang.String,long) -> idpH
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> DYFQ
surge.cluster.ICluster -> iBtU:
    surge.cluster.ClusterType getType() -> eYNn
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
surge.cluster.IConfigurable -> HdyL:
surge.cluster.IDataInput -> jqLa:
    surge.cluster.DataCluster read(java.io.File) -> DYFQ
surge.cluster.IDataOutput -> qvAW:
    void write(surge.cluster.DataCluster,java.io.File) -> DYFQ
surge.cluster.Key -> uNgg:
    java.lang.String value() -> value
surge.cluster.KeyPointer -> dfid:
    int value() -> value
surge.cluster.KeyStore -> vcLm:
surge.cluster.ReflectedConfigurationException -> hkEl:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
surge.cluster.YamlDataInput -> byxO:
    8:8:void <init>() -> <init>
    13:27:surge.cluster.DataCluster read(java.io.File) -> DYFQ
surge.cluster.YamlDataOutput -> WFsm:
    6:6:void <init>() -> <init>
    13:20:void write(surge.cluster.DataCluster,java.io.File) -> DYFQ
surge.collection.GSound -> JQoh:
    java.lang.String sound -> FVtY
    org.bukkit.Sound iSound -> AOtQ
    java.lang.Float volume -> KVDT
    java.lang.Float pitch -> GQfu
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> fdXQ
    61:72:void play(org.bukkit.Location) -> cJLm
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> DYFQ
    93:93:java.lang.String getSound() -> YEIe
    98:99:void setSound(java.lang.String) -> SnCD
    103:103:org.bukkit.Sound getiSound() -> fTAA
    108:109:void setiSound(org.bukkit.Sound) -> DYFQ
    113:113:java.lang.Float getVolume() -> rVat
    118:119:void setVolume(java.lang.Float) -> DYFQ
    123:123:java.lang.Float getPitch() -> AOfu
    128:129:void setPitch(java.lang.Float) -> gMhS
surge.control.AmpedPlugin -> skIA:
    org.cyberpwn.glang.GList controllers -> mjFS
    org.cyberpwn.gconcurrent.ParallelPoolManager pp -> yRuC
    surge.server.CoreTickThread ctt -> WOsr
    23:49:void <init>() -> <init>
    void doScan() -> byxO
    long getNanoSync() -> iBtU
    int getThreadCount() -> getThreadCount
    60:65:void onLoad() -> onLoad
    70:79:void onEnable() -> onEnable
    84:94:void onDisable() -> onDisable
    99:99:org.cyberpwn.glang.GList getControllers() -> BIxk
    105:106:void registerController(surge.control.IController) -> DYFQ
    111:122:void onTick() -> JQnW
    127:127:java.lang.String getTickName() -> oxKi
    133:133:org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> YgLa
    void onControllerRegistry() -> Ubma
    void onStart(surge.util.Protocol) -> DYFQ
    void onStop() -> qvAW
    void onPostInit() -> uNgg
    void onPreInit() -> dfid
surge.control.AmpedPlugin$1 -> skIA$1:
    surge.control.AmpedPlugin this$0 -> rqCy
    1:37:void <init>(surge.control.AmpedPlugin,java.lang.String,int,org.cyberpwn.gconcurrent.QueueMode) -> <init>
    42:42:long getNanoGate() -> DHEY
surge.control.Control -> BRiQ:
surge.control.Controller -> afSx:
    7:10:void <init>() -> <init>
surge.control.Disable -> tmjp:
surge.control.Enable -> YfmC:
surge.control.IController -> LrJN:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
surge.control.Instance -> dfkj:
surge.control.Plugin -> flql:
surge.control.SurgePlugin -> qdaS:
    void onStart(surge.util.Protocol) -> DYFQ
    void onStop() -> qvAW
    void onPostInit() -> uNgg
    void onPreInit() -> dfid
    void onControllerRegistry() -> Ubma
    void registerController(surge.control.IController) -> DYFQ
    org.cyberpwn.glang.GList getControllers() -> BIxk
    org.cyberpwn.gconcurrent.ParallelPoolManager getThreadPool() -> YgLa
surge.hotload.HotloadManager -> AaHV:
    org.cyberpwn.glang.GMap filemods -> XdXT
    org.cyberpwn.glang.GMap filesizes -> gEoW
    org.cyberpwn.glang.GMap fileacts -> tehO
    16:21:void <init>() -> <init>
    25:29:void track(java.io.File,java.lang.Runnable) -> DYFQ
    33:36:void untrack(java.io.File) -> gMhS
    40:43:void untrackall() -> iBuy
    48:72:void onTick() -> JQnW
    77:77:java.lang.String getTickName() -> oxKi
surge.nms.NMSClass -> WWvP:
    boolean init -> LifS
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> wMNp
    java.lang.Class IChatBaseComponent -> lxCY
    java.lang.Class ChatSerializer -> VfcL
    java.lang.Class PacketPlayOutPlayerInfo -> Ukor
    java.lang.Class PlayerInfoData -> MdYR
    java.lang.Class EnumPlayerInfoAction -> hkUw
    java.lang.Class GameProfile -> BlkJ
    java.lang.Class EnumGamemode -> sbdb
    java.lang.Class TileEntitySkull -> yles
    java.lang.Class LoadingCache -> UkpL
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
surge.nms.NMSX -> xiUn:
    surge.nms.NMSX bountifulAPI -> dNHs
    boolean useOldMethods -> pbLb
    java.lang.String nmsver -> CNKb
    java.lang.Object eTimes -> cRww
    java.lang.Object eTitle -> BRyf
    java.lang.Object eSubtitle -> ytyx
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> DYFQ
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> mXJL
    75:89:java.lang.Class getCBClass(java.lang.String) -> rold
    96:104:java.lang.Object serializeChat(java.lang.String) -> jFRj
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> DYFQ
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> DYFQ
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> EvFD
    151:151:java.lang.String craftPackage() -> lTpe
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> DYFQ
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> DYFQ
    197:207:java.lang.Class getNMSClass(java.lang.String) -> Vekj
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> DYFQ
    279:280:void clearTitle(org.bukkit.entity.Player) -> oMOY
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> DYFQ
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> DYFQ
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> DYFQ
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> Ubhi
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> cuAU
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> DHEY
    434:447:int ping(org.bukkit.entity.Player) -> HnCv
surge.nms.NMSX$1 -> xiUn$1:
    org.bukkit.entity.Player val$player -> hIWI
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
surge.nms.NMSX$2 -> xiUn$2:
    org.bukkit.entity.Player val$player -> hIWI
    java.lang.String val$message -> bXfY
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
surge.nms.PacketUtil -> BtlD:
    6:6:void <init>() -> <init>
    20:45:surge.nms.PacketUtil$V getVersion() -> pXki
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> DYFQ
    68:82:void clearTitle(org.bukkit.entity.Player) -> oMOY
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> DYFQ
surge.nms.PacketUtil$V -> BtlD$DYFQ:
    surge.nms.PacketUtil$V R17 -> XRyK
    surge.nms.PacketUtil$V R18 -> IrCA
    surge.nms.PacketUtil$V R19 -> jGMF
    surge.nms.PacketUtil$V R111 -> scIW
    surge.nms.PacketUtil$V R110 -> VxHJ
    surge.nms.PacketUtil$V R112 -> loUn
    surge.nms.PacketUtil$V[] ENUM$VALUES -> Utck
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.nms.PacketUtil$V[] values() -> values
    1:1:surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
surge.nms.Title -> Kvvd:
    java.lang.String title -> title
    java.lang.String subTitle -> TGMp
    java.lang.String action -> action
    java.lang.Integer fadeIn -> lLps
    java.lang.Integer fadeOut -> SDKM
    java.lang.Integer stayTime -> brYa
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> Smbb
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> fJoH
    79:80:void setSubTitle(java.lang.String) -> rMjA
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> eHLb
    99:100:void setFadeIn(java.lang.Integer) -> DYFQ
    104:104:java.lang.Integer getFadeOut() -> MBGe
    109:110:void setFadeOut(java.lang.Integer) -> gMhS
    114:114:java.lang.Integer getStayTime() -> Fovf
    119:120:void setStayTime(java.lang.Integer) -> idpH
surge.nms.VersionBukkit -> eYNn:
    surge.nms.VersionBukkit VU -> SDJx
    surge.nms.VersionBukkit V7 -> wfdB
    surge.nms.VersionBukkit V8 -> PvVk
    surge.nms.VersionBukkit V9 -> bihQ
    surge.nms.VersionBukkit V11 -> iLXg
    surge.nms.VersionBukkit V111 -> dDyF
    surge.nms.VersionBukkit V112 -> lUan
    surge.nms.VersionBukkit[] ENUM$VALUES -> dMib
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> JAOS
    27:32:boolean uc() -> bhuf
    37:67:surge.nms.VersionBukkit get() -> HCXx
    1:1:surge.nms.VersionBukkit[] values() -> values
    1:1:surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
surge.sched.IBursterator -> UQon:
    void burst(java.lang.Object) -> vjsq
    void setTimeLock(double) -> vjsq
    double getEstimatedTimeUse() -> YxOF
    int flush() -> YgLu
    int flush(org.cyberpwn.gbench.Profiler) -> DYFQ
    void queue(java.lang.Object) -> TNaI
    void queue(java.util.List) -> idpH
    void queue(java.lang.Object[]) -> DYFQ
surge.sched.ICancellable -> KUUG:
    void cancel() -> cancel
surge.sched.IMasterTickComponent -> ydIE:
    void onTick() -> JQnW
    java.lang.String getTickName() -> oxKi
surge.sched.ITask -> MckP:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> yRhh
    java.lang.String getName() -> getName
    double getComputeTime() -> DGop
    double getTotalComputeTime() -> KoIL
    double getActiveTime() -> hPxF
    boolean hasCompleted() -> AGXF
surge.sched.Task -> YEIe:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> tvka
    double computeTime -> ekAY
    double totalComputeTime -> NMlC
    double activeTime -> IqaS
    boolean completed -> completed
    org.cyberpwn.gbench.Profiler profiler -> HULY
    org.cyberpwn.gbench.Profiler activeProfiler -> LYGs
    int ticks -> Gbih
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> cJLm
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> yRhh
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> DGop
    150:150:boolean hasCompleted() -> AGXF
    156:156:double getTotalComputeTime() -> KoIL
    162:162:double getActiveTime() -> hPxF
    17:17:org.cyberpwn.gbench.Profiler access$0(surge.sched.Task) -> DYFQ
    15:15:void access$1(surge.sched.Task,boolean) -> DYFQ
    16:16:org.cyberpwn.gbench.Profiler access$2(surge.sched.Task) -> gMhS
    14:14:void access$3(surge.sched.Task,double) -> DYFQ
    12:12:void access$4(surge.sched.Task,double) -> gMhS
    14:14:double access$5(surge.sched.Task) -> idpH
    13:13:void access$6(surge.sched.Task,double) -> idpH
    13:13:double access$7(surge.sched.Task) -> cJLm
    12:12:double access$8(surge.sched.Task) -> cuAU
surge.sched.Task$1 -> YEIe$1:
    surge.sched.Task this$0 -> xPTE
    1:25:void <init>(surge.sched.Task) -> <init>
    30:40:void run() -> run
surge.sched.Task$2 -> YEIe$2:
    surge.sched.Task this$0 -> xPTE
    1:49:void <init>(surge.sched.Task) -> <init>
    54:65:void run() -> run
surge.sched.Task$3 -> YEIe$3:
    surge.sched.Task this$0 -> xPTE
    int val$total -> ePos
    1:74:void <init>(surge.sched.Task,int) -> <init>
    79:95:void run() -> run
surge.sched.TaskManager -> fTAA:
    org.cyberpwn.glang.GList tasks -> GtNa
    org.cyberpwn.glang.GMap taskProfiles -> FFVx
    11:15:void <init>() -> <init>
    20:30:void onTick() -> JQnW
    34:35:void putFinishingTask(surge.sched.ITask) -> DYFQ
    39:48:void putTask(surge.sched.ITask) -> gMhS
    53:53:java.lang.String getTickName() -> oxKi
surge.sched.TaskProfile -> rVat:
    double activeTime -> IqaS
    double computeTickTime -> jGOE
    double computeTime -> ekAY
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> hPxF
    23:24:void setActiveTime(double) -> TNaI
    28:28:double getComputeTickTime() -> kstD
    33:34:void setComputeTickTime(double) -> BlRb
    38:38:double getComputeTime() -> DGop
    43:44:void setComputeTime(double) -> TVqQ
surge.server.AsyncTick -> AOfu:
surge.server.CoreTickThread -> BIxk:
    9:12:void <init>() -> <init>
    17:36:void run() -> run
surge.server.MemoryMonitor -> YgLa:
    long memoryFree -> pbQv
    long memoryUsed -> FqLF
    long memoryMax -> GblV
    long lastMemoryUsed -> rEsr
    long memoryUsedAfterGC -> AGgw
    long allocated -> nBYH
    long collected -> mOvV
    long collections -> IXRU
    long sms -> hAGq
    long memoryAllocatedPerTick -> ECTj
    long memoryCollectedPerTick -> IWpy
    long memoryFullyAllocatedPerTick -> IFof
    long mah -> jGMy
    long mahs -> QqKj
    22:39:void <init>() -> <init>
    void onAllocationSet() -> vtTR
    46:93:void run() -> run
    97:97:long getMemoryFree() -> GkMS
    102:102:long getMemoryUsed() -> getMemoryUsed
    107:107:long getMemoryMax() -> uyaX
    112:112:long getLastMemoryUsed() -> YxPu
    117:117:long getMemoryUsedAfterGC() -> bWvd
    122:122:long getAllocated() -> getAllocated
    127:127:long getCollected() -> XSKV
    132:132:long getCollections() -> vsrm
    137:137:long getSms() -> DQCH
    142:142:long getMemoryAllocatedPerTick() -> mhwa
    147:147:long getMemoryCollectedPerTick() -> gNTt
    152:152:long getMemoryFullyAllocatedPerTick() -> DreN
    157:157:long getMah() -> AOhA
    162:162:long getMahs() -> wfTp
surge.server.SuperSampler -> iBuy:
    org.cyberpwn.gmath.Average ticksPerSecondL -> jFmY
    org.cyberpwn.gmath.Average tickTimeL -> iUMN
    org.cyberpwn.gmath.Average mahL -> KMVp
    double ticksPerSecond -> TNaI
    double ticksPerSecondRaw -> hskQ
    double tickTime -> kRaL
    double tickTimeRaw -> vuCv
    boolean running -> running
    double tickUtilizationRaw -> MRyw
    double tickUtilization -> wntm
    double leftoverTickTime -> bGfF
    long memoryUse -> PnGW
    long memoryAllocated -> dNMJ
    long memoryCollected -> RHwp
    long mahs -> QqKj
    int totalChunks -> tDJY
    int totalEntities -> yBWa
    int totalDrops -> bXgW
    int totalTiles -> STlV
    int totalLiving -> tChq
    int chunksLoaded -> uXNc
    int chunksUnloaded -> VnwW
    surge.server.WorldMonitor worldMonitor -> hkYw
    surge.server.TPSMonitor tpsMonitor -> hQhB
    surge.server.MemoryMonitor memoryMonitor -> EKcp
    32:106:void <init>() -> <init>
    110:115:void start() -> start
    119:124:void stop() -> stop
    129:133:void onTick() -> JQnW
    138:138:java.lang.String getTickName() -> oxKi
    143:143:org.cyberpwn.gmath.Average getTicksPerSecondL() -> vbqN
    148:148:double getTicksPerSecond() -> lfHb
    153:153:double getTicksPerSecondRaw() -> AFxR
    158:158:boolean isRunning() -> isRunning
    163:163:surge.server.TPSMonitor getTpsMonitor() -> ktSd
    168:168:org.cyberpwn.gmath.Average getTickTimeL() -> oflq
    173:173:double getTickTime() -> UlCm
    178:178:double getTickTimeRaw() -> Xtkr
    183:183:double getTickUtilizationRaw() -> gxgs
    188:188:double getTickUtilization() -> RHgY
    193:193:double getLeftoverTickTime() -> kAOX
    198:198:surge.server.MemoryMonitor getMemoryMonitor() -> YxOu
    203:203:long getMemoryUse() -> SLLF
    208:208:long getMemoryAllocated() -> xFre
    213:213:long getMemoryCollected() -> iBxF
    218:218:org.cyberpwn.gmath.Average getMahL() -> sQWF
    223:223:long getMahs() -> wfTp
    228:228:int getTotalChunks() -> mPFN
    233:233:int getTotalEntities() -> eHOB
    238:238:int getTotalDrops() -> bhwf
    243:243:int getTotalTiles() -> xOdX
    248:248:int getTotalLiving() -> xPEX
    253:253:surge.server.WorldMonitor getWorldMonitor() -> vbpN
    258:258:int getChunksLoaded() -> biYB
    263:263:int getChunksUnloaded() -> rpWC
    268:269:void setTicksPerSecondL(org.cyberpwn.gmath.Average) -> DYFQ
    273:274:void setTickTimeL(org.cyberpwn.gmath.Average) -> gMhS
    278:279:void setMahL(org.cyberpwn.gmath.Average) -> idpH
    283:284:void setTicksPerSecond(double) -> gMhS
    288:289:void setTicksPerSecondRaw(double) -> lfHb
    293:294:void setTickTime(double) -> NfbX
    298:299:void setTickTimeRaw(double) -> KwKm
    303:304:void setRunning(boolean) -> fdXQ
    308:309:void setTickUtilizationRaw(double) -> lKtr
    313:314:void setTickUtilization(double) -> xWiB
    318:319:void setLeftoverTickTime(double) -> lfGn
    323:324:void setMemoryUse(long) -> HnCv
    328:329:void setMemoryAllocated(long) -> Smbb
    333:334:void setMemoryCollected(long) -> SCOW
    338:339:void setMahs(long) -> jFQD
    343:344:void setTotalChunks(int) -> Ubhi
    348:349:void setTotalEntities(int) -> rMjA
    353:354:void setTotalDrops(int) -> YVCf
    358:359:void setTotalTiles(int) -> nlRS
    363:364:void setTotalLiving(int) -> kAEl
    368:369:void setChunksLoaded(int) -> hrqE
    373:374:void setChunksUnloaded(int) -> ejIC
    378:379:void setWorldMonitor(surge.server.WorldMonitor) -> DYFQ
    383:384:void setTpsMonitor(surge.server.TPSMonitor) -> DYFQ
    388:389:void setMemoryMonitor(surge.server.MemoryMonitor) -> DYFQ
    27:27:void access$0(surge.server.SuperSampler,int) -> DYFQ
    29:29:void access$1(surge.server.SuperSampler,int) -> gMhS
    30:30:void access$2(surge.server.SuperSampler,int) -> idpH
    28:28:void access$3(surge.server.SuperSampler,int) -> cJLm
    31:31:void access$4(surge.server.SuperSampler,int) -> cuAU
    32:32:void access$5(surge.server.SuperSampler,int) -> kYuC
    33:33:void access$6(surge.server.SuperSampler,int) -> WWlE
    16:16:void access$7(surge.server.SuperSampler,double) -> DYFQ
    18:18:void access$8(surge.server.SuperSampler,double) -> gMhS
    12:12:org.cyberpwn.gmath.Average access$9(surge.server.SuperSampler) -> DYFQ
    16:16:double access$10(surge.server.SuperSampler) -> gMhS
    13:13:org.cyberpwn.gmath.Average access$11(surge.server.SuperSampler) -> idpH
    18:18:double access$12(surge.server.SuperSampler) -> cJLm
    15:15:void access$13(surge.server.SuperSampler,double) -> idpH
    17:17:void access$14(surge.server.SuperSampler,double) -> cJLm
    20:20:void access$15(surge.server.SuperSampler,double) -> cuAU
    17:17:double access$16(surge.server.SuperSampler) -> cuAU
    21:21:void access$17(surge.server.SuperSampler,double) -> kYuC
    21:21:double access$18(surge.server.SuperSampler) -> kYuC
    22:22:void access$19(surge.server.SuperSampler,double) -> WWlE
    23:23:void access$20(surge.server.SuperSampler,long) -> DYFQ
    24:24:void access$21(surge.server.SuperSampler,long) -> gMhS
    25:25:void access$22(surge.server.SuperSampler,long) -> idpH
    14:14:org.cyberpwn.gmath.Average access$23(surge.server.SuperSampler) -> WWlE
    26:26:void access$24(surge.server.SuperSampler,long) -> cJLm
surge.server.SuperSampler$1 -> iBuy$1:
    surge.server.SuperSampler this$0 -> TFmn
    1:62:void <init>(surge.server.SuperSampler) -> <init>
    67:74:void updated(int,int,int,int,int,int,int) -> DYFQ
surge.server.SuperSampler$2 -> iBuy$2:
    surge.server.SuperSampler this$0 -> TFmn
    1:77:void <init>(surge.server.SuperSampler) -> <init>
    82:91:void onTicked() -> JJEK
surge.server.SuperSampler$3 -> iBuy$3:
    surge.server.SuperSampler this$0 -> TFmn
    1:94:void <init>(surge.server.SuperSampler) -> <init>
    99:104:void onAllocationSet() -> vtTR
surge.server.TPSMonitor -> EvFD:
    double tickTimeMS -> GsmX
    double rawTicksPerSecond -> BKMM
    org.cyberpwn.gbench.Profiler tickProfiler -> UJQm
    org.cyberpwn.gbench.Profiler tickTimeProfiler -> WPXR
    boolean ticked -> cBXn
    java.lang.Thread$State lastState -> uWmU
    double actualTickTimeMS -> YyAu
    double ltt -> APYj
    long lastTick -> vkrE
    20:33:void <init>() -> <init>
    void onTicked() -> JJEK
    40:84:void run() -> run
    88:116:void processState(java.lang.Thread$State) -> DYFQ
    120:120:double getTickTimeMS() -> FEhM
    125:125:double getRawTicksPerSecond() -> VCtu
    130:130:org.cyberpwn.gbench.Profiler getTickProfiler() -> DYUF
    135:135:boolean isTicked() -> OPbc
    140:141:void markTick() -> VDVW
    145:145:org.cyberpwn.gbench.Profiler getTickTimeProfiler() -> IFaO
    150:150:java.lang.Thread$State getLastState() -> KUXX
    155:155:double getActualTickTimeMS() -> iLNG
surge.server.WorldMonitor -> lTpe:
    boolean chunksChanged -> RYyk
    boolean dropChanged -> KgJt
    boolean tileChanged -> ieoj
    boolean livingChanged -> sQji
    boolean totalChanged -> dhCF
    boolean updated -> ogae
    int totalChunks -> tDJY
    int totalDrops -> bXgW
    int totalTiles -> STlV
    int totalLiving -> tChq
    int totalEntities -> yBWa
    int chunksLoaded -> uXNc
    int chunksUnloaded -> VnwW
    long ms -> AOhA
    25:44:void <init>() -> <init>
    49:64:void run() -> run
    void updated(int,int,int,int,int,int,int) -> DYFQ
    71:76:void on(org.bukkit.event.world.ChunkLoadEvent) -> DYFQ
    81:86:void on(org.bukkit.event.world.ChunkUnloadEvent) -> DYFQ
    91:92:void on(org.bukkit.event.entity.EntitySpawnEvent) -> DYFQ
    97:98:void on(org.bukkit.event.entity.EntityDeathEvent) -> DYFQ
    103:104:void on(org.bukkit.event.player.PlayerDropItemEvent) -> DYFQ
    109:110:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> DYFQ
    115:116:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> DYFQ
    121:122:void on(org.bukkit.event.block.BlockPlaceEvent) -> DYFQ
    127:128:void on(org.bukkit.event.block.BlockBreakEvent) -> DYFQ
    132:133:void doUpdate() -> inPK
    137:188:void sample() -> ejHl
    192:198:void sampleTotalCount() -> LPJw
    202:208:void sampleLivingCount() -> CpEP
    212:221:void sampleTileCount() -> maKA
    225:231:void sampleDropCount() -> tnOa
    235:241:void sampleChunkCount() -> PBeN
surge.text.PhantomSpinner -> pXki:
    surge.text.ProgressSpinner s -> GcPA
    surge.text.ProgressSpinner c -> oNOn
    15:19:void <init>(surge.util.C,surge.util.C,surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
surge.text.ProgressSpinner -> fJoH:
    java.lang.String[] chars -> lVHD
    int index -> index
    surge.text.ProgressSpinner DEFAULT -> dxdE
    surge.text.ProgressSpinner NETWORK -> Ailg
    surge.text.ProgressSpinner CIRCLES -> twQX
    surge.text.ProgressSpinner RANDOMS -> mYJj
    surge.text.ProgressSpinner MERGERS -> HerQ
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> EmWp
    65:65:int getIndex() -> getIndex
surge.util.Anchor -> eHLb:
    int value() -> value
surge.util.Area -> MBGe:
    org.bukkit.Location location -> pYcD
    java.lang.Double radius -> JItr
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> DYFQ
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:surge.util.Cuboid toCuboid() -> JJDF
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> cuAU
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> kYuC
    109:109:boolean isWithin(org.bukkit.Location) -> WWlE
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> cJLm
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> DYFQ
    176:200:org.bukkit.entity.Entity[] getNearbyEntities() -> TXBD
    211:221:org.bukkit.entity.Player[] getNearbyPlayers() -> UJCS
    231:231:org.bukkit.Location getLocation() -> getLocation
    242:243:void setLocation(org.bukkit.Location) -> jhRt
    252:252:java.lang.Double getRadius() -> bGXA
    263:264:void setRadius(java.lang.Double) -> gMhS
    273:278:org.bukkit.Location random() -> sjkG
surge.util.Axis -> Fovf:
    surge.util.Axis X -> fLDj
    surge.util.Axis Y -> jqcQ
    surge.util.Axis Z -> vlTp
    int x -> x
    int y -> y
    int z -> z
    surge.util.Axis[] ENUM$VALUES -> bPYV
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> iwAI
    29:29:org.bukkit.util.Vector negative() -> gEdm
    1:1:surge.util.Axis[] values() -> values
    1:1:surge.util.Axis valueOf(java.lang.String) -> valueOf
surge.util.BlastResistance -> JAOS:
    surge.util.BlastResistance BARRIER -> CpSl
    surge.util.BlastResistance BEDROCK -> mGga
    surge.util.BlastResistance COMMAND -> AHLY
    surge.util.BlastResistance ENDER_PORTAL -> UuGj
    surge.util.BlastResistance ENDER_PORTAL_FRAME -> pYaw
    surge.util.BlastResistance ANVIL -> wwiE
    surge.util.BlastResistance ENCHANTMENT_TABLE -> cmNd
    surge.util.BlastResistance OBSIDIAN -> feVX
    surge.util.BlastResistance ENDER_CHEST -> BlqX
    surge.util.BlastResistance WATER -> TWqW
    surge.util.BlastResistance LAVA -> LYKp
    surge.util.BlastResistance STATIONARY_WATER -> Puxh
    surge.util.BlastResistance DRAGON_EGG -> rgwn
    surge.util.BlastResistance ENDER_STONE -> USFB
    surge.util.BlastResistance COAL_BLOCK -> fuvu
    surge.util.BlastResistance DIAMOND_BLOCK -> YVbn
    surge.util.BlastResistance EMERALD_BLOCK -> EKhe
    surge.util.BlastResistance GOLD_BLOCK -> lDhF
    surge.util.BlastResistance IRON_BLOCK -> YpVM
    surge.util.BlastResistance REDSTONE_BLOCK -> SoEK
    surge.util.BlastResistance BRICK -> uOaw
    surge.util.BlastResistance BRICK_STAIRS -> KxNf
    surge.util.BlastResistance HARD_CLAY -> aMYQ
    surge.util.BlastResistance STONE -> iCnp
    surge.util.BlastResistance SMOOTH_BRICK -> esXf
    surge.util.BlastResistance SMOOTH_STAIRS -> gNjH
    surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> Hesm
    surge.util.BlastResistance STONE_SLAB2 -> NEbi
    surge.util.BlastResistance IRON_DOOR -> XeCK
    surge.util.BlastResistance IRON_DOOR_BLOCK -> IWsh
    surge.util.BlastResistance IRON_TRAPDOOR -> cJlr
    surge.util.BlastResistance MOB_SPAWNER -> Ihtv
    surge.util.BlastResistance WEB -> FqNi
    surge.util.BlastResistance DISPENSER -> wxJy
    surge.util.BlastResistance DROPPER -> vcew
    surge.util.BlastResistance FURNACE -> GROO
    surge.util.BlastResistance BURNING_FURNACE -> jhso
    surge.util.BlastResistance BEACON -> IGSa
    surge.util.BlastResistance COAL_ORE -> Iyvx
    surge.util.BlastResistance COCOA -> eQUF
    surge.util.BlastResistance DIAMOND_ORE -> qCTi
    surge.util.BlastResistance EMERALD_ORE -> Yxec
    surge.util.BlastResistance FENCE -> lfiY
    surge.util.BlastResistance FENCE_GATE -> wgIf
    surge.util.BlastResistance ACACIA_FENCE_GATE -> qTVb
    surge.util.BlastResistance BIRCH_FENCE_GATE -> pkEr
    surge.util.BlastResistance DARK_OAK_FENCE_GATE -> pYdD
    surge.util.BlastResistance SPRUCE_FENCE_GATE -> XmRT
    surge.util.BlastResistance JUNGLE_FENCE_GATE -> lMWb
    surge.util.BlastResistance ACACIA_FENCE -> KxQG
    surge.util.BlastResistance BIRCH_FENCE -> SCrI
    surge.util.BlastResistance DARK_OAK_FENCE -> bHNW
    surge.util.BlastResistance SPRUCE_FENCE -> qmkk
    surge.util.BlastResistance JUNGLE_FENCE -> UckA
    surge.util.BlastResistance ACACIA_WOOD_STAIRS -> jFtT
    surge.util.BlastResistance BIRCH_WOOD_STAIRS -> YVeL
    surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> agMi
    surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> IXXV
    surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> tMBM
    surge.util.BlastResistance QUARTZ_STAIRS -> lfkq
    surge.util.BlastResistance COBBLESTONE_STAIRS -> ChHw
    surge.util.BlastResistance SANDSTONE_STAIRS -> iTqk
    surge.util.BlastResistance NETHER_BRICK_STAIRS -> LrcM
    surge.util.BlastResistance WOOD_STAIRS -> RQqC
    surge.util.BlastResistance RED_SANDSTONE_STAIRS -> LGnm
    surge.util.BlastResistance ACACIA_DOOR -> sAMn
    surge.util.BlastResistance BIRCH_DOOR -> YFEK
    surge.util.BlastResistance DARK_OAK_DOOR -> IOhA
    surge.util.BlastResistance SPRUCE_DOOR -> BSbR
    surge.util.BlastResistance JUNGLE_DOOR -> kSIO
    surge.util.BlastResistance GOLD_ORE -> VLyl
    surge.util.BlastResistance HOPPER -> wgLQ
    surge.util.BlastResistance IRON_ORE -> GRQI
    surge.util.BlastResistance LAPIS_BLOCK -> CFGA
    surge.util.BlastResistance LAPIS_ORE -> gNkV
    surge.util.BlastResistance QUARTZ_ORE -> fCXG
    surge.util.BlastResistance REDSTONE_ORE -> hlBS
    surge.util.BlastResistance TRAP_DOOR -> SLah
    surge.util.BlastResistance WOOD -> jiWQ
    surge.util.BlastResistance CHEST -> PBxS
    surge.util.BlastResistance TRAPPED_CHEST -> XTBI
    surge.util.BlastResistance WORKBENCH -> JSIh
    surge.util.BlastResistance CAULDRON -> oVbt
    surge.util.BlastResistance LOG -> MvFG
    surge.util.BlastResistance LOG_2 -> NpWi
    surge.util.BlastResistance BOOKSHELF -> sQlq
    surge.util.BlastResistance BANNER -> cmTB
    surge.util.BlastResistance STANDING_BANNER -> ymQl
    surge.util.BlastResistance WALL_BANNER -> dWEK
    surge.util.BlastResistance JACK_O_LANTERN -> Buew
    surge.util.BlastResistance MELON_BLOCK -> dggr
    surge.util.BlastResistance SKULL -> CFGa
    surge.util.BlastResistance PUMPKIN -> bGoX
    surge.util.BlastResistance SIGN -> hlDs
    surge.util.BlastResistance SIGN_POST -> nBbD
    surge.util.BlastResistance WALL_SIGN -> NWHk
    surge.util.BlastResistance QUARTZ_BLOCK -> sQqO
    surge.util.BlastResistance NOTE_BLOCK -> qKjm
    surge.util.BlastResistance RED_SANDSTONE -> SDTo
    surge.util.BlastResistance SANDSTONE -> GJCj
    surge.util.BlastResistance WOOL -> xQAC
    surge.util.BlastResistance MONSTER_EGG -> hIaA
    surge.util.BlastResistance RAILS -> slDL
    surge.util.BlastResistance ACTIVATOR_RAIL -> GASM
    surge.util.BlastResistance DETECTOR_RAIL -> NNWi
    surge.util.BlastResistance POWERED_RAIL -> VobH
    surge.util.BlastResistance CLAY -> AGop
    surge.util.BlastResistance DIRT -> infi
    surge.util.BlastResistance GRASS -> uPFx
    surge.util.BlastResistance GRAVEL -> OjmK
    surge.util.BlastResistance SPONGE -> YWHa
    surge.util.BlastResistance BREWING_STAND -> EvbP
    surge.util.BlastResistance STONE_BUTTON -> Jckt
    surge.util.BlastResistance WOOD_BUTTON -> NVgF
    surge.util.BlastResistance CAKE_BLOCK -> OHhP
    surge.util.BlastResistance ICE -> UdLi
    surge.util.BlastResistance PACKED_ICE -> Emnl
    surge.util.BlastResistance LEVER -> xYOj
    surge.util.BlastResistance MYCEL -> HewC
    surge.util.BlastResistance PISTON_BASE -> UBIg
    surge.util.BlastResistance PISTON_EXTENSION -> UclB
    surge.util.BlastResistance PISTON_MOVING_PIECE -> MmVa
    surge.util.BlastResistance PISTON_STICKY_BASE -> MCCX
    surge.util.BlastResistance GOLD_PLATE -> lVLc
    surge.util.BlastResistance IRON_PLATE -> BeHP
    surge.util.BlastResistance STONE_PLATE -> gNlj
    surge.util.BlastResistance WOOD_PLATE -> RtUe
    surge.util.BlastResistance SAND -> mHMv
    surge.util.BlastResistance SOUL_SAND -> BBck
    surge.util.BlastResistance CACTUS -> pawi
    surge.util.BlastResistance LADDER -> tMBv
    surge.util.BlastResistance NETHERRACK -> fByT
    surge.util.BlastResistance GLASS -> ryaG
    surge.util.BlastResistance THIN_GLASS -> jiYC
    surge.util.BlastResistance STAINED_GLASS -> ELMa
    surge.util.BlastResistance STAINED_GLASS_PANE -> VgOq
    surge.util.BlastResistance GLOWSTONE -> brbd
    surge.util.BlastResistance REDSTONE_LAMP_OFF -> GcUV
    surge.util.BlastResistance REDSTONE_LAMP_ON -> cTCe
    surge.util.BlastResistance SEA_LANTERN -> TPHf
    surge.util.BlastResistance BED_BLOCK -> ssuk
    surge.util.BlastResistance DAYLIGHT_DETECTOR -> mPbO
    surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> RlHN
    surge.util.BlastResistance HUGE_MUSHROOM_1 -> VpCw
    surge.util.BlastResistance HUGE_MUSHROOM_2 -> NyNF
    surge.util.BlastResistance LEAVES -> Rswd
    surge.util.BlastResistance LEAVES_2 -> fvaQ
    surge.util.BlastResistance SNOW -> tfXL
    int br -> hRTJ
    surge.util.BlastResistance[] ENUM$VALUES -> BTHD
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> ejRs
    175:190:int get(org.bukkit.Material) -> DYFQ
    1:1:surge.util.BlastResistance[] values() -> values
    1:1:surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
surge.util.Blocks -> bhuf:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> gMhS
surge.util.C -> HCXx:
    surge.util.C BLACK -> vRkV
    surge.util.C DARK_BLUE -> LPcp
    surge.util.C DARK_GREEN -> pIJW
    surge.util.C DARK_AQUA -> QpuI
    surge.util.C DARK_RED -> HDXP
    surge.util.C DARK_PURPLE -> QpuF
    surge.util.C GOLD -> DjpA
    surge.util.C GRAY -> VVRQ
    surge.util.C DARK_GRAY -> NEhm
    surge.util.C BLUE -> hJDJ
    surge.util.C GREEN -> ffAW
    surge.util.C AQUA -> jOiO
    surge.util.C RED -> ndfY
    surge.util.C LIGHT_PURPLE -> xHQL
    surge.util.C YELLOW -> xQAq
    surge.util.C WHITE -> NEgV
    surge.util.C MAGIC -> mPaO
    surge.util.C BOLD -> bQCB
    surge.util.C STRIKETHROUGH -> LGpu
    surge.util.C UNDERLINE -> nKTL
    surge.util.C ITALIC -> xXpa
    surge.util.C RESET -> Fpsp
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> YNXE
    char code -> Argi
    boolean isFormat -> tvxP
    java.lang.String toString -> GRUY
    java.util.Map BY_ID -> mXrC
    java.util.Map BY_CHAR -> ghcA
    java.util.Map dyeChatMap -> lDkv
    java.util.Map chatHexMap -> HLgS
    java.util.Map dyeHexMap -> MeIG
    int[] $SWITCH_TABLE$surge$util$C -> MTGW
    surge.util.C[] ENUM$VALUES -> HCvQ
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> HKlq
    378:378:java.lang.String hex() -> mWwe
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:surge.util.C getByChar(char) -> jhRt
    434:442:surge.util.C getByChar(java.lang.String) -> YVCf
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:surge.util.C dyeToChat(org.bukkit.DyeColor) -> gMhS
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> DYFQ
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> gMhS
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> idpH
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> nlRS
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> kAEl
    560:578:java.lang.String generateColorTable() -> Elvy
    588:588:org.bukkit.ChatColor chatColor() -> lMEb
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:surge.util.C fromItemMeta(byte) -> DYFQ
    632:679:byte getItemMeta() -> jprH
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:surge.util.C[] values() -> values
    1:1:surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> xWvp
surge.util.C$1 -> HCXx$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$10 -> HCXx$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$11 -> HCXx$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$12 -> HCXx$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$13 -> HCXx$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$14 -> HCXx$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$15 -> HCXx$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$16 -> HCXx$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$17 -> HCXx$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$18 -> HCXx$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$19 -> HCXx$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$2 -> HCXx$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$20 -> HCXx$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$21 -> HCXx$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$22 -> HCXx$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$3 -> HCXx$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$4 -> HCXx$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$5 -> HCXx$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$6 -> HCXx$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$7 -> HCXx$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$8 -> HCXx$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.C$9 -> HCXx$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
surge.util.CDou -> YxOF:
    double number -> jOhK
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:surge.util.CDou set(double) -> IEpj
    23:25:surge.util.CDou add(double) -> pibu
    30:32:surge.util.CDou sub(double) -> hPii
    37:37:double get() -> get
    42:48:void circ() -> DQCd
surge.util.CMD -> YgLu:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> EvcL
    25:30:void <init>(java.lang.String) -> <init>
    39:40:surge.util.CMD virtual() -> BSNm
    51:53:void execute(org.bukkit.command.CommandSender) -> idpH
    60:77:void execute() -> execute
surge.util.CNum -> yRhh:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:surge.util.CNum set(int) -> LrAp
    23:25:surge.util.CNum add(int) -> imbd
    30:32:surge.util.CNum sub(int) -> myoN
    37:37:int get() -> get
    42:48:void circ() -> DQCd
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> uEpn
surge.util.Chunks -> DGop:
    12:12:void <init>() -> <init>
    23:23:org.cyberpwn.glang.GList getLoadedChunks(org.bukkit.World) -> cJLm
    33:40:org.cyberpwn.glang.GList getLoadedChunks() -> fCCe
    54:54:org.cyberpwn.glang.GList getRadius(org.bukkit.Chunk,int) -> gMhS
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> DYFQ
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> DYFQ
    98:98:boolean unload(org.bukkit.Chunk) -> KwMR
    114:124:int unload(org.cyberpwn.glang.GList,boolean,boolean) -> DYFQ
    138:138:int unload(org.cyberpwn.glang.GList,boolean) -> DYFQ
    150:150:int unload(org.cyberpwn.glang.GList) -> cuAU
    166:166:boolean isLoaded(java.lang.String,int,int) -> DYFQ
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> gMhS
    201:205:void load(org.cyberpwn.glang.GList) -> kYuC
surge.util.Cuboid -> KoIL:
    java.lang.String worldName -> HDVv
    int x1 -> SMGf
    int y1 -> EedD
    int z1 -> nmYk
    int x2 -> OcAM
    int y2 -> Xlyh
    int z2 -> EnUi
    int[] $SWITCH_TABLE$surge$util$Axis -> Fpwi
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> gWcE
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(surge.util.Axis) -> DYFQ
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> idpH
    93:93:boolean hasPlayers() -> DsFg
    98:110:org.cyberpwn.glang.GList getPlayers() -> vAJa
    115:166:org.cyberpwn.glang.GList getEntities() -> oVMh
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:surge.util.Cuboid flatten(int) -> qSWa
    287:287:org.bukkit.Location getLowerNE() -> JlGU
    298:298:org.bukkit.Location getUpperSW() -> MBKf
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> YpCJ
    348:348:int getSizeY() -> rFEQ
    358:358:int getSizeZ() -> lfWA
    368:368:int getLowerX() -> URSg
    378:378:int getLowerY() -> fluV
    388:388:int getLowerZ() -> psDM
    398:398:int getUpperX() -> aoIP
    408:408:int getUpperY() -> pjRe
    418:418:int getUpperZ() -> rFFA
    428:438:org.bukkit.block.Block[] corners() -> FNXo
    454:469:surge.util.Cuboid expand(surge.util.Cuboid$CuboidDirection,int) -> DYFQ
    484:484:surge.util.Cuboid shift(surge.util.Cuboid$CuboidDirection,int) -> gMhS
    500:514:surge.util.Cuboid outset(surge.util.Cuboid$CuboidDirection,int) -> idpH
    530:530:surge.util.Cuboid inset(surge.util.Cuboid$CuboidDirection,int) -> cJLm
    546:546:boolean contains(int,int,int) -> idpH
    558:558:boolean contains(org.bukkit.block.Block) -> idpH
    570:570:boolean contains(org.bukkit.Location) -> KKxJ
    580:580:int volume() -> opDY
    591:601:byte averageLightLevel() -> MuSM
    612:612:surge.util.Cuboid contract() -> XmAo
    626:666:surge.util.Cuboid contract(surge.util.Cuboid$CuboidDirection) -> DYFQ
    680:695:surge.util.Cuboid getFace(surge.util.Cuboid$CuboidDirection) -> gMhS
    708:715:boolean containsOnly(org.bukkit.Material) -> gMhS
    727:739:surge.util.Cuboid getBoundingCuboid(surge.util.Cuboid) -> DYFQ
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> cJLm
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> DYFQ
    786:800:java.util.List getChunks() -> kRUi
    815:819:void fill(int,byte) -> DYFQ
    843:843:java.util.Iterator iterator() -> iterator
    854:854:surge.util.Cuboid clone() -> DGuA
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> IOUA
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> xPIx
surge.util.Cuboid$1 -> KoIL$1:
    surge.util.Cuboid this$0 -> badp
    1:98:void <init>(surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> fdXQ
    1:1:java.lang.Object onAdapt(java.lang.Object) -> gMhS
surge.util.Cuboid$CuboidDirection -> KoIL$DYFQ:
    surge.util.Cuboid$CuboidDirection North -> xbDm
    surge.util.Cuboid$CuboidDirection East -> wENy
    surge.util.Cuboid$CuboidDirection South -> WGsJ
    surge.util.Cuboid$CuboidDirection West -> nTFg
    surge.util.Cuboid$CuboidDirection Up -> FNsa
    surge.util.Cuboid$CuboidDirection Down -> CyPR
    surge.util.Cuboid$CuboidDirection Horizontal -> miuC
    surge.util.Cuboid$CuboidDirection Vertical -> RlIk
    surge.util.Cuboid$CuboidDirection Both -> bjWB
    surge.util.Cuboid$CuboidDirection Unknown -> miuG
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> gWcE
    surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> lDoC
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:surge.util.Cuboid$CuboidDirection opposite() -> GYno
    1:1:surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> xPIx
surge.util.Cuboid$CuboidIterator -> KoIL$gMhS:
    org.bukkit.World w -> ryhV
    int baseX -> dhNw
    int baseY -> VETP
    int baseZ -> VxYD
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> fnVE
    int sizeY -> PDBp
    int sizeZ -> dxpB
    surge.util.Cuboid this$0 -> badp
    875:885:void <init>(surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
surge.util.CuboidException -> hPxF:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
surge.util.D -> AGXF:
    org.cyberpwn.glang.GList buffer -> Jcsc
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> gMhS
    37:38:void l(java.lang.Object,java.lang.String) -> DYFQ
    42:43:void s(java.lang.Object,java.lang.String) -> gMhS
    47:48:void v(java.lang.Object,java.lang.String) -> idpH
    52:53:void w(java.lang.Object,java.lang.String) -> cJLm
    57:58:void f(java.lang.Object,java.lang.String) -> cuAU
    62:69:void l(java.lang.String) -> hrqE
    73:80:void s(java.lang.String) -> ejIC
    84:91:void v(java.lang.String) -> LrAp
    95:102:void w(java.lang.String) -> imbd
    106:113:void f(java.lang.String) -> myoN
surge.util.DMSRequire -> kstD:
    surge.util.DMSRequirement value() -> pXsQ
surge.util.DMSRequirement -> vtTR:
    surge.util.DMSRequirement SQL -> lUsh
    surge.util.DMSRequirement[] ENUM$VALUES -> kuTh
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DMSRequirement[] values() -> values
    1:1:surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
surge.util.Depend -> GkMS:
    surge.util.Depend VAULT -> AHWc
    surge.util.Depend FAWE -> EDDW
    surge.util.Depend WORLDEDIT -> SxAN
    surge.util.Depend PROTOLIB -> EKtD
    surge.util.Depend CITIZENS -> KNED
    java.lang.String name -> name
    surge.util.Depend[] ENUM$VALUES -> ejov
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:surge.util.Depend[] values() -> values
    1:1:surge.util.Depend valueOf(java.lang.String) -> valueOf
surge.util.Dimension -> uyaX:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:surge.util.DimensionFace getPane() -> ejWN
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
surge.util.DimensionFace -> YxPu:
    surge.util.DimensionFace X -> hAUp
    surge.util.DimensionFace Y -> NWNQ
    surge.util.DimensionFace Z -> hkjA
    surge.util.DimensionFace[] ENUM$VALUES -> Kfub
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.DimensionFace[] values() -> values
    1:1:surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
surge.util.Direction -> bWvd:
    surge.util.Direction U -> KESa
    surge.util.Direction D -> iDXy
    surge.util.Direction N -> CWOm
    surge.util.Direction S -> RQxD
    surge.util.Direction E -> stYp
    surge.util.Direction W -> wVSL
    int x -> x
    int y -> y
    int z -> z
    surge.util.Cuboid$CuboidDirection f -> gXEs
    int[] $SWITCH_TABLE$surge$util$Direction -> ydhh
    surge.util.Direction[] ENUM$VALUES -> KUta
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:surge.util.Direction reverse() -> DPfN
    61:61:int x() -> YDqB
    66:66:int y() -> IXFN
    71:71:int z() -> z
    76:76:surge.util.Cuboid$CuboidDirection f() -> YftD
    81:81:org.cyberpwn.glang.GList news() -> aCve
    86:86:org.cyberpwn.glang.GList udnews() -> CEPn
    91:101:surge.util.Direction facing(org.bukkit.entity.Player) -> SCOW
    115:147:surge.util.Direction fromByte(byte) -> gMhS
    158:176:byte byteValue() -> byteValue
    1:1:surge.util.Direction[] values() -> values
    1:1:surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> MSOP
surge.util.DynamicConfiguration -> XSKV:
surge.util.DynamicTracker -> vsrm:
surge.util.Embedded -> DQCH:
    org.cyberpwn.glang.GList get() -> XcoQ
    void add(java.lang.Object) -> add
surge.util.FU -> mhwa:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> DYFQ
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> gMhS
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> idpH
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> cJLm
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
surge.util.Fingerprint -> gNTt:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> uEpn
surge.util.Health -> DreN:
    double hp -> cShr
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> rFGe
    41:41:double getHearts() -> gEfq
    51:51:double getHalfHearts() -> rWIc
    61:61:int getFlatHalfHearts() -> uiCl
surge.util.IO -> AOhA:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
surge.util.Items -> wfTp:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> DYFQ
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> DYFQ
    55:55:boolean is(org.bukkit.inventory.ItemStack,surge.util.MaterialBlock) -> DYFQ
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> DYFQ
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> DYFQ
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> gMhS
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> idpH
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> cJLm
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> DYFQ
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> DYFQ
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> DYFQ
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> DYFQ
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> cuAU
    216:221:surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> kYuC
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> WWlE
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> jhRt
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> KKxJ
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> DYFQ
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> KwMR
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> DHEY
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> DYFQ
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> DYFQ
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> gMhS
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> DYFQ
surge.util.MSound -> vbqN:
    surge.util.MSound AMBIENCE_CAVE -> cvLr
    surge.util.MSound AMBIENCE_RAIN -> XKXv
    surge.util.MSound AMBIENCE_THUNDER -> oVjm
    surge.util.MSound ANVIL_BREAK -> xQDy
    surge.util.MSound ANVIL_LAND -> yTGm
    surge.util.MSound ANVIL_USE -> BBin
    surge.util.MSound ARROW_HIT -> VESX
    surge.util.MSound BURP -> rygK
    surge.util.MSound CHEST_CLOSE -> TqqL
    surge.util.MSound CHEST_OPEN -> ryfi
    surge.util.MSound CLICK -> JBTB
    surge.util.MSound DOOR_CLOSE -> rGGD
    surge.util.MSound DOOR_OPEN -> lVWG
    surge.util.MSound DRINK -> kRsE
    surge.util.MSound EAT -> JcvF
    surge.util.MSound EXPLODE -> qfGK
    surge.util.MSound FALL_BIG -> DtHF
    surge.util.MSound FALL_SMALL -> majR
    surge.util.MSound FIRE -> GuAF
    surge.util.MSound FIRE_IGNITE -> rGFW
    surge.util.MSound FIZZ -> Wrll
    surge.util.MSound FUSE -> rXHE
    surge.util.MSound GLASS -> ObeP
    surge.util.MSound HURT_FLESH -> LrnA
    surge.util.MSound ITEM_BREAK -> RJJX
    surge.util.MSound ITEM_PICKUP -> dpaD
    surge.util.MSound LAVA -> sIhG
    surge.util.MSound LAVA_POP -> hAWn
    surge.util.MSound LEVEL_UP -> Iqrj
    surge.util.MSound MINECART_BASE -> xbIY
    surge.util.MSound MINECART_INSIDE -> OseH
    surge.util.MSound NOTE_BASS -> vtsi
    surge.util.MSound NOTE_PIANO -> Pvgd
    surge.util.MSound NOTE_BASS_DRUM -> rNtk
    surge.util.MSound NOTE_STICKS -> ORCC
    surge.util.MSound NOTE_BASS_GUITAR -> HnpU
    surge.util.MSound NOTE_SNARE_DRUM -> wogL
    surge.util.MSound NOTE_PLING -> cJxv
    surge.util.MSound ORB_PICKUP -> Yxpw
    surge.util.MSound PISTON_EXTEND -> lgVw
    surge.util.MSound PISTON_RETRACT -> gFfF
    surge.util.MSound PORTAL -> XeMy
    surge.util.MSound PORTAL_TRAVEL -> EmxC
    surge.util.MSound PORTAL_TRIGGER -> TOpG
    surge.util.MSound SHOOT_ARROW -> sbxi
    surge.util.MSound SPLASH -> mbIY
    surge.util.MSound SPLASH2 -> hbye
    surge.util.MSound STEP_GRASS -> pjtn
    surge.util.MSound STEP_GRAVEL -> msMy
    surge.util.MSound STEP_LADDER -> HUaU
    surge.util.MSound STEP_SAND -> yuoq
    surge.util.MSound STEP_SNOW -> NhTg
    surge.util.MSound STEP_STONE -> ekUu
    surge.util.MSound STEP_WOOD -> OkWg
    surge.util.MSound STEP_WOOL -> BCNa
    surge.util.MSound SWIM -> fKuS
    surge.util.MSound WATER -> inqO
    surge.util.MSound WOOD_CLICK -> WsOo
    surge.util.MSound BAT_DEATH -> jaTD
    surge.util.MSound BAT_HURT -> CVrG
    surge.util.MSound BAT_IDLE -> uaRt
    surge.util.MSound BAT_LOOP -> eITF
    surge.util.MSound BAT_TAKEOFF -> nnAJ
    surge.util.MSound BLAZE_BREATH -> MvTI
    surge.util.MSound BLAZE_DEATH -> sklk
    surge.util.MSound BLAZE_HIT -> lVXE
    surge.util.MSound CAT_HISS -> VEVh
    surge.util.MSound CAT_HIT -> JAtH
    surge.util.MSound CAT_MEOW -> xsMG
    surge.util.MSound CAT_PURR -> mQJc
    surge.util.MSound CAT_PURREOW -> IieX
    surge.util.MSound CHICKEN_IDLE -> fDFE
    surge.util.MSound CHICKEN_HURT -> wDsj
    surge.util.MSound CHICKEN_EGG_POP -> XuqQ
    surge.util.MSound CHICKEN_WALK -> Lalh
    surge.util.MSound COW_IDLE -> Mdop
    surge.util.MSound COW_HURT -> QNxv
    surge.util.MSound COW_WALK -> OHua
    surge.util.MSound CREEPER_HISS -> OQfd
    surge.util.MSound CREEPER_DEATH -> ydqD
    surge.util.MSound ENDERDRAGON_DEATH -> pQdv
    surge.util.MSound ENDERDRAGON_GROWL -> GIoV
    surge.util.MSound ENDERDRAGON_HIT -> oxvI
    surge.util.MSound ENDERDRAGON_WINGS -> nvSe
    surge.util.MSound ENDERMAN_DEATH -> yvSG
    surge.util.MSound ENDERMAN_HIT -> KMkR
    surge.util.MSound ENDERMAN_IDLE -> hkpg
    surge.util.MSound ENDERMAN_TELEPORT -> wMiP
    surge.util.MSound ENDERMAN_SCREAM -> uquu
    surge.util.MSound ENDERMAN_STARE -> mPmF
    surge.util.MSound GHAST_SCREAM -> xsOk
    surge.util.MSound GHAST_SCREAM2 -> cdqo
    surge.util.MSound GHAST_CHARGE -> dOCt
    surge.util.MSound GHAST_DEATH -> ohTb
    surge.util.MSound GHAST_FIREBALL -> bPly
    surge.util.MSound GHAST_MOAN -> APmd
    surge.util.MSound IRONGOLEM_DEATH -> JJhc
    surge.util.MSound IRONGOLEM_HIT -> YyXO
    surge.util.MSound IRONGOLEM_THROW -> AYaG
    surge.util.MSound IRONGOLEM_WALK -> PLYB
    surge.util.MSound MAGMACUBE_WALK -> KMii
    surge.util.MSound MAGMACUBE_WALK2 -> Gtat
    surge.util.MSound MAGMACUBE_JUMP -> ujFA
    surge.util.MSound PIG_IDLE -> NWTW
    surge.util.MSound PIG_DEATH -> EDIS
    surge.util.MSound PIG_WALK -> kSVh
    surge.util.MSound SHEEP_IDLE -> ekVs
    surge.util.MSound SHEEP_SHEAR -> xrnI
    surge.util.MSound SHEEP_WALK -> KDyN
    surge.util.MSound SILVERFISH_HIT -> ktyO
    surge.util.MSound SILVERFISH_KILL -> qegx
    surge.util.MSound SILVERFISH_IDLE -> IOuF
    surge.util.MSound SILVERFISH_WALK -> fmxv
    surge.util.MSound SKELETON_IDLE -> oqEF
    surge.util.MSound SKELETON_DEATH -> slPD
    surge.util.MSound SKELETON_HURT -> cSoS
    surge.util.MSound SKELETON_WALK -> wEWT
    surge.util.MSound SLIME_ATTACK -> Rkpo
    surge.util.MSound SLIME_WALK -> EfMK
    surge.util.MSound SLIME_WALK2 -> NyYs
    surge.util.MSound SPIDER_IDLE -> pRGy
    surge.util.MSound SPIDER_DEATH -> uPUq
    surge.util.MSound SPIDER_WALK -> YWWC
    surge.util.MSound WITHER_DEATH -> Fyrf
    surge.util.MSound WITHER_HURT -> oqGx
    surge.util.MSound WITHER_IDLE -> dFTY
    surge.util.MSound WITHER_SHOOT -> mbQV
    surge.util.MSound WITHER_SPAWN -> etKb
    surge.util.MSound WOLF_BARK -> KopU
    surge.util.MSound WOLF_DEATH -> apPH
    surge.util.MSound WOLF_GROWL -> yTRK
    surge.util.MSound WOLF_HOWL -> dgvU
    surge.util.MSound WOLF_HURT -> PDLC
    surge.util.MSound WOLF_PANT -> vBWR
    surge.util.MSound WOLF_SHAKE -> oyXT
    surge.util.MSound WOLF_WALK -> OIYU
    surge.util.MSound WOLF_WHINE -> OIYP
    surge.util.MSound ZOMBIE_METAL -> tDaQ
    surge.util.MSound ZOMBIE_WOOD -> iLqs
    surge.util.MSound ZOMBIE_WOODBREAK -> mbPf
    surge.util.MSound ZOMBIE_IDLE -> slRf
    surge.util.MSound ZOMBIE_DEATH -> jigp
    surge.util.MSound ZOMBIE_HURT -> jYHF
    surge.util.MSound ZOMBIE_INFECT -> cutP
    surge.util.MSound ZOMBIE_UNFECT -> jXej
    surge.util.MSound ZOMBIE_REMEDY -> Bmfr
    surge.util.MSound ZOMBIE_WALK -> TYHR
    surge.util.MSound ZOMBIE_PIG_IDLE -> ecHp
    surge.util.MSound ZOMBIE_PIG_ANGRY -> bPnA
    surge.util.MSound ZOMBIE_PIG_DEATH -> OIXI
    surge.util.MSound ZOMBIE_PIG_HURT -> SnvQ
    surge.util.MSound DIG_WOOL -> uifY
    surge.util.MSound DIG_GRASS -> FWoP
    surge.util.MSound DIG_GRAVEL -> YyXv
    surge.util.MSound DIG_SAND -> fUKS
    surge.util.MSound DIG_SNOW -> Wrqg
    surge.util.MSound DIG_STONE -> fvle
    surge.util.MSound DIG_WOOD -> jaWK
    surge.util.MSound FIREWORK_BLAST -> xQNA
    surge.util.MSound FIREWORK_BLAST2 -> nnDR
    surge.util.MSound FIREWORK_LARGE_BLAST -> TjJM
    surge.util.MSound FIREWORK_LARGE_BLAST2 -> ndto
    surge.util.MSound FIREWORK_TWINKLE -> ymfN
    surge.util.MSound FIREWORK_TWINKLE2 -> ebkX
    surge.util.MSound FIREWORK_LAUNCH -> SxKG
    surge.util.MSound SUCCESSFUL_HIT -> vKJs
    surge.util.MSound HORSE_ANGRY -> rPAB
    surge.util.MSound HORSE_ARMOR -> bPpc
    surge.util.MSound HORSE_BREATHE -> foAT
    surge.util.MSound HORSE_DEATH -> GItA
    surge.util.MSound HORSE_GALLOP -> AQST
    surge.util.MSound HORSE_HIT -> KNPY
    surge.util.MSound HORSE_IDLE -> ptNE
    surge.util.MSound HORSE_JUMP -> tVFH
    surge.util.MSound HORSE_LAND -> Ypjq
    surge.util.MSound HORSE_SADDLE -> gPAB
    surge.util.MSound HORSE_SOFT -> rXOr
    surge.util.MSound HORSE_WOOD -> Wrtm
    surge.util.MSound DONKEY_ANGRY -> FXRA
    surge.util.MSound DONKEY_DEATH -> bkCi
    surge.util.MSound DONKEY_HIT -> ryqa
    surge.util.MSound DONKEY_IDLE -> JKKp
    surge.util.MSound HORSE_SKELETON_DEATH -> Nxyp
    surge.util.MSound HORSE_SKELETON_HIT -> qemJ
    surge.util.MSound HORSE_SKELETON_IDLE -> yCRF
    surge.util.MSound HORSE_ZOMBIE_DEATH -> pQgx
    surge.util.MSound HORSE_ZOMBIE_HIT -> OQjP
    surge.util.MSound HORSE_ZOMBIE_IDLE -> dxxd
    surge.util.MSound VILLAGER_DEATH -> mjaj
    surge.util.MSound VILLAGER_HAGGLE -> AQSl
    surge.util.MSound VILLAGER_HIT -> UJjt
    surge.util.MSound VILLAGER_IDLE -> slSd
    surge.util.MSound VILLAGER_NO -> EDPQ
    surge.util.MSound VILLAGER_YES -> etOn
    java.lang.String pre19sound -> cBtd
    java.lang.String post19sound -> iVIO
    org.bukkit.Sound resolvedSound -> cTWR
    surge.util.MSound[] ENUM$VALUES -> AkGy
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> KCwP
    1:1:surge.util.MSound[] values() -> values
    1:1:surge.util.MSound valueOf(java.lang.String) -> valueOf
surge.util.MaterialBlock -> AFxR:
    org.bukkit.Material material -> raCe
    java.lang.Byte data -> yuxY
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> OQDx
    79:80:void setData(java.lang.Byte) -> DYFQ
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
surge.util.P -> ktSd:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> qSWa
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> pHPx
    68:68:boolean isAnyOnline() -> opBb
    80:80:org.cyberpwn.glang.GList inWorld(org.bukkit.World) -> cuAU
    92:104:org.cyberpwn.glang.GList inChunk(org.bukkit.Chunk) -> DHEY
    118:118:org.cyberpwn.glang.GList inArea(org.bukkit.Location,double) -> DYFQ
    132:132:org.cyberpwn.glang.GList inArea(org.bukkit.Location,int) -> DYFQ
    143:144:void disable(org.bukkit.entity.Player) -> jFQD
    154:155:void enable(org.bukkit.entity.Player) -> iBkb
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> DYFQ
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> gMhS
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> JjvV
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> DYFQ
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> hakf
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> idpH
    300:300:boolean canFindPlayer(java.lang.String) -> gNKO
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> GbRS
    338:345:org.cyberpwn.glang.GList onlinePlayers() -> JbwS
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> vjsq
    368:371:void clear(org.bukkit.entity.Player) -> TNaI
    381:385:void clearEffects(org.bukkit.entity.Player) -> BlRb
    398:399:void heal(org.bukkit.entity.Player,double) -> DYFQ
    409:410:void heal(org.bukkit.entity.Player) -> TVqQ
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> lfHb
    432:433:void resetHunger(org.bukkit.entity.Player) -> NfbX
    443:444:void kill(org.bukkit.entity.Player) -> KwKm
    455:455:surge.util.Shape getShape(org.bukkit.entity.Player) -> lKtr
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> xWiB
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> DYFQ
surge.util.P$1 -> ktSd$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> fdXQ
    1:1:java.lang.Object onAdapt(java.lang.Object) -> gMhS
surge.util.P$2 -> ktSd$2:
    java.lang.Double val$doff -> qoAv
    org.bukkit.entity.Player val$e -> CqOI
    org.bukkit.entity.Entity[] val$result -> GAeS
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> KwMR
surge.util.PE -> oflq:
    surge.util.PE ABSORPTION -> sthD
    surge.util.PE BLINDNESS -> ORNV
    surge.util.PE CONFUSION -> DbpB
    surge.util.PE DAMAGE_RESISTANCE -> sIrk
    surge.util.PE FAST_DIGGING -> UvBu
    surge.util.PE FIRE_RESISTANCE -> eRLo
    surge.util.PE GLOWING -> qfQG
    surge.util.PE HARM -> xkDl
    surge.util.PE HEAL -> EUQF
    surge.util.PE HEALTH_BOOST -> HVJA
    surge.util.PE HUNGER -> ecLu
    surge.util.PE INCREASE_DAMAGE -> Fhsy
    surge.util.PE INVISIBILITY -> NNiQ
    surge.util.PE JUMP -> eHyX
    surge.util.PE LEVITATION -> DspP
    surge.util.PE LUCK -> Fqel
    surge.util.PE NIGHT_VISION -> vAyS
    surge.util.PE POISON -> EoDO
    surge.util.PE REGENERATION -> YVyX
    surge.util.PE SATURATION -> ahCT
    surge.util.PE SLOW -> AjhH
    surge.util.PE SLOW_DIGGING -> hRca
    surge.util.PE SPEED -> YVxk
    surge.util.PE UNLUCK -> Rkvy
    surge.util.PE WATER_BREATHING -> dpmp
    surge.util.PE WEAKNESS -> bkIL
    surge.util.PE WITHER -> dqOL
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> DYFQ
    144:144:surge.util.PE d(int) -> gNKO
    156:156:surge.util.PE a(int) -> GbRS
    166:166:org.bukkit.potion.PotionEffect c() -> nuOr
    177:178:void c(org.bukkit.entity.LivingEntity) -> cuAU
    182:183:void crm(org.bukkit.entity.LivingEntity) -> kYuC
    187:188:void rm(org.bukkit.entity.LivingEntity) -> WWlE
surge.util.ParticleEffect -> UlCm:
    surge.util.ParticleEffect EXPLOSION_NORMAL -> LIFr
    surge.util.ParticleEffect EXPLOSION_LARGE -> feqw
    surge.util.ParticleEffect EXPLOSION_HUGE -> OcRM
    surge.util.ParticleEffect FIREWORKS_SPARK -> lMrJ
    surge.util.ParticleEffect WATER_BUBBLE -> nKgi
    surge.util.ParticleEffect WATER_SPLASH -> UdbX
    surge.util.ParticleEffect WATER_WAKE -> wotV
    surge.util.ParticleEffect SUSPENDED -> EeuB
    surge.util.ParticleEffect SUSPENDED_DEPTH -> HwoL
    surge.util.ParticleEffect CRIT -> FiYE
    surge.util.ParticleEffect CRIT_MAGIC -> oExe
    surge.util.ParticleEffect SMOKE_NORMAL -> yCVU
    surge.util.ParticleEffect SMOKE_LARGE -> hlXv
    surge.util.ParticleEffect SPELL -> OANl
    surge.util.ParticleEffect SPELL_INSTANT -> hcgv
    surge.util.ParticleEffect SPELL_MOB -> vlqH
    surge.util.ParticleEffect SPELL_MOB_AMBIENT -> skxI
    surge.util.ParticleEffect SPELL_WITCH -> OtTH
    surge.util.ParticleEffect DRIP_WATER -> lhEX
    surge.util.ParticleEffect DRIP_LAVA -> rrGQ
    surge.util.ParticleEffect VILLAGER_ANGRY -> QiWF
    surge.util.ParticleEffect VILLAGER_HAPPY -> OAMb
    surge.util.ParticleEffect TOWN_AURA -> ydwh
    surge.util.ParticleEffect NOTE -> Voti
    surge.util.ParticleEffect PORTAL -> uYKx
    surge.util.ParticleEffect ENCHANTMENT_TABLE -> lWCM
    surge.util.ParticleEffect FLAME -> NqOX
    surge.util.ParticleEffect LAVA -> lyEs
    surge.util.ParticleEffect FOOTSTEP -> OcQL
    surge.util.ParticleEffect CLOUD -> oVyq
    surge.util.ParticleEffect REDSTONE -> ghuQ
    surge.util.ParticleEffect SNOWBALL -> sAcm
    surge.util.ParticleEffect SNOW_SHOVEL -> scfV
    surge.util.ParticleEffect SLIME -> TioL
    surge.util.ParticleEffect HEART -> COMj
    surge.util.ParticleEffect BARRIER -> esov
    surge.util.ParticleEffect ITEM_CRACK -> tUgr
    surge.util.ParticleEffect BLOCK_CRACK -> fCoF
    surge.util.ParticleEffect BLOCK_DUST -> MSyL
    surge.util.ParticleEffect WATER_DROP -> jHOA
    surge.util.ParticleEffect ITEM_TAKE -> EDSw
    surge.util.ParticleEffect MOB_APPEARANCE -> hJXi
    surge.util.ParticleEffect DRAGON_BREATH -> PngL
    surge.util.ParticleEffect END_ROD -> kvEn
    surge.util.ParticleEffect DAMAGE_INDICATOR -> vvDt
    surge.util.ParticleEffect SWEEP_ATTACK -> KhIW
    java.util.Map NAME_MAP -> DlEg
    java.util.Map ID_MAP -> rXWJ
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> hBHj
    java.util.List properties -> FPHj
    surge.util.ParticleEffect[] ENUM$VALUES -> pkcC
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> sYkQ
    511:511:boolean hasProperty(surge.util.ParticleEffect$ParticleProperty) -> DYFQ
    521:525:boolean isSupported() -> isSupported
    537:545:surge.util.ParticleEffect fromName(java.lang.String) -> PmJn
    557:565:surge.util.ParticleEffect fromId(int) -> PmJn
    577:578:boolean isWater(org.bukkit.Location) -> DHEY
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> DYFQ
    615:615:boolean isDataCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleData) -> DYFQ
    629:629:boolean isColorCorrect(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor) -> DYFQ
    665:681:void display(float,int,org.bukkit.Location,double) -> DYFQ
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> DYFQ
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> DYFQ
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> DYFQ
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> DYFQ
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> DYFQ
    899:912:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> DYFQ
    934:947:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> DYFQ
    968:969:void display(surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> DYFQ
    1004:1020:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> DYFQ
    1055:1068:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> DYFQ
    1102:1103:void display(surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> DYFQ
    1130:1143:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> DYFQ
    1169:1182:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> DYFQ
    1207:1208:void display(surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> DYFQ
    1:1:surge.util.ParticleEffect[] values() -> values
    1:1:surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$BlockData -> UlCm$DYFQ:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$ItemData -> UlCm$gMhS:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
surge.util.ParticleEffect$NoteColor -> UlCm$idpH:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> RkPQ
    1594:1594:float getValueY() -> CUsA
    1605:1605:float getValueZ() -> aLij
surge.util.ParticleEffect$OrdinaryColor -> UlCm$cJLm:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> RkPQ
    1526:1526:float getValueY() -> CUsA
    1537:1537:float getValueZ() -> aLij
surge.util.ParticleEffect$ParticleColor -> UlCm$cuAU:
    1383:1383:void <init>() -> <init>
    float getValueX() -> RkPQ
    float getValueY() -> CUsA
    float getValueZ() -> aLij
surge.util.ParticleEffect$ParticleColorException -> UlCm$kYuC:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticleData -> UlCm$WWlE:
    org.bukkit.Material material -> raCe
    byte data -> CNnR
    int[] packetData -> WYjG
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> jqWb
    1309:1309:java.lang.String getPacketDataString() -> uGCf
surge.util.ParticleEffect$ParticleDataException -> UlCm$jhRt:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
surge.util.ParticleEffect$ParticlePacket -> UlCm$KKxJ:
    int version -> version
    java.lang.Class enumParticle -> JTDt
    java.lang.reflect.Constructor packetConstructor -> nBwn
    java.lang.reflect.Method getHandle -> vKPi
    java.lang.reflect.Field playerConnection -> fCqg
    java.lang.reflect.Method sendPacket -> yCWr
    boolean initialized -> initialized
    surge.util.ParticleEffect effect -> qURw
    float offsetX -> YiAh
    float offsetY -> KEeg
    float offsetZ -> rywe
    float speed -> pANM
    int amount -> VggC
    boolean longDistance -> suJx
    surge.util.ParticleEffect$ParticleData data -> yCXM
    java.lang.Object packet -> Ypoe
    1745:1764:void <init>(surge.util.ParticleEffect,float,float,float,float,int,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(surge.util.ParticleEffect,surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> fdXQ
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> DYFQ
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> gMhS
    2004:2018:void sendTo(org.bukkit.Location,double) -> gMhS
surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> UlCm$KKxJ$DYFQ:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> UlCm$KKxJ$gMhS:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> UlCm$KKxJ$idpH:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
surge.util.ParticleEffect$ParticleProperty -> UlCm$KwMR:
    surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> VWFJ
    surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> rOcm
    surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> hAfS
    surge.util.ParticleEffect$ParticleProperty COLORABLE -> ynJu
    surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> VEcd
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
surge.util.ParticleEffect$ParticleVersionException -> UlCm$DHEY:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
surge.util.Paste -> Xtkr:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> EmKl
surge.util.Persist -> gxgs:
surge.util.PluginUtil -> RHgY:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> cJLm
    81:85:void enableAll() -> VLkC
    95:99:void disable(org.bukkit.plugin.Plugin) -> cuAU
    106:110:void disableAll() -> GIOs
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> kYuC
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> DYFQ
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> RsRH
    169:172:java.util.List getPluginNames(boolean) -> oMOY
    184:187:java.lang.String getPluginVersion(java.lang.String) -> KTiq
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> WWlE
    237:316:java.util.List findByCommand(java.lang.String) -> ktIG
    337:338:void load(org.bukkit.plugin.Plugin) -> jhRt
    342:364:java.lang.String getPluginFileName(java.lang.String) -> eGby
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> DYFQ
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> KKxJ
    480:484:void reloadAll() -> PCIX
    496:622:void unload(org.bukkit.plugin.Plugin) -> KwMR
surge.util.PoolCount -> kAOX:
surge.util.PoolDescriber -> YxOu:
surge.util.PoolNanoThrottle -> SLLF:
surge.util.PositionalSelector -> xFre:
    org.cyberpwn.glang.GSet allowedChunks -> EwXa
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> pPec
    39:40:void addChunk(org.bukkit.Chunk) -> fdXQ
    44:44:org.cyberpwn.glang.GSet getAllowedChunks() -> SmuG
surge.util.Protocol -> iBxF:
    surge.util.Protocol LATEST -> aouw
    surge.util.Protocol R1_12_2 -> PCqy
    surge.util.Protocol R1_12_2_PRE -> HEMN
    surge.util.Protocol R1_12_1 -> pbpI
    surge.util.Protocol R1_12 -> oybm
    surge.util.Protocol R1_11_2 -> aMvV
    surge.util.Protocol R1_11_1 -> uirR
    surge.util.Protocol R1_11 -> qnhA
    surge.util.Protocol R1_10_2 -> IGps
    surge.util.Protocol R1_10_1 -> Gcmu
    surge.util.Protocol R1_10 -> rGVs
    surge.util.Protocol R1_9_4 -> jXpy
    surge.util.Protocol R1_9_3 -> pAPs
    surge.util.Protocol R1_9_2 -> foIX
    surge.util.Protocol R1_9_1 -> UvII
    surge.util.Protocol R1_9 -> mHhl
    surge.util.Protocol R1_8_9 -> KEfy
    surge.util.Protocol R1_8_8 -> iEMo
    surge.util.Protocol R1_8_7 -> FPJq
    surge.util.Protocol R1_8_6 -> yLLB
    surge.util.Protocol R1_8_5 -> ifoR
    surge.util.Protocol R1_8_4 -> Cpsx
    surge.util.Protocol R1_8_3 -> axjr
    surge.util.Protocol R1_8_2 -> NWbJ
    surge.util.Protocol R1_8_1 -> GmAV
    surge.util.Protocol R1_8 -> YydU
    surge.util.Protocol R1_7_10 -> kCCW
    surge.util.Protocol R1_7_9 -> TYSg
    surge.util.Protocol R1_7_8 -> DtXf
    surge.util.Protocol R1_7_7 -> PfXG
    surge.util.Protocol R1_7_6 -> IacM
    surge.util.Protocol R1_7_5 -> cmmo
    surge.util.Protocol R1_7_4 -> TisB
    surge.util.Protocol R1_7_3 -> tELQ
    surge.util.Protocol R1_7_2 -> vmTp
    surge.util.Protocol R1_7_1 -> sIwr
    surge.util.Protocol B1_6_4 -> rOex
    surge.util.Protocol B1_6_3 -> Nhag
    surge.util.Protocol B1_6_2 -> raIM
    surge.util.Protocol B1_6_1 -> foHW
    surge.util.Protocol B1_5_2 -> qvwQ
    surge.util.Protocol B1_5_1 -> xjjL
    surge.util.Protocol B1_5 -> tUld
    surge.util.Protocol B1_4_7 -> vueL
    surge.util.Protocol B1_4_6 -> VFFq
    surge.util.Protocol B1_4_5 -> ayKL
    surge.util.Protocol B1_4_4 -> COQj
    surge.util.Protocol B1_4_2 -> wxhR
    surge.util.Protocol B1_3_2 -> dOOW
    surge.util.Protocol B1_3_1 -> WkLo
    surge.util.Protocol B1_2_5 -> EDXY
    surge.util.Protocol B1_2_4 -> oqUI
    surge.util.Protocol EARLIEST -> IXtl
    surge.util.Protocol UNKNOWN -> gFyC
    int version -> version
    java.lang.String packageVersion -> aMwu
    java.lang.String versionName -> tfpo
    boolean netty -> YFbC
    surge.util.Protocol[] ENUM$VALUES -> cKmk
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> Gbap
    118:118:java.lang.String getPackageVersion() -> Ihgy
    124:124:java.lang.String toString() -> toString
    129:137:surge.util.Protocol getSupportedNMSVersion() -> Mcrn
    142:150:surge.util.Protocol getProtocolVersion() -> yBMr
    155:155:surge.util.ProtocolRange to(surge.util.Protocol) -> gMhS
    160:160:boolean isServerVersion() -> IqYf
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> AOnF
    175:175:boolean isActualVersion() -> baPE
    180:185:int getVersion() -> getVersion
    190:190:int getMetaVersion() -> fvLf
    1:1:surge.util.Protocol[] values() -> values
    1:1:surge.util.Protocol valueOf(java.lang.String) -> valueOf
surge.util.ProtocolRange -> sQWF:
    surge.util.Protocol from -> mjnI
    surge.util.Protocol to -> qDVI
    8:12:void <init>(surge.util.Protocol,surge.util.Protocol) -> <init>
    16:16:surge.util.Protocol getFrom() -> uXEN
    21:21:surge.util.Protocol getTo() -> iDAR
    26:26:boolean contains(surge.util.Protocol) -> idpH
    32:32:java.lang.String toString() -> toString
surge.util.Range -> mPFN:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> GIQL
    70:70:int randomNextInt() -> pPdl
    80:80:long randomNextLong() -> GjsL
    92:92:boolean isWithin(double) -> jVpM
    104:104:boolean isWithin(int) -> EmKl
    116:116:boolean isWithin(long) -> iBkb
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> gUwS
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> SnCD
surge.util.RawEvent -> eHOB:
surge.util.RayTrace -> bhwf:
    org.bukkit.Location start -> IHUL
    org.bukkit.util.Vector direction -> EDXm
    java.lang.Double maxDistance -> DlJW
    java.lang.Double distanceCovered -> kdfq
    java.lang.Double step -> bIMA
    java.lang.Boolean stop -> rGYG
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> EJys
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> KwMR
    89:89:org.bukkit.Location getStart() -> yuRN
    94:95:void setStart(org.bukkit.Location) -> oMOY
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> gFIy
    114:115:void setMaxDistance(java.lang.Double) -> idpH
    119:119:java.lang.Double getDistanceCovered() -> MuTQ
    124:125:void setDistanceCovered(java.lang.Double) -> cJLm
    129:129:java.lang.Double getStep() -> bOkl
    134:135:void setStep(java.lang.Double) -> cuAU
surge.util.ReflectionUtils -> xOdX:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> DYFQ
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> DYFQ
    156:156:java.lang.Object instantiateObject(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> DYFQ
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> DYFQ
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> DYFQ
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> DYFQ
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> DYFQ
    359:359:java.lang.reflect.Field getField(java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> DYFQ
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> DYFQ
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> DYFQ
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> DYFQ
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> DYFQ
    508:509:void setValue(java.lang.Object,java.lang.String,surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> DYFQ
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> DYFQ
surge.util.ReflectionUtils$DataType -> xOdX$DYFQ:
    surge.util.ReflectionUtils$DataType BYTE -> btAE
    surge.util.ReflectionUtils$DataType SHORT -> vlvk
    surge.util.ReflectionUtils$DataType INTEGER -> MnTK
    surge.util.ReflectionUtils$DataType LONG -> rqkw
    surge.util.ReflectionUtils$DataType CHARACTER -> RuPr
    surge.util.ReflectionUtils$DataType FLOAT -> twqb
    surge.util.ReflectionUtils$DataType DOUBLE -> VEgg
    surge.util.ReflectionUtils$DataType BOOLEAN -> WYki
    java.util.Map CLASS_MAP -> AsbF
    java.lang.Class primitive -> bHii
    java.lang.Class reference -> diCb
    surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> PTxB
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> QVkf
    704:704:java.lang.Class getReference() -> MRpN
    716:716:surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> gMhS
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> idpH
    741:742:java.lang.Class getReference(java.lang.Class) -> cJLm
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> DYFQ
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> gMhS
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> gMhS
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> idpH
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> DYFQ
    1:1:surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
surge.util.ReflectionUtils$PackageType -> xOdX$gMhS:
    surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> TGrG
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> dOPf
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> lhJQ
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> gOha
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> XeaN
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> CGCk
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> uYQo
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> LHke
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> SgRo
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> Xmpl
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> rFwP
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> RSNi
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> qTvA
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> tUmy
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> ObwB
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> ipBh
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> VMxW
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> wyJp
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> diFp
    surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> veJQ
    java.lang.String path -> path
    surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> ubGQ
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
surge.util.Refreshable -> xPEX:
    void refresh() -> refresh
surge.util.SQLOperation -> vbpN:
    surge.util.SQLOperation LOAD -> yvdC
    surge.util.SQLOperation SAVE -> COVE
    surge.util.SQLOperation[] ENUM$VALUES -> kShX
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.SQLOperation[] values() -> values
    1:1:surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
surge.util.ServerState -> biYB:
    surge.util.ServerState START -> IQGj
    surge.util.ServerState ENABLE -> LcBY
    surge.util.ServerState DISABLE -> LcBV
    surge.util.ServerState STOP -> tNBb
    surge.util.ServerState RUNNING -> Xmsw
    surge.util.ServerState[] ENUM$VALUES -> KWMq
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:surge.util.ServerState[] values() -> values
    1:1:surge.util.ServerState valueOf(java.lang.String) -> valueOf
surge.util.Shape -> rpWC:
    org.bukkit.Location location -> pYcD
    org.bukkit.util.Vector offset -> HESk
    org.bukkit.util.Vector size -> mjoX
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> HnCv
    90:94:org.bukkit.Location randomLocation() -> vIdp
    104:104:org.bukkit.Location randomSurface() -> iTaQ
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> vkgm
    129:129:org.bukkit.util.Vector getSize() -> mqni
surge.util.SnowLevel -> JJEK:
    byte level -> DAWB
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> tmrT
    51:52:void setLevel(byte) -> idpH
surge.util.T -> FEhM:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> DYFQ
    32:35:void stop() -> stop
surge.util.TXT -> VCtu:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:org.cyberpwn.glang.GList wrap(java.lang.String,int) -> kYuC
    67:67:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> DYFQ
    85:85:java.lang.String makeTag(surge.util.C,surge.util.C,surge.util.C,java.lang.String) -> DYFQ
    99:99:java.lang.String line(surge.util.C,int) -> DYFQ
    113:113:java.lang.String underline(surge.util.C,int) -> gMhS
    135:140:java.lang.String getLine(surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> DYFQ
surge.util.Tag -> DYUF:
    java.lang.String value() -> value
surge.util.Timer -> OPbc:
    long tns -> XDBT
    long cns -> AcBG
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> BJbK
surge.util.VectorMath -> VDVW:
    int[] $SWITCH_TABLE$surge$util$Axis -> Fpwi
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> axoI
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(surge.util.Axis,org.bukkit.util.Vector,double) -> DYFQ
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> DYFQ
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> gMhS
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> idpH
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> DYFQ
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> gMhS
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> gMhS
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> idpH
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> cJLm
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> cuAU
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> kYuC
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> WWlE
    111:111:double round(double,int) -> cuAU
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> DYFQ
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> DYFQ
    150:235:org.cyberpwn.glang.GList split(org.bukkit.block.BlockFace) -> DYFQ
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> cJLm
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> cuAU
    268:268:org.bukkit.util.Vector toVector(float,float) -> DYFQ
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> DYFQ
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> DYFQ
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> jhRt
    337:340:double getSpeed(org.bukkit.util.Vector) -> KKxJ
    354:361:org.cyberpwn.glang.GList shift(org.bukkit.util.Vector,org.cyberpwn.glang.GList) -> DYFQ
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> KwMR
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> DYFQ
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> gMhS
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> idpH
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> cJLm
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> DHEY
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> IOUA
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> uXCy
surge.util.VectorMath$1 -> VDVW$1:
    org.bukkit.util.Vector val$vector -> twtY
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> fdXQ
    1:1:java.lang.Object onAdapt(java.lang.Object) -> gMhS
surge.util.W -> IFaO:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> cJLm
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> DYFQ
    75:86:org.bukkit.entity.Entity getEntity(int) -> RsRH
    101:114:int count(org.bukkit.entity.Player,surge.util.MaterialBlock) -> DYFQ
    131:131:boolean has(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> DYFQ
    143:143:int getChunkX(org.bukkit.block.Block) -> cuAU
    155:155:int getChunkY(org.bukkit.block.Block) -> kYuC
    168:169:void dropXp(org.bukkit.Location,int) -> gMhS
    180:180:int getChunkZ(org.bukkit.block.Block) -> WWlE
    196:203:void take(org.bukkit.entity.Player,surge.util.MaterialBlock,int) -> gMhS
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> DYFQ
    232:239:org.cyberpwn.glang.GList news(org.bukkit.Location) -> Smbb
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> DYFQ
    276:276:org.cyberpwn.glang.GList getBlocks(org.bukkit.Chunk) -> oMOY
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> kYuC
    300:300:org.bukkit.World toSync(org.bukkit.World) -> WWlE
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> jhRt
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> SCOW
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> HnCv
    352:419:surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> WFjk
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> DYFQ
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> DYFQ
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> DYFQ
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> DYFQ
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> DYFQ
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> DYFQ
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> DYFQ
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> DYFQ
    580:587:org.cyberpwn.glang.GList chunkFaces(org.bukkit.Chunk) -> Smbb
    599:608:org.cyberpwn.glang.GList blockFaces(org.bukkit.block.Block) -> KKxJ
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> jFQD
    648:660:org.cyberpwn.glang.GList chunkRadius(org.bukkit.Chunk,int) -> idpH
    674:686:org.cyberpwn.glang.GList blockRadius(org.bukkit.block.Block,int) -> DYFQ
    708:740:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> DYFQ
    758:765:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> DYFQ
    779:779:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> DYFQ
surge.util.W$1 -> IFaO$1:
    java.lang.Double val$doff -> qoAv
    org.bukkit.entity.Entity val$e -> whKq
    org.bukkit.entity.Entity[] val$result -> GAeS
    1:721:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    726:737:void onTrace(org.bukkit.Location) -> KwMR
surge.util.Worlds -> KUXX:
    12:12:void <init>() -> <init>
    21:21:org.cyberpwn.glang.GList getWorlds() -> BJah
    33:33:boolean hasWorld(java.lang.String) -> bXML
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
surge.util.package-info -> iLNG:

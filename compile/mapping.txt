react.Config -> IEpw:
    java.lang.String A_ENTITYCACHE_CHUNK_RADIUS -> IEpw
    java.lang.String A_ENTITYCACHE_INTERVAL -> VUHt
    java.lang.String A_COMMANDOVERRIDE_TPS -> uxtE
    java.lang.String A_REACT_REMOTE_PORT -> KDHU
    java.lang.String A_REACT_REMOTE_ENABLED -> kkWN
    java.lang.String A_ENTITY_STACK_MAX_COUNT -> mNyO
    java.lang.String A_POOL_MAXTHREADS -> YoSi
    java.lang.String A_POOL_SYNC_NANOS -> EBVa
    java.lang.String A_ENTITYCACHE_ENABLED -> tSmm
    java.lang.String A_FASTLEAF_ENABLED -> mGIk
    java.lang.String A_FASTLEAF_ONDECAY -> AWkd
    java.lang.String A_FASTLEAF_INSTANT -> kRDe
    java.lang.String A_FASTLEAF_DECAYPERIOD -> YfcL
    java.lang.String A_COMMANDOVERRIDE_MEMORY -> rpKU
    java.lang.String A_ENTITYSTACK_ENABLED -> NMRL
    java.lang.String A_ENTITYSTACK_MINIMUM_GROUP -> wCeA
    java.lang.String A_ENTITYSTACK_GROUP_SEARCH_RADIUS -> UcFc
    java.lang.String A_ENTITYSTACK_MAXIMUM_HEALTH -> AFlA
    java.lang.String A_GLASS_SHOW_BLOCKS -> bOYT
    java.lang.String A_GLASS_SHOW_PARTICLES -> kHrO
    java.lang.String A_ALLOW_CULL -> ivRC
    java.lang.String A_ALLOW_PURGE -> pOot
    java.lang.String A_ALLOW_CACHE -> YgBo
    java.lang.String A_CULL_RULES -> LiMg
    java.lang.String A_RAI_TPS_HIGH_TICK -> fAsQ
    java.lang.String A_RAI_REDSTONE_TIME_FLOOR -> CUas
    java.lang.String A_RAI_REDSTONE_TIME_CEIL -> Sdoy
    java.lang.String A_RAI_REDSTONE_TIME_MUDDING -> wmvi
    java.lang.String A_RAI_REDSTONE_TIME_FUNCTION -> oxBc
    java.lang.String A_RAI_REDSTONE_TIME_OVERBLEED -> AiNf
    java.lang.String A_RAI_REDSTONE_TIME_RADIUS -> wejS
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATION -> AWnW
    java.lang.String A_RAI_HOPPER_TIME_FLOOR -> WFke
    java.lang.String A_RAI_HOPPER_TIME_CEIL -> pYEs
    java.lang.String A_RAI_HOPPER_TIME_MUDDING -> EKIh
    java.lang.String A_RAI_HOPPER_TIME_FUNCTION -> SBpB
    java.lang.String A_RAI_HOPPER_TIME_OVERBLEED -> SCQO
    java.lang.String A_RAI_HOPPER_TIME_RADIUS -> HSrV
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATION -> mGLN
    java.lang.String A_RAI_ENTITY_CHUNK_MULTIPLIER -> XcbO
    java.lang.String A_RAI_ENTITY_CHUNK_CLUSTERIZER -> AyqF
    java.lang.String A_RAI_ENTITY_CHUNK_RADIUS -> iCOW
    java.lang.String A_RAI_FLUID_TIME_FLOOR -> Kvmy
    java.lang.String A_RAI_FLUID_TIME_CEIL -> nJNX
    java.lang.String A_RAI_FLUID_TIME_MUDDING -> xhlj
    java.lang.String A_RAI_FLUID_TIME_FUNCTION -> VChl
    java.lang.String A_RAI_FLUID_TIME_OVERBLEED -> PRyP
    java.lang.String A_RAI_FLUID_TIME_RADIUS -> Jska
    java.lang.String A_RAI_FLUID_TIME_PROPIGATION -> iTPX
    java.lang.String A_SMEAR_TICK_ENTITIES_MAX_TICK -> OjGl
    java.lang.String A_SMEAR_TICK_TILES_MAX_TICK -> Whmh
    java.lang.String A_SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> eHCi
    java.lang.String A_SMEAR_TICK_TILES_SEPERATION_BIAS -> AGNa
    java.lang.String A_SMEAR_TICK_ENTITIES_AMOUNT -> JYwS
    java.lang.String A_SMEAR_TICK_TILES_AMOUNT -> HSqN
    java.lang.String A_SMEAR_TICK_ENTITIES_ENABLE -> dnsN
    java.lang.String A_SMEAR_TICK_TILES_ENABLE -> qcwd
    java.lang.String A_HOPPER_OVERTICK_ENABLE -> TyVw
    java.lang.String A_LANGUAGE -> LrAF
    java.lang.String A_RAI_CHUNK_TIME_FLOOR -> SeRh
    java.lang.String A_RAI_CHUNK_TIME_CEIL -> CLry
    java.lang.String A_RAI_CHUNK_TIME_MUDDING -> WFjs
    java.lang.String A_RAI_CHUNK_TIME_FUNCTION -> dxEp
    java.lang.String A_RAI_CHUNK_TIME_OVERBLEED -> JsjS
    java.lang.String A_RAI_CHUNK_TIME_RADIUS -> wnYh
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATION -> qcwE
    java.lang.String A_RAI_CHUNK_TIME_PROPIGATE -> qJeY
    java.lang.String A_RAI_FLUID_TIME_PROPIGATE -> rUyD
    java.lang.String A_RAI_ENTITY_PROPIGATE -> qKFT
    java.lang.String A_RAI_HOPPER_TIME_PROPIGATE -> kHtC
    java.lang.String A_RAI_REDSTONE_TIME_PROPIGATE -> kREl
    int ENTITYCACHE_CHUNK_RADIUS -> HTSD
    int ENTITYCACHE_INTERVAL -> cIpX
    boolean COMMANDOVERRIDES_TPS -> wvnE
    int REACT_REMOTE_PORT -> Lyrk
    boolean REACT_REMOTE_ENABLED -> LFms
    int ENTITY_STACK_MAX_COUNT -> ThYI
    int POOL_MAXTHREADS -> BkuH
    long POOL_SYNC_NANOS -> CfhL
    boolean ENTITYCACHE_ENABLED -> QxbI
    boolean FASTLEAF_ENABLED -> Wqag
    boolean FASTLEAF_ONDECAY -> Aqbh
    boolean FASTLEAF_INSTANT -> Jslm
    int FASTLEAF_DECAYPERIOD -> HmgK
    boolean COMMANDOVERRIDES_MEMORY -> CgHq
    boolean ENTITYSTACK_ENABLED -> WGOD
    int ENTITYSTACK_MINIMUM_GROUP -> WGOF
    int ENTITYSTACK_GROUP_SEARCH_RADIUS -> OjLF
    int ENTITYSTACK_MAXIMUM_HEALTH -> vsjR
    boolean GLASS_SHOW_BLOCKS -> Whpy
    boolean GLASS_SHOW_PARTICLES -> sjaK
    react.glang.GList ALLOW_CULL -> MIrF
    react.glang.GList ALLOW_PURGE -> jyYP
    react.glang.GList ALLOW_CACHE -> Oijo
    react.glang.GList CULL_RULES -> romy
    double RAI_TPS_HIGH_TICK -> vQfv
    long RAI_REDSTONE_TIME_FLOOR -> Smdq
    long RAI_REDSTONE_TIME_CEIL -> vcIQ
    long RAI_REDSTONE_TIME_MUDDING -> ugtw
    double RAI_REDSTONE_TIME_FUNCTION -> inER
    double RAI_REDSTONE_TIME_OVERBLEED -> VCij
    int RAI_REDSTONE_TIME_RADIUS -> YDbe
    int RAI_REDSTONE_TIME_PROPIGATION -> jqGx
    long RAI_HOPPER_TIME_FLOOR -> Huuq
    long RAI_HOPPER_TIME_CEIL -> XIpD
    long RAI_HOPPER_TIME_MUDDING -> vRHD
    double RAI_HOPPER_TIME_FUNCTION -> UAGc
    double RAI_HOPPER_TIME_OVERBLEED -> idqw
    int RAI_HOPPER_TIME_RADIUS -> AqdC
    int RAI_HOPPER_TIME_PROPIGATION -> jxvi
    int RAI_ENTITY_CHUNK_MULTIPLIER -> oLqT
    int RAI_ENTITY_CHUNK_CLUSTERIZER -> XdDU
    int RAI_ENTITY_CHUNK_RADIUS -> Huvc
    long RAI_FLUID_TIME_FLOOR -> jOEH
    long RAI_FLUID_TIME_CEIL -> uErK
    long RAI_FLUID_TIME_MUDDING -> VDMj
    double RAI_FLUID_TIME_FUNCTION -> tCSU
    double RAI_FLUID_TIME_OVERBLEED -> WrDj
    int RAI_FLUID_TIME_RADIUS -> AaCv
    int RAI_FLUID_TIME_PROPIGATION -> gopn
    double SMEAR_TICK_ENTITIES_MAX_TICK -> KDNp
    double SMEAR_TICK_TILES_MAX_TICK -> YoYu
    double SMEAR_TICK_ENTITIES_SEPERATION_BIAS -> RICf
    double SMEAR_TICK_TILES_SEPERATION_BIAS -> LaEI
    double SMEAR_TICK_ENTITIES_AMOUNT -> YLuv
    double SMEAR_TICK_TILES_AMOUNT -> xyrX
    boolean SMEAR_TICK_ENTITIES_ENABLE -> Ahtl
    boolean SMEAR_TICK_TILES_ENABLE -> CUiV
    boolean HOPPER_OVERTICK_ENABLE -> lDLG
    java.lang.String LANGUAGE -> LANGUAGE
    long RAI_CHUNK_TIME_FLOOR -> Ahtj
    long RAI_CHUNK_TIME_CEIL -> MRdF
    long RAI_CHUNK_TIME_MUDDING -> kQiU
    double RAI_CHUNK_TIME_FUNCTION -> XdEc
    double RAI_CHUNK_TIME_OVERBLEED -> Rare
    int RAI_CHUNK_TIME_RADIUS -> GQSN
    int RAI_CHUNK_TIME_PROPIGATION -> xaAV
    boolean RAI_CHUNK_TIME_PROPIGATE -> cktU
    boolean RAI_FLUID_TIME_PROPIGATE -> CoYu
    boolean RAI_ENTITY_PROPIGATE -> tKcH
    boolean RAI_HOPPER_TIME_PROPIGATE -> gpRC
    boolean RAI_REDSTONE_TIME_PROPIGATE -> VTmR
    boolean hrld -> vbiy
    boolean rns -> qKKJ
    boolean rrl -> NDec
    int[] $SWITCH_TABLE$org$bukkit$entity$EntityType -> oEDO
    258:648:void <clinit>() -> <clinit>
    34:34:void <init>() -> <init>
    653:670:void doTrack(org.bukkit.plugin.Plugin) -> IEpw
    675:697:void onRead(org.bukkit.plugin.Plugin) -> VUHt
    701:731:void read(java.io.File,boolean) -> IEpw
    736:849:react.surge.cluster.DataCluster read(react.surge.cluster.DataCluster,boolean) -> IEpw
    854:891:react.surge.cluster.DataCluster defaultConfig(boolean) -> IEpw
    896:965:react.glang.GList getDefaultEntitiesForCaching() -> IEpw
    970:1039:react.glang.GList getDefaultEntitiesForCulling() -> VUHt
    1044:1075:react.glang.GList getDefaultEntitiesForRemoval() -> uxtE
    1080:1109:react.glang.GList getDefaultCullRules() -> KDHU
    34:34:int[] $SWITCH_TABLE$org$bukkit$entity$EntityType() -> kkWN
react.Config$1 -> IEpw$1:
    java.io.File val$fConfig -> mqbD
    java.io.File val$fConfigExperimental -> ydCg
    org.bukkit.plugin.Plugin val$main -> TWYT
    1:656:void <init>(java.io.File,java.io.File,org.bukkit.plugin.Plugin) -> <init>
    661:665:void run() -> run
react.Gate -> VUHt:
    react.glang.GMap defaultSettings -> SvYT
    int[] $SWITCH_TABLE$react$api$ActivationRangeType -> LGPt
    37:37:void <clinit>() -> <clinit>
    35:35:void <init>() -> <init>
    41:127:void fixLighting(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> IEpw
    131:156:org.bukkit.entity.Player whoLoaded(org.bukkit.Chunk) -> IEpw
    161:161:int getChunkCountForView() -> mNyO
    166:166:int getMaxChunksForView() -> YoSi
    171:171:boolean hasFawe() -> EBVa
    176:197:void tickEntityNextTickListTick(org.bukkit.World) -> IEpw
    201:205:void resetEntityMaxTick(org.bukkit.World) -> VUHt
    209:209:int getEntityTickMax(org.bukkit.World) -> uxtE
    214:214:int getTileTickMax(org.bukkit.World) -> KDHU
    219:237:void tweakEntityTickMax(org.bukkit.World,int) -> IEpw
    241:258:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> IEpw
    263:267:void forceSet(org.spigotmc.SpigotWorldConfig,java.lang.String,java.lang.Object) -> IEpw
    271:283:int getActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> IEpw
    288:292:void resetActivationRange(org.bukkit.World,react.api.ActivationRangeType) -> VUHt
    296:314:void tweakActivationRange(org.bukkit.World,react.api.ActivationRangeType,int) -> IEpw
    318:322:org.spigotmc.SpigotWorldConfig getSpigotConfig(org.bukkit.World) -> kkWN
    327:330:java.lang.String msg(org.bukkit.command.CommandSender,java.lang.String) -> IEpw
    335:338:java.lang.String msgRAI(org.bukkit.command.CommandSender,java.lang.String) -> VUHt
    343:343:java.lang.String msgSuccess(org.bukkit.command.CommandSender,java.lang.String) -> uxtE
    348:348:java.lang.String msgError(org.bukkit.command.CommandSender,java.lang.String) -> KDHU
    353:353:java.lang.String msgActing(org.bukkit.command.CommandSender,java.lang.String) -> kkWN
    360:366:boolean unloadChunk(org.bukkit.Chunk) -> unloadChunk
    372:373:void unloadChunk(org.bukkit.World,int,int) -> IEpw
    377:383:void removeEntity(org.bukkit.entity.Entity) -> IEpw
    387:393:void purgeEntity(org.bukkit.entity.Entity) -> VUHt
    397:403:void cullEntity(org.bukkit.entity.Entity) -> uxtE
    407:413:void cachedEntity(org.bukkit.entity.Entity) -> KDHU
    418:435:void updateBlock(org.bukkit.block.Block) -> IEpw
    439:443:java.lang.String header(java.lang.String,react.surge.util.C) -> IEpw
    448:448:java.lang.String header(react.surge.util.C) -> IEpw
    454:458:void updateFluid(org.bukkit.block.Block) -> VUHt
    35:35:int[] $SWITCH_TABLE$react$api$ActivationRangeType() -> tSmm
react.Gate$1 -> VUHt$1:
    react.api.SelectorPosition val$sel -> GQSf
    react.glang.Callback val$prog -> wKyp
    react.glang.Callback val$cb -> JAJp
    1:41:void <init>(react.api.SelectorPosition,react.glang.Callback,react.glang.Callback) -> <init>
    46:125:void run() -> run
react.Gate$1$1 -> VUHt$1$1:
    react.Gate$1 this$1 -> qloi
    java.lang.Object val$o -> LywP
    java.lang.reflect.Constructor val$vectorConstruct -> xyuO
    java.lang.reflect.Constructor val$cuboidConstruct -> gVah
    java.lang.reflect.Method val$faweFixMethod -> pjMe
    java.lang.Integer[] val$total -> XSFk
    java.lang.Integer[] val$sof -> rpSp
    react.glang.Callback val$prog -> wKyp
    java.lang.Integer val$tot -> mGRU
    1:73:void <init>(react.Gate$1,java.lang.String,int,java.lang.Object,java.lang.reflect.Constructor,java.lang.reflect.Constructor,java.lang.reflect.Method,java.lang.Integer[],java.lang.Integer[],react.glang.Callback,java.lang.Integer) -> <init>
    80:94:void run() -> run
react.Gate$1$2 -> VUHt$1$2:
    react.Gate$1 this$1 -> qloi
    react.glang.Callback val$prog -> wKyp
    react.glang.Callback val$cb -> JAJp
    java.lang.Integer[] val$total -> XSFk
    1:98:void <init>(react.Gate$1,java.lang.String,int,react.glang.Callback,react.glang.Callback,java.lang.Integer[]) -> <init>
    105:113:void run() -> run
react.Info -> uxtE:
    java.lang.String CORE_REACT_DOT -> yRcr
    java.lang.String CORE_NAME -> ycfD
    java.lang.String CORE_CACHE -> lvqi
    java.lang.String CORE_DOTYML -> QxfV
    java.lang.String COMMAND_REACT -> NLyP
    java.lang.String COMMAND_RAI -> WOci
    java.lang.String COMMAND_ACT_DESCRIPTION -> iLFk
    java.lang.String COMMAND_ACT -> Hdyx
    java.lang.String COMMAND_ACT_ALIAS_1 -> qmQA
    java.lang.String COMMAND_ACT_ALIAS_2 -> QNSR
    java.lang.String COMMAND_ACT_USAGE -> mXSQ
    java.lang.String COMMAND_HELP_DESCRIPTION -> upjy
    java.lang.String COMMAND_HELP -> ArFw
    java.lang.String COMMAND_HELP_ALIAS_1 -> PJnn
    java.lang.String COMMAND_HELP_ALIAS_2 -> UQku
    java.lang.String COMMAND_HELP_USAGE -> PvBa
    java.lang.String COMMAND_STATUS_DESCRIPTION -> owjY
    java.lang.String COMMAND_STATUS -> sQSK
    java.lang.String COMMAND_STATUS_ALIAS_1 -> Wqdv
    java.lang.String COMMAND_STATUS_ALIAS_2 -> AOdn
    java.lang.String COMMAND_STATUS_USAGE -> XSEx
    java.lang.String COMMAND_CPUSCORE_DESCRIPTION -> OYMM
    java.lang.String COMMAND_CPUSCORE -> NVIu
    java.lang.String COMMAND_CPUSCORE_ALIAS_1 -> XRfE
    java.lang.String COMMAND_CPUSCORE_ALIAS_2 -> xXQV
    java.lang.String COMMAND_CPUSCORE_USAGE -> SLHD
    java.lang.String COMMAND_RELOAD_DESCRIPTION -> wTlr
    java.lang.String COMMAND_RELOAD -> AGTW
    java.lang.String COMMAND_RELOAD_ALIAS_1 -> MBFO
    java.lang.String COMMAND_RELOAD_ALIAS_2 -> MIuX
    java.lang.String COMMAND_RELOAD_USAGE -> IOLE
    java.lang.String COMMAND_MONITOR_DESCRIPTION -> sIFD
    java.lang.String COMMAND_MONITOR -> Nflu
    java.lang.String COMMAND_MONITOR_ALIAS_1 -> yJWC
    java.lang.String COMMAND_MONITOR_ALIAS_2 -> vRNe
    java.lang.String COMMAND_MONITOR_USAGE -> xOdL
    java.lang.String COMMAND_MAP_DESCRIPTION -> WPFO
    java.lang.String COMMAND_MAP -> vkaF
    java.lang.String COMMAND_MAP_ALIAS_1 -> aLaY
    java.lang.String COMMAND_MAP_ALIAS_2 -> TOMi
    java.lang.String COMMAND_MAP_USAGE -> oDgt
    java.lang.String COMMAND_GLASS_DESCRIPTION -> BAfs
    java.lang.String COMMAND_GLASS -> LiYL
    java.lang.String COMMAND_GLASS_ALIAS_1 -> QxhS
    java.lang.String COMMAND_GLASS_ALIAS_2 -> biXJ
    java.lang.String COMMAND_GLASS_USAGE -> Qxgq
    java.lang.String COMMAND_CBLAME_DESCRIPTION -> nlYd
    java.lang.String COMMAND_CBLAME -> PKQn
    java.lang.String COMMAND_CBLAME_ALIAS_1 -> gFBt
    java.lang.String COMMAND_CBLAME_ALIAS_2 -> NxNi
    java.lang.String COMMAND_CBLAME_USAGE -> MBFu
    java.lang.String COMMAND_ACTIONLOG_DESCRIPTION -> uOKG
    java.lang.String COMMAND_ACTIONLOG -> OioU
    java.lang.String COMMAND_ACTIONLOG_ALIAS_1 -> hsXa
    java.lang.String COMMAND_ACTIONLOG_ALIAS_2 -> gxfJ
    java.lang.String COMMAND_ACTIONLOG_USAGE -> dfkR
    java.lang.String COMMAND_CAPABILITIES_DESCRIPTION -> SSxY
    java.lang.String COMMAND_CAPABILITIES -> gxel
    java.lang.String COMMAND_CAPABILITIES_ALIAS_1 -> PTAj
    java.lang.String COMMAND_CAPABILITIES_ALIAS_2 -> JROo
    java.lang.String COMMAND_CAPABILITIES_USAGE -> qlqQ
    java.lang.String MSG_PERMISSION -> oEHo
    java.lang.String MSG_MONITORING_STARTED -> bFrP
    java.lang.String MSG_MONITORING_STOPPED -> uExO
    java.lang.String MSG_ACTIONLOGGING_STARTED -> pXkh
    java.lang.String MSG_ACTIONLOGGING_STOPPED -> dLyP
    java.lang.String MSG_GLASS_STARTED -> NEKI
    java.lang.String MSG_GLASS_STOPPED -> wTnu
    org.bukkit.Color COLOR_HOPPER -> EmUB
    org.bukkit.Color COLOR_BLOCK_UPDATE -> nBEX
    org.bukkit.Color COLOR_BLOCK_FROMTO -> YUjj
    org.bukkit.Color COLOR_BLOCK_BURN -> ckyF
    org.bukkit.Color COLOR_BLOCK_DECAY -> aUQs
    org.bukkit.Color COLOR_BLOCK_FORM -> woBu
    java.lang.String NAME_TICK -> PTAw
    java.lang.String NAME_MEMORY -> CENK
    java.lang.String NAME_CHUNKS -> WGWS
    java.lang.String NAME_ENTITIES -> iByU
    java.lang.String STATE_MONITORING_TAB -> WWwe
    java.lang.String STATE_MONITORING_ENABLED -> kQqJ
    java.lang.String STATE_ACTIONLOGGING_ENABLED -> kAOx
    java.lang.String STATE_MAPPING_ENABLED -> mXVn
    java.lang.String STATE_SOUND_PLAYS -> QyKX
    java.lang.String STATE_MONITORING_POSTED -> inNN
    java.lang.String STATE_MONITORING_LASTTAB -> cBJE
    java.lang.String STATE_GLASSES_ENABLED -> ycil
    java.lang.String STATE_MONITORING_SWITCHNOTIFICATION -> baIb
    java.lang.String STATE_PLAYER_HOTBAR -> hIHN
    java.lang.String STATE_PLAYER_SHIFT -> pipe
    java.lang.String STATE_PLAYER_SCROLL -> qudn
    java.lang.String STATE_PLAYER_HEIGHT_CURRENT -> rxhP
    java.lang.String STATE_PLAYER_HEIGHT_CHANGING -> KDUY
    java.lang.String PERM_ACCESS -> lfUM
    java.lang.String PERM_MONITOR -> PTDG
    java.lang.String PERM_MONITOR_TITLE -> IOOI
    java.lang.String PERM_MONITOR_ACTIONLOG -> PBaU
    java.lang.String PERM_MONITOR_MAP -> BBKf
    java.lang.String PERM_MONITOR_ENVIRONMENT -> lCpx
    java.lang.String PERM_MONITOR_GLASSES -> mFtX
    java.lang.String PERM_MONITOR_CHUNK_BLAME -> JJAs
    java.lang.String PERM_ACT -> vcQI
    java.lang.String PERM_RAI -> vbod
    java.lang.String PERM_RAI_CONTROL -> xrGm
    java.lang.String PERM_RAI_ACCESS -> QFEm
    java.lang.String PERM_RAI_MONITOR -> upoC
    java.lang.String PERM_RELOAD -> gNSu
    java.lang.String SAMPLER_REDSTONE_TICK_USAGE -> xhvI
    java.lang.String SAMPLER_REDSTONE_TICK -> nRhR
    java.lang.String SAMPLER_ENTITY_TIME -> anfK
    java.lang.String SAMPLER_ENTITY_TIME_LOCK -> JtWp
    java.lang.String SAMPLER_TILE_TIME_LOCK -> sQYo
    java.lang.String SAMPLER_TILE_TIME -> HeaG
    java.lang.String SAMPLER_TILE_DROPTICK -> JcVh
    java.lang.String SAMPLER_ENTITY_DROPTICK -> yRkC
    java.lang.String SAMPLER_REDSTONE_SECOND -> BSMq
    java.lang.String SAMPLER_REDSTONE_TIME -> KLft
    java.lang.String SAMPLER_HOPPER_TICK_USAGE -> gVhW
    java.lang.String SAMPLER_HOPPER_TICK -> BSNM
    java.lang.String SAMPLER_HOPPER_SECOND -> cRkr
    java.lang.String SAMPLER_HOPPER_TIME -> TiDn
    java.lang.String SAMPLER_FLUID_TICK_USAGE -> dENd
    java.lang.String SAMPLER_FLUID_TICK -> aTuv
    java.lang.String SAMPLER_FLUID_SECOND -> OHRw
    java.lang.String SAMPLER_FLUID_TIME -> esFJ
    java.lang.String SAMPLER_TPS -> BmAu
    java.lang.String SAMPLER_TICK -> IqTL
    java.lang.String SAMPLER_TIU -> dgOw
    java.lang.String SAMPLER_MEM -> dfnw
    java.lang.String SAMPLER_FREEMEM -> YEMn
    java.lang.String SAMPLER_MAXMEM -> DXsE
    java.lang.String SAMPLER_ALLOCMEM -> DbEM
    java.lang.String SAMPLER_MAHS -> CfqT
    java.lang.String SAMPLER_CHK -> BtqX
    java.lang.String SAMPLER_ATASK -> hjlA
    java.lang.String SAMPLER_STASK -> wwXW
    java.lang.String SAMPLER_CHK_TIME -> fJrQ
    java.lang.String SAMPLER_EXPLOSION_TIME -> fCBg
    java.lang.String SAMPLER_CHKS -> cIxu
    java.lang.String SAMPLER_ENT -> uppn
    java.lang.String SAMPLER_ENTLIV -> OsFW
    java.lang.String SAMPLER_ENTDROP -> RHjH
    java.lang.String SAMPLER_ENTTILE -> aDUQ
    java.lang.String[] ACTION_CULL_ENTITIES_TAGS -> Pdfb
    java.lang.String ACTION_CULL_ENTITIES_STATUS -> PeHP
    java.lang.String ACTION_CULL_ENTITIES_NAME -> RkNS
    java.lang.String ACTION_CULL_ENTITIES_DESCRIPTION -> YUoF
    java.lang.String[] ACTION_UPDATE_FLUID_TAGS -> XuOg
    java.lang.String ACTION_UPDATE_FLUID_STATUS -> uNqO
    java.lang.String ACTION_UPDATE_FLUID_NAME -> EeJl
    java.lang.String ACTION_UPDATE_FLUID_DESCRIPTION -> piuN
    java.lang.String[] ACTION_LOCK_FLUID_TAGS -> fJtx
    java.lang.String ACTION_LOCK_FLUID_STATUS -> LrOu
    java.lang.String ACTION_LOCK_FLUID_NAME -> WFym
    java.lang.String ACTION_LOCK_FLUID_DESCRIPTION -> jyes
    java.lang.String[] ACTION_UNLOCK_FLUID_TAGS -> fmYS
    java.lang.String ACTION_UNLOCK_FLUID_STATUS -> PBfj
    java.lang.String ACTION_UNLOCK_FLUID_NAME -> LaNj
    java.lang.String ACTION_UNLOCK_FLUID_DESCRIPTION -> aeym
    java.lang.String[] ACTION_LOCK_HOPPER_TAGS -> dVQw
    java.lang.String ACTION_LOCK_HOPPER_STATUS -> kkfk
    java.lang.String ACTION_LOCK_HOPPER_NAME -> GHme
    java.lang.String ACTION_LOCK_HOPPER_DESCRIPTION -> dpEN
    java.lang.String[] ACTION_UNLOCK_HOPPER_TAGS -> impv
    java.lang.String ACTION_UNLOCK_HOPPER_STATUS -> HveU
    java.lang.String ACTION_UNLOCK_HOPPER_NAME -> brNp
    java.lang.String ACTION_UNLOCK_HOPPER_DESCRIPTION -> xGYS
    java.lang.String[] ACTION_LOCK_REDSTONE_TAGS -> OsHE
    java.lang.String ACTION_LOCK_REDSTONE_STATUS -> TFaP
    java.lang.String ACTION_LOCK_REDSTONE_NAME -> AOln
    java.lang.String ACTION_LOCK_REDSTONE_DESCRIPTION -> sPyv
    java.lang.String[] ACTION_UNLOCK_REDSTONE_TAGS -> TNqn
    java.lang.String ACTION_UNLOCK_REDSTONE_STATUS -> ggil
    java.lang.String ACTION_UNLOCK_REDSTONE_NAME -> eQCr
    java.lang.String ACTION_UNLOCK_REDSTONE_DESCRIPTION -> goyv
    java.lang.String[] ACTION_PURGE_ENTITIES_TAGS -> vstx
    java.lang.String ACTION_PURGE_ENTITIES_STATUS -> Cwtw
    java.lang.String ACTION_PURGE_ENTITIES_NAME -> Divj
    java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION -> Xtpd
    java.lang.String[] ACTION_PURGE_CHUNKS_TAGS -> royk
    java.lang.String ACTION_PURGE_CHUNKS_STATUS -> eite
    java.lang.String ACTION_PURGE_CHUNKS_NAME -> brMo
    java.lang.String ACTION_PURGE_CHUNKS_DESCRIPTION -> CVTC
    java.lang.String[] ACTION_FIX_LIGHTING_TAGS -> CxXc
    java.lang.String ACTION_FIX_LIGHTING_STATUS -> PvNI
    java.lang.String ACTION_FIX_LIGHTING_NAME -> vbwh
    java.lang.String ACTION_FIX_LIGHTING_DESCRIPTION -> XcrL
    java.lang.String[] ACTION_COLLECT_GARBAGE_TAGS -> mqoh
    java.lang.String ACTION_COLLECT_GARBAGE -> fCHh
    java.lang.String ACTION_COLLECT_GARBAGE_NAME -> rVkH
    java.lang.String ACTION_COLLECT_GARBAGE_DESCRIPTION -> lLiW
    8:226:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
react.Lang -> KDHU:
    java.lang.String BUNDLE_NAME -> ggmY
    java.util.ResourceBundle RESOURCE_BUNDLE -> LaPv
    java.util.ResourceBundle PRIMARY_BUNDLE -> HCbe
    9:10:void <clinit>() -> <clinit>
    12:15:void <init>() -> <init>
    23:34:java.lang.String getString(java.lang.String) -> getString
react.React -> kkWN:
    react.React instance -> jqWC
    react.controller.SampleController sampleController -> DGtx
    react.controller.PlayerController playerController -> oEQV
    react.controller.MonitorController monitorController -> Gjpu
    react.controller.CommandController commandController -> YoeR
    react.controller.ActionController actionController -> MRox
    react.controller.FastDecayController fastDecayController -> inTL
    react.controller.EntityStackController entityStackController -> SLQc
    react.controller.GlassController glassController -> ejWS
    react.controller.EntityCullController entityCullController -> YpGK
    react.controller.SpikeController spikeController -> yBLc
    react.controller.SecurityController securityController -> PvNF
    react.controller.RedstoneController redstoneController -> IpxK
    react.controller.HopperController hopperController -> piuh
    react.controller.PhysicsController physicsController -> eGtH
    react.controller.TickTimeController tickTimeController -> CESv
    react.controller.RAIController raiController -> ofsJ
    react.controller.FluidController fluidController -> AaPs
    react.controller.ChunkController chunkController -> jXDe
    react.controller.GraphController graphController -> YMcF
    react.controller.ChronophyFluidController fluidChronophyController -> JQxN
    react.controller.EventController eventController -> jNvC
    react.controller.BlockInjectController blockInjectController -> LjDL
    react.controller.SmearTickController smearTickController -> cKBc
    react.controller.FeatureController featureController -> Rbca
    react.controller.HopperOvertickController hopperPlungeController -> Dajv
    react.controller.BenchmarkController benchmarkController -> pHVv
    react.controller.LanguageController languageController -> RYrV
    react.controller.RemoteController remoteController -> YNEw
    react.controller.ExplosiveController explosiveController -> eGvT
    41:41:void <init>() -> <init>
    137:137:void enable() -> enable
    143:143:void disable() -> disable
react.action.ActionCollectGarbage -> mNyO:
    19:22:void <init>() -> <init>
    27:61:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionCollectGarbage$1 -> mNyO$1:
    react.action.ActionCollectGarbage this$0 -> tTcG
    react.api.IActionSource val$source -> ySQb
    1:29:void <init>(react.action.ActionCollectGarbage,react.api.IActionSource) -> <init>
    35:59:void run() -> run
    29:29:react.action.ActionCollectGarbage access$0(react.action.ActionCollectGarbage$1) -> IEpw
react.action.ActionCollectGarbage$1$1 -> mNyO$1$1:
    react.action.ActionCollectGarbage$1 this$1 -> NDuV
    long val$mbnex -> MmFv
    long val$mbmem -> xqqG
    react.api.IActionSource val$source -> ySQb
    1:39:void <init>(react.action.ActionCollectGarbage$1,long,long,react.api.IActionSource) -> <init>
    44:57:void run() -> run
react.action.ActionCullEntities -> YoSi:
    long ms -> tLSH
    int lcd -> rVmU
    32:59:void <init>() -> <init>
    64:150:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
    154:156:void cull(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> IEpw
    27:27:void access$0(react.action.ActionCullEntities,long) -> IEpw
    28:28:int access$1(react.action.ActionCullEntities) -> IEpw
    27:27:long access$2(react.action.ActionCullEntities) -> VUHt
react.action.ActionCullEntities$1 -> YoSi$1:
    react.action.ActionCullEntities this$0 -> JJLE
    1:36:void <init>(react.action.ActionCullEntities) -> <init>
    41:44:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$2 -> YoSi$2:
    react.action.ActionCullEntities this$0 -> JJLE
    1:48:void <init>(react.action.ActionCullEntities) -> <init>
    53:56:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionCullEntities$3 -> YoSi$3:
    react.action.ActionCullEntities this$0 -> JJLE
    react.glang.FinalInteger val$completed -> oETF
    react.glang.FinalInteger val$total -> TFfl
    react.glang.FinalInteger val$totalCulled -> TiHy
    react.glang.FinalInteger val$totalChunked -> Wqqd
    react.api.IActionSource val$source -> ySQb
    1:104:void <init>(react.action.ActionCullEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    109:129:void run() -> run
react.action.ActionCullEntities$4 -> YoSi$4:
    react.action.ActionCullEntities this$0 -> JJLE
    react.api.IActionSource val$source -> ySQb
    react.glang.FinalInteger val$totalCulled -> TiHy
    react.glang.FinalInteger val$totalChunked -> Wqqd
    1:136:void <init>(react.action.ActionCullEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    141:147:void run() -> run
react.action.ActionFixLighting -> EBVa:
    24:38:void <init>() -> <init>
    43:95:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionFixLighting$1 -> EBVa$1:
    react.action.ActionFixLighting this$0 -> NMeI
    1:27:void <init>(react.action.ActionFixLighting) -> <init>
    32:35:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionFixLighting$2 -> EBVa$2:
    react.action.ActionFixLighting this$0 -> NMeI
    react.api.IActionSource val$source -> ySQb
    int val$ch -> qKXw
    1:69:void <init>(react.action.ActionFixLighting,react.api.IActionSource,int) -> <init>
    74:79:void run(java.lang.Integer) -> IEpw
    1:1:void run(java.lang.Object) -> IEpw
react.action.ActionFixLighting$3 -> EBVa$3:
    react.action.ActionFixLighting this$0 -> NMeI
    1:80:void <init>(react.action.ActionFixLighting) -> <init>
    85:90:void run(java.lang.Double) -> IEpw
    1:1:void run(java.lang.Object) -> IEpw
react.action.ActionLockFluid -> tSmm:
    int lcd -> rVmU
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionLockFluid$1 -> tSmm$1:
    react.action.ActionLockFluid this$0 -> PdmJ
    1:30:void <init>(react.action.ActionLockFluid) -> <init>
    35:38:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionLockFluid$2 -> tSmm$2:
    react.action.ActionLockFluid this$0 -> PdmJ
    1:42:void <init>(react.action.ActionLockFluid) -> <init>
    47:50:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper -> mGIk:
    int lcd -> rVmU
    26:53:void <init>() -> <init>
    58:103:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionLockHopper$1 -> mGIk$1:
    react.action.ActionLockHopper this$0 -> TGFc
    1:30:void <init>(react.action.ActionLockHopper) -> <init>
    35:38:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionLockHopper$2 -> mGIk$2:
    react.action.ActionLockHopper this$0 -> TGFc
    1:42:void <init>(react.action.ActionLockHopper) -> <init>
    47:50:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone -> AWkd:
    int lcd -> rVmU
    26:53:void <init>() -> <init>
    58:102:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionLockRedstone$1 -> AWkd$1:
    react.action.ActionLockRedstone this$0 -> rWLi
    1:30:void <init>(react.action.ActionLockRedstone) -> <init>
    35:38:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionLockRedstone$2 -> AWkd$2:
    react.action.ActionLockRedstone this$0 -> rWLi
    1:42:void <init>(react.action.ActionLockRedstone) -> <init>
    47:50:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks -> kRDe:
    long ms -> tLSH
    int lcd -> rVmU
    boolean fail -> KMMf
    31:46:void <init>() -> <init>
    51:144:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
    148:164:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> VUHt
    27:27:boolean access$0(react.action.ActionPurgeChunks) -> IEpw
    25:25:void access$1(react.action.ActionPurgeChunks,long) -> IEpw
    26:26:int access$2(react.action.ActionPurgeChunks) -> VUHt
    25:25:long access$3(react.action.ActionPurgeChunks) -> uxtE
    27:27:void access$4(react.action.ActionPurgeChunks,boolean) -> IEpw
react.action.ActionPurgeChunks$1 -> kRDe$1:
    react.action.ActionPurgeChunks this$0 -> vAUx
    1:35:void <init>(react.action.ActionPurgeChunks) -> <init>
    40:43:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeChunks$2 -> kRDe$2:
    react.action.ActionPurgeChunks this$0 -> vAUx
    int val$dk -> SCbn
    java.lang.Object val$j -> eQHN
    react.api.IActionSource val$source -> ySQb
    react.api.ISelector[] val$selectors -> kJHU
    react.glang.FinalInteger val$acompleted -> nmDQ
    react.glang.FinalInteger val$completed -> oETF
    react.glang.FinalInteger val$total -> TFfl
    react.glang.FinalInteger val$totalCulled -> TiHy
    react.glang.FinalInteger val$totalChunked -> Wqqd
    1:81:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,int,int,java.lang.Object,react.api.IActionSource,react.api.ISelector[],react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    86:123:void run() -> run
    81:81:react.action.ActionPurgeChunks access$0(react.action.ActionPurgeChunks$2) -> IEpw
react.action.ActionPurgeChunks$2$1 -> kRDe$2$1:
    react.action.ActionPurgeChunks$2 this$1 -> XdWW
    react.glang.FinalInteger val$acompleted -> nmDQ
    react.glang.FinalInteger val$completed -> oETF
    react.glang.FinalInteger val$total -> TFfl
    react.glang.FinalInteger val$totalCulled -> TiHy
    react.glang.FinalInteger val$totalChunked -> Wqqd
    react.api.IActionSource val$source -> ySQb
    1:88:void <init>(react.action.ActionPurgeChunks$2,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    93:118:void run() -> run
react.action.ActionPurgeChunks$3 -> kRDe$3:
    react.action.ActionPurgeChunks this$0 -> vAUx
    react.api.IActionSource val$source -> ySQb
    react.glang.FinalInteger val$acompleted -> nmDQ
    1:130:void <init>(react.action.ActionPurgeChunks,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger) -> <init>
    135:141:void run() -> run
react.action.ActionPurgeChunks$4 -> kRDe$4:
    react.action.ActionPurgeChunks this$0 -> vAUx
    org.bukkit.Chunk val$chunk -> APSY
    java.lang.Runnable val$cb -> bHAa
    1:148:void <init>(react.action.ActionPurgeChunks,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    153:162:void run() -> run
react.action.ActionPurgeEntities -> YfcL:
    long ms -> tLSH
    int lcd -> rVmU
    34:61:void <init>() -> <init>
    66:153:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
    157:200:void purge(org.bukkit.Chunk,java.lang.Runnable,react.api.IActionSource,react.api.ISelector[]) -> VUHt
    29:29:void access$0(react.action.ActionPurgeEntities,long) -> IEpw
    30:30:int access$1(react.action.ActionPurgeEntities) -> IEpw
    29:29:long access$2(react.action.ActionPurgeEntities) -> VUHt
    30:30:void access$3(react.action.ActionPurgeEntities,int) -> IEpw
react.action.ActionPurgeEntities$1 -> YfcL$1:
    react.action.ActionPurgeEntities this$0 -> ebKr
    1:38:void <init>(react.action.ActionPurgeEntities) -> <init>
    43:46:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$2 -> YfcL$2:
    react.action.ActionPurgeEntities this$0 -> ebKr
    1:50:void <init>(react.action.ActionPurgeEntities) -> <init>
    55:58:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionPurgeEntities$3 -> YfcL$3:
    react.action.ActionPurgeEntities this$0 -> ebKr
    react.glang.FinalInteger val$completed -> oETF
    react.glang.FinalInteger val$total -> TFfl
    react.glang.FinalInteger val$totalCulled -> TiHy
    react.glang.FinalInteger val$totalChunked -> Wqqd
    react.api.IActionSource val$source -> ySQb
    1:106:void <init>(react.action.ActionPurgeEntities,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.glang.FinalInteger,react.api.IActionSource) -> <init>
    111:131:void run() -> run
react.action.ActionPurgeEntities$4 -> YfcL$4:
    react.action.ActionPurgeEntities this$0 -> ebKr
    react.api.IActionSource val$source -> ySQb
    react.glang.FinalInteger val$totalCulled -> TiHy
    react.glang.FinalInteger val$totalChunked -> Wqqd
    1:138:void <init>(react.action.ActionPurgeEntities,java.lang.String,int,react.api.IActionSource,react.glang.FinalInteger,react.glang.FinalInteger) -> <init>
    144:150:void run() -> run
react.action.ActionPurgeEntities$5 -> YfcL$5:
    react.action.ActionPurgeEntities this$0 -> ebKr
    org.bukkit.entity.Entity val$i -> GtHj
    react.glang.FinalInteger val$cu -> HLXD
    int val$k -> opJK
    org.bukkit.Chunk val$chunk -> APSY
    java.lang.Runnable val$cb -> bHAa
    1:178:void <init>(react.action.ActionPurgeEntities,org.bukkit.entity.Entity,react.glang.FinalInteger,int,org.bukkit.Chunk,java.lang.Runnable) -> <init>
    183:191:void run() -> run
react.action.ActionUnlockFluid -> rpKU:
    int lcd -> rVmU
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionUnlockFluid$1 -> rpKU$1:
    react.action.ActionUnlockFluid this$0 -> XKFQ
    1:29:void <init>(react.action.ActionUnlockFluid) -> <init>
    34:37:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockHopper -> NMRL:
    int lcd -> rVmU
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionUnlockHopper$1 -> NMRL$1:
    react.action.ActionUnlockHopper this$0 -> KxES
    1:29:void <init>(react.action.ActionUnlockHopper) -> <init>
    34:37:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.action.ActionUnlockRedstone -> wCeA:
    int lcd -> rVmU
    25:40:void <init>() -> <init>
    45:84:void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.action.ActionUnlockRedstone$1 -> wCeA$1:
    react.action.ActionUnlockRedstone this$0 -> hRDB
    1:29:void <init>(react.action.ActionUnlockRedstone) -> <init>
    34:37:react.api.ISelector get() -> mGIk
    1:1:java.lang.Object get() -> get
react.api.Action -> UcFc:
    java.lang.String name -> name
    java.lang.String description -> description
    java.lang.String status -> qeMm
    java.lang.String[] nodes -> Ihjn
    react.api.ActionHandle handle -> OGxd
    react.api.ActionState state -> qvOa
    react.api.ActionTargetType target -> KoRN
    react.api.ActionType type -> nuVi
    react.api.IActionSource currentSource -> dNGD
    double progress -> RRDQ
    react.glang.GMap defaultSelectors -> psMB
    23:24:void <init>(react.api.ActionType) -> <init>
    26:39:void <init>(java.lang.String,java.lang.String,react.api.ActionHandle,react.api.ActionTargetType,react.api.ActionType) -> <init>
    44:59:react.api.ISelector[] biselect(react.api.ISelector[]) -> IEpw
    65:66:void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> IEpw
    71:71:java.lang.String getName() -> getName
    77:77:java.lang.String getDescription() -> getDescription
    83:83:react.api.ActionHandle getHandleType() -> AWkd
    89:89:react.api.ActionState getState() -> kRDe
    95:95:java.lang.String getStatus() -> getStatus
    101:102:void setStatus(java.lang.String) -> IEpw
    107:107:double getProgress() -> getProgress
    113:114:void setProgress(double) -> setProgress
    119:119:react.api.ActionTargetType getTarget() -> YfcL
    125:125:react.api.ActionType getType() -> rpKU
    131:131:react.glang.GMap getDefaultSelectors() -> NMRL
    137:146:void act(react.api.IActionSource,react.api.ISelector[]) -> VUHt
    151:152:void completeAction() -> wCeA
    157:157:react.api.IActionSource getCurrentSource() -> UcFc
    163:163:java.lang.String[] getNodes() -> AFlA
    169:170:void setNodes(java.lang.String[]) -> IEpw
    void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
react.api.ActionAlreadyRunningException -> AFlA:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionException -> bOYT:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionHandle -> kHrO:
    react.api.ActionHandle AUTOMATIC -> xYAF
    react.api.ActionHandle MANUAL -> WrTq
    react.api.ActionHandle MUTEX -> nmEf
    react.api.ActionHandle[] ENUM$VALUES -> nSRm
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionHandle[] values() -> values
    1:1:react.api.ActionHandle valueOf(java.lang.String) -> valueOf
react.api.ActionNotRunningException -> ivRC:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.api.ActionState -> pOot:
    react.api.ActionState IDLE -> qdmA
    react.api.ActionState RUNNING -> kAXg
    react.api.ActionState[] ENUM$VALUES -> AHDG
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionState[] values() -> values
    1:1:react.api.ActionState valueOf(java.lang.String) -> valueOf
react.api.ActionTargetType -> YgBo:
    react.api.ActionTargetType POSITIONAL -> tvgE
    react.api.ActionTargetType SYSTEM -> clfU
    react.api.ActionTargetType[] ENUM$VALUES -> BtyL
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActionTargetType[] values() -> values
    1:1:react.api.ActionTargetType valueOf(java.lang.String) -> valueOf
react.api.ActionType -> LiMg:
    react.api.ActionType FIX_LIGHTING -> ncsg
    react.api.ActionType UNLOCK_FLUID -> ydSm
    react.api.ActionType LOCK_FLUID -> baRc
    react.api.ActionType UNLOCK_HOPPER -> AaTu
    react.api.ActionType LOCK_HOPPER -> yKFM
    react.api.ActionType UNLOCK_REDSTONE -> uOYv
    react.api.ActionType LOCK_REDSTONE -> kImA
    react.api.ActionType CULL_ENTITIES -> agDG
    react.api.ActionType COLLECT_GARBAGE -> MdYb
    react.api.ActionType PURGE_ENTITIES -> pbMl
    react.api.ActionType PURGE_CHUNKS -> BKHV
    java.lang.String name -> name
    java.lang.String description -> description
    react.api.ActionHandle handle -> OGxd
    react.api.ActionTargetType target -> KoRN
    react.api.ActionType[] ENUM$VALUES -> GRHH
    5:17:void <clinit>() -> <clinit>
    24:30:void <init>(java.lang.String,int,react.api.ActionHandle,react.api.ActionTargetType,java.lang.String,java.lang.String) -> <init>
    34:34:java.lang.String getName() -> getName
    39:39:java.lang.String getDescription() -> getDescription
    44:44:react.api.ActionHandle getHandle() -> bOYT
    49:49:react.api.ActionTargetType getTarget() -> YfcL
    1:1:react.api.ActionType[] values() -> values
    1:1:react.api.ActionType valueOf(java.lang.String) -> valueOf
react.api.ActivationRangeType -> fAsQ:
    react.api.ActivationRangeType ANIMALS -> xHCO
    react.api.ActivationRangeType MONSTERS -> nKFh
    react.api.ActivationRangeType MISC -> ifKJ
    react.api.ActivationRangeType[] ENUM$VALUES -> VxEh
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ActivationRangeType[] values() -> values
    1:1:react.api.ActivationRangeType valueOf(java.lang.String) -> valueOf
react.api.Address -> CUas:
    int value() -> value
react.api.Async -> Sdoy:
react.api.CPUBenchmark -> wmvi:
    org.bukkit.command.CommandSender sender -> sender
    int score -> proF
    java.lang.Runnable onFinish -> pbMv
    16:23:void <init>(org.bukkit.command.CommandSender) -> <init>
    27:29:void <init>(org.bukkit.command.CommandSender,java.lang.Runnable) -> <init>
    34:86:void run() -> run
    90:90:org.bukkit.command.CommandSender getSender() -> getSender
    95:95:int getScore() -> getScore
    100:100:java.lang.Runnable getOnFinish() -> kHrO
    12:12:org.bukkit.command.CommandSender access$0(react.api.CPUBenchmark) -> IEpw
    13:13:int access$1(react.api.CPUBenchmark) -> VUHt
    14:14:java.lang.Runnable access$2(react.api.CPUBenchmark) -> uxtE
react.api.CPUBenchmark$1 -> wmvi$1:
    react.api.CPUBenchmark this$0 -> tCep
    1:34:void <init>(react.api.CPUBenchmark) -> <init>
    39:40:void run() -> run
react.api.CPUBenchmark$2 -> wmvi$2:
    react.api.CPUBenchmark this$0 -> tCep
    1:72:void <init>(react.api.CPUBenchmark) -> <init>
    77:84:void run() -> run
react.api.CPUResult -> oxBc:
    react.api.CPUResult ULTRA_SLOW -> FpgN
    react.api.CPUResult VERY_SLOW -> lnqr
    react.api.CPUResult SLOW -> XJfl
    react.api.CPUResult AVERAGE -> JkrH
    react.api.CPUResult GOOD -> DjaQ
    react.api.CPUResult FAST -> hACr
    react.api.CPUResult VERY_FAST -> Gbhh
    react.api.CPUResult ULTRA_FAST -> NpNj
    java.lang.String m -> gqFH
    react.api.CPUResult[] ENUM$VALUES -> IGJl
    3:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,java.lang.String) -> <init>
    24:24:java.lang.String toString() -> toString
    29:64:java.lang.String c(int) -> IEpw
    1:1:react.api.CPUResult[] values() -> values
    1:1:react.api.CPUResult valueOf(java.lang.String) -> valueOf
react.api.CacheBase -> AiNf:
    react.glang.GMap cache -> dpLK
    11:14:void <init>() -> <init>
    19:19:react.glang.GSet get(java.lang.Object) -> VUHt
    25:31:void put(java.lang.Object,java.lang.Object) -> put
    36:37:void clear(java.lang.Object) -> uxtE
    42:43:void clear() -> clear
    48:48:react.glang.GList k() -> ivRC
    54:54:boolean has(java.lang.Object) -> KDHU
react.api.Capabilities -> wejS:
    react.api.Capabilities DUAL_WIELD -> mPRd
    react.api.Capabilities SCOREBOARD -> RkXK
    react.api.Capabilities HOPPERS -> cJdb
    react.api.Capabilities ATTRIBUTES -> mGbD
    react.api.Capabilities ENTITY_AI -> IFix
    react.api.Capabilities ACTION_BAR -> Svjo
    react.api.Capabilities ENTITY_NAMES -> ntvq
    react.surge.util.ProtocolRange r -> uXJI
    java.lang.String n -> BKHj
    react.api.Capabilities[] ENUM$VALUES -> HDHd
    10:18:void <clinit>() -> <clinit>
    23:27:void <init>(java.lang.String,int,java.lang.String,react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:boolean isCapable() -> pOot
    42:43:void sendNotCapable(org.bukkit.command.CommandSender) -> IEpw
    47:48:void sendCapable(org.bukkit.command.CommandSender) -> VUHt
    1:1:react.api.Capabilities[] values() -> values
    1:1:react.api.Capabilities valueOf(java.lang.String) -> valueOf
react.api.ChunkIssue -> AWnW:
    react.api.ChunkIssue ENTITY -> QOCd
    react.api.ChunkIssue HOPPER -> qSly
    react.api.ChunkIssue REDSTONE -> sHrK
    react.api.ChunkIssue FLUID -> TWmq
    react.api.ChunkIssue PHYSICS -> VxHS
    react.api.ChunkIssue[] ENUM$VALUES -> jypV
    3:9:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.ChunkIssue[] values() -> values
    1:1:react.api.ChunkIssue valueOf(java.lang.String) -> valueOf
react.api.Clip -> WFke:
    double min() -> min
    double max() -> max
react.api.CommandSenderActionSource -> pYEs:
    org.bukkit.command.CommandSender sender -> sender
    11:14:void <init>(org.bukkit.command.CommandSender) -> <init>
    18:18:org.bukkit.command.CommandSender getSender() -> getSender
    24:25:void sendResponse(java.lang.String) -> VUHt
    30:31:void sendResponseSuccess(java.lang.String) -> uxtE
    36:37:void sendResponseError(java.lang.String) -> KDHU
    42:43:void sendResponseActing(java.lang.String) -> kkWN
react.api.ConsoleActionSource -> EKIh:
    7:7:void <init>() -> <init>
    12:13:void sendResponse(java.lang.String) -> VUHt
    18:19:void sendResponseSuccess(java.lang.String) -> uxtE
    24:25:void sendResponseError(java.lang.String) -> KDHU
    30:31:void sendResponseActing(java.lang.String) -> kkWN
react.api.CullList -> SBpB:
    react.glang.GSet toCull -> GRIg
    10:13:void <init>() -> <init>
    17:18:void add(org.bukkit.entity.Entity) -> kkWN
    22:22:boolean hasNext() -> hasNext
    27:29:org.bukkit.entity.Entity pop() -> YgBo
react.api.DTest -> SCQO:
    3:3:void <init>() -> <init>
    7:58:int test() -> LiMg
react.api.EntityFlag -> HSrV:
    react.api.EntityFlag NAMED -> ELCi
    react.api.EntityFlag TAMED -> dMkB
    react.api.EntityFlag STACKED -> uiOS
    react.api.EntityFlag RIDDEN -> WHFn
    react.api.EntityFlag LEASHED -> nJgM
    java.lang.String m -> gqFH
    react.api.EntityFlag[] ENUM$VALUES -> ELDP
    8:14:void <clinit>() -> <clinit>
    18:21:void <init>(java.lang.String,int,java.lang.String) -> <init>
    25:35:react.glang.GSet getFlags(org.bukkit.entity.Entity) -> mNyO
    40:60:boolean is(org.bukkit.entity.Entity) -> YoSi
    66:66:java.lang.String toString() -> toString
    1:1:react.api.EntityFlag[] values() -> values
    1:1:react.api.EntityFlag valueOf(java.lang.String) -> valueOf
react.api.EntityGroup -> mGLN:
    react.glang.GSet entityTypes -> vuCE
    10:13:void <init>() -> <init>
    17:17:react.glang.GSet getEntityTypes() -> fAsQ
react.api.EntitySample -> XcbO:
    react.glang.GMap counts -> KfgG
    react.glang.GMap sets -> GslX
    15:19:void <init>() -> <init>
    23:29:void <init>(org.bukkit.Chunk) -> <init>
    33:40:react.glang.GList getAll() -> CUas
    45:45:react.glang.GList getTypes() -> Sdoy
    50:57:int total() -> wmvi
    62:67:int get(org.bukkit.entity.EntityType) -> IEpw
    72:79:react.glang.GSet getSet(org.bukkit.entity.EntityType) -> VUHt
    84:96:void add(org.bukkit.entity.Entity) -> kkWN
react.api.Experimental -> AyqF:
react.api.IAction -> iCOW:
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    react.api.ActionHandle getHandleType() -> AWkd
    void act(react.api.IActionSource,react.api.ISelector[]) -> VUHt
    void enact(react.api.IActionSource,react.api.ISelector[]) -> IEpw
    react.api.ActionState getState() -> kRDe
    react.api.ActionTargetType getTarget() -> YfcL
    void setNodes(java.lang.String[]) -> IEpw
    java.lang.String[] getNodes() -> AFlA
    java.lang.String getStatus() -> getStatus
    void setStatus(java.lang.String) -> IEpw
    double getProgress() -> getProgress
    void setProgress(double) -> setProgress
    react.api.ActionType getType() -> rpKU
    react.glang.GMap getDefaultSelectors() -> NMRL
    void setDefaultSelector(java.lang.Class,react.glang.AccessCallback) -> IEpw
    react.api.ISelector[] biselect(react.api.ISelector[]) -> IEpw
    react.api.IActionSource getCurrentSource() -> UcFc
    void completeAction() -> wCeA
react.api.IActionSource -> Kvmy:
    void sendResponse(java.lang.String) -> VUHt
    void sendResponseSuccess(java.lang.String) -> uxtE
    void sendResponseError(java.lang.String) -> KDHU
    void sendResponseActing(java.lang.String) -> kkWN
react.api.ICache -> nJNX:
    react.glang.GSet get(java.lang.Object) -> VUHt
    void put(java.lang.Object,java.lang.Object) -> put
    void clear(java.lang.Object) -> uxtE
    void clear() -> clear
    boolean has(java.lang.Object) -> KDHU
    react.glang.GList k() -> ivRC
react.api.ICommand -> xhlj:
    java.lang.String getCommand() -> getCommand
    java.lang.String[] getAliases() -> oxBc
    java.lang.String[] getPermissions() -> AiNf
    java.lang.String getUsage() -> getUsage
    java.lang.String getDescription() -> getDescription
    java.lang.String getDescriptionForParameter(java.lang.String) -> mNyO
    react.api.SideGate getSideGate() -> wejS
    void registerParameterDescription(java.lang.String,java.lang.String) -> IEpw
    void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.api.IRecord -> VChl:
    java.lang.String getRecordType() -> AWnW
    long getRecordTime() -> WFke
    react.json.JSONObject toJSON() -> pYEs
    java.lang.Object getRecordObject() -> EKIh
    void fromJSON(react.json.JSONObject) -> IEpw
react.api.IRecordBook -> PRyP:
    int getSize() -> getSize
    react.api.IRecord getRecord(long) -> IEpw
    long getOldestRecordTime() -> SBpB
    void addRecord(react.api.IRecord) -> IEpw
    long getLatestRecordTime() -> SCQO
    int countRecords(long,long) -> IEpw
    react.glang.GMap getRecords(long,long) -> VUHt
    int purgeRecordsBefore(long) -> VUHt
    void save() -> save
    java.io.File getFile() -> getFile
react.api.ISampler -> Jska:
    java.lang.String getID() -> getID
    react.graph.IFormatter getFormatter() -> HSrV
    java.lang.String getName() -> getName
    java.lang.String getDescription() -> getDescription
    void setID(java.lang.String) -> setID
    void setName(java.lang.String) -> setName
    void setDescription(java.lang.String) -> setDescription
    react.surge.util.C getColor() -> mGLN
    react.surge.util.C getAltColor() -> XcbO
    void setColor(react.surge.util.C,react.surge.util.C) -> IEpw
    int getInterval() -> getInterval
    void setInterval(int) -> VUHt
    void sample() -> AyqF
    java.lang.String get() -> get
    void construct() -> iCOW
    void setValue(double) -> setValue
    double getValue() -> getValue
react.api.ISelector -> iTPX:
    react.api.SelectionMode getMode() -> Kvmy
    java.lang.Class getType() -> getType
    boolean can(java.lang.Object) -> kkWN
    react.glang.GSet getList() -> nJNX
    react.glang.GSet getPossibilities() -> xhlj
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> mNyO
    java.lang.String getName() -> getName
react.api.Injection -> OjGl:
    react.api.InjectionMethod value() -> VChl
react.api.InjectionMethod -> Whmh:
    react.api.InjectionMethod SWAP -> NpQN
    react.api.InjectionMethod SUBSTRATE -> sIUj
    react.api.InjectionMethod RELOAD -> VEDK
    react.api.InjectionMethod[] ENUM$VALUES -> hIWD
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.InjectionMethod[] values() -> values
    1:1:react.api.InjectionMethod valueOf(java.lang.String) -> valueOf
react.api.Language -> eHCi:
    java.lang.String value() -> value
react.api.MSampler -> AGNa:
    6:6:void <init>() -> <init>
    10:10:react.surge.server.SuperSampler ss() -> PRyP
react.api.MonitorHeading -> JYwS:
    react.api.ISampler head -> mXeJ
    react.glang.GList children -> XmKc
    java.lang.String name -> name
    13:18:void <init>(java.lang.String,react.api.ISampler) -> <init>
    22:23:void addSampler(react.api.ISampler) -> IEpw
    27:27:react.api.ISampler getHead() -> Jska
    32:33:void setHead(react.api.ISampler) -> VUHt
    37:37:react.glang.GList getChildren() -> iTPX
    42:42:java.lang.String getHeadText() -> OjGl
    47:60:java.lang.String getChildText() -> Whmh
    65:65:java.lang.String getName() -> getName
    70:71:void setName(java.lang.String) -> setName
    75:76:void setChildren(react.glang.GList) -> IEpw
react.api.NoiseGenerator -> HSqN:
    int[] perm -> perm
    double offsetX -> offsetX
    double offsetY -> offsetY
    double offsetZ -> offsetZ
    6:8:void <init>() -> <init>
    22:22:int floor(double) -> floor
    27:27:double fade(double) -> fade
    32:32:double lerp(double,double,double) -> lerp
    37:40:double grad(int,double,double,double) -> grad
    52:52:double noise(double) -> noise
    66:66:double noise(double,double) -> noise
    double noise(double,double,double) -> noise
    98:98:double noise(double,int,double,double) -> noise
    119:119:double noise(double,int,double,double,boolean) -> noise
    140:140:double noise(double,double,int,double,double) -> noise
    163:163:double noise(double,double,int,double,double,boolean) -> noise
    186:186:double noise(double,double,double,int,double,double) -> noise
    211:229:double noise(double,double,double,int,double,double,boolean) -> noise
react.api.OctaveGenerator -> dnsN:
    react.api.NoiseGenerator[] octaves -> FyXp
    double xScale -> xScale
    double yScale -> yScale
    double zScale -> zScale
    9:16:void <init>(react.api.NoiseGenerator[]) -> <init>
    28:31:void setScale(double) -> setScale
    40:40:double getXScale() -> getXScale
    51:52:void setXScale(double) -> setXScale
    61:61:double getYScale() -> getYScale
    72:73:void setYScale(double) -> setYScale
    82:82:double getZScale() -> getZScale
    93:94:void setZScale(double) -> setZScale
    103:103:react.api.NoiseGenerator[] getOctaves() -> eHCi
    120:120:double noise(double,double,double) -> noise
    139:139:double noise(double,double,double,boolean) -> noise
    158:158:double noise(double,double,double,double) -> noise
    179:179:double noise(double,double,double,double,boolean) -> noise
    200:200:double noise(double,double,double,double,double) -> noise
    223:245:double noise(double,double,double,double,double,boolean) -> noise
react.api.PerlinNoiseGenerator -> qcwd:
    int[][] grad3 -> grad3
    react.api.PerlinNoiseGenerator instance -> PBpM
    13:14:void <clinit>() -> <clinit>
    16:24:void <init>() -> <init>
    34:35:void <init>(long) -> <init>
    43:63:void <init>(java.util.Random) -> <init>
    75:75:double getNoise(double) -> getNoise
    90:90:double getNoise(double,double) -> getNoise
    107:107:double getNoise(double,double,double) -> getNoise
    117:117:react.api.PerlinNoiseGenerator getInstance() -> AGNa
    123:154:double noise(double,double,double) -> noise
    173:173:double getNoise(double,int,double,double) -> getNoise
    194:194:double getNoise(double,double,int,double,double) -> getNoise
    217:217:double getNoise(double,double,double,int,double,double) -> getNoise
react.api.PerlinOctaveGenerator -> TyVw:
    21:22:void <init>(long,int) -> <init>
    34:35:void <init>(java.util.Random,int) -> <init>
    39:46:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> IEpw
react.api.Permissable -> LrAF:
    react.api.Permissable ACCESS -> gpfW
    react.api.Permissable MONITOR -> FVuQ
    react.api.Permissable MONITOR_TITLE -> IrBE
    react.api.Permissable MONITOR_ACTIONLOG -> QVuD
    react.api.Permissable MONITOR_MAP -> ryUt
    react.api.Permissable MONITOR_ENVIRONMENT -> UJPM
    react.api.Permissable MONITOR_GLASSES -> QphG
    react.api.Permissable MONITOR_CHUNK_BLAME -> WGeE
    react.api.Permissable RAI_MONITOR -> AGgF
    react.api.Permissable RAI_CONTROL -> PmeE
    react.api.Permissable RAI_ACCESS -> ESsA
    react.api.Permissable RAI -> lfcW
    react.api.Permissable ACT -> HCjK
    react.api.Permissable RELOAD -> JtdW
    java.lang.String node -> qdpg
    react.api.Permissable[] ENUM$VALUES -> QWVH
    7:22:void <clinit>() -> <clinit>
    26:37:void <init>(java.lang.String,int,java.lang.String) -> <init>
    41:41:boolean has(org.bukkit.command.CommandSender) -> uxtE
    46:46:java.lang.String getNode() -> JYwS
    1:1:react.api.Permissable[] values() -> values
    1:1:react.api.Permissable valueOf(java.lang.String) -> valueOf
react.api.PlayerActionSource -> SeRh:
    org.bukkit.entity.Player p -> tCjQ
    11:14:void <init>(org.bukkit.entity.Player) -> <init>
    18:18:org.bukkit.entity.Player getPlayer() -> getPlayer
    24:25:void sendResponse(java.lang.String) -> VUHt
    30:31:void sendResponseSuccess(java.lang.String) -> uxtE
    36:37:void sendResponseError(java.lang.String) -> KDHU
    42:43:void sendResponseActing(java.lang.String) -> kkWN
react.api.PluginSelfDeleter -> CLry:
    org.bukkit.plugin.Plugin plugin -> plugin
    java.io.File f -> QEua
    java.lang.Runnable r -> OasD
    27:32:void <init>(org.bukkit.plugin.Plugin,java.io.File,java.lang.Runnable) -> <init>
    38:164:void run() -> run
    168:182:void del(java.io.File) -> IEpw
react.api.RAIActionSource -> WFjs:
    5:5:void <init>() -> <init>
    10:11:void sendResponse(java.lang.String) -> VUHt
    16:17:void sendResponseSuccess(java.lang.String) -> uxtE
    22:23:void sendResponseError(java.lang.String) -> KDHU
    28:29:void sendResponseActing(java.lang.String) -> kkWN
react.api.ReactCommand -> dxEp:
    java.lang.String command -> command
    java.lang.String[] aliases -> aliases
    java.lang.String[] permissions -> GcLx
    java.lang.String usage -> uqbC
    java.lang.String description -> description
    react.glang.GMap parameterDescriptions -> iemk
    react.api.SideGate sideGate -> bOwJ
    15:18:void <init>() -> <init>
    23:23:java.lang.String getDescriptionForParameter(java.lang.String) -> mNyO
    29:30:void registerParameterDescription(java.lang.String,java.lang.String) -> IEpw
    35:35:java.lang.String getCommand() -> getCommand
    41:41:java.lang.String[] getAliases() -> oxBc
    47:47:java.lang.String[] getPermissions() -> AiNf
    53:53:java.lang.String getUsage() -> getUsage
    59:59:java.lang.String getDescription() -> getDescription
    65:65:react.api.SideGate getSideGate() -> wejS
react.api.ReactException -> JsjS:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
    10:13:void <init>() -> <init>
react.api.ReactPlayer -> wnYh:
    react.glang.GMap keystore -> OYcA
    boolean monitoring -> monitoring
    boolean actionlogging -> dNNb
    boolean glasses -> FFWh
    boolean mapping -> fnGA
    int monitorSelection -> gNfB
    int plays -> iwPD
    boolean monitorPosted -> KMVi
    int monitorLastSelection -> QWYD
    int switchNotification -> axIf
    int hotbarSlot -> vdCa
    boolean shift -> Tqca
    int scroll -> OjcM
    double lastHeight -> erqq
    boolean heightMovement -> DjdC
    org.bukkit.entity.Player p -> tCjQ
    24:39:void <clinit>() -> <clinit>
    42:89:void <init>(org.bukkit.entity.Player) -> <init>
    95:102:void save() -> save
    108:115:void load() -> load
    119:119:boolean isMonitoring() -> HSqN
    124:124:boolean isMapping() -> dnsN
    129:129:org.bukkit.entity.Player getP() -> qcwd
    134:136:void setMonitoring(boolean) -> VUHt
    140:142:void setMapping(boolean) -> uxtE
    146:146:int getMonitorSelection() -> TyVw
    151:153:void setMonitorSelection(int) -> uxtE
    157:157:int getHotbarSlot() -> LrAF
    162:164:void setHotbarSlot(int) -> KDHU
    168:168:boolean isShifting() -> SeRh
    173:175:void setShifting(boolean) -> KDHU
    179:179:boolean isShift() -> CLry
    184:186:void setShift(boolean) -> kkWN
    190:190:int getScroll() -> WFjs
    195:197:void setScroll(int) -> kkWN
    201:201:int getMonitorLastSelection() -> dxEp
    206:208:void setMonitorLastSelection(int) -> mNyO
    212:213:void setP(org.bukkit.entity.Player) -> IEpw
    217:217:double getLastHeight() -> JsjS
    222:224:void setLastHeight(double) -> IEpw
    228:228:boolean isHeightMovement() -> wnYh
    233:235:void setHeightMovement(boolean) -> mNyO
    239:239:int getSwitchNotification() -> qcwE
    244:246:void setSwitchNotification(int) -> YoSi
    250:250:boolean getMonitorPosted() -> qJeY
    255:257:void setMonitorPosted(boolean) -> YoSi
    261:261:int getPlays() -> rUyD
    266:268:void setPlays(int) -> EBVa
    272:272:boolean isGlasses() -> qKFT
    277:279:void setGlasses(boolean) -> EBVa
    283:283:boolean isActionlogging() -> kHtC
    288:290:void setActionlogging(boolean) -> tSmm
react.api.Record -> qcwE:
    java.lang.String recordType -> vkrN
    long recordTime -> RRJK
    java.lang.Object object -> object
    11:15:void <init>(long,java.lang.String) -> <init>
    19:21:void <init>(long,java.lang.Object,java.lang.String) -> <init>
    26:26:java.lang.String getRecordType() -> AWnW
    32:32:long getRecordTime() -> WFke
    38:38:java.lang.Object getRecordObject() -> EKIh
    react.json.JSONObject toJSON() -> pYEs
    void fromJSON(react.json.JSONObject) -> IEpw
react.api.RecordBook -> qJeY:
    java.io.File recordFile -> EmgH
    react.json.JSONObject js -> GAHy
    java.lang.String type -> type
    20:48:void <init>(java.lang.String,java.io.File) -> <init>
    55:62:void save() -> save
    67:67:int getSize() -> getSize
    73:74:void addRecord(react.api.IRecord) -> IEpw
    79:87:react.api.IRecord getRecord(long) -> IEpw
    react.api.IRecord createDummyRecord(long,java.lang.String) -> IEpw
    95:107:long getOldestRecordTime() -> SBpB
    113:125:long getLatestRecordTime() -> SCQO
    130:130:boolean within(long,long,long) -> IEpw
    136:144:int countRecords(long,long) -> IEpw
    150:162:react.glang.GMap getRecords(long,long) -> VUHt
    168:181:int purgeRecordsBefore(long) -> VUHt
    187:187:java.io.File getFile() -> getFile
    192:198:void write() -> write
    202:214:void read() -> read
react.api.Restricted -> rUyD:
react.api.SampledChunk -> qKFT:
    org.bukkit.Chunk c -> LaYr
    react.glang.GMap counts -> KfgG
    11:15:void <init>(org.bukkit.Chunk) -> <init>
    19:20:void dec() -> kREl
    26:38:void hit(react.api.ChunkIssue,int) -> IEpw
    42:42:org.bukkit.Chunk getC() -> HTSD
    47:47:react.glang.GMap getCounts() -> cIpX
react.api.SampledType -> kHtC:
    react.api.SampledType ENTITY_TIME_LOCK -> FVwQ
    react.api.SampledType TILE_TIME_LOCK -> XAxT
    react.api.SampledType ENTITY_TIME -> MKJu
    react.api.SampledType TILE_TIME -> wMSV
    react.api.SampledType ENTITY_DROPTICK -> LHGx
    react.api.SampledType TILE_DROPTICK -> SenD
    react.api.SampledType REDSTONE_TICK_USAGE -> EBrh
    react.api.SampledType REDSTONE_TICK -> pkBG
    react.api.SampledType REDSTONE_SECOND -> AOyS
    react.api.SampledType REDSTONE_TIME -> ifLx
    react.api.SampledType HOPPER_TICK_USAGE -> vSAR
    react.api.SampledType HOPPER_TICK -> rpft
    react.api.SampledType HOPPER_SECOND -> rhWM
    react.api.SampledType HOPPER_TIME -> UdDg
    react.api.SampledType FLUID_TICK_USAGE -> lgEw
    react.api.SampledType FLUID_TICK -> VgGm
    react.api.SampledType FLUID_SECOND -> KEHP
    react.api.SampledType FLUID_TIME -> OkFp
    react.api.SampledType TPS -> JRee
    react.api.SampledType TICK -> HDPC
    react.api.SampledType TIU -> IiUa
    react.api.SampledType MEM -> ELGn
    react.api.SampledType FREEMEM -> KfkB
    react.api.SampledType MAXMEM -> VEGs
    react.api.SampledType ALLOCMEM -> eatS
    react.api.SampledType MAHS -> MKNb
    react.api.SampledType CHK_TIME -> aEFv
    react.api.SampledType EXPLOSION_TIME -> OHdG
    react.api.SampledType CHK -> CNPi
    react.api.SampledType ATASK -> OsXR
    react.api.SampledType STASK -> vkti
    react.api.SampledType CHKS -> stNU
    react.api.SampledType ENT -> ePpt
    react.api.SampledType ENTLIV -> ThsB
    react.api.SampledType ENTDROP -> sHxT
    react.api.SampledType ENTTILE -> nJjd
    java.lang.String node -> qdpg
    react.api.SampledType[] ENUM$VALUES -> hcMG
    6:43:void <clinit>() -> <clinit>
    49:49:react.api.ISampler get() -> wvnE
    55:55:java.lang.String toString() -> toString
    58:69:void <init>(java.lang.String,int,java.lang.String) -> <init>
    73:73:java.lang.String getNode() -> JYwS
    1:1:react.api.SampledType[] values() -> values
    1:1:react.api.SampledType valueOf(java.lang.String) -> valueOf
react.api.Sampler -> kREl:
    double value -> value
    java.lang.String id -> id
    java.lang.String name -> name
    java.lang.String description -> description
    react.surge.util.C color -> lEFA
    react.surge.util.C altColor -> kAad
    int interval -> fmfx
    17:20:void <init>() -> <init>
    25:25:java.lang.String getID() -> getID
    31:31:java.lang.String getName() -> getName
    37:37:java.lang.String getDescription() -> getDescription
    43:43:react.surge.util.C getColor() -> mGLN
    49:49:react.surge.util.C getAltColor() -> XcbO
    55:55:int getInterval() -> getInterval
    void sample() -> AyqF
    void construct() -> iCOW
    java.lang.String get() -> get
    70:71:void setValue(double) -> setValue
    76:76:double getValue() -> getValue
    82:83:void setID(java.lang.String) -> setID
    88:89:void setName(java.lang.String) -> setName
    94:95:void setDescription(java.lang.String) -> setDescription
    100:102:void setColor(react.surge.util.C,react.surge.util.C) -> IEpw
    107:108:void setInterval(int) -> VUHt
react.api.Sector -> HTSD:
    int value() -> value
react.api.SelectionException -> cIpX:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectionMode -> wvnE:
    react.api.SelectionMode WHITELIST -> xjKA
    react.api.SelectionMode BLACKLIST -> pjbm
    react.api.SelectionMode[] ENUM$VALUES -> quuw
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.api.SelectionMode[] values() -> values
    1:1:react.api.SelectionMode valueOf(java.lang.String) -> valueOf
react.api.Selector -> Lyrk:
    java.lang.Class objectType -> RAJm
    react.api.SelectionMode mode -> wLsa
    react.glang.GSet list -> KUhT
    react.glang.GSet possibilities -> fvWl
    int popoff -> ivok
    12:12:void <clinit>() -> <clinit>
    14:20:void <init>(java.lang.Class,react.api.SelectionMode) -> <init>
    25:25:react.api.SelectionMode getMode() -> Kvmy
    31:31:java.lang.Class getType() -> getType
    37:37:boolean can(java.lang.Object) -> kkWN
    43:43:react.glang.GSet getList() -> nJNX
    49:49:react.glang.GSet getPossibilities() -> xhlj
    int parse(org.bukkit.command.CommandSender,java.lang.String) -> mNyO
    57:93:react.api.ISelector createSelector(org.bukkit.command.CommandSender,java.lang.String) -> YoSi
    98:100:int pop() -> pop
react.api.SelectorEntityType -> LFms:
    11:17:void <init>(react.api.SelectionMode) -> <init>
    21:22:void add(org.bukkit.entity.EntityType) -> uxtE
    27:60:int parse(org.bukkit.command.CommandSender,java.lang.String) -> mNyO
    65:113:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> EBVa
    119:119:java.lang.String getName() -> getName
react.api.SelectorParseException -> ThYI:
    long serialVersionUID -> serialVersionUID
    7:8:void <init>(java.lang.String) -> <init>
react.api.SelectorPosition -> BkuH:
    19:20:void <init>() -> <init>
    24:25:void add(org.bukkit.Chunk) -> VUHt
    29:30:void add(org.bukkit.Chunk,int) -> IEpw
    34:38:void add(org.bukkit.World) -> mNyO
    42:46:void addAll() -> Lyrk
    51:94:int parse(org.bukkit.command.CommandSender,java.lang.String) -> mNyO
    99:333:react.glang.GSet parseNode(org.bukkit.command.CommandSender,java.lang.String) -> EBVa
    339:339:java.lang.String getName() -> getName
react.api.SelectorTime -> CfhL:
    9:10:void <init>() -> <init>
    14:16:void set(java.lang.Long) -> set
    20:20:long get() -> get
    26:81:int parse(org.bukkit.command.CommandSender,java.lang.String) -> mNyO
    87:87:java.lang.String getName() -> getName
react.api.Side -> QxbI:
    react.api.Side PLAYERS -> kuFf
    react.api.Side CONSOLE -> NhDC
    java.lang.String ss -> dyDB
    react.api.Side[] ENUM$VALUES -> jrFq
    6:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String) -> <init>
    20:20:java.lang.String ss() -> LFms
    25:30:react.api.Side get(org.bukkit.command.CommandSender) -> KDHU
    1:1:react.api.Side[] values() -> values
    1:1:react.api.Side valueOf(java.lang.String) -> valueOf
react.api.SideGate -> Wqag:
    react.api.SideGate PLAYERS_ONLY -> prwL
    react.api.SideGate CONSOLES_ONLY -> KDhs
    react.api.SideGate ANYTHING -> minM
    int[] $SWITCH_TABLE$react$api$SideGate -> uPCg
    react.api.SideGate[] ENUM$VALUES -> nKOJ
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:34:boolean supports(react.api.Side) -> IEpw
    1:1:react.api.SideGate[] values() -> values
    1:1:react.api.SideGate valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$api$SideGate() -> ThYI
react.api.SimplexNoiseGenerator -> Aqbh:
    double SQRT_3 -> SQRT_3
    double SQRT_5 -> SQRT_5
    double F2 -> F2
    double G2 -> G2
    double G22 -> G22
    double F3 -> F3
    double G3 -> G3
    double F4 -> F4
    double G4 -> G4
    double G42 -> G42
    double G43 -> G43
    double G44 -> G44
    int[][] grad4 -> grad4
    int[][] simplex -> simplex
    double offsetW -> offsetW
    react.api.SimplexNoiseGenerator instance -> DHen
    15:30:void <clinit>() -> <clinit>
    34:35:void <init>() -> <init>
    45:46:void <init>(long) -> <init>
    56:58:void <init>(java.util.Random) -> <init>
    62:62:double dot(int[],double,double) -> dot
    67:67:double dot(int[],double,double,double) -> dot
    72:72:double dot(int[],double,double,double,double) -> dot
    85:85:double getNoise(double) -> getNoise
    100:100:double getNoise(double,double) -> getNoise
    117:117:double getNoise(double,double,double) -> getNoise
    136:136:double getNoise(double,double,double,double) -> getNoise
    142:297:double noise(double,double,double) -> noise
    303:385:double noise(double,double) -> noise
    404:563:double noise(double,double,double,double) -> noise
    573:573:react.api.SimplexNoiseGenerator getInstance() -> BkuH
react.api.SimplexOctaveGenerator -> Jslm:
    double wScale -> JSIO
    22:23:void <init>(long,int) -> <init>
    10:36:void <init>(java.util.Random,int) -> <init>
    41:43:void setScale(double) -> setScale
    52:52:double getWScale() -> getWScale
    63:64:void setWScale(double) -> setWScale
    86:86:double noise(double,double,double,double,double,double) -> noise
    111:134:double noise(double,double,double,double,double,double,boolean) -> noise
    139:146:react.api.NoiseGenerator[] createOctaves(java.util.Random,int) -> IEpw
react.api.SpecializedTickLimiter -> HmgK:
    double rMaxTime -> sQmG
    long rStartTime -> QEyp
    double rLastTime -> NhEv
    long rMark -> KxON
    double tMaxTime -> fKfa
    react.gmath.Average atimes -> CEam
    react.gmath.Average adropped -> ssnr
    int droppedTicks -> OjiE
    boolean entityTick -> ioDC
    16:30:void <init>(double,boolean) -> <init>
    35:74:void initTick() -> initTick
    79:92:boolean shouldContinue() -> shouldContinue
react.api.SploogeCounter -> CgHq:
    react.glang.GList sources -> XvDb
    react.glang.GList splooge -> IOeV
    react.glang.GSet destroy -> SwVC
    21:104:void <init>(int,int,org.bukkit.Location) -> <init>
    108:155:boolean isValid(org.bukkit.Location,org.bukkit.Location) -> IEpw
    160:160:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location) -> VUHt
    void clipped(org.bukkit.Location) -> IEpw
    void finished() -> finished
    boolean isAllowedSplooge(org.bukkit.Location) -> VUHt
    boolean isAllowedSource(org.bukkit.Location) -> uxtE
    18:18:react.glang.GList access$0(react.api.SploogeCounter) -> IEpw
    17:17:react.glang.GList access$1(react.api.SploogeCounter) -> VUHt
    19:19:react.glang.GSet access$2(react.api.SploogeCounter) -> uxtE
react.api.SploogeCounter$1 -> CgHq$1:
    react.api.SploogeCounter this$0 -> iMAC
    java.util.Iterator val$it -> iwSk
    org.bukkit.Location val$start -> RlCH
    int val$maxDistance -> oVac
    1:31:void <init>(react.api.SploogeCounter,java.util.Iterator,org.bukkit.Location,int) -> <init>
    36:102:void run() -> run
    31:31:react.api.SploogeCounter access$0(react.api.SploogeCounter$1) -> IEpw
react.api.SploogeCounter$1$1 -> CgHq$1$1:
    react.api.SploogeCounter$1 this$1 -> IyyG
    1:89:void <init>(react.api.SploogeCounter$1) -> <init>
    94:100:void run() -> run
react.api.StackTraceList -> WGOD:
    long serialVersionUID -> serialVersionUID
    5:5:void <init>() -> <init>
react.api.StackTraceRecord -> WGOF:
    11:12:void <init>(long,react.glang.GList,java.lang.String) -> <init>
    17:32:react.json.JSONObject toJSON() -> pYEs
    38:49:void fromJSON(react.json.JSONObject) -> IEpw
react.api.StackTraceRecordBook -> OjLF:
    9:10:void <init>(java.lang.String,java.io.File) -> <init>
    15:15:react.api.StackTraceRecord createDummyRecord(long,java.lang.String) -> VUHt
    1:1:react.api.IRecord createDummyRecord(long,java.lang.String) -> IEpw
react.api.StackedEntity -> vsjR:
    org.bukkit.entity.LivingEntity entity -> KEJn
    int count -> count
    double rmx -> LHMm
    20:31:void <init>(org.bukkit.entity.LivingEntity,int) -> <init>
    36:41:double getMaxHealth(org.bukkit.entity.LivingEntity) -> IEpw
    46:46:int getAbsoluteMaxCount() -> CfhL
    51:51:int getMaxCount(org.bukkit.entity.LivingEntity) -> VUHt
    56:58:void update() -> update
    62:68:void signalSize() -> QxbI
    72:123:void updateHealth() -> Wqag
    127:128:void heal(double) -> VUHt
    132:133:void setHealth(double) -> setHealth
    137:137:int getEffectiveCount() -> Aqbh
    142:142:int getEffectiveCount(double) -> uxtE
    147:147:double getEffectiveMaxHealth(int) -> tSmm
    152:152:double getRealMaxHealth() -> Jslm
    157:157:double getHealth() -> getHealth
    162:168:void setMaxHealth(double) -> setMaxHealth
    173:182:void setMaxHealth(org.bukkit.entity.LivingEntity,double) -> IEpw
    186:186:double getMaxHealth() -> getMaxHealth
    191:191:org.bukkit.entity.LivingEntity getEntity() -> getEntity
    196:196:int getCount() -> getCount
react.api.TitleMonitor -> Whpy:
    react.glang.GList headings -> fmiR
    12:15:void <init>() -> <init>
    19:20:void addHeading(react.api.MonitorHeading) -> IEpw
    24:24:int getMaxSelection() -> HmgK
    29:37:int left(int) -> mGIk
    42:50:int right(int) -> AWkd
    55:55:react.api.MonitorHeading getHeadFor(int) -> kRDe
    60:78:java.lang.String getHotbarHeadFor(int,boolean,react.controller.MonitorController,react.api.ReactPlayer,int) -> IEpw
    83:100:java.lang.String getHotbarFor(int,boolean) -> IEpw
react.api.Unused -> sjaK:
react.binject.BlockInjector -> MIrF:
    react.surge.util.Protocol protocol -> sblt
    java.lang.Class blocksClass -> fCUd
    12:16:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    21:23:void register(int,java.lang.String,java.lang.String,java.lang.Object) -> IEpw
    29:56:void inject() -> CgHq
    61:61:react.surge.util.Protocol getVersion() -> WGOD
react.binject.IBlockInjector -> jyYP:
    void register(int,java.lang.String,java.lang.String,java.lang.Object) -> IEpw
    void add(int,java.lang.String,java.lang.Object) -> IEpw
    java.lang.Object get(java.lang.String) -> get
    void inject() -> CgHq
    react.surge.util.Protocol getVersion() -> WGOD
react.binject.InjectedBlock -> Oijo:
    react.surge.util.Protocol getInjectProtocol() -> WGOF
    java.lang.String getInjectKey() -> OjLF
    java.lang.String getInjectCKey() -> vsjR
    int getInjectId() -> Whpy
react.binject.ReflectionUtil -> romy:
    6:6:void <init>() -> <init>
    10:17:java.lang.Object getOfT(java.lang.Object,java.lang.Class) -> IEpw
    22:22:java.lang.Object get(java.lang.Object,java.lang.String,java.lang.Class) -> IEpw
    27:34:java.lang.Object get(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Class) -> IEpw
    41:54:void setAccessible(java.lang.reflect.Field) -> IEpw
    60:68:void setStatic(java.lang.String,java.lang.Class,java.lang.Object) -> IEpw
    74:80:java.lang.Object get(java.lang.Object,java.lang.reflect.Field,java.lang.Class) -> IEpw
react.binject.V10.BlockInjector10 -> vQfv:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_10_R1.Block get(java.lang.String) -> YoSi
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_10_R1.Block) -> IEpw
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> IEpw
react.binject.V11.BlockInjector11 -> Smdq:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_11_R1.Block get(java.lang.String) -> EBVa
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_11_R1.Block) -> IEpw
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> IEpw
react.binject.V12.BlockInjector12 -> vcIQ:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_12_R1.Block get(java.lang.String) -> tSmm
    28:36:void add(int,java.lang.String,net.minecraft.server.v1_12_R1.Block) -> IEpw
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> IEpw
react.binject.V8.BlockInjector8 -> ugtw:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_8_R3.Block get(java.lang.String) -> mGIk
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_8_R3.Block) -> IEpw
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> IEpw
react.binject.V9.BlockInjector9 -> inER:
    16:17:void <init>(react.surge.util.Protocol,java.lang.Class) -> <init>
    22:22:net.minecraft.server.v1_9_R1.Block get(java.lang.String) -> AWkd
    28:35:void add(int,java.lang.String,net.minecraft.server.v1_9_R1.Block) -> IEpw
    1:1:java.lang.Object get(java.lang.String) -> get
    1:1:void add(int,java.lang.String,java.lang.Object) -> IEpw
react.cache.CachedEntity -> VCij:
    java.util.UUID uid -> ePsP
    int type -> type
    int ticksLived -> ticksLived
    java.lang.String world -> eQTN
    double x -> x
    double y -> y
    double z -> z
    double vx -> LXmJ
    double vy -> oyES
    double vz -> aLvl
    double dx -> wVHa
    double dy -> HfTC
    double dz -> XmQu
    26:41:void <init>(org.bukkit.entity.Entity) -> <init>
    45:51:void apply(org.bukkit.entity.Entity) -> EBVa
    55:55:int getType() -> getType
    60:61:void setType(int) -> setType
    65:65:int getTicksLived() -> getTicksLived
    70:71:void setTicksLived(int) -> setTicksLived
    75:75:java.lang.String getWorld() -> sjaK
    80:81:void setWorld(java.lang.String) -> setWorld
    85:85:double getX() -> getX
    90:91:void setX(double) -> setX
    95:95:double getY() -> getY
    100:101:void setY(double) -> setY
    105:105:double getZ() -> getZ
    110:111:void setZ(double) -> setZ
    115:115:double getVx() -> MIrF
    120:121:void setVx(double) -> KDHU
    125:125:double getVy() -> jyYP
    130:131:void setVy(double) -> kkWN
    135:135:double getVz() -> Oijo
    140:141:void setVz(double) -> mNyO
    145:145:double getDx() -> romy
    150:151:void setDx(double) -> YoSi
    155:155:double getDy() -> vQfv
    160:161:void setDy(double) -> EBVa
    165:165:double getDz() -> Smdq
    170:171:void setDz(double) -> tSmm
    175:175:java.util.UUID getUid() -> vcIQ
    181:206:int hashCode() -> hashCode
    212:255:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityAgeable -> YDbe:
    int age -> OHeC
    boolean ageLock -> JuJo
    boolean breed -> KMYg
    14:19:void <init>(org.bukkit.entity.Ageable) -> <init>
    24:30:void apply(org.bukkit.entity.Entity) -> EBVa
    34:34:int getAge() -> getAge
    39:40:void setAge(int) -> setAge
    44:44:boolean isAgeLock() -> ugtw
    49:50:void setAgeLock(boolean) -> setAgeLock
    54:54:boolean isBreed() -> inER
    59:60:void setBreed(boolean) -> setBreed
    65:70:int hashCode() -> hashCode
    76:89:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityColorable -> jqGx:
    org.bukkit.DyeColor dye -> pkEv
    14:17:void <init>(org.bukkit.material.Colorable) -> <init>
    22:26:void apply(org.bukkit.entity.Entity) -> EBVa
    30:30:org.bukkit.DyeColor getDye() -> VCij
    35:36:void setDye(org.bukkit.DyeColor) -> IEpw
    41:44:int hashCode() -> hashCode
    50:59:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntityLiving -> Huuq:
    react.glang.GList potionEffects -> XJml
    boolean canPickupItems -> wVHU
    org.bukkit.inventory.ItemStack[] armorContents -> DawV
    float fallDistance -> fallDistance
    int fireTicks -> fireTicks
    double health -> HTqc
    double maxHealth -> maxHealth
    int maxAir -> lUgm
    int air -> YhGb
    26:37:void <init>(org.bukkit.entity.LivingEntity) -> <init>
    43:59:void apply(org.bukkit.entity.Entity) -> EBVa
    63:63:react.glang.GList getPotionEffects() -> YDbe
    68:69:void setPotionEffects(react.glang.GList) -> VUHt
    73:73:boolean isCanPickupItems() -> jqGx
    78:79:void setCanPickupItems(boolean) -> setCanPickupItems
    83:83:org.bukkit.inventory.ItemStack[] getArmorContents() -> getArmorContents
    88:89:void setArmorContents(org.bukkit.inventory.ItemStack[]) -> setArmorContents
    93:93:float getFallDistance() -> getFallDistance
    98:99:void setFallDistance(float) -> setFallDistance
    103:103:int getFireTicks() -> getFireTicks
    108:109:void setFireTicks(int) -> setFireTicks
    113:113:double getHealth() -> getHealth
    118:119:void setHealth(double) -> setHealth
    123:123:double getMaxHealth() -> getMaxHealth
    128:129:void setMaxHealth(double) -> setMaxHealth
    133:133:int getMaxAir() -> Huuq
    138:139:void setMaxAir(int) -> YfcL
    143:143:int getAir() -> XIpD
    148:149:void setAir(int) -> rpKU
    154:168:int hashCode() -> hashCode
    174:204:boolean equals(java.lang.Object) -> equals
react.cache.CachedEntitySheep -> XIpD:
    boolean sheared -> ChIE
    12:15:void <init>(org.bukkit.entity.Sheep) -> <init>
    20:24:void apply(org.bukkit.entity.Entity) -> EBVa
    28:28:boolean isSheared() -> isSheared
    33:34:void setSheared(boolean) -> setSheared
    39:42:int hashCode() -> hashCode
    48:57:boolean equals(java.lang.Object) -> equals
react.cache.CachedItemDrop -> vRHD:
    org.bukkit.inventory.ItemStack is -> lLyj
    13:16:void <init>(org.bukkit.entity.Item) -> <init>
    21:24:void apply(org.bukkit.entity.Entity) -> EBVa
    29:32:int hashCode() -> hashCode
    38:52:boolean equals(java.lang.Object) -> equals
react.cache.EntityCache -> UAGc:
    7:7:void <init>() -> <init>
react.chronophysics.HopperDirection -> idqw:
    react.chronophysics.HopperDirection DOWN -> uhuu
    react.chronophysics.HopperDirection NORTH -> ifTn
    react.chronophysics.HopperDirection SOUTH -> mHNH
    react.chronophysics.HopperDirection EAST -> dEbj
    react.chronophysics.HopperDirection WEST -> TOfY
    int direction -> direction
    int[] $SWITCH_TABLE$react$chronophysics$HopperDirection -> Iyyw
    react.chronophysics.HopperDirection[] ENUM$VALUES -> JdLe
    6:12:void <clinit>() -> <clinit>
    16:19:void <init>(java.lang.String,int,int) -> <init>
    23:37:org.bukkit.Location shift(org.bukkit.Location) -> KDHU
    43:43:boolean isLocked(org.bukkit.block.Hopper) -> IEpw
    49:64:react.chronophysics.HopperDirection getDirection(org.bukkit.block.Hopper) -> VUHt
    1:1:react.chronophysics.HopperDirection[] values() -> values
    1:1:react.chronophysics.HopperDirection valueOf(java.lang.String) -> valueOf
    6:6:int[] $SWITCH_TABLE$react$chronophysics$HopperDirection() -> vRHD
react.chronophysics.HopperWormhole -> AqdC:
    org.bukkit.block.Hopper source -> vRgQ
    react.glang.GList path -> HCrj
    org.bukkit.block.Hopper destination -> UAgn
    17:22:void <init>(org.bukkit.block.Hopper,react.glang.GList,org.bukkit.block.Hopper) -> <init>
    26:26:org.bukkit.block.Hopper getSource() -> UAGc
    31:31:react.glang.GList getPath() -> idqw
    36:36:org.bukkit.block.Hopper getDestination() -> AqdC
    43:96:react.chronophysics.HopperWormhole findPath(org.bukkit.block.Hopper,int,int) -> IEpw
    102:107:int hashCode() -> hashCode
    113:141:boolean equals(java.lang.Object) -> equals
react.chronophysics.PsychopathicHopper -> jxvi:
    org.bukkit.block.Hopper h -> HTuD
    13:16:void <init>(org.bukkit.block.Hopper) -> <init>
    20:47:int addFrom(org.bukkit.inventory.Inventory,int) -> IEpw
    52:52:org.bukkit.inventory.Inventory getInventory() -> getInventory
    57:57:react.chronophysics.HopperDirection getDirection() -> jxvi
    62:62:boolean isLockedByRedstone() -> oLqT
react.command.CommandAct -> oLqT:
    40:50:void <init>() -> <init>
    55:159:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
    163:182:void sendPage(org.bukkit.command.CommandSender,int,int) -> IEpw
    186:192:react.text.RTX getBeginningRTX() -> XdDU
    197:280:void sendCommand(org.bukkit.command.CommandSender,react.api.ActionType) -> IEpw
    284:294:void sendHeader(org.bukkit.command.CommandSender,int,int) -> VUHt
    298:327:void sendFooter(org.bukkit.command.CommandSender,int,int) -> uxtE
    331:346:react.glang.GList getSortedCommands() -> Huvc
    351:358:int getPageSize(int) -> NMRL
    363:363:boolean isValidPage(int,int) -> IEpw
    368:377:react.glang.GList getPage(int,int) -> VUHt
react.command.CommandActionLog -> XdDU:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandCPUScore -> Huvc:
    15:23:void <init>() -> <init>
    28:29:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandCapabilities -> jOEH:
    15:23:void <init>() -> <init>
    28:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandChunkBlame -> uErK:
    23:31:void <init>() -> <init>
    36:76:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandChunkBlame$1 -> uErK$1:
    react.command.CommandChunkBlame this$0 -> KDkk
    org.bukkit.command.CommandSender val$sender -> dVdd
    1:36:void <init>(react.command.CommandChunkBlame,org.bukkit.command.CommandSender) -> <init>
    41:74:void run() -> run
react.command.CommandChunkBlame$1$1 -> uErK$1$1:
    react.command.CommandChunkBlame$1 this$1 -> kIvd
    org.bukkit.command.CommandSender val$sender -> dVdd
    java.lang.String val$i -> sspy
    react.glang.GMap val$top -> mjPE
    int val$totalx -> lUis
    1:65:void <init>(react.command.CommandChunkBlame$1,org.bukkit.command.CommandSender,java.lang.String,react.glang.GMap,int) -> <init>
    70:71:void run() -> run
react.command.CommandGlasses -> VDMj:
    16:25:void <init>() -> <init>
    30:32:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandHelp -> tCSU:
    27:36:void <init>() -> <init>
    41:42:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
    46:65:void sendPage(org.bukkit.command.CommandSender,int,int) -> IEpw
    69:75:react.text.RTX getBeginningRTX() -> XdDU
    80:140:void sendCommand(org.bukkit.command.CommandSender,react.api.ICommand) -> IEpw
    144:154:void sendHeader(org.bukkit.command.CommandSender,int,int) -> VUHt
    158:187:void sendFooter(org.bukkit.command.CommandSender,int,int) -> uxtE
    191:198:react.glang.GList getSortedCommands() -> Huvc
    203:210:int getPageSize(int) -> NMRL
    215:215:boolean isValidPage(int,int) -> IEpw
    220:229:react.glang.GList getPage(int,int) -> VUHt
react.command.CommandMap -> WrDj:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandMonitor -> AaCv:
    17:26:void <init>() -> <init>
    31:40:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandReload -> gopn:
    18:26:void <init>() -> <init>
    31:46:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
react.command.CommandReload$1 -> gopn$1:
    react.command.CommandReload this$0 -> OkJR
    org.bukkit.command.CommandSender val$sender -> dVdd
    1:31:void <init>(react.command.CommandReload,org.bukkit.command.CommandSender) -> <init>
    36:44:void run() -> run
react.command.CommandReload$1$1 -> gopn$1$1:
    react.command.CommandReload$1 this$1 -> GQpI
    org.bukkit.command.CommandSender val$sender -> dVdd
    1:36:void <init>(react.command.CommandReload$1,java.lang.String,int,org.bukkit.command.CommandSender) -> <init>
    41:42:void run() -> run
react.command.CommandStatus -> KDNp:
    27:35:void <init>() -> <init>
    40:48:void fire(org.bukkit.command.CommandSender,java.lang.String[]) -> IEpw
    52:61:org.bukkit.inventory.ItemStack makeBook() -> jOEH
    66:92:void addSpikePages(react.glang.GList) -> uxtE
    96:106:void addStatusPages(react.glang.GList) -> KDHU
    110:127:int findSlot(org.bukkit.entity.Player) -> VUHt
react.controller.ActionController -> YoYu:
    int kiv -> kIum
    react.glang.GMap actions -> mGkk
    react.glang.GMap pending -> cTAW
    react.glang.GList tasks -> nmSL
    20:20:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:70:void start() -> start
    74:75:void fire(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> IEpw
    79:100:boolean fireAction(react.api.ActionType,react.api.IActionSource,react.api.ISelector[]) -> VUHt
    105:105:react.api.IAction getAction(react.api.ActionType) -> IEpw
    110:111:void registerAction(react.api.IAction) -> IEpw
    117:117:void stop() -> stop
    122:187:void tick() -> tick
    191:191:react.glang.GList getActions() -> uErK
    196:203:react.glang.GList getActionNames() -> VDMj
react.controller.BenchmarkController -> RICf:
    react.api.CPUBenchmark finished -> NNUD
    boolean done -> GtSt
    int score -> proF
    13:13:void <init>() -> <init>
    22:49:void start() -> start
    54:58:void stop() -> stop
    63:68:void tick() -> tick
    16:16:void access$0(react.controller.BenchmarkController,boolean) -> IEpw
    15:15:void access$1(react.controller.BenchmarkController,react.api.CPUBenchmark) -> IEpw
    15:15:react.api.CPUBenchmark access$2(react.controller.BenchmarkController) -> IEpw
react.controller.BenchmarkController$1 -> RICf$1:
    react.controller.BenchmarkController this$0 -> mioQ
    1:26:void <init>(react.controller.BenchmarkController,java.lang.String,int) -> <init>
    31:47:void run() -> run
    26:26:react.controller.BenchmarkController access$0(react.controller.BenchmarkController$1) -> IEpw
react.controller.BenchmarkController$1$1 -> RICf$1$1:
    react.controller.BenchmarkController$1 this$1 -> MdcW
    1:31:void <init>(react.controller.BenchmarkController$1) -> <init>
    36:45:void run() -> run
    31:31:react.controller.BenchmarkController$1 access$0(react.controller.BenchmarkController$1$1) -> IEpw
react.controller.BenchmarkController$1$1$1 -> RICf$1$1$1:
    react.controller.BenchmarkController$1$1 this$2 -> fCWy
    1:36:void <init>(react.controller.BenchmarkController$1$1) -> <init>
    41:42:void run() -> run
react.controller.BlockInjectController -> LaEI:
    react.glang.GMap rangeMapping -> UBGm
    react.binject.IBlockInjector injector -> XvFE
    boolean injected -> kBEw
    17:17:void <init>() -> <init>
    26:34:void start() -> start
    38:94:void startInjection() -> tCSU
    100:100:void stop() -> stop
    106:106:void tick() -> tick
    110:110:react.glang.GMap getRangeMapping() -> WrDj
    115:115:react.binject.IBlockInjector getInjector() -> AaCv
    120:120:boolean isInjected() -> gopn
react.controller.ChronophyFluidController -> YLuv:
    5:5:void <init>() -> <init>
    11:11:void start() -> start
    17:17:void stop() -> stop
    23:23:void tick() -> tick
react.controller.ChunkController -> xyrX:
    boolean firstTickList -> hsqQ
    long firstTick -> TXWM
    long lastTick -> AsDS
    react.gmath.Average aCSMS -> oFAv
    react.glang.GMap pluginLoads -> lDkd
    react.glang.GMap playerLoads -> vuMb
    int serverLoads -> Fycu
    21:21:void <init>() -> <init>
    34:42:void start() -> start
    46:59:void flushTickList() -> KDNp
    63:73:void tickNextTickList() -> YoYu
    78:79:void stop() -> stop
    85:116:void tick() -> tick
    120:121:void on(org.bukkit.event.player.PlayerQuitEvent) -> IEpw
    126:167:void onLoad(org.bukkit.event.world.ChunkLoadEvent) -> IEpw
    171:171:boolean isFirstTickList() -> RICf
    176:176:long getFirstTick() -> LaEI
    181:181:long getLastTick() -> YLuv
    186:186:react.gmath.Average getaCSMS() -> xyrX
    191:191:react.glang.GMap getPluginLoads() -> Ahtl
    196:196:react.glang.GMap getPlayerLoads() -> CUiV
    201:201:int getServerLoads() -> lDLG
    28:28:react.glang.GMap access$0(react.controller.ChunkController) -> IEpw
    29:29:int access$1(react.controller.ChunkController) -> VUHt
    29:29:void access$2(react.controller.ChunkController,int) -> IEpw
    27:27:react.glang.GMap access$3(react.controller.ChunkController) -> uxtE
react.controller.ChunkController$1 -> xyrX$1:
    react.controller.ChunkController this$0 -> KUoK
    org.bukkit.event.world.ChunkLoadEvent val$e -> LXqk
    1:130:void <init>(react.controller.ChunkController,org.bukkit.event.world.ChunkLoadEvent) -> <init>
    135:164:void run(org.bukkit.plugin.Plugin) -> uxtE
    1:1:void run(java.lang.Object) -> IEpw
react.controller.CommandController -> Ahtl:
    react.glang.GList commands -> ELMt
    boolean k -> nScC
    35:35:void <init>() -> <init>
    43:44:void start() -> start
    49:50:void stop() -> stop
    54:99:void begin() -> begin
    104:108:void tick() -> tick
    112:113:void msg(org.bukkit.command.CommandSender,java.lang.String) -> tSmm
    117:118:void f(org.bukkit.command.CommandSender,java.lang.String) -> mGIk
    123:290:boolean onCommand(org.bukkit.command.CommandSender,org.bukkit.command.Command,java.lang.String,java.lang.String[]) -> onCommand
    296:313:void on(org.bukkit.event.player.PlayerCommandPreprocessEvent) -> IEpw
    317:317:react.glang.GList getCommands() -> Ahtj
    322:323:void setCommands(react.glang.GList) -> kkWN
    327:327:boolean isK() -> MRdF
    332:333:void setK(boolean) -> mGIk
react.controller.EntityCullController -> CUiV:
    react.glang.GSet flags -> ydcf
    react.glang.GSet defer -> bisD
    react.glang.GMap maxs -> SCuC
    19:19:void <init>() -> <init>
    28:32:void start() -> start
    38:38:void stop() -> stop
    44:44:void tick() -> tick
    48:168:void repopulateRules() -> kQiU
    172:180:int cull(org.bukkit.Chunk) -> uxtE
    185:285:int partialCull(org.bukkit.Chunk) -> KDHU
react.controller.EntityStackController -> lDLG:
    react.glang.GList stacks -> cKSb
    19:21:void <init>() -> <init>
    26:27:void start() -> start
    32:33:void stop() -> stop
    38:53:void tick() -> tick
    58:111:void stack(react.glang.GList) -> mNyO
    115:120:boolean isStacked(org.bukkit.entity.LivingEntity) -> uxtE
    125:138:react.api.StackedEntity getStack(org.bukkit.entity.LivingEntity) -> KDHU
    144:162:void on(org.bukkit.event.entity.EntityDamageEvent) -> IEpw
    166:181:void merge(react.api.StackedEntity,react.api.StackedEntity) -> IEpw
    185:236:void checkNear(org.bukkit.entity.LivingEntity) -> kkWN
    241:263:void on(org.bukkit.event.entity.EntitySpawnEvent) -> IEpw
react.controller.EntityStackController$1 -> lDLG$1:
    react.controller.EntityStackController this$0 -> FXBh
    org.bukkit.event.entity.EntitySpawnEvent val$e -> ceEw
    1:248:void <init>(react.controller.EntityStackController,java.lang.String,int,int,org.bukkit.event.entity.EntitySpawnEvent) -> <init>
    253:260:void run() -> run
react.controller.EventController -> Ahtj:
    react.glang.GMap slots -> FNqC
    15:15:void <init>() -> <init>
    22:29:void start() -> start
    34:35:void stop() -> stop
    40:85:void tick() -> tick
    90:91:void on(org.bukkit.event.player.PlayerJoinEvent) -> IEpw
    96:97:void on(org.bukkit.event.player.PlayerQuitEvent) -> IEpw
react.controller.ExplosiveController -> MRdF:
    boolean firstTickList -> hsqQ
    long firstTick -> TXWM
    long lastTick -> AsDS
    react.gmath.Average aCSMS -> oFAv
    14:14:void <init>() -> <init>
    24:29:void start() -> start
    33:46:void flushTickList() -> KDNp
    50:60:void tickNextTickList() -> YoYu
    65:66:void stop() -> stop
    72:73:void tick() -> tick
    78:79:void onLoad(org.bukkit.event.entity.EntityExplodeEvent) -> IEpw
    84:85:void onLoad(org.bukkit.event.block.BlockExplodeEvent) -> IEpw
    89:89:boolean isFirstTickList() -> RICf
    94:94:long getFirstTick() -> LaEI
    99:99:long getLastTick() -> YLuv
    104:104:react.gmath.Average getaCSMS() -> xyrX
react.controller.FastDecayController -> kQiU:
    20:20:void <init>() -> <init>
    25:26:void start() -> start
    31:32:void stop() -> stop
    37:43:void on(org.bukkit.event.block.BlockBreakEvent) -> IEpw
    47:123:void checkBreak(org.bukkit.block.Block) -> uxtE
    127:135:void decay(org.bukkit.block.Block) -> KDHU
    141:141:void tick() -> tick
react.controller.FastDecayController$1 -> kQiU$1:
    react.controller.FastDecayController this$0 -> fKjx
    react.glang.GMap val$locs -> AsET
    1:56:void <init>(react.controller.FastDecayController,int,int,org.bukkit.Location,react.glang.GMap) -> <init>
    61:61:boolean isAllowedSplooge(org.bukkit.Location) -> VUHt
    67:67:boolean isAllowedSource(org.bukkit.Location) -> uxtE
    73:92:void clipped(org.bukkit.Location) -> IEpw
    97:120:void finished() -> finished
    56:56:react.controller.FastDecayController access$0(react.controller.FastDecayController$1) -> IEpw
react.controller.FastDecayController$1$1 -> kQiU$1$1:
    react.controller.FastDecayController$1 this$1 -> kuLt
    react.glang.GMap val$locs -> AsET
    int val$i -> uWvJ
    1:101:void <init>(react.controller.FastDecayController$1,java.lang.String,int,int,react.glang.GMap,int) -> <init>
    106:116:void run() -> run
react.controller.FastDecayController$2 -> kQiU$2:
    react.controller.FastDecayController this$0 -> fKjx
    org.bukkit.block.Block val$b -> XluL
    1:127:void <init>(react.controller.FastDecayController,org.bukkit.block.Block) -> <init>
    132:133:void run() -> run
react.controller.FeatureController -> XdEc:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.controller.FluidController -> Rare:
    react.glang.GSet ignore -> XBad
    int flowsPerTick -> bjRU
    int flowsPerSecond -> GRSO
    react.gmath.Average aFST -> sJAF
    react.gmath.Average aFSS -> qnNI
    react.gmath.Average aFSMS -> fmmd
    boolean firstTickList -> hsqQ
    long firstTick -> TXWM
    long lastTick -> AsDS
    react.glang.GSet frozen -> sssL
    react.glang.GMap queue -> IaKE
    react.glang.GMap freezeTimes -> twVW
    20:20:void <init>() -> <init>
    38:55:void start() -> start
    59:64:void releaseChunk(org.bukkit.Chunk) -> kkWN
    68:76:void checkChunks() -> XdEc
    80:97:void checkChunk(org.bukkit.Chunk) -> mNyO
    101:107:void queue(org.bukkit.block.Block) -> kkWN
    111:111:boolean isFrozen(org.bukkit.Chunk) -> YoSi
    116:117:void freeze(org.bukkit.Chunk) -> EBVa
    121:127:void unfreeze(org.bukkit.Chunk) -> tSmm
    131:138:void freeze(org.bukkit.Chunk,long) -> IEpw
    143:144:void stop() -> stop
    149:155:void tick() -> tick
    159:168:void flushTickList() -> KDNp
    172:182:void tickNextTickList() -> YoYu
    187:204:void on(org.bukkit.event.block.BlockPhysicsEvent) -> IEpw
    209:244:void on(org.bukkit.event.block.BlockFromToEvent) -> IEpw
    248:248:react.glang.GSet getIgnore() -> Rare
    253:253:int getTransfersPerTick() -> GQSN
    258:258:int getTransfersPerSecond() -> xaAV
    263:263:react.gmath.Average getaFST() -> cktU
    268:268:react.gmath.Average getaFSS() -> CoYu
    273:273:react.gmath.Average getaFSMS() -> tKcH
    278:278:boolean isFirstTickList() -> RICf
    283:283:long getFirstTick() -> LaEI
    288:288:long getLastTick() -> YLuv
    293:293:react.glang.GSet getFrozen() -> gpRC
    298:298:react.glang.GMap getQueue() -> VTmR
    303:303:react.glang.GMap getFreezeTimes() -> vbiy
react.controller.GlassController -> GQSN:
    react.glang.GMap q -> yKPm
    react.glang.GList g -> STtp
    33:33:void <init>() -> <init>
    41:44:void start() -> start
    49:50:void stop() -> stop
    56:129:void tick() -> tick
    133:133:boolean isUsingGlasses(org.bukkit.entity.Player) -> uxtE
    138:138:boolean canUseGlasses(org.bukkit.entity.Player) -> KDHU
    143:159:void toggleGlasses(org.bukkit.entity.Player) -> kkWN
    164:169:void on(org.bukkit.event.block.BlockPhysicsEvent) -> IEpw
    174:179:void on(org.bukkit.event.block.BlockFromToEvent) -> IEpw
    184:189:void on(org.bukkit.event.block.BlockBurnEvent) -> IEpw
    194:199:void on(org.bukkit.event.block.BlockFormEvent) -> IEpw
    204:209:void on(org.bukkit.event.block.BlockFadeEvent) -> IEpw
    214:226:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> IEpw
    36:36:react.glang.GList access$0(react.controller.GlassController) -> IEpw
react.controller.GlassController$1 -> GQSN$1:
    react.controller.GlassController this$0 -> RkeH
    react.glang.GMap val$cc -> VUnB
    1:84:void <init>(react.controller.GlassController,react.glang.GMap) -> <init>
    89:127:void run() -> run
react.controller.GlassController$1$1 -> GQSN$1$1:
    react.controller.GlassController$1 this$1 -> pQWe
    org.bukkit.Location val$i -> VfrJ
    org.bukkit.entity.Player val$j -> EwCq
    1:106:void <init>(react.controller.GlassController$1,java.lang.String,int,int,org.bukkit.Location,org.bukkit.entity.Player) -> <init>
    111:116:void run() -> run
react.controller.GraphController -> xaAV:
    react.glang.GMap g -> EUAR
    react.glang.GMap gr -> TrMt
    28:28:void <init>() -> <init>
    36:68:void start() -> start
    73:79:void stop() -> stop
    84:95:void tick() -> tick
    100:117:void on(org.bukkit.event.player.PlayerJoinEvent) -> IEpw
    121:156:void toggleMapping(org.bukkit.entity.Player) -> mNyO
    160:160:react.glang.GMap getG() -> qKKJ
    165:165:react.glang.GMap getGr() -> NDec
    31:31:react.glang.GMap access$0(react.controller.GraphController) -> IEpw
    30:30:react.glang.GMap access$1(react.controller.GraphController) -> VUHt
react.controller.GraphController$1 -> xaAV$1:
    react.controller.GraphController this$0 -> gyeG
    1:48:void <init>(react.controller.GraphController,java.lang.String) -> <init>
    53:66:void run() -> run
react.controller.GraphController$2 -> xaAV$2:
    react.controller.GraphController this$0 -> gyeG
    1:84:void <init>(react.controller.GraphController) -> <init>
    89:93:void run() -> run
react.controller.GraphController$3 -> xaAV$3:
    react.controller.GraphController this$0 -> gyeG
    org.bukkit.event.player.PlayerJoinEvent val$e -> JtqL
    1:100:void <init>(react.controller.GraphController,java.lang.String,org.bukkit.event.player.PlayerJoinEvent) -> <init>
    105:115:void run() -> run
react.controller.HopperController -> cktU:
    react.glang.GSet ignore -> XBad
    int transfersPerTick -> iTvc
    int transfersPerSecond -> RtXa
    react.gmath.Average aHST -> CWJh
    react.gmath.Average aHSS -> wwqi
    react.gmath.Average aHSMS -> SMHd
    boolean firstTickList -> hsqQ
    long firstTick -> TXWM
    long lastTick -> AsDS
    react.glang.GSet frozen -> sssL
    react.glang.GMap queue -> IaKE
    react.glang.GMap freezeTimes -> twVW
    20:20:void <init>() -> <init>
    38:52:void start() -> start
    56:61:void releaseChunk(org.bukkit.Chunk) -> kkWN
    65:73:void checkChunks() -> XdEc
    77:94:void checkChunk(org.bukkit.Chunk) -> mNyO
    98:104:void queue(org.bukkit.block.Block) -> kkWN
    108:108:boolean isFrozen(org.bukkit.Chunk) -> YoSi
    113:114:void freeze(org.bukkit.Chunk) -> EBVa
    118:124:void unfreeze(org.bukkit.Chunk) -> tSmm
    128:135:void freeze(org.bukkit.Chunk,long) -> IEpw
    140:141:void stop() -> stop
    146:152:void tick() -> tick
    156:165:void flushTickList() -> KDNp
    169:179:void tickNextTickList() -> YoYu
    184:203:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> IEpw
    207:207:react.glang.GSet getIgnore() -> Rare
    212:212:int getTransfersPerTick() -> GQSN
    217:217:int getTransfersPerSecond() -> xaAV
    222:222:react.gmath.Average getaHST() -> oEDO
    227:227:react.gmath.Average getaHSS() -> mqbD
    232:232:react.gmath.Average getaHSMS() -> ydCg
    237:237:boolean isFirstTickList() -> RICf
    242:242:long getFirstTick() -> LaEI
    247:247:long getLastTick() -> YLuv
    252:252:react.glang.GSet getFrozen() -> gpRC
    257:257:react.glang.GMap getQueue() -> VTmR
    262:262:react.glang.GMap getFreezeTimes() -> vbiy
react.controller.HopperOvertickController -> CoYu:
    react.glang.GList possiblePlunge -> PvcQ
    14:14:void <init>() -> <init>
    21:23:void start() -> start
    28:29:void stop() -> stop
    34:35:void tick() -> tick
    39:62:boolean plunge(org.bukkit.block.Hopper) -> uxtE
    68:87:void on(org.bukkit.event.inventory.InventoryMoveItemEvent) -> IEpw
react.controller.LanguageController -> tKcH:
    java.io.File languageFolder -> KNAn
    int oldVersion -> FFau
    java.io.File dlf -> qLLr
    31:34:void <init>() -> <init>
    40:76:void start() -> start
    80:156:void checkForLanguageUpdates() -> TWYT
    160:221:void downloadAll(boolean) -> AWkd
    225:261:void downloadLanguage(java.lang.String) -> kRDe
    267:295:void check() -> check
    299:310:void loadLanguage(java.lang.String) -> YfcL
    315:315:java.io.File getFileForLanguage(java.lang.String) -> rpKU
    320:332:void writeDefaults() -> SvYT
    338:338:void stop() -> stop
    344:344:void tick() -> tick
    34:34:void access$0(react.controller.LanguageController,int) -> IEpw
    263:263:void access$1(react.controller.LanguageController) -> IEpw
react.controller.LanguageController$1 -> tKcH$1:
    react.controller.LanguageController this$0 -> yCCg
    1:66:void <init>(react.controller.LanguageController) -> <init>
    71:72:void run() -> run
react.controller.LanguageController$2 -> tKcH$2:
    react.controller.LanguageController this$0 -> yCCg
    1:80:void <init>(react.controller.LanguageController) -> <init>
    87:154:void run() -> run
    80:80:react.controller.LanguageController access$0(react.controller.LanguageController$2) -> IEpw
react.controller.LanguageController$2$1 -> tKcH$2$1:
    react.controller.LanguageController$2 this$1 -> PebI
    1:103:void <init>(react.controller.LanguageController$2) -> <init>
    109:109:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> IEpw
    115:115:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> IEpw
    121:121:void onDownloadStarted(react.gnet.download.Download) -> IEpw
    126:128:void onDownloadFinished(react.gnet.download.Download) -> VUHt
    134:134:void onDownloadFailed(react.gnet.download.Download) -> uxtE
react.controller.LanguageController$3 -> tKcH$3:
    react.controller.LanguageController this$0 -> yCCg
    1:193:void <init>(react.controller.LanguageController,java.lang.String,int) -> <init>
    198:218:void run() -> run
react.controller.LanguageController$3$1 -> tKcH$3$1:
    react.controller.LanguageController$3 this$1 -> inhn
    1:198:void <init>(react.controller.LanguageController$3) -> <init>
    203:214:void run() -> run
react.controller.LanguageController$3$1$1 -> tKcH$3$1$1:
    react.controller.LanguageController$3$1 this$2 -> AGqo
    1:206:void <init>(react.controller.LanguageController$3$1,java.lang.String,int) -> <init>
    211:212:void run() -> run
react.controller.LanguageController$4 -> tKcH$4:
    react.controller.LanguageController this$0 -> yCCg
    java.io.File val$dld -> Muja
    1:227:void <init>(react.controller.LanguageController,java.io.File) -> <init>
    233:233:void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> IEpw
    239:239:void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> IEpw
    245:245:void onDownloadStarted(react.gnet.download.Download) -> IEpw
    250:251:void onDownloadFinished(react.gnet.download.Download) -> VUHt
    257:257:void onDownloadFailed(react.gnet.download.Download) -> uxtE
react.controller.MonitorController -> gpRC:
    int maxCooldown -> MeIi
    react.api.TitleMonitor titleMonitor -> TrOK
    react.glang.GMap posts -> BCEe
    react.slate.PhantomSlate sb -> jOgs
    boolean ready -> UuOx
    36:36:void <clinit>() -> <clinit>
    42:47:void <init>() -> <init>
    52:87:void start() -> start
    91:91:react.slate.PhantomSlate constructActionLogBoard() -> LGPt
    96:114:void toggleActionLog(org.bukkit.entity.Player) -> YoSi
    118:136:void toggleMonitoring(org.bukkit.entity.Player) -> EBVa
    141:151:void stop() -> stop
    155:174:void constructMonitor() -> GQSf
    178:183:float calcVolume(react.api.ReactPlayer) -> IEpw
    188:188:boolean canMonitor(org.bukkit.entity.Player) -> tSmm
    193:193:boolean canActionLog(org.bukkit.entity.Player) -> mGIk
    198:203:boolean isMonitoring(org.bukkit.entity.Player) -> AWkd
    208:213:boolean isActionLogging(org.bukkit.entity.Player) -> kRDe
    218:222:void startMonitoring(org.bukkit.entity.Player) -> YfcL
    226:237:void stopMonitoring(org.bukkit.entity.Player) -> rpKU
    241:246:void startActionLogging(org.bukkit.entity.Player) -> NMRL
    250:261:void stopActionLogging(org.bukkit.entity.Player) -> wCeA
    267:267:void tick() -> tick
    271:274:void changePost(react.api.ReactPlayer) -> VUHt
    278:290:void processPlayer(react.api.ReactPlayer) -> uxtE
    295:295:void handleActionLog(org.bukkit.entity.Player) -> UcFc
    299:323:void handleTriggers(react.api.ReactPlayer) -> KDHU
    327:366:void handleScrolling(react.api.ReactPlayer) -> kkWN
    370:398:void handleShifting(react.api.ReactPlayer) -> mNyO
    402:424:void handlePosting(react.api.ReactPlayer) -> YoSi
    428:446:java.lang.String prefixFor(react.api.ReactPlayer,int,int) -> IEpw
    451:465:java.lang.String prefixForSub(react.api.ReactPlayer,react.surge.util.C,int) -> IEpw
    470:477:void tickMonitor(react.api.ReactPlayer) -> EBVa
    481:481:react.api.TitleMonitor getTitleMonitor() -> wKyp
    487:496:void on(org.bukkit.event.player.PlayerJoinEvent) -> IEpw
    501:510:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> IEpw
    515:527:void onTick() -> JAJp
    531:553:void updateActionBoard() -> qloi
    558:558:java.lang.String getTickName() -> LywP
    89:89:react.slate.PhantomSlate access$0(react.controller.MonitorController) -> IEpw
    39:39:void access$1(react.controller.MonitorController,react.slate.PhantomSlate) -> IEpw
    40:40:void access$2(react.controller.MonitorController,boolean) -> IEpw
    40:40:boolean access$3(react.controller.MonitorController) -> VUHt
    39:39:react.slate.PhantomSlate access$4(react.controller.MonitorController) -> uxtE
react.controller.MonitorController$1 -> gpRC$1:
    react.controller.MonitorController this$0 -> uPIC
    1:67:void <init>(react.controller.MonitorController,java.lang.String) -> <init>
    72:85:void run() -> run
react.controller.MonitorController$2 -> gpRC$2:
    react.controller.MonitorController this$0 -> uPIC
    1:531:void <init>(react.controller.MonitorController) -> <init>
    536:551:void run() -> run
react.controller.PhysicsController -> VTmR:
    react.glang.GMap samples -> aVOb
    18:18:void <init>() -> <init>
    25:28:void start() -> start
    33:35:void stop() -> stop
    42:42:void tick() -> tick
    46:47:void onRedstone(org.bukkit.Chunk) -> mGIk
    51:52:void onHopper(org.bukkit.Chunk) -> AWkd
    56:57:void onFluid(org.bukkit.Chunk) -> kRDe
    62:63:void on(org.bukkit.event.world.ChunkUnloadEvent) -> IEpw
    67:73:void hit(org.bukkit.Chunk,react.api.ChunkIssue,int) -> IEpw
    80:91:void onTick() -> JAJp
    96:96:java.lang.String getTickName() -> LywP
    101:101:react.glang.GMap getSamples() -> xyuO
react.controller.PlayerController -> vbiy:
    react.glang.GList players -> vckp
    react.glang.GSet save -> iMEw
    15:15:void <init>() -> <init>
    23:26:void start() -> start
    31:41:void stop() -> stop
    46:63:void tick() -> tick
    67:75:boolean has(org.bukkit.entity.Player) -> AFlA
    80:93:void requestSave(org.bukkit.entity.Player,boolean) -> IEpw
    97:108:react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) -> bOYT
    113:113:react.glang.GList getPlayers() -> gVah
    119:124:void on(org.bukkit.event.player.PlayerQuitEvent) -> IEpw
react.controller.PlayerController$1 -> vbiy$1:
    react.controller.PlayerController this$0 -> MeGr
    react.glang.GList val$toSave -> doxu
    1:51:void <init>(react.controller.PlayerController,react.glang.GList) -> <init>
    56:60:void run() -> run
react.controller.RAIController -> qKKJ:
    react.rai.IRAI rai -> cugY
    boolean raiEnabled -> JSNM
    18:18:void <init>() -> <init>
    26:37:void start() -> start
    42:43:void stop() -> stop
    48:56:void tick() -> tick
    20:20:react.rai.IRAI access$0(react.controller.RAIController) -> IEpw
react.controller.RAIController$1 -> qKKJ$1:
    react.controller.RAIController this$0 -> WHRE
    1:48:void <init>(react.controller.RAIController) -> <init>
    53:54:void run() -> run
react.controller.ReactFremComputer -> NDec:
    14:14:void <init>() -> <init>
    19:42:react.glang.GMap compute(long,long) -> uxtE
react.controller.ReactServerInfo -> oEDO:
    16:16:void <init>() -> <init>
    21:21:java.lang.String dgetMotd() -> pjMe
    27:27:int dgetGameProtocol() -> XSFk
    33:33:java.lang.String dgetGameVersion() -> rpSp
    39:39:java.lang.String dgetReactVersion() -> mGRU
    45:45:int dgetMaxPlayers() -> yRcr
    51:58:react.glang.GList dgetConnectedPlayers() -> ycfD
    64:64:int dgetViewDistance() -> lvqi
    70:70:int dgetGamePort() -> QxfV
    76:76:java.lang.String dgetGameAddress() -> NLyP
    82:89:react.glang.GList dgetRemotePlugins() -> WOci
    95:102:react.glang.GList dgetWorlds() -> iLFk
    108:108:react.glang.GList dgetActions() -> Hdyx
    114:114:react.glang.GList dgetSamplers() -> qmQA
react.controller.RedstoneController -> mqbD:
    react.glang.GSet ignore -> XBad
    react.glang.GSet frozen -> sssL
    react.glang.GMap queue -> IaKE
    react.glang.GMap freezeTimes -> twVW
    int redstonePerTick -> uPIH
    int redstonePerSecond -> xiqu
    react.gmath.Average aRST -> Buji
    react.gmath.Average aRSS -> eQYm
    react.gmath.Average aRSMS -> tCrh
    boolean firstTickList -> hsqQ
    long firstTick -> TXWM
    long lastTick -> AsDS
    22:22:void <init>() -> <init>
    40:70:void start() -> start
    75:81:void stop() -> stop
    85:90:void releaseChunk(org.bukkit.Chunk) -> kkWN
    95:101:void tick() -> tick
    105:113:void checkChunks() -> XdEc
    117:134:void checkChunk(org.bukkit.Chunk) -> mNyO
    138:144:void queue(org.bukkit.block.Block) -> kkWN
    148:148:boolean isFrozen(org.bukkit.Chunk) -> YoSi
    153:154:void freeze(org.bukkit.Chunk) -> EBVa
    158:165:void flushTickList() -> KDNp
    169:179:void tickNextTickList() -> YoYu
    183:189:void unfreeze(org.bukkit.Chunk) -> tSmm
    193:200:void freeze(org.bukkit.Chunk,long) -> IEpw
    205:206:void on(org.bukkit.event.world.ChunkUnloadEvent) -> IEpw
    211:224:void on(org.bukkit.event.block.BlockPhysicsEvent) -> IEpw
    229:242:void on(org.bukkit.event.block.BlockFromToEvent) -> IEpw
    246:246:react.glang.GSet getIgnore() -> Rare
    251:251:react.glang.GSet getFrozen() -> gpRC
    256:256:react.glang.GMap getQueue() -> VTmR
    261:261:react.glang.GMap getFreezeTimes() -> vbiy
    266:266:int getRedstonePerTick() -> QNSR
    271:271:int getRedstonePerSecond() -> mXSQ
    276:276:react.gmath.Average getaRST() -> upjy
    281:281:react.gmath.Average getaRSS() -> ArFw
    286:286:react.gmath.Average getaRSMS() -> PJnn
    291:291:boolean isFirstTickList() -> RICf
    296:296:long getFirstTick() -> LaEI
    301:301:long getLastTick() -> YLuv
react.controller.RemoteController -> ydCg:
    react.remote.server.RemoteServer remoteServer -> rycA
    12:12:void <init>() -> <init>
    19:30:void start() -> start
    36:58:void startRemoteServer() -> UQku
    63:67:void stop() -> stop
    73:73:void tick() -> tick
    32:32:void access$0(react.controller.RemoteController) -> IEpw
react.controller.RemoteController$1 -> ydCg$1:
    react.controller.RemoteController this$0 -> bPbS
    1:19:void <init>(react.controller.RemoteController,java.lang.String,int) -> <init>
    24:28:void run() -> run
react.controller.RemoteController$2 -> ydCg$2:
    react.controller.RemoteController this$0 -> bPbS
    1:36:void <init>(react.controller.RemoteController,int) -> <init>
    41:41:react.remote.server.ServerInfo getServerInfo() -> PvBa
    47:47:react.remote.server.IFrameComputer getFrameComputer() -> owjY
react.controller.SampleController -> TWYT:
    react.glang.GMap samplers -> NWJW
    react.surge.server.SuperSampler ss -> Arga
    int cd -> yScU
    28:34:void <init>() -> <init>
    38:64:boolean checkThreads() -> sQSK
    69:74:void restartSuperSampler() -> Wqdv
    78:79:void registerSampler(react.api.ISampler) -> uxtE
    83:83:react.api.ISampler getSampler(java.lang.String) -> NMRL
    88:131:void constructSamplers() -> AOdn
    136:163:void start() -> start
    168:171:void stop() -> stop
    177:177:void tick() -> tick
    181:181:react.surge.server.SuperSampler getSuperSampler() -> XSEx
    187:209:void onTick() -> JAJp
    214:214:java.lang.String getTickName() -> LywP
    219:219:react.glang.GMap getSamplers() -> OYMM
    224:224:react.surge.server.SuperSampler getSs() -> NVIu
    229:229:int getCd() -> XRfE
    234:241:react.glang.GList getSamplerNames() -> xXQV
    25:25:react.surge.server.SuperSampler access$0(react.controller.SampleController) -> IEpw
react.controller.SampleController$1 -> TWYT$1:
    react.controller.SampleController this$0 -> nugG
    1:140:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    145:149:void run() -> run
react.controller.SampleController$2 -> TWYT$2:
    react.controller.SampleController this$0 -> nugG
    1:152:void <init>(react.controller.SampleController,java.lang.String,int) -> <init>
    157:161:void run() -> run
react.controller.SecurityController -> SvYT:
    java.lang.String ipa -> WbDw
    react.glang.GList failures -> bQBh
    12:12:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    17:25:void start() -> start
    29:37:void scanForIP(java.lang.String) -> wCeA
    41:74:void checkForIP() -> SLHD
    78:91:void scan(java.lang.Runnable) -> IEpw
    97:97:void stop() -> stop
    103:103:void tick() -> tick
react.controller.SecurityController$1 -> SvYT$1:
    react.controller.SecurityController this$0 -> VpBx
    1:17:void <init>(react.controller.SecurityController) -> <init>
    22:23:void run() -> run
react.controller.SecurityController$2 -> SvYT$2:
    java.lang.String val$ip -> BTGy
    1:29:void <init>(java.lang.String) -> <init>
    34:35:void run() -> run
react.controller.SecurityController$3 -> SvYT$3:
    java.lang.Thread val$t -> iTuW
    1:47:void <init>(java.lang.Thread) -> <init>
    52:65:void run() -> run
react.controller.SmearTickController -> LGPt:
    react.glang.GMap etl -> USNK
    react.glang.GMap ttl -> WHQw
    20:20:void <init>() -> <init>
    28:44:void start() -> start
    49:62:void stop() -> stop
    69:76:void on(org.bukkit.event.world.WorldLoadEvent) -> IEpw
    83:90:void on(org.bukkit.event.world.WorldUnloadEvent) -> IEpw
    96:96:void tick() -> tick
    100:112:void witholdWorld(org.bukkit.World) -> YoSi
    116:128:void releaseWorld(org.bukkit.World) -> EBVa
    132:144:double getUniversalEntityTick() -> wTlr
    149:161:double getUniversalEntityLimit() -> AGTW
    166:178:double getUniversalTileLimit() -> MBFO
    183:195:double getUniversalTileTick() -> MIuX
    200:207:double getUniversalEntityDroppedTicks() -> IOLE
    212:219:double getUniversalTileDroppedTicks() -> sIFD
    224:225:void setEntityTickLimit(org.bukkit.World,double) -> IEpw
    229:230:void setTileTickLimit(org.bukkit.World,double) -> VUHt
    234:234:double getEntityTickLimit(org.bukkit.World) -> tSmm
    239:239:double getTileTickLimit(org.bukkit.World) -> mGIk
    244:244:double getLastEntityTick(org.bukkit.World) -> AWkd
    249:249:double getLastTileTick(org.bukkit.World) -> kRDe
    254:254:double getEntityDroppedTicks(org.bukkit.World) -> YfcL
    259:259:double getTileDroppedTicks(org.bukkit.World) -> rpKU
    264:281:java.lang.reflect.Field deepFindField(java.lang.Object,java.lang.String) -> IEpw
react.controller.SpikeController -> GQSf:
    react.glang.GMap spikes -> cTHe
    25:27:void <init>() -> <init>
    32:59:void start() -> start
    64:65:void stop() -> stop
    71:106:void onTick() -> JAJp
    111:111:java.lang.String getTickName() -> LywP
    119:119:void tick() -> tick
    123:123:react.glang.GMap getSpikes() -> Nflu
    128:160:void whoFuckingDidThis(react.glang.Callback) -> IEpw
    27:27:react.glang.GMap access$0(react.controller.SpikeController) -> IEpw
react.controller.SpikeController$1 -> GQSf$1:
    react.controller.SpikeController this$0 -> vcoX
    1:34:void <init>(react.controller.SpikeController,java.lang.String) -> <init>
    39:57:void run() -> run
react.controller.SpikeController$1$1 -> GQSf$1$1:
    react.controller.SpikeController$1 this$1 -> oMxk
    1:39:void <init>(react.controller.SpikeController$1) -> <init>
    44:55:void run() -> run
react.controller.SpikeController$2 -> GQSf$2:
    react.controller.SpikeController this$0 -> vcoX
    react.glang.GMap val$vv -> VMau
    1:74:void <init>(react.controller.SpikeController,react.glang.GMap) -> <init>
    79:104:void run() -> run
react.controller.SpikeController$3 -> GQSf$3:
    react.controller.SpikeController this$0 -> vcoX
    java.lang.Thread val$t -> iTuW
    react.glang.Callback val$callback -> AGth
    1:130:void <init>(react.controller.SpikeController,java.lang.Thread,react.glang.Callback) -> <init>
    135:158:void run() -> run
react.controller.TickTimeController -> wKyp:
    6:6:void <init>() -> <init>
    11:12:void start() -> start
    17:18:void stop() -> stop
    24:24:void tick() -> tick
react.event.ReactEvent -> JAJp:
    org.bukkit.event.HandlerList handlers -> MvLe
    8:8:void <clinit>() -> <clinit>
    6:6:void <init>() -> <init>
    13:13:org.bukkit.event.HandlerList getHandlers() -> getHandlers
    18:18:org.bukkit.event.HandlerList getHandlerList() -> getHandlerList
react.event.ReactPlayerEvent -> qloi:
    org.bukkit.entity.Player player -> player
    9:12:void <init>(org.bukkit.entity.Player) -> <init>
    16:16:org.bukkit.entity.Player getPlayer() -> getPlayer
react.event.ReactScrollEvent -> LywP:
    react.event.ScrollDirection direction -> yeHo
    boolean cancellled -> CyPi
    int amount -> tfYm
    14:18:void <init>(org.bukkit.entity.Player,react.event.ScrollDirection,int) -> <init>
    22:22:react.event.ScrollDirection getDirection() -> yJWC
    28:28:boolean isCancelled() -> isCancelled
    34:35:void setCancelled(boolean) -> setCancelled
    39:39:boolean isCancellled() -> vRNe
    44:44:int getAmount() -> getAmount
react.event.ScrollDirection -> xyuO:
    react.event.ScrollDirection DOWN -> cukU
    react.event.ScrollDirection UP -> iTxP
    react.event.ScrollDirection[] ENUM$VALUES -> uOjR
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.event.ScrollDirection[] values() -> values
    1:1:react.event.ScrollDirection valueOf(java.lang.String) -> valueOf
react.gbench.Profiler -> gVah:
    long nanos -> MvLs
    long startNano -> cJve
    long millis -> mGsD
    long startMillis -> gheN
    double time -> uFxq
    boolean profiling -> TPMk
    14:18:void <init>() -> <init>
    22:25:void begin() -> begin
    29:39:void end() -> end
    43:49:void reset() -> reset
    53:73:java.lang.String getTime(int) -> wCeA
    78:78:double getTicks() -> xOdL
    83:83:double getSeconds() -> getSeconds
    88:88:double getMinutes() -> WPFO
    93:93:double getHours() -> vkaF
    98:98:double getMilliseconds() -> aLaY
    103:103:long getNanoseconds() -> TOMi
    108:108:long getNanos() -> oDgt
    113:113:long getStartNano() -> BAfs
    118:118:long getMillis() -> getMillis
    123:123:long getStartMillis() -> LiYL
    128:128:double getTime() -> QxhS
    133:133:boolean isProfiling() -> biXJ
react.gconcurrent.A -> pjMe:
    react.gconcurrent.ParallelPoolManager mgr -> XKWx
    5:5:void <clinit>() -> <clinit>
    7:17:void <init>() -> <init>
react.gconcurrent.A$1 -> pjMe$1:
    react.gconcurrent.A this$0 -> RATl
    1:9:void <init>(react.gconcurrent.A) -> <init>
    14:15:void run() -> run
react.gconcurrent.Execution -> XSFk:
    int id -> id
    int idx -> idx
    5:5:void <clinit>() -> <clinit>
    3:6:void <init>() -> <init>
    11:14:int hashCode() -> hashCode
    20:29:boolean equals(java.lang.Object) -> equals
react.gconcurrent.ParallelPoolManager -> rpSp:
    react.gconcurrent.QueueMode mode -> USNt
    react.glang.GList threads -> Pmqt
    int next -> rOQf
    int threadCount -> PmrV
    java.util.Queue squeue -> mYTb
    java.lang.String key -> key
    react.gconcurrent.ThreadInformation info -> GkiM
    int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode -> ndgi
    22:23:void syncQueue(react.gconcurrent.Execution) -> IEpw
    long getNanoGate() -> Qxgq
    29:51:void tickSyncQueue() -> nlYd
    55:57:void <init>(java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    59:78:void <init>(int,react.gconcurrent.QueueMode) -> <init>
    82:97:long lock() -> PKQn
    102:109:int getTotalQueueSize() -> gFBt
    114:115:void start() -> start
    119:123:void shutdown() -> shutdown
    127:128:void <init>(int) -> <init>
    132:133:void queue(react.gconcurrent.Execution) -> VUHt
    137:137:int getSize() -> getSize
    142:149:int getQueueSize() -> NxNi
    154:154:react.gconcurrent.ParallelThread[] getThreads() -> MBFu
    161:188:void updateThreadInformation() -> uOKG
    192:224:react.gconcurrent.ParallelThread nextThread() -> OioU
    229:235:void createThreads(int) -> UcFc
    239:239:react.gconcurrent.QueueMode getMode() -> hsXa
    244:244:int getNext() -> gxfJ
    249:249:int getThreadCount() -> getThreadCount
    254:254:java.util.Queue getSqueue() -> dfkR
    259:259:java.lang.String getKey() -> getKey
    264:264:react.gconcurrent.ThreadInformation getAverageInfo() -> SSxY
    10:10:int[] $SWITCH_TABLE$org$cyberpwn$gconcurrent$QueueMode() -> gxel
react.gconcurrent.ParallelThread -> mGRU:
    java.util.Queue queue -> GAUh
    react.gconcurrent.ThreadInformation info -> GkiM
    11:17:void <init>(java.lang.String,int) -> <init>
    22:49:void run() -> run
    53:57:void conditionallySleep(double) -> mGIk
    63:70:void execute(react.gconcurrent.Execution) -> uxtE
    74:83:void execute() -> execute
    87:88:void queue(react.gconcurrent.Execution) -> VUHt
    92:92:java.util.Queue getQueue() -> PTAj
    97:97:react.gconcurrent.ThreadInformation getInfo() -> JROo
react.gconcurrent.QueueMode -> yRcr:
    react.gconcurrent.QueueMode ROUND_ROBIN -> YWJp
    react.gconcurrent.QueueMode SMALLEST -> pjmm
    react.gconcurrent.QueueMode[] ENUM$VALUES -> USOY
    4:7:void <clinit>() -> <clinit>
    4:4:void <init>(java.lang.String,int) -> <init>
    1:1:react.gconcurrent.QueueMode[] values() -> values
    1:1:react.gconcurrent.QueueMode valueOf(java.lang.String) -> valueOf
react.gconcurrent.S -> ycfD:
    react.gconcurrent.ParallelPoolManager mgr -> XKWx
    7:17:void <init>() -> <init>
react.gconcurrent.S$1 -> ycfD$1:
    react.gconcurrent.S this$0 -> WbFu
    1:9:void <init>(react.gconcurrent.S) -> <init>
    14:15:void run() -> run
react.gconcurrent.TICK -> lvqi:
    long tick -> Mujy
    long atick -> Buld
    5:6:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.gconcurrent.ThreadInformation -> QxfV:
    double ticksPerSecond -> wxRs
    int queuedSize -> lxTM
    boolean processing -> DINa
    double utilization -> AixQ
    react.gmath.Average ticksPerSecondAverage -> dVmG
    long tick -> Mujy
    int id -> id
    15:24:void <init>(int) -> <init>
    28:28:double getTicksPerSecond() -> qlqQ
    33:35:void setTicksPerSecond(double) -> AWkd
    39:39:int getQueuedSize() -> oEHo
    44:45:void setQueuedSize(int) -> AFlA
    49:49:boolean isProcessing() -> bFrP
    54:55:void setProcessing(boolean) -> kRDe
    59:59:double getUtilization() -> uExO
    64:65:void setUtilization(double) -> kRDe
    69:69:double getTicksPerSecondAverage() -> pXkh
    74:74:long getTick() -> getTick
    79:80:void setTick(long) -> setTick
    84:84:long getTickLag() -> dLyP
    89:89:int getId() -> getId
react.gformat.F -> NLyP:
    java.text.NumberFormat NF -> mbHc
    java.text.DecimalFormat DF -> LQID
    java.lang.String[] NAMES -> FiJL
    java.math.BigInteger THOUSAND -> nBgj
    java.util.NavigableMap MAP -> mQFy
    24:35:void <clinit>() -> <clinit>
    19:19:void <init>() -> <init>
    39:56:java.lang.String capitalize(java.lang.String) -> capitalize
    61:68:java.lang.String capitalizeWords(java.lang.String) -> UcFc
    73:73:java.lang.String wrap(java.lang.String,int) -> wrap
    78:78:java.lang.String wrapWords(java.lang.String,int) -> IEpw
    83:83:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean) -> wrap
    88:175:java.lang.String wrap(java.lang.String,int,java.lang.String,boolean,java.lang.String) -> wrap
    181:196:java.lang.String time(double,int) -> IEpw
    201:221:java.lang.String timeLong(long,int) -> IEpw
    226:226:java.lang.String b(int) -> b
    231:231:java.lang.String b(long) -> uxtE
    236:236:java.lang.String b(double) -> YfcL
    241:258:java.lang.String b(java.math.BigInteger) -> IEpw
    263:267:void instantiate() -> NEKI
    279:279:java.lang.String fileSize(long) -> KDHU
    292:292:java.lang.String memSize(long) -> kkWN
    305:306:java.lang.String stamp(long) -> mNyO
    322:349:java.lang.String ofSize(long,int) -> VUHt
    363:368:java.lang.String trim(java.lang.String,int) -> VUHt
    381:401:java.lang.String cname(java.lang.String) -> AFlA
    415:427:java.lang.String repeat(java.lang.String,int) -> repeat
    439:446:java.lang.String mem(long) -> YoSi
    459:477:java.lang.String memx(long) -> EBVa
    491:492:java.lang.String f(long) -> tSmm
    504:505:java.lang.String f(int) -> bOYT
    519:528:java.lang.String f(double,int) -> VUHt
    544:553:java.lang.String fd(double,int) -> uxtE
    567:576:java.lang.String f(float,int) -> IEpw
    587:587:java.lang.String f(double) -> rpKU
    598:598:java.lang.String f(float) -> IEpw
    613:613:java.lang.String pc(double,int) -> KDHU
    628:628:java.lang.String pc(float,int) -> VUHt
    641:641:java.lang.String pc(double) -> NMRL
    654:654:java.lang.String pc(float) -> VUHt
    670:670:java.lang.String pc(int,int,int) -> IEpw
    684:684:java.lang.String pc(int,int) -> uxtE
    700:700:java.lang.String pc(long,long,int) -> IEpw
    714:714:java.lang.String pc(long,long) -> KDHU
    726:726:java.lang.String msSeconds(long) -> mGIk
    740:740:java.lang.String msSeconds(long,int) -> uxtE
    752:752:java.lang.String nsMs(long) -> AWkd
    766:766:java.lang.String nsMs(long,int) -> KDHU
    780:780:java.lang.String nsMsd(long,int) -> kkWN
react.glang.AccessCallback -> WOci:
    java.lang.Object get() -> get
react.glang.Adapter -> iLFk:
    java.lang.Object adapt(java.lang.Object) -> mNyO
    java.lang.Object onAdapt(java.lang.Object) -> YoSi
react.glang.Callback -> Hdyx:
    java.lang.Object t -> lfuR
    11:11:void <init>() -> <init>
    23:25:void run(java.lang.Object) -> IEpw
    35:35:void run() -> run
    44:44:java.lang.Object get() -> get
react.glang.FinalDouble -> qmQA:
    double i -> xriM
    18:21:void <init>(double) -> <init>
    30:30:double get() -> get
    41:42:void set(double) -> set
    52:53:void add(double) -> add
    63:64:void sub(double) -> wCeA
react.glang.FinalFloat -> QNSR:
    float i -> i
    18:21:void <init>(float) -> <init>
    30:30:float get() -> get
    41:42:void set(float) -> set
    52:53:void add(float) -> add
    63:64:void sub(float) -> uxtE
react.glang.FinalInteger -> mXSQ:
    int i -> i
    18:21:void <init>(int) -> <init>
    30:30:int get() -> get
    41:42:void set(int) -> set
    52:53:void add(int) -> add
    63:64:void sub(int) -> kHrO
react.glang.FinalLong -> upjy:
    long i -> ekRS
    18:21:void <init>(long) -> <init>
    30:30:long get() -> get
    41:42:void set(long) -> set
    52:53:void add(long) -> add
    63:64:void sub(long) -> kRDe
react.glang.FinalString -> ArFw:
    java.lang.String string -> string
    18:21:void <init>(java.lang.String) -> <init>
    30:30:java.lang.String get() -> get
    41:42:void set(java.lang.String) -> set
react.glang.GAdapter -> PJnn:
    12:12:void <init>() -> <init>
    17:17:java.lang.Object adapt(java.lang.Object) -> mNyO
    java.lang.Object onAdapt(java.lang.Object) -> YoSi
react.glang.GBiset -> UQku:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> pjqS
    java.lang.Object b -> wgVE
    29:33:void <init>(java.lang.Object,java.lang.Object) -> <init>
    42:42:java.lang.Object getA() -> wTnu
    53:54:void setA(java.lang.Object) -> EBVa
    63:63:java.lang.Object getB() -> EmUB
    73:74:void setB(java.lang.Object) -> tSmm
react.glang.GList -> PvBa:
    long serialVersionUID -> serialVersionUID
    28:29:void <init>() -> <init>
    33:40:react.glang.GList grepExplicit(int,int) -> KDHU
    45:52:react.glang.GList grepDistance(int,int) -> kkWN
    57:57:java.lang.Object getAt(int) -> getAt
    62:62:java.lang.Object getAt(java.lang.Integer) -> VUHt
    73:79:void <init>(java.util.Set) -> <init>
    89:95:void <init>(java.util.Collection) -> <init>
    105:111:void <init>(java.util.Iterator) -> <init>
    121:123:void <init>(java.lang.Object[]) -> <init>
    134:142:void <init>(java.util.List) -> <init>
    151:178:java.lang.Object mostCommon() -> nBEX
    188:190:react.glang.GList shuffleCopy() -> YUjj
    198:199:void shuffle() -> ckyF
    210:236:react.glang.GList split() -> aUQs
    248:248:boolean hasIndex(int) -> ivRC
    258:259:java.lang.Object pickRandom() -> woBu
    270:277:react.glang.GList stringList() -> PTAw
    288:292:void forEach(react.glang.Callback) -> VUHt
    301:301:int last() -> last
    315:320:int getIndexOrLast(int) -> pOot
    336:336:react.glang.GList cropFrom(int) -> YgBo
    341:373:react.glang.GList split(int) -> LiMg
    389:389:react.glang.GList cropTo(int) -> fAsQ
    406:416:react.glang.GList crop(int,int) -> mNyO
    427:431:react.glang.GList removeDuplicates() -> CENK
    442:446:void removeAll(java.lang.Object) -> mGIk
    455:455:boolean hasDuplicates() -> WGWS
    463:464:void sort() -> sort
    468:470:react.glang.GList sortCopy() -> iByU
    484:490:void push(java.lang.Object,int) -> IEpw
    501:505:void add(java.lang.Object[]) -> add
    516:517:react.glang.GList qadd(java.lang.Object) -> AWkd
    528:532:void add(java.util.List) -> IEpw
    544:576:java.lang.String toString(java.lang.String) -> toString
    586:588:react.glang.GList reverse() -> WWwe
    597:597:java.lang.String toString() -> toString
    607:614:react.glang.GList copy() -> kQqJ
    626:627:react.glang.GList qdel(java.lang.Object) -> kRDe
    637:644:java.lang.Object pop() -> pop
    652:653:void removeLast() -> kAOx
    662:669:java.lang.Object popLast() -> mXVn
    674:683:java.lang.Object popRandom() -> QyKX
react.glang.GListAdapter -> owjY:
    14:14:void <init>() -> <init>
    25:37:java.util.List adapt(java.util.List) -> VUHt
    java.lang.Object onAdapt(java.lang.Object) -> YoSi
react.glang.GMap -> sQSK:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:23:void <init>(java.util.Map) -> <init>
    32:39:react.glang.GMap copy() -> inNN
    53:54:react.glang.GMap qput(java.lang.Object,java.lang.Object) -> IEpw
    64:81:react.glang.GMap flip() -> cBJE
    87:94:java.lang.String toString() -> toString
    106:111:react.glang.GMap append(react.glang.GMap) -> IEpw
    121:121:react.glang.GList k() -> ivRC
    131:131:react.glang.GSet kset() -> ycil
    141:141:react.glang.GList v() -> baIb
    151:151:react.glang.GSet vset() -> hIHN
    164:168:void putNVD(java.lang.Object,java.lang.Object) -> VUHt
    176:176:boolean contains(java.lang.Object) -> contains
    188:198:react.glang.GList get(react.glang.GList) -> YoSi
    209:219:react.glang.GMap removeDuplicateValues() -> pipe
    233:242:void put(react.glang.GList,react.glang.GList) -> IEpw
    251:267:react.glang.GList sortK() -> qudn
    277:293:react.glang.GList sortV() -> rxhP
react.glang.GQuadraset -> Wqdv:
    java.lang.Object a -> pjqS
    java.lang.Object b -> wgVE
    java.lang.Object c -> OYpr
    java.lang.Object d -> nKXt
    10:16:void <init>(java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    20:20:java.lang.Object getA() -> wTnu
    25:26:void setA(java.lang.Object) -> EBVa
    30:30:java.lang.Object getB() -> EmUB
    35:36:void setB(java.lang.Object) -> tSmm
    40:40:java.lang.Object getC() -> KDUY
    45:46:void setC(java.lang.Object) -> YfcL
    50:50:java.lang.Object getD() -> lfUM
    55:56:void setD(java.lang.Object) -> rpKU
react.glang.GSet -> AOdn:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>() -> <init>
    17:18:void <init>(java.util.Collection) -> <init>
    22:23:void <init>(int,float) -> <init>
    27:28:void <init>(int) -> <init>
react.glang.GTriset -> XSEx:
    long serialVersionUID -> serialVersionUID
    java.lang.Object a -> pjqS
    java.lang.Object b -> wgVE
    java.lang.Object c -> OYpr
    12:17:void <init>(java.lang.Object,java.lang.Object,java.lang.Object) -> <init>
    21:21:java.lang.Object getA() -> wTnu
    26:27:void setA(java.lang.Object) -> EBVa
    31:31:java.lang.Object getB() -> EmUB
    36:37:void setB(java.lang.Object) -> tSmm
    41:41:java.lang.Object getC() -> KDUY
    46:47:void setC(java.lang.Object) -> YfcL
react.gmath.Average -> OYMM:
    double[] values -> inmc
    double average -> Arjl
    boolean dirty -> uPNM
    9:15:void <init>(int) -> <init>
    19:21:void put(double) -> UcFc
    25:31:double getAverage() -> getAverage
    36:45:void calculateAverage() -> PTDG
react.gmath.DoubleArrayUtils -> NVIu:
    3:3:void <init>() -> <init>
    7:13:void shiftRight(double[],double) -> IEpw
    17:19:void wrapRight(double[]) -> IEpw
    23:27:void fill(double[],double) -> fill
react.gmath.M -> XRfE:
    int precision -> ffEG
    int modulus -> Dsdc
    float[] sin -> xQFR
    15:329:void <clinit>() -> <clinit>
    11:11:void <init>() -> <init>
    19:19:double clip(double,double,double) -> IEpw
    31:36:boolean r(java.lang.Double) -> VUHt
    51:51:double tps(long,int) -> mNyO
    63:63:double ticksFromNS(long) -> YfcL
    75:101:java.lang.String toRoman(int) -> CUas
    115:127:java.lang.String repeat(java.lang.String,int) -> repeat
    132:132:int rand(int,int) -> YoSi
    144:216:int fromRoman(java.lang.String) -> bOYT
    226:226:long ns() -> IOOI
    236:236:long ms() -> PBaU
    248:248:float sin(float) -> sin
    260:260:float cos(float) -> cos
    272:282:int max(int[]) -> max
    294:304:int min(int[]) -> min
    320:320:boolean within(int,int,int) -> VUHt
    333:333:float sinLookup(int) -> Sdoy
react.gnet.client.Client -> xXQV:
    int port -> port
    java.lang.String address -> address
    react.gnet.packet.PacketHandler handler -> YVnM
    java.net.Socket socket -> socket
    20:25:void <init>(java.lang.String,int) -> <init>
    29:35:void connect() -> connect
    39:40:void disconnect() -> disconnect
    45:45:int getPort() -> getPort
    51:51:java.lang.String getAddress() -> getAddress
    57:68:react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> IEpw
    74:74:react.gnet.packet.PacketHandler getHandler() -> BBKf
react.gnet.client.IClient -> SLHD:
    int getPort() -> getPort
    java.lang.String getAddress() -> getAddress
    react.gnet.packet.IPacket sendPacket(react.gnet.packet.IPacket) -> IEpw
    react.gnet.packet.PacketHandler getHandler() -> BBKf
react.gnet.download.Download -> wTlr:
    react.gnet.download.DownloadState state -> QWgR
    react.gnet.download.DownloadType type -> Vwwi
    react.gnet.download.DownloadStatus status -> XTLD
    react.gnet.download.DownloadMonitor monitor -> gyiE
    java.net.URL url -> url
    java.io.File file -> CqAS
    int bufferSize -> bufferSize
    byte[] buffer -> buffer
    25:34:void <init>(react.gnet.download.DownloadMonitor,java.net.URL,java.io.File,int) -> <init>
    38:83:void start() -> start
    87:87:react.gnet.download.DownloadState getState() -> lCpx
    92:92:react.gnet.download.DownloadType getType() -> mFtX
    97:97:react.gnet.download.DownloadStatus getStatus() -> JJAs
    102:102:react.gnet.download.DownloadMonitor getMonitor() -> vcQI
    107:107:java.net.URL getUrl() -> getUrl
    112:112:java.io.File getFile() -> getFile
    117:117:int getBufferSize() -> getBufferSize
react.gnet.download.DownloadMonitor -> AGTW:
    void onDownloadStateChanged(react.gnet.download.Download,react.gnet.download.DownloadState,react.gnet.download.DownloadState) -> IEpw
    void onDownloadStarted(react.gnet.download.Download) -> IEpw
    void onDownloadFinished(react.gnet.download.Download) -> VUHt
    void onDownloadFailed(react.gnet.download.Download) -> uxtE
    void onDownloadUpdateProgress(react.gnet.download.Download,long,long,double) -> IEpw
react.gnet.download.DownloadState -> MBFO:
    react.gnet.download.DownloadState IDLE -> Eveu
    react.gnet.download.DownloadState DOWNLOADING -> mjXL
    react.gnet.download.DownloadState FAILED -> riGB
    react.gnet.download.DownloadState FINISHED -> kcpq
    react.gnet.download.DownloadState[] $VALUES -> wxUY
    3:3:react.gnet.download.DownloadState[] values() -> values
    3:3:react.gnet.download.DownloadState valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.gnet.download.DownloadStatus -> MIuX:
    long bytesDownloaded -> qmqw
    long bytesTotal -> nvKn
    long bytesPerSecond -> xaec
    long timeElapsed -> agUa
    11:16:void <init>() -> <init>
    20:20:double getPercentCompleted() -> vbod
    25:25:long getBytesDownloaded() -> xrGm
    30:31:void setBytesDownloaded(long) -> rpKU
    35:35:long getBytesTotal() -> QFEm
    40:41:void setBytesTotal(long) -> NMRL
    45:45:long getBytesPerSecond() -> upoC
    50:51:void setBytesPerSecond(long) -> wCeA
    55:55:long getTimeElapsed() -> gNSu
    60:61:void setTimeElapsed(long) -> UcFc
react.gnet.download.DownloadType -> IOLE:
    react.gnet.download.DownloadType DETERMINATE -> OQcH
    react.gnet.download.DownloadType INDETERMINATE -> BCLh
    react.gnet.download.DownloadType[] $VALUES -> TjDP
    3:3:react.gnet.download.DownloadType[] values() -> values
    3:3:react.gnet.download.DownloadType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.IPacket -> sIFD:
    int getId() -> getId
    react.gnet.packet.PacketBinding getBinding() -> xhvI
    java.lang.String getPacketName() -> nRhR
react.gnet.packet.IncompatablePacketException -> Nflu:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketBinding -> yJWC:
    react.gnet.packet.PacketBinding SERVER_BOUND -> qCbn
    react.gnet.packet.PacketBinding CLIENT_BOUND -> nuoG
    react.gnet.packet.PacketBinding[] $VALUES -> vtuQ
    3:3:react.gnet.packet.PacketBinding[] values() -> values
    3:3:react.gnet.packet.PacketBinding valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:6:void <clinit>() -> <clinit>
react.gnet.packet.PacketException -> vRNe:
    long serialVersionUID -> serialVersionUID
    11:12:void <init>(java.lang.String) -> <init>
react.gnet.packet.PacketHandler -> xOdL:
    react.glang.GList accept -> EUGd
    react.gnet.packet.PacketBinding side -> KUvx
    react.gnet.streams.OSS out -> innj
    react.gnet.streams.ISS in -> kRqk
    14:18:void <init>(react.gnet.packet.PacketBinding,react.gnet.streams.OSS,react.gnet.streams.ISS) -> <init>
    22:24:void redirect(react.gnet.streams.OSS,react.gnet.streams.ISS) -> IEpw
    28:34:void accept(react.gnet.packet.IPacket) -> VUHt
    38:46:react.gnet.packet.IPacket findPacket(int) -> wmvi
    51:66:react.gnet.packet.IPacket read() -> anfK
    71:77:void write(react.gnet.packet.IPacket) -> uxtE
react.gnet.packet.UnhandledPacketException -> WPFO:
    long serialVersionUID -> serialVersionUID
    9:10:void <init>(java.lang.String) -> <init>
react.gnet.server.IServer -> vkaF:
    int getPort() -> getPort
    react.gnet.packet.PacketHandler getHandler() -> BBKf
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KDHU
react.gnet.server.Server -> aLaY:
    int port -> port
    java.net.ServerSocket socket -> TjED
    react.gnet.packet.PacketHandler handler -> YVnM
    20:24:void <init>(int) -> <init>
    29:29:react.gnet.packet.PacketHandler getHandler() -> BBKf
    37:84:void run() -> run
    88:91:void pstart() -> JtWp
    95:96:void pstop() -> sQYo
    101:101:int getPort() -> getPort
    react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KDHU
react.gnet.streams.ISS -> TOMi:
    java.io.InputStream in -> in
    react.gnet.streams.StreamBuilder bu -> FNyC
    boolean built -> sAXJ
    byte[] readBuffer -> dFOH
    31:257:void <init>(java.io.InputStream) -> <init>
    46:47:void <init>(byte[]) -> <init>
    58:59:react.gnet.streams.ISS buffer(int) -> oxBc
    64:72:react.glang.GList readStringList() -> HeaG
    77:85:react.glang.GList readDoubleList() -> JcVh
    90:98:react.glang.GList readLongList() -> yRkC
    103:113:react.glang.GList readStreamableList(react.gnet.streams.writable.Streamable) -> IEpw
    125:126:react.gnet.streams.ISS decrypt(javax.crypto.Cipher) -> IEpw
    136:137:react.gnet.streams.ISS gzip() -> BSMq
    142:147:void build() -> KLft
    152:154:int read() -> read
    166:173:boolean readBoolean() -> readBoolean
    185:192:byte readByte() -> readByte
    204:212:short readShort() -> readShort
    224:232:char readChar() -> readChar
    244:254:int readInt() -> readInt
    269:270:void readFully(byte[]) -> readFully
    286:303:void readFully(byte[],int,int) -> readFully
    308:308:int read(byte[]) -> read
    314:360:int read(byte[],int,int) -> read
    372:373:long readLong() -> readLong
    385:385:float readFloat() -> readFloat
    397:397:double readDouble() -> readDouble
    409:417:java.lang.String readString() -> readString
    429:430:void read(react.gnet.streams.writable.Streamable) -> VUHt
    435:436:void close() -> close
react.gnet.streams.OSS -> oDgt:
    java.io.OutputStream out -> out
    java.io.OutputStream gen -> dVnr
    react.gnet.streams.StreamBuilder bu -> FNyC
    boolean built -> sAXJ
    byte[] writeBuffer -> Kfxx
    20:130:void <init>(java.io.OutputStream) -> <init>
    30:31:void <init>() -> <init>
    35:36:react.gnet.streams.OSS buffer(int) -> AiNf
    41:42:react.gnet.streams.OSS gzip(int) -> wejS
    47:48:react.gnet.streams.OSS encrypt(javax.crypto.Cipher) -> VUHt
    53:58:void build() -> KLft
    62:63:void writeBoolean(boolean) -> writeBoolean
    67:68:void writeByte(int) -> writeByte
    72:74:void writeShort(int) -> writeShort
    78:80:void writeChar(int) -> writeChar
    84:88:void writeInt(int) -> writeInt
    92:98:void writeStringList(react.glang.GList) -> EBVa
    102:108:void writeDoubleList(react.glang.GList) -> tSmm
    112:118:void writeLongList(react.glang.GList) -> mGIk
    122:128:void writeStreamableList(react.glang.GList) -> AWkd
    134:142:void writeLong(long) -> writeLong
    146:147:void writeFloat(float) -> writeFloat
    151:152:void writeDouble(double) -> writeDouble
    156:165:void writeString(java.lang.String) -> writeString
    170:170:void db() -> gVhW
    175:177:void write(int) -> write
    188:191:void write(react.gnet.streams.writable.Streamable) -> uxtE
    195:201:byte[] getBytes() -> getBytes
    207:208:void close() -> close
    213:214:void flush() -> flush
react.gnet.streams.StreamBuilder -> BAfs:
    react.glang.GList constructors -> hIhr
    19:21:void <init>() -> <init>
    25:32:java.io.InputStream constructInput(java.io.InputStream) -> IEpw
    37:44:java.io.OutputStream constructOutput(java.io.OutputStream) -> IEpw
    49:50:void bind(react.gnet.streams.StreamConstructor) -> IEpw
    54:55:void bindGZIP(int) -> AWnW
    59:60:void bindGZIP() -> BSNM
    64:65:void bindCipher(javax.crypto.Cipher) -> uxtE
    69:70:void bindBuffer(int) -> WFke
    74:75:void bindBuffer() -> cRkr
react.gnet.streams.StreamConstructor -> LiYL:
    java.io.InputStream constructInput(java.io.InputStream) -> IEpw
    java.io.OutputStream constructOutput(java.io.OutputStream) -> IEpw
react.gnet.streams.constructors.BufferedStreamConstructor -> QxhS:
    int bufferSize -> bufferSize
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:java.io.BufferedInputStream constructInput(java.io.InputStream) -> VUHt
    34:34:java.io.BufferedOutputStream constructOutput(java.io.OutputStream) -> VUHt
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> IEpw
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> IEpw
react.gnet.streams.constructors.CipherStreamConstructor -> biXJ:
    javax.crypto.Cipher cipher -> mbKE
    18:20:void <init>(javax.crypto.Cipher) -> <init>
    25:25:javax.crypto.CipherInputStream constructInput(java.io.InputStream) -> uxtE
    31:31:javax.crypto.CipherOutputStream constructOutput(java.io.OutputStream) -> uxtE
    13:13:java.io.OutputStream constructOutput(java.io.OutputStream) -> IEpw
    13:13:java.io.InputStream constructInput(java.io.InputStream) -> IEpw
react.gnet.streams.constructors.GZipStreamConstructor -> Qxgq:
    int compressionLevel -> YEnY
    16:18:void <init>(int) -> <init>
    22:23:void <init>() -> <init>
    28:28:react.gnet.streams.overlays.CGZIPInputStream constructInput(java.io.InputStream) -> KDHU
    34:34:react.gnet.streams.overlays.CGZIPOutputStream constructOutput(java.io.OutputStream) -> KDHU
    11:11:java.io.OutputStream constructOutput(java.io.OutputStream) -> IEpw
    11:11:java.io.InputStream constructInput(java.io.InputStream) -> IEpw
react.gnet.streams.overlays.CGZIPInputStream -> nlYd:
    12:14:void <init>(java.io.InputStream) -> <init>
react.gnet.streams.overlays.CGZIPOutputStream -> PKQn:
    12:14:void <init>(java.io.OutputStream,int) -> <init>
react.gnet.streams.writable.Streamable -> gFBt:
    void toBytes(react.gnet.streams.OSS) -> IEpw
    void fromBytes(react.gnet.streams.ISS) -> IEpw
react.graph.ColossalView -> NxNi:
    react.papyrus.BufferedFrame view -> EwJv
    react.glang.GMap buffers -> nBhe
    react.glang.GMap graphs -> uOnR
    double level -> CyTG
    double targetLevel -> KMfM
    int maxX -> ioPD
    int maxY -> CWQo
    17:23:void <init>() -> <init>
    27:32:void clear() -> clear
    36:47:void triggerGraphsInView() -> TiDn
    51:77:void render() -> dENd
    81:98:void scroll(int) -> pYEs
    102:112:void recompile() -> aTuv
    116:118:void addGraph(react.graph.Point,react.graph.Point,react.graph.IGraph) -> IEpw
    122:122:react.papyrus.BufferedFrame getView() -> OHRw
    127:127:react.glang.GMap getBuffers() -> esFJ
    132:132:react.glang.GMap getGraphs() -> BmAu
    137:137:double getLevel() -> IqTL
    142:142:double getTargetLevel() -> dgOw
    147:147:int getMaxX() -> dfnw
    152:152:int getMaxY() -> YEMn
react.graph.ColossalView$Builder -> NxNi$IEpw:
    react.glang.GList graphs -> FhjV
    159:162:void <init>() -> <init>
    166:167:void add(react.graph.IGraph,react.graph.GraphSize) -> IEpw
    171:191:react.graph.ColossalView compute() -> DXsE
react.graph.CubicleIterator -> MBFu:
    int[][] mapping -> MeOB
    int xCubes -> VoiJ
    int yCubes -> hJHj
    8:22:void <init>() -> <init>
    26:42:react.graph.Point positionFor(int) -> EKIh
    47:130:void insert(react.graph.GraphSize,int) -> IEpw
    134:145:void print() -> print
react.graph.GraphSampleLine -> uOKG:
    double lx -> hRYU
    double ly -> OIRU
    react.api.ISampler sampler -> dgpD
    react.graph.IFormatter formatter -> BSnC
    byte graphColor -> RkmS
    byte backgroundColor -> LXyf
    byte borderColor -> vlcY
    byte textColor -> VVVk
    int ticksLeftTitle -> OADV
    int ticksOutTitle -> COBo
    double nextPoint -> LbNd
    31:41:void <init>(react.api.ISampler,react.graph.IFormatter,long) -> <init>
    45:46:void sample() -> AyqF
    51:183:void onRender(react.papyrus.BufferedFrame) -> IEpw
    187:220:int getHeightForText(react.papyrus.BufferedFrame) -> VUHt
    226:254:int getHue(int,int,int) -> uxtE
    259:281:void scaleFor(react.glang.GList) -> kRDe
    285:285:react.graph.IFormatter getFormatter() -> HSrV
    290:291:void setFormatter(react.graph.IFormatter) -> IEpw
    295:295:byte getGraphColor() -> DbEM
    300:301:void setGraphColor(byte) -> IEpw
    305:305:byte getBackgroundColor() -> CfqT
    310:311:void setBackgroundColor(byte) -> VUHt
    315:315:byte getBorderColor() -> BtqX
    320:321:void setBorderColor(byte) -> uxtE
    325:325:byte getTextColor() -> hjlA
    330:331:void setTextColor(byte) -> KDHU
    335:335:react.api.ISampler getSampler() -> wwXW
react.graph.GraphSize -> OioU:
    react.graph.GraphSize WIDE -> BCOE
    react.graph.GraphSize FULL -> uHAl
    react.graph.GraphSize SQUARE -> Ypcm
    int[] $SWITCH_TABLE$react$graph$GraphSize -> SwdK
    react.graph.GraphSize[] ENUM$VALUES -> riLO
    3:7:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    11:21:react.graph.Point toPoint() -> fJrQ
    1:1:react.graph.GraphSize[] values() -> values
    1:1:react.graph.GraphSize valueOf(java.lang.String) -> valueOf
    3:3:int[] $SWITCH_TABLE$react$graph$GraphSize() -> fCBg
react.graph.GraphText -> hsXa:
    java.lang.String text -> text
    byte fontColor -> SxDv
    byte backgroundColor -> LXyf
    boolean wrote -> EvlL
    20:26:void <init>(java.lang.String,byte) -> <init>
    31:49:void onRender(react.papyrus.BufferedFrame) -> IEpw
    53:53:java.lang.String getText() -> getText
    58:59:void setText(java.lang.String) -> setText
    63:63:byte getFontColor() -> cIxu
    68:69:void setFontColor(byte) -> kkWN
    73:73:byte getBackgroundColor() -> CfqT
    78:79:void setBackgroundColor(byte) -> VUHt
react.graph.GraphingInstance -> gxfJ:
    org.bukkit.entity.Player player -> player
    org.bukkit.inventory.ItemStack item -> item
    react.glang.GList graphs -> FhjV
    react.graph.ColossalView view -> Evkl
    react.papyrus.Papyrus papyrus -> WsOp
    react.papyrus.IRenderer renderer -> urSy
    boolean mapping -> fnGA
    react.glang.GList msgs -> SLpJ
    react.surge.sched.Task waiter -> XnBj
    react.surge.sched.Task waiter2 -> HVCP
    int shift -> oEng
    boolean notif -> QiMm
    47:115:void <init>(org.bukkit.entity.Player) -> <init>
    120:125:void on(org.bukkit.event.player.PlayerToggleSneakEvent) -> IEpw
    130:134:void on(org.bukkit.event.player.PlayerQuitEvent) -> IEpw
    138:142:void send(java.lang.String) -> kHrO
    148:148:void on(org.bukkit.event.player.AsyncPlayerChatEvent) -> IEpw
    153:165:void on(react.event.ReactScrollEvent) -> IEpw
    170:175:void on(org.bukkit.event.player.PlayerSwapHandItemsEvent) -> IEpw
    179:187:void destroy() -> destroy
    191:200:void toggle() -> uppn
    204:205:void setGraphs(react.glang.GList) -> YfcL
    209:222:void enable() -> enable
    226:231:void disable() -> disable
    235:239:void disableNoSave() -> OsFW
    243:259:void compile() -> RHjH
    40:40:boolean access$0(react.graph.GraphingInstance) -> IEpw
    41:41:react.glang.GList access$1(react.graph.GraphingInstance) -> VUHt
    45:45:boolean access$2(react.graph.GraphingInstance) -> uxtE
    45:45:void access$3(react.graph.GraphingInstance,boolean) -> IEpw
    44:44:int access$4(react.graph.GraphingInstance) -> KDHU
    44:44:void access$5(react.graph.GraphingInstance,int) -> IEpw
    37:37:react.graph.ColossalView access$6(react.graph.GraphingInstance) -> kkWN
react.graph.GraphingInstance$1 -> gxfJ$1:
    react.graph.GraphingInstance this$0 -> Jtyk
    org.bukkit.entity.Player val$player -> IXdr
    1:51:void <init>(react.graph.GraphingInstance,java.lang.String,int,org.bukkit.entity.Player) -> <init>
    56:73:void run() -> run
react.graph.GraphingInstance$2 -> gxfJ$2:
    react.graph.GraphingInstance this$0 -> Jtyk
    1:76:void <init>(react.graph.GraphingInstance,java.lang.String,int) -> <init>
    81:100:void run() -> run
react.graph.GraphingInstance$3 -> gxfJ$3:
    react.graph.GraphingInstance this$0 -> Jtyk
    1:106:void <init>(react.graph.GraphingInstance) -> <init>
    111:113:void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> IEpw
react.graph.IFormatter -> dfkR:
    java.lang.String from(double) -> AFlA
react.graph.IGraph -> SSxY:
    java.lang.String getName() -> getName
    react.graph.PlotBoard getPlotBoard() -> aDUQ
    long getTimeViewport() -> Pdfb
    void render(react.papyrus.BufferedFrame) -> uxtE
    double getMax() -> getMax
    void setMax(double) -> bOYT
react.graph.NormalGraph -> gxel:
    java.lang.String name -> name
    react.graph.PlotBoard plotBoard -> slMi
    long timeViewport -> mrlX
    double max -> max
    12:18:void <init>(java.lang.String,long) -> <init>
    23:23:java.lang.String getName() -> getName
    29:29:react.graph.PlotBoard getPlotBoard() -> aDUQ
    35:35:long getTimeViewport() -> Pdfb
    41:42:void render(react.papyrus.BufferedFrame) -> uxtE
    47:47:double getMax() -> getMax
    53:54:void setMax(double) -> bOYT
    void onRender(react.papyrus.BufferedFrame) -> IEpw
react.graph.PlotBoard -> PTAj:
    react.glang.GMap plots -> Eehm
    int maxRecordings -> jaSS
    12:16:void <init>() -> <init>
    20:24:void clean() -> clean
    28:28:long getInaccurateTimeSpan() -> PeHP
    33:33:long getAccurateTimeSpan() -> RkNS
    38:50:long getMedian(long,long) -> kkWN
    55:55:long getMinimumAccuracyRange() -> YUoF
    60:70:double getMaxValue() -> XuOg
    75:85:double getMinValue() -> uNqO
    90:90:react.glang.GList sort(react.glang.GMap) -> VUHt
    95:105:long earilestRecording() -> EeJl
    110:120:long latestRecording() -> piuN
    125:126:void reduceBefore(long) -> AFlA
    130:148:void reduceBetween(long,long) -> mNyO
    152:152:boolean before(long,long) -> YoSi
    157:157:boolean after(long,long) -> EBVa
    162:162:boolean within(long,long,long) -> IEpw
    167:177:react.glang.GMap getBetween(long,long) -> tSmm
    182:184:void plot(long,double) -> IEpw
    188:188:boolean hasAt(long) -> bOYT
    193:193:double getAt(long) -> kHrO
    198:198:int getSize() -> getSize
react.graph.Point -> JROo:
    int x -> x
    int y -> y
    8:12:void <init>() -> <init>
    14:18:void <init>(int,int) -> <init>
    23:23:java.lang.String toString() -> toString
react.graph.PointedGraph -> qlqQ:
    int iid -> xsMP
    react.graph.IGraph graph -> CWTY
    react.graph.GraphSize size -> gykp
    int id -> id
    5:5:void <clinit>() -> <clinit>
    10:15:void <init>(react.graph.IGraph,react.graph.GraphSize) -> <init>
    19:19:react.graph.IGraph getGraph() -> fJtx
    24:25:void setGraph(react.graph.IGraph) -> IEpw
    29:29:react.graph.GraphSize getSize() -> LrOu
    34:35:void setSize(react.graph.GraphSize) -> IEpw
    39:39:int getId() -> getId
    45:50:int hashCode() -> hashCode
    56:74:boolean equals(java.lang.Object) -> equals
react.graph.RenderMaxType -> oEHo:
    react.graph.RenderMaxType UNLIMITED -> iLnB
    react.graph.RenderMaxType LIMITED -> JSVW
    react.graph.RenderMaxType[] ENUM$VALUES -> TaSq
    3:6:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.graph.RenderMaxType[] values() -> values
    1:1:react.graph.RenderMaxType valueOf(java.lang.String) -> valueOf
react.json.HTTP -> bFrP:
    java.lang.String CRLF -> uaRa
    35:35:void <init>() -> <init>
    93:127:react.json.JSONObject toJSONObject(java.lang.String) -> ivRC
    162:198:java.lang.String toString(react.json.JSONObject) -> VUHt
react.json.HTTPTokener -> uExO:
    45:46:void <init>(java.lang.String) -> <init>
    58:87:java.lang.String nextToken() -> nextToken
react.json.JSONArray -> pXkh:
    java.util.ArrayList myArrayList -> qDDj
    93:96:void <init>() -> <init>
    108:143:void <init>(react.json.JSONTokener) -> <init>
    157:158:void <init>(java.lang.String) -> <init>
    166:177:void <init>(java.util.Collection) -> <init>
    187:199:void <init>(java.lang.Object) -> <init>
    204:204:java.util.Iterator iterator() -> iterator
    218:223:java.lang.Object get(int) -> get
    239:247:boolean getBoolean(int) -> getBoolean
    262:268:double getDouble(int) -> getDouble
    286:294:java.lang.Enum getEnum(java.lang.Class,int) -> IEpw
    309:315:java.math.BigDecimal getBigDecimal(int) -> getBigDecimal
    331:337:java.math.BigInteger getBigInteger(int) -> SBpB
    352:358:int getInt(int) -> getInt
    374:379:react.json.JSONArray getJSONArray(int) -> SCQO
    394:399:react.json.JSONObject getJSONObject(int) -> HSrV
    414:420:long getLong(int) -> getLong
    435:440:java.lang.String getString(int) -> getString
    452:452:boolean isNull(int) -> isNull
    468:479:java.lang.String join(java.lang.String) -> pOot
    489:489:int length() -> length
    501:501:java.lang.Object opt(int) -> mGLN
    515:515:boolean optBoolean(int) -> XcbO
    533:536:boolean optBoolean(int,boolean) -> VUHt
    551:551:double optDouble(int) -> AyqF
    569:572:double optDouble(int,double) -> IEpw
    587:587:int optInt(int) -> iCOW
    605:608:int optInt(int,int) -> EBVa
    623:623:java.lang.Enum optEnum(java.lang.Class,int) -> VUHt
    642:664:java.lang.Enum optEnum(java.lang.Class,int,java.lang.Enum) -> IEpw
    683:686:java.math.BigInteger optBigInteger(int,java.math.BigInteger) -> IEpw
    705:708:java.math.BigDecimal optBigDecimal(int,java.math.BigDecimal) -> IEpw
    722:723:react.json.JSONArray optJSONArray(int) -> Kvmy
    737:738:react.json.JSONObject optJSONObject(int) -> nJNX
    752:752:long optLong(int) -> xhlj
    770:773:long optLong(int,long) -> IEpw
    788:788:java.lang.String optString(int) -> VChl
    803:804:java.lang.String optString(int,java.lang.String) -> IEpw
    816:817:react.json.JSONArray put(boolean) -> YfcL
    830:831:react.json.JSONArray put(java.util.Collection) -> IEpw
    845:848:react.json.JSONArray put(double) -> kHrO
    860:861:react.json.JSONArray put(int) -> PRyP
    873:874:react.json.JSONArray put(long) -> ivRC
    887:888:react.json.JSONArray put(java.util.Map) -> IEpw
    902:903:react.json.JSONArray put(java.lang.Object) -> NMRL
    921:922:react.json.JSONArray put(int,boolean) -> uxtE
    939:940:react.json.JSONArray put(int,java.util.Collection) -> IEpw
    958:959:react.json.JSONArray put(int,double) -> VUHt
    977:978:react.json.JSONArray put(int,int) -> tSmm
    996:997:react.json.JSONArray put(int,long) -> VUHt
    1015:1016:react.json.JSONArray put(int,java.util.Map) -> IEpw
    1037:1053:react.json.JSONArray put(int,java.lang.Object) -> IEpw
    1066:1066:java.lang.Object remove(int) -> remove
    1079:1109:boolean similar(java.lang.Object) -> wCeA
    1126:1135:react.json.JSONObject toJSONObject(react.json.JSONArray) -> IEpw
    1153:1156:java.lang.String toString() -> toString
    1174:1177:java.lang.String toString(int) -> toString
    1192:1192:java.io.Writer write(java.io.Writer) -> IEpw
    1212:1247:java.io.Writer write(java.io.Writer,int,int) -> IEpw
react.json.JSONException -> dLyP:
    long serialVersionUID -> serialVersionUID
    java.lang.Throwable cause -> slLx
    22:23:void <init>(java.lang.String) -> <init>
    33:35:void <init>(java.lang.Throwable) -> <init>
    47:47:java.lang.Throwable getCause() -> getCause
react.json.JSONML -> NEKI:
    37:37:void <init>() -> <init>
    57:279:java.lang.Object parse(react.json.XMLTokener,boolean,react.json.JSONArray) -> IEpw
    301:301:react.json.JSONArray toJSONArray(java.lang.String) -> YgBo
    320:320:react.json.JSONArray toJSONArray(react.json.XMLTokener) -> IEpw
    340:340:react.json.JSONObject toJSONObject(react.json.XMLTokener) -> VUHt
    360:360:react.json.JSONObject toJSONObject(java.lang.String) -> ivRC
    379:456:java.lang.String toString(react.json.JSONArray) -> VUHt
    472:552:java.lang.String toString(react.json.JSONObject) -> VUHt
react.json.JSONObject -> wTnu:
    java.util.Map map -> map
    java.lang.Object NULL -> OsgW
    153:153:void <clinit>() -> <clinit>
    158:161:void <init>() -> <init>
    179:189:void <init>(react.json.JSONObject,java.lang.String[]) -> <init>
    202:248:void <init>(react.json.JSONTokener) -> <init>
    261:277:void <init>(java.util.Map) -> <init>
    302:304:void <init>(java.lang.Object) -> <init>
    322:334:void <init>(java.lang.Object,java.lang.String[]) -> <init>
    350:351:void <init>(java.lang.String) -> <init>
    365:400:void <init>(java.lang.String,java.util.Locale) -> <init>
    423:435:react.json.JSONObject accumulate(java.lang.String,java.lang.Object) -> IEpw
    455:467:react.json.JSONObject append(java.lang.String,java.lang.Object) -> VUHt
    480:499:java.lang.String doubleToString(double) -> ivRC
    513:522:java.lang.Object get(java.lang.String) -> get
    539:547:java.lang.Enum getEnum(java.lang.Class,java.lang.String) -> getEnum
    562:570:boolean getBoolean(java.lang.String) -> getBoolean
    585:591:java.math.BigInteger getBigInteger(java.lang.String) -> LiMg
    607:613:java.math.BigDecimal getBigDecimal(java.lang.String) -> getBigDecimal
    629:635:double getDouble(java.lang.String) -> getDouble
    651:657:int getInt(java.lang.String) -> getInt
    672:677:react.json.JSONArray getJSONArray(java.lang.String) -> fAsQ
    691:696:react.json.JSONObject getJSONObject(java.lang.String) -> CUas
    711:717:long getLong(java.lang.String) -> getLong
    728:741:java.lang.String[] getNames(react.json.JSONObject) -> uxtE
    751:767:java.lang.String[] getNames(java.lang.Object) -> UcFc
    781:786:java.lang.String getString(java.lang.String) -> getString
    798:798:boolean has(java.lang.String) -> has
    815:841:react.json.JSONObject increment(java.lang.String) -> Sdoy
    855:855:boolean isNull(java.lang.String) -> wmvi
    865:865:java.util.Iterator keys() -> keys
    875:875:java.util.Set keySet() -> keySet
    885:885:int length() -> length
    897:903:react.json.JSONArray names() -> WFym
    917:937:java.lang.String numberToString(java.lang.Number) -> IEpw
    949:949:java.lang.Object opt(java.lang.String) -> oxBc
    963:963:java.lang.Enum optEnum(java.lang.Class,java.lang.String) -> IEpw
    982:1004:java.lang.Enum optEnum(java.lang.Class,java.lang.String,java.lang.Enum) -> IEpw
    1018:1018:boolean optBoolean(java.lang.String) -> AiNf
    1036:1039:boolean optBoolean(java.lang.String,boolean) -> IEpw
    1054:1054:double optDouble(java.lang.String) -> wejS
    1072:1075:java.math.BigInteger optBigInteger(java.lang.String,java.math.BigInteger) -> IEpw
    1094:1097:java.math.BigDecimal optBigDecimal(java.lang.String,java.math.BigDecimal) -> IEpw
    1116:1119:double optDouble(java.lang.String,double) -> IEpw
    1134:1134:int optInt(java.lang.String) -> AWnW
    1152:1155:int optInt(java.lang.String,int) -> uxtE
    1169:1170:react.json.JSONArray optJSONArray(java.lang.String) -> WFke
    1183:1184:react.json.JSONObject optJSONObject(java.lang.String) -> pYEs
    1198:1198:long optLong(java.lang.String) -> EKIh
    1216:1219:long optLong(java.lang.String,long) -> IEpw
    1234:1234:java.lang.String optString(java.lang.String) -> SBpB
    1249:1250:java.lang.String optString(java.lang.String,java.lang.String) -> VUHt
    1255:1305:void populateMap(java.lang.Object) -> AFlA
    1320:1321:react.json.JSONObject put(java.lang.String,boolean) -> VUHt
    1337:1338:react.json.JSONObject put(java.lang.String,java.util.Collection) -> IEpw
    1354:1355:react.json.JSONObject put(java.lang.String,double) -> VUHt
    1371:1372:react.json.JSONObject put(java.lang.String,int) -> KDHU
    1388:1389:react.json.JSONObject put(java.lang.String,long) -> VUHt
    1405:1406:react.json.JSONObject put(java.lang.String,java.util.Map) -> IEpw
    1425:1437:react.json.JSONObject put(java.lang.String,java.lang.Object) -> uxtE
    1455:1463:react.json.JSONObject putOnce(java.lang.String,java.lang.Object) -> KDHU
    1482:1486:react.json.JSONObject putOpt(java.lang.String,java.lang.Object) -> kkWN
    1501:1510:java.lang.String quote(java.lang.String) -> quote
    1517:1577:java.io.Writer quote(java.lang.String,java.io.Writer) -> IEpw
    1590:1590:java.lang.Object remove(java.lang.String) -> SCQO
    1605:1640:boolean similar(java.lang.Object) -> wCeA
    1655:1707:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    1720:1736:void testValidity(java.lang.Object) -> bOYT
    1751:1760:react.json.JSONArray toJSONArray(react.json.JSONArray) -> uxtE
    1779:1782:java.lang.String toString() -> toString
    1802:1805:java.lang.String toString(int) -> toString
    1835:1879:java.lang.String valueToString(java.lang.Object) -> valueToString
    1898:1932:java.lang.Object wrap(java.lang.Object) -> wrap
    1947:1947:java.io.Writer write(java.io.Writer) -> IEpw
    1952:1995:java.io.Writer writeValue(java.io.Writer,java.lang.Object,int,int) -> IEpw
    2000:2004:void indent(java.io.Writer,int) -> IEpw
    2019:2068:java.io.Writer write(java.io.Writer,int,int) -> IEpw
react.json.JSONObject$Null -> wTnu$IEpw:
    102:102:void <init>() -> <init>
    114:114:java.lang.Object clone() -> clone
    128:128:boolean equals(java.lang.Object) -> equals
    138:138:java.lang.String toString() -> toString
    102:102:void <init>(react.json.JSONObject$Null) -> <init>
react.json.JSONString -> EmUB:
    java.lang.String toJSONString() -> toJSONString
react.json.JSONStringer -> nBEX:
    69:70:void <init>() -> <init>
    83:83:java.lang.String toString() -> toString
react.json.JSONTokener -> YUjj:
    long character -> aEVl
    boolean eof -> eof
    long index -> vApt
    long line -> Qhks
    char previous -> LbMv
    java.io.Reader reader -> reader
    boolean usePrevious -> iLlt
    59:68:void <init>(java.io.Reader) -> <init>
    78:79:void <init>(java.io.InputStream) -> <init>
    89:90:void <init>(java.lang.String) -> <init>
    99:107:void back() -> jyes
    119:131:int dehexchar(char) -> IEpw
    136:136:boolean end() -> fmYS
    147:153:boolean more() -> PBfj
    164:198:char next() -> next
    213:218:char next(char) -> VUHt
    233:250:java.lang.String next(int) -> Jska
    263:266:char nextClean() -> LaNj
    287:334:java.lang.String nextString(char) -> uxtE
    349:361:java.lang.String nextTo(char) -> KDHU
    376:388:java.lang.String nextTo(java.lang.String) -> HSrV
    403:441:java.lang.Object nextValue() -> aeym
    458:479:char skipTo(char) -> kkWN
    491:491:react.json.JSONException syntaxError(java.lang.String) -> mGLN
    501:501:java.lang.String toString() -> toString
react.json.JSONWriter -> ckyF:
    int maxdepth -> jXbA
    boolean comma -> lMfT
    char mode -> MSoC
    react.json.JSONObject[] stack -> Ygtn
    int top -> top
    java.io.Writer writer -> writer
    97:104:void <init>(java.io.Writer) -> <init>
    117:141:react.json.JSONWriter append(java.lang.String) -> XcbO
    157:164:react.json.JSONWriter array() -> dVQw
    180:193:react.json.JSONWriter end(char,char) -> IEpw
    206:206:react.json.JSONWriter endArray() -> kkfk
    219:219:react.json.JSONWriter endObject() -> GHme
    235:258:react.json.JSONWriter key(java.lang.String) -> AyqF
    274:285:react.json.JSONWriter object() -> dpEN
    299:310:void pop(char) -> mNyO
    322:329:void push(react.json.JSONObject) -> KDHU
    342:342:react.json.JSONWriter value(boolean) -> rpKU
    356:356:react.json.JSONWriter value(double) -> pOot
    369:369:react.json.JSONWriter value(long) -> pOot
    385:385:react.json.JSONWriter value(java.lang.Object) -> kHrO
react.json.XML -> aUQs:
    java.lang.Character AMP -> PKyE
    java.lang.Character APOS -> iLqC
    java.lang.Character BANG -> jXdj
    java.lang.Character EQ -> UdYk
    java.lang.Character GT -> ujFn
    java.lang.Character LT -> AkAj
    java.lang.Character QUEST -> dFQq
    java.lang.Character QUOT -> CFTD
    java.lang.Character SLASH -> CODj
    40:64:void <clinit>() -> <clinit>
    36:36:void <init>() -> <init>
    82:107:java.lang.String escape(java.lang.String) -> escape
    120:132:void noSpace(java.lang.String) -> iCOW
    150:339:boolean parse(react.json.XMLTokener,react.json.JSONObject,java.lang.String) -> IEpw
    358:399:java.lang.Object stringToValue(java.lang.String) -> stringToValue
    420:426:react.json.JSONObject toJSONObject(java.lang.String) -> ivRC
    439:439:java.lang.String toString(java.lang.Object) -> toString
    454:579:java.lang.String toString(java.lang.Object,java.lang.String) -> toString
react.json.XMLTokener -> woBu:
    java.util.HashMap entity -> Hfds
    45:51:void <clinit>() -> <clinit>
    61:62:void <init>(java.lang.String) -> <init>
    75:88:java.lang.String nextCDATA() -> impv
    108:133:java.lang.Object nextContent() -> HveU
    149:166:java.lang.Object nextEntity(char) -> YoSi
    186:239:java.lang.Object nextMeta() -> brNp
    261:334:java.lang.Object nextToken() -> xGYS
    354:420:boolean skipPast(java.lang.String) -> Kvmy
react.papyrus.BufferedFrame -> PTAw:
    byte[][] frame -> MCQQ
    int width -> width
    int height -> height
    20:21:void <init>() -> <init>
    23:29:void <init>(int,int) -> <init>
    33:83:void drawText(int,int,org.bukkit.map.MapFont,byte,java.lang.String) -> IEpw
    90:97:void write(byte) -> mNyO
    101:112:react.papyrus.BufferedFrame scale(double,double,int) -> IEpw
    120:127:void fromBufferedImage(java.awt.image.BufferedImage) -> IEpw
    131:145:java.awt.image.BufferedImage toBufferedImage() -> OsHE
    153:160:void writeRainbowMul() -> TFaP
    167:174:void writeRainbowAdd() -> AOln
    181:191:void writeSparks() -> sPyv
    195:201:boolean write(int,int,byte) -> IEpw
    206:228:int write(react.papyrus.BufferedFrame,int,int) -> IEpw
    233:250:void write(react.papyrus.BufferedFrame) -> KDHU
    254:254:byte[][] getRawFrame() -> TNqn
    259:259:int getWidth() -> getWidth
    264:264:int getHeight() -> getHeight
react.papyrus.FrameColor -> CENK:
    java.awt.Color[] colors -> colors
    byte TRANSPARENT -> TRANSPARENT
    byte LIGHT_GREEN -> LIGHT_GREEN
    byte LIGHT_BROWN -> LIGHT_BROWN
    byte GRAY_1 -> GRAY_1
    byte RED -> RED
    byte PALE_BLUE -> PALE_BLUE
    byte GRAY_2 -> GRAY_2
    byte DARK_GREEN -> DARK_GREEN
    byte WHITE -> WHITE
    byte LIGHT_GRAY -> LIGHT_GRAY
    byte BROWN -> BROWN
    byte DARK_GRAY -> DARK_GRAY
    byte BLUE -> BLUE
    byte DARK_BROWN -> DARK_BROWN
    11:25:void <clinit>() -> <clinit>
    9:9:void <init>() -> <init>
    29:29:java.awt.Color c(int,int,int) -> KDHU
    34:41:double getDistance(java.awt.Color,java.awt.Color) -> IEpw
    46:50:java.awt.image.BufferedImage resizeImage(java.awt.Image) -> resizeImage
    55:68:byte[] imageToBytes(java.awt.Image) -> imageToBytes
    73:73:byte matchColor(int,int,int) -> matchColor
    78:97:byte matchColor(java.awt.Color) -> matchColor
    103:109:java.awt.Color getColor(byte) -> getColor
react.papyrus.IPapyrus -> WGWS:
    org.bukkit.map.MapView getView() -> ggil
    react.papyrus.BufferedFrame getFrameBuffer() -> eQCr
    void addRenderer(react.papyrus.IRenderer) -> IEpw
    void clearRenderers() -> goyv
    react.glang.GList getRenderers() -> vstx
    void removeRenderer(react.papyrus.IRenderer) -> VUHt
    void destroy() -> destroy
    org.bukkit.inventory.ItemStack makeMapItem() -> Cwtw
react.papyrus.IRenderer -> iByU:
    void draw(react.papyrus.BufferedFrame,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> IEpw
react.papyrus.Papyrus -> WWwe:
    org.bukkit.map.MapView map -> FXOO
    react.papyrus.BufferedFrame frameBuffer -> HMTF
    react.papyrus.BufferedFrame lastFrameBuffer -> hkot
    react.glang.GList renderers -> kdXg
    21:34:void <init>(org.bukkit.World) -> <init>
    39:39:org.bukkit.map.MapView getView() -> ggil
    45:45:react.papyrus.BufferedFrame getFrameBuffer() -> eQCr
    51:52:void addRenderer(react.papyrus.IRenderer) -> IEpw
    57:58:void clearRenderers() -> goyv
    63:63:react.glang.GList getRenderers() -> vstx
    69:70:void removeRenderer(react.papyrus.IRenderer) -> VUHt
    76:108:void render(org.bukkit.map.MapView,org.bukkit.map.MapCanvas,org.bukkit.entity.Player) -> render
    114:114:void destroy() -> destroy
    120:122:org.bukkit.inventory.ItemStack makeMapItem() -> Cwtw
    17:17:react.papyrus.BufferedFrame access$0(react.papyrus.Papyrus) -> IEpw
    19:19:react.glang.GList access$1(react.papyrus.Papyrus) -> VUHt
    18:18:react.papyrus.BufferedFrame access$2(react.papyrus.Papyrus) -> uxtE
react.papyrus.Papyrus$1 -> WWwe$1:
    react.papyrus.Papyrus this$0 -> opeS
    org.bukkit.map.MapCanvas val$c -> wVYe
    org.bukkit.map.MapView val$v -> vAsr
    1:78:void <init>(react.papyrus.Papyrus,org.bukkit.map.MapCanvas,org.bukkit.map.MapView) -> <init>
    83:105:void run() -> run
react.papyrus.ReactFont -> kQqJ:
    int spaceSize -> EDKI
    java.lang.String fontChars -> Lrqe
    int[][] fontData -> TaXC
    react.papyrus.ReactFont Font -> Kolo
    17:281:void <clinit>() -> <clinit>
    288:289:void <init>() -> <init>
    291:334:void <init>(boolean) -> <init>
react.rai.Goal -> kAOx:
    react.glang.GList subgoals -> SUbB
    java.lang.String tag -> tMOi
    11:15:void <init>(java.lang.String) -> <init>
    20:20:react.glang.GList getSubgoals() -> Divj
    26:44:void propigate() -> Xtpd
    49:50:void addGoal(react.rai.IGoal) -> IEpw
    55:65:react.glang.GList getFailingSubgoals() -> royk
    71:71:boolean isFailing() -> eite
    77:77:java.lang.String getTag() -> getTag
    83:92:void update() -> update
    boolean onCheckFailing() -> brMo
    void onPropigated() -> CVTC
react.rai.Goal$1 -> kAOx$1:
    react.rai.Goal this$0 -> oOBW
    react.rai.IGoal val$i -> wEXH
    1:33:void <init>(react.rai.Goal,react.rai.IGoal) -> <init>
    38:39:void run() -> run
react.rai.IGoal -> mXVn:
    react.glang.GList getSubgoals() -> Divj
    void propigate() -> Xtpd
    void onPropigated() -> CVTC
    java.lang.String getTag() -> getTag
    react.glang.GList getFailingSubgoals() -> royk
    boolean isFailing() -> eite
    boolean onCheckFailing() -> brMo
    void update() -> update
    void addGoal(react.rai.IGoal) -> IEpw
react.rai.IRAI -> QyKX:
    react.glang.GList getGoals() -> CxXc
    void tick() -> tick
    void addGoal(react.rai.IGoal) -> IEpw
    react.glang.GList getEvents() -> PvNI
    void callEvent(react.rai.RAIEvent) -> IEpw
    react.glang.GList getListeners() -> vbwh
react.rai.RAI -> inNN:
    react.glang.GList goals -> UdXj
    react.glang.GList events -> yTOH
    react.glang.GList logEvents -> cBlm
    react.glang.GList listeners -> ejuq
    long since -> sIlQ
    react.rai.RAI instance -> Ngtf
    21:30:void <init>() -> <init>
    35:35:react.glang.GList getGoals() -> CxXc
    41:42:void addGoal(react.rai.IGoal) -> IEpw
    47:69:void tick() -> tick
    74:74:react.glang.GList getEvents() -> PvNI
    80:87:void callEvent(react.rai.RAIEvent) -> IEpw
    92:92:react.glang.GList getListeners() -> vbwh
react.rai.RAIEvent -> cBJE:
    react.rai.RAIEventType type -> ejvm
    java.lang.String[] pars -> HxGL
    java.lang.String ovt -> yvQU
    9:14:void <init>(react.rai.RAIEventType,java.lang.String[]) -> <init>
    19:19:java.lang.String toString() -> toString
    24:24:react.rai.RAIEventType getType() -> XcrL
    29:29:java.lang.String[] getPars() -> mqoh
    34:34:java.lang.String getOvt() -> fCHh
react.rai.RAIEventType -> ycil:
    react.rai.RAIEventType FIRE_ACTION -> dWRs
    react.rai.RAIEventType NOTE_GOAL_FAILING -> eITc
    react.rai.RAIEventType NOTE_GOAL_FIXED -> pjvF
    java.lang.String[] msgs -> NVuq
    react.rai.RAIEventType[] ENUM$VALUES -> NpiK
    5:9:void <clinit>() -> <clinit>
    13:16:void <init>(java.lang.String,int,java.lang.String[]) -> <init>
    20:20:int getSize() -> getSize
    25:25:int pickRandom() -> rVkH
    30:41:java.lang.String formatFor(int,java.lang.String[]) -> IEpw
    1:1:react.rai.RAIEventType[] values() -> values
    1:1:react.rai.RAIEventType valueOf(java.lang.String) -> valueOf
react.rai.goals.GoalReducedChunkLoad -> baIb:
    boolean failing -> qelN
    24:27:void <init>() -> <init>
    34:60:boolean onCheckFailing() -> brMo
    66:79:void onPropigated() -> CVTC
react.rai.goals.GoalReducedChunkLoad$1 -> baIb$1:
    react.rai.goals.GoalReducedChunkLoad this$0 -> GcdK
    1:42:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    47:56:void run() -> run
react.rai.goals.GoalReducedChunkLoad$2 -> baIb$2:
    react.rai.goals.GoalReducedChunkLoad this$0 -> GcdK
    1:68:void <init>(react.rai.goals.GoalReducedChunkLoad) -> <init>
    73:76:void run() -> run
react.rai.goals.GoalReducedEntityCounts -> hIHN:
    boolean failing -> qelN
    28:31:void <init>() -> <init>
    38:85:boolean onCheckFailing() -> brMo
    91:134:void onPropigated() -> CVTC
    24:24:boolean access$0(react.rai.goals.GoalReducedEntityCounts) -> IEpw
react.rai.goals.GoalReducedEntityCounts$1 -> hIHN$1:
    react.rai.goals.GoalReducedEntityCounts this$0 -> oErp
    1:67:void <init>(react.rai.goals.GoalReducedEntityCounts) -> <init>
    72:81:void run() -> run
react.rai.goals.GoalReducedEntityCounts$2 -> hIHN$2:
    react.rai.goals.GoalReducedEntityCounts this$0 -> oErp
    org.bukkit.Chunk val$lx -> GcdR
    1:119:void <init>(react.rai.goals.GoalReducedEntityCounts,org.bukkit.Chunk) -> <init>
    124:131:void run() -> run
react.rai.goals.GoalStableChunkTime -> pipe:
    boolean failing -> qelN
    27:30:void <init>() -> <init>
    35:72:boolean onCheckFailing() -> brMo
    78:128:void onPropigated() -> CVTC
react.rai.goals.GoalStableChunkTime$1 -> pipe$1:
    react.rai.goals.GoalStableChunkTime this$0 -> XCQk
    1:54:void <init>(react.rai.goals.GoalStableChunkTime) -> <init>
    59:68:void run() -> run
react.rai.goals.GoalStableChunkTime$2 -> pipe$2:
    react.rai.goals.GoalStableChunkTime this$0 -> XCQk
    java.lang.Object val$i -> iDbd
    1:111:void <init>(react.rai.goals.GoalStableChunkTime,java.lang.Object) -> <init>
    116:121:void run() -> run
react.rai.goals.GoalStableEntityTime -> qudn:
    boolean failing -> qelN
    21:24:void <init>() -> <init>
    30:30:void onPropigated() -> CVTC
    35:35:void letUp() -> lLiW
    40:77:boolean onCheckFailing() -> brMo
    17:17:boolean access$0(react.rai.goals.GoalStableEntityTime) -> IEpw
react.rai.goals.GoalStableEntityTime$1 -> qudn$1:
    react.rai.goals.GoalStableEntityTime this$0 -> apPD
    1:59:void <init>(react.rai.goals.GoalStableEntityTime) -> <init>
    64:73:void run() -> run
react.rai.goals.GoalStableFluidTime -> rxhP:
    boolean failing -> qelN
    react.glang.GMap reocc -> vcyd
    31:35:void <init>() -> <init>
    40:83:void onPropigated() -> CVTC
    88:125:boolean onCheckFailing() -> brMo
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableFluidTime) -> IEpw
    26:26:boolean access$1(react.rai.goals.GoalStableFluidTime) -> VUHt
react.rai.goals.GoalStableFluidTime$1 -> rxhP$1:
    react.rai.goals.GoalStableFluidTime this$0 -> tfdU
    org.bukkit.Chunk val$lx -> GcdR
    1:66:void <init>(react.rai.goals.GoalStableFluidTime,org.bukkit.Chunk) -> <init>
    71:80:void run() -> run
react.rai.goals.GoalStableFluidTime$2 -> rxhP$2:
    react.rai.goals.GoalStableFluidTime this$0 -> tfdU
    1:107:void <init>(react.rai.goals.GoalStableFluidTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableHopperTime -> KDUY:
    boolean failing -> qelN
    react.glang.GMap reocc -> vcyd
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> CVTC
    89:125:boolean onCheckFailing() -> brMo
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableHopperTime) -> IEpw
    26:26:boolean access$1(react.rai.goals.GoalStableHopperTime) -> VUHt
react.rai.goals.GoalStableHopperTime$1 -> KDUY$1:
    react.rai.goals.GoalStableHopperTime this$0 -> ETls
    org.bukkit.Chunk val$lx -> GcdR
    1:66:void <init>(react.rai.goals.GoalStableHopperTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableHopperTime$2 -> KDUY$2:
    react.rai.goals.GoalStableHopperTime this$0 -> ETls
    1:107:void <init>(react.rai.goals.GoalStableHopperTime) -> <init>
    112:121:void run() -> run
react.rai.goals.GoalStableRedstoneTime -> lfUM:
    boolean failing -> qelN
    react.glang.GMap reocc -> vcyd
    31:35:void <init>() -> <init>
    40:84:void onPropigated() -> CVTC
    89:126:boolean onCheckFailing() -> brMo
    27:27:react.glang.GMap access$0(react.rai.goals.GoalStableRedstoneTime) -> IEpw
    26:26:boolean access$1(react.rai.goals.GoalStableRedstoneTime) -> VUHt
react.rai.goals.GoalStableRedstoneTime$1 -> lfUM$1:
    react.rai.goals.GoalStableRedstoneTime this$0 -> dqHs
    org.bukkit.Chunk val$lx -> GcdR
    1:66:void <init>(react.rai.goals.GoalStableRedstoneTime,org.bukkit.Chunk) -> <init>
    71:81:void run() -> run
react.rai.goals.GoalStableRedstoneTime$2 -> lfUM$2:
    react.rai.goals.GoalStableRedstoneTime this$0 -> dqHs
    1:108:void <init>(react.rai.goals.GoalStableRedstoneTime) -> <init>
    113:122:void run() -> run
react.rai.goals.GoalStableTickTime -> PTDG:
    boolean failing -> qelN
    20:23:void <init>() -> <init>
    29:29:void onPropigated() -> CVTC
    34:58:boolean onCheckFailing() -> brMo
    16:16:boolean access$0(react.rai.goals.GoalStableTickTime) -> IEpw
react.rai.goals.GoalStableTickTime$1 -> PTDG$1:
    react.rai.goals.GoalStableTickTime this$0 -> ebia
    1:40:void <init>(react.rai.goals.GoalStableTickTime) -> <init>
    45:54:void run() -> run
react.remote.client.RemoteClient -> IOOI:
    java.lang.String username -> username
    java.lang.String password -> password
    java.lang.String token -> RIqV
    boolean authenticated -> KMmd
    react.remote.server.ServerInfo info -> Xuuj
    react.glang.GMap frems -> RdDj
    31:39:void <init>(java.lang.String,int) -> <init>
    43:47:void cleanFrames(int) -> iTPX
    51:51:react.glang.GMap getFrames() -> ggmY
    56:75:int computeFrames() -> LaPv
    80:92:boolean clearToken() -> HCbe
    97:110:boolean updateServerInfo() -> jqWC
    115:129:boolean refreshToken() -> DGtx
    134:145:boolean authenticate(java.lang.String,java.lang.String) -> uxtE
    150:150:java.lang.String getUsername() -> getUsername
    155:155:java.lang.String getPassword() -> getPassword
    160:160:java.lang.String getToken() -> oEQV
    165:165:boolean isAuthenticated() -> Gjpu
    170:170:react.remote.server.ServerInfo getInfo() -> YoeR
react.remote.client.packet.CPacketClearToken -> PBaU:
    java.lang.String token -> RIqV
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> IEpw
    33:34:void fromBytes(react.gnet.streams.ISS) -> IEpw
    38:38:java.lang.String getToken() -> oEQV
    43:44:void setToken(java.lang.String) -> nJNX
react.remote.client.packet.CPacketComputeFrames -> BBKf:
    java.lang.String token -> RIqV
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> IEpw
    33:34:void fromBytes(react.gnet.streams.ISS) -> IEpw
    38:38:java.lang.String getToken() -> oEQV
    43:44:void setToken(java.lang.String) -> nJNX
react.remote.client.packet.CPacketGetInfo -> lCpx:
    java.lang.String token -> RIqV
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> IEpw
    33:34:void fromBytes(react.gnet.streams.ISS) -> IEpw
    38:38:java.lang.String getToken() -> oEQV
    43:44:void setToken(java.lang.String) -> nJNX
react.remote.client.packet.CPacketGetToken -> mFtX:
    java.lang.String username -> username
    java.lang.String password -> password
    15:16:void <init>() -> <init>
    20:24:void <init>(java.lang.String,java.lang.String) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> IEpw
    36:38:void fromBytes(react.gnet.streams.ISS) -> IEpw
    42:42:java.lang.String getUsername() -> getUsername
    47:48:void setUsername(java.lang.String) -> setUsername
    52:52:java.lang.String getPassword() -> getPassword
    57:58:void setPassword(java.lang.String) -> setPassword
react.remote.client.packet.CPacketRefreshToken -> JJAs:
    java.lang.String token -> RIqV
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> IEpw
    33:34:void fromBytes(react.gnet.streams.ISS) -> IEpw
    38:38:java.lang.String getToken() -> oEQV
    43:44:void setToken(java.lang.String) -> nJNX
react.remote.client.packet.ClientPacket -> vcQI:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.client.packet.ClientPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> IEpw
    void fromBytes(react.gnet.streams.ISS) -> IEpw
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> xhvI
    42:42:java.lang.String getPacketName() -> nRhR
react.remote.client.packet.ClientPacketType -> vbod:
    react.remote.client.packet.ClientPacketType GET_TOKEN -> EDMM
    react.remote.client.packet.ClientPacketType REFRESH_TOKEN -> opfp
    react.remote.client.packet.ClientPacketType CLEAR_TOKEN -> wUyq
    react.remote.client.packet.ClientPacketType GET_INFO -> DcKP
    react.remote.client.packet.ClientPacketType COMPUTE_FRAMES -> HoWW
    react.remote.client.packet.ClientPacketType[] $VALUES -> NVtm
    3:3:react.remote.client.packet.ClientPacketType[] values() -> values
    3:3:react.remote.client.packet.ClientPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:9:void <clinit>() -> <clinit>
react.remote.server.IFrameComputer -> xrGm:
    react.glang.GMap compute(long,long) -> uxtE
react.remote.server.KnownUser -> QFEm:
    java.lang.String username -> username
    java.lang.String password -> password
    9:12:void <init>(java.lang.String,java.lang.String) -> <init>
    16:16:java.lang.String getUsername() -> getUsername
    21:22:void setUsername(java.lang.String) -> setUsername
    26:26:java.lang.String getPassword() -> getPassword
    31:32:void setPassword(java.lang.String) -> setPassword
react.remote.server.RemotePlugin -> upoC:
    java.lang.String name -> name
    java.lang.String version -> version
    java.lang.String author -> author
    16:18:void <init>() -> <init>
    21:25:void <init>(java.lang.String,java.lang.String,java.lang.String) -> <init>
    30:33:void toBytes(react.gnet.streams.OSS) -> IEpw
    38:41:void fromBytes(react.gnet.streams.ISS) -> IEpw
    45:45:java.lang.String getName() -> getName
    50:51:void setName(java.lang.String) -> setName
    55:55:java.lang.String getVersion() -> getVersion
    60:61:void setVersion(java.lang.String) -> setVersion
    65:65:java.lang.String getAuthor() -> getAuthor
    70:71:void setAuthor(java.lang.String) -> setAuthor
react.remote.server.RemoteServer -> gNSu:
    react.glang.GList users -> RSBB
    react.glang.GMap session -> TYHC
    react.glang.GMap lastCompute -> Bmfr
    29:38:void <init>(int) -> <init>
    react.remote.server.ServerInfo getServerInfo() -> PvBa
    44:45:void registerUser(react.remote.server.KnownUser) -> IEpw
    49:57:boolean isValidUser(react.remote.server.KnownUser) -> VUHt
    62:70:react.remote.server.KnownUser getUser(java.lang.String) -> xhlj
    76:163:react.gnet.packet.IPacket onPacketReceived(react.gnet.packet.IPacket) -> KDHU
    react.remote.server.IFrameComputer getFrameComputer() -> owjY
    170:171:void markLastCompute(react.remote.server.KnownUser) -> uxtE
    175:180:long getLastCompute(react.remote.server.KnownUser) -> KDHU
    185:186:void createSession(react.remote.server.KnownUser,java.lang.String) -> IEpw
    190:191:void deleteSession(react.remote.server.KnownUser) -> kkWN
    195:195:java.lang.String createToken() -> MRox
react.remote.server.ServerInfo -> xhvI:
    java.lang.String motd -> EvoG
    int gameProtocol -> AkEP
    java.lang.String gameVersion -> rXNA
    java.lang.String reactVersion -> OtLP
    int maxPlayers -> maxPlayers
    react.glang.GList connectedPlayers -> xPmO
    int viewDistance -> viewDistance
    int gamePort -> COGi
    java.lang.String gameAddress -> FqbG
    react.glang.GList remotePlugins -> rXLm
    react.glang.GList worlds -> XSqq
    react.glang.GList actions -> Lrrh
    react.glang.GList samplers -> HMTg
    26:26:react.remote.server.ServerInfo empty() -> inTL
    109:123:void <init>() -> <init>
    128:141:void toBytes(react.gnet.streams.OSS) -> IEpw
    146:159:void fromBytes(react.gnet.streams.ISS) -> IEpw
    java.lang.String dgetMotd() -> pjMe
    int dgetGameProtocol() -> XSFk
    java.lang.String dgetGameVersion() -> rpSp
    java.lang.String dgetReactVersion() -> mGRU
    int dgetMaxPlayers() -> yRcr
    react.glang.GList dgetConnectedPlayers() -> ycfD
    int dgetViewDistance() -> lvqi
    int dgetGamePort() -> QxfV
    java.lang.String dgetGameAddress() -> NLyP
    react.glang.GList dgetRemotePlugins() -> WOci
    react.glang.GList dgetWorlds() -> iLFk
    react.glang.GList dgetActions() -> Hdyx
    react.glang.GList dgetSamplers() -> qmQA
    189:189:java.lang.String getMotd() -> getMotd
    194:194:int getGameProtocol() -> SLQc
    199:199:java.lang.String getGameVersion() -> ejWS
    204:204:java.lang.String getReactVersion() -> YpGK
    209:209:int getMaxPlayers() -> getMaxPlayers
    214:214:react.glang.GList getConnectedPlayers() -> yBLc
    219:219:int getViewDistance() -> getViewDistance
    224:224:int getGamePort() -> PvNF
    229:229:java.lang.String getGameAddress() -> IpxK
    234:234:react.glang.GList getRemotePlugins() -> piuh
    239:239:react.glang.GList getWorlds() -> eGtH
    244:244:react.glang.GList getActions() -> uErK
    249:249:react.glang.GList getSamplers() -> CESv
react.remote.server.ServerInfo$1 -> xhvI$1:
    27:27:void <init>() -> <init>
    31:31:react.glang.GList dgetWorlds() -> iLFk
    37:37:int dgetViewDistance() -> lvqi
    43:43:react.glang.GList dgetRemotePlugins() -> WOci
    49:49:java.lang.String dgetReactVersion() -> mGRU
    55:55:java.lang.String dgetMotd() -> pjMe
    61:61:int dgetMaxPlayers() -> yRcr
    67:67:java.lang.String dgetGameVersion() -> rpSp
    73:73:int dgetGameProtocol() -> XSFk
    79:79:int dgetGamePort() -> QxfV
    85:85:java.lang.String dgetGameAddress() -> NLyP
    91:91:react.glang.GList dgetConnectedPlayers() -> ycfD
    97:97:react.glang.GList dgetActions() -> Hdyx
    103:103:react.glang.GList dgetSamplers() -> qmQA
react.remote.server.packet.ComputedFrame -> nRhR:
    react.glang.GMap values -> BSsg
    14:16:void <init>() -> <init>
    21:23:void toBytes(react.gnet.streams.OSS) -> IEpw
    28:36:void fromBytes(react.gnet.streams.ISS) -> IEpw
    40:40:react.glang.GMap getValues() -> ofsJ
    45:46:void setValues(react.glang.GMap) -> uxtE
react.remote.server.packet.SPacketOk -> anfK:
    boolean ok -> HoWh
    14:15:void <init>() -> <init>
    19:22:void <init>(boolean) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> IEpw
    33:34:void fromBytes(react.gnet.streams.ISS) -> IEpw
    38:38:boolean isOk() -> AaPs
    43:44:void setOk(boolean) -> NMRL
react.remote.server.packet.SPacketSendFrames -> JtWp:
    react.glang.GMap frames -> cusv
    15:17:void <init>() -> <init>
    21:24:void <init>(react.glang.GMap) -> <init>
    29:31:void toBytes(react.gnet.streams.OSS) -> IEpw
    36:44:void fromBytes(react.gnet.streams.ISS) -> IEpw
    48:48:react.glang.GMap getFrames() -> ggmY
    53:54:void setFrames(react.glang.GMap) -> KDHU
react.remote.server.packet.SPacketSendInfo -> sQYo:
    react.remote.server.ServerInfo info -> Xuuj
    13:15:void <init>() -> <init>
    19:22:void <init>(react.remote.server.ServerInfo) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> IEpw
    33:34:void fromBytes(react.gnet.streams.ISS) -> IEpw
    38:38:react.remote.server.ServerInfo getInfo() -> YoeR
    43:44:void setInfo(react.remote.server.ServerInfo) -> IEpw
react.remote.server.packet.SPacketSendToken -> HeaG:
    java.lang.String token -> RIqV
    14:15:void <init>() -> <init>
    19:22:void <init>(java.lang.String) -> <init>
    27:28:void toBytes(react.gnet.streams.OSS) -> IEpw
    33:34:void fromBytes(react.gnet.streams.ISS) -> IEpw
    38:38:java.lang.String getToken() -> oEQV
    43:44:void setToken(java.lang.String) -> nJNX
react.remote.server.packet.ServerPacket -> JcVh:
    int id -> id
    java.lang.String name -> name
    16:19:void <init>(react.remote.server.packet.ServerPacketType) -> <init>
    void toBytes(react.gnet.streams.OSS) -> IEpw
    void fromBytes(react.gnet.streams.ISS) -> IEpw
    30:30:int getId() -> getId
    36:36:react.gnet.packet.PacketBinding getBinding() -> xhvI
    42:42:java.lang.String getPacketName() -> nRhR
react.remote.server.packet.ServerPacketType -> yRkC:
    react.remote.server.packet.ServerPacketType SEND_TOKEN -> PwOc
    react.remote.server.packet.ServerPacketType SEND_INFO -> JmMh
    react.remote.server.packet.ServerPacketType SEND_FRAMES -> CWXE
    react.remote.server.packet.ServerPacketType OK -> bkAh
    react.remote.server.packet.ServerPacketType[] $VALUES -> eHvC
    3:3:react.remote.server.packet.ServerPacketType[] values() -> values
    3:3:react.remote.server.packet.ServerPacketType valueOf(java.lang.String) -> valueOf
    3:3:void <init>(java.lang.String,int) -> <init>
    3:8:void <clinit>() -> <clinit>
react.sampler.SampleAsyncQueue -> BSMq:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleAsyncQueue$1 -> BSMq$1:
    react.sampler.SampleAsyncQueue this$0 -> qCkM
    1:20:void <init>(react.sampler.SampleAsyncQueue) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleChunkTime -> KLft:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleChunkTime$1 -> KLft$1:
    react.sampler.SampleChunkTime this$0 -> MCUC
    1:20:void <init>(react.sampler.SampleChunkTime) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleChunksLoaded -> gVhW:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleChunksLoaded$1 -> gVhW$1:
    react.sampler.SampleChunksLoaded this$0 -> tfgJ
    1:19:void <init>(react.sampler.SampleChunksLoaded) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleChunksLoadedPerSecond -> BSNM:
    react.gmath.Average a -> SwjG
    react.graph.IFormatter formatter -> BSnC
    16:29:void <init>() -> <init>
    34:40:void construct() -> iCOW
    45:47:void sample() -> AyqF
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleChunksLoadedPerSecond$1 -> BSNM$1:
    react.sampler.SampleChunksLoadedPerSecond this$0 -> BdwM
    1:21:void <init>(react.sampler.SampleChunksLoadedPerSecond) -> <init>
    26:26:java.lang.String from(double) -> AFlA
react.sampler.SampleEntitiesDrops -> cRkr:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleEntitiesDrops$1 -> cRkr$1:
    react.sampler.SampleEntitiesDrops this$0 -> gqcQ
    1:19:void <init>(react.sampler.SampleEntitiesDrops) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleEntitiesLiving -> TiDn:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleEntitiesLiving$1 -> TiDn$1:
    react.sampler.SampleEntitiesLiving this$0 -> XnGr
    1:19:void <init>(react.sampler.SampleEntitiesLiving) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleEntitiesTiles -> dENd:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleEntitiesTiles$1 -> dENd$1:
    react.sampler.SampleEntitiesTiles this$0 -> HxLG
    1:19:void <init>(react.sampler.SampleEntitiesTiles) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleEntitiesTotal -> aTuv:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleEntitiesTotal$1 -> aTuv$1:
    react.sampler.SampleEntitiesTotal this$0 -> hBCC
    1:19:void <init>(react.sampler.SampleEntitiesTotal) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleEntityDroppedTicks -> OHRw:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleEntityDroppedTicks$1 -> OHRw$1:
    react.sampler.SampleEntityDroppedTicks this$0 -> lxat
    1:20:void <init>(react.sampler.SampleEntityDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleEntityTime -> esFJ:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleEntityTime$1 -> esFJ$1:
    react.sampler.SampleEntityTime this$0 -> WjdU
    1:20:void <init>(react.sampler.SampleEntityTime) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleEntityTimeLock -> BmAu:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleEntityTimeLock$1 -> BmAu$1:
    react.sampler.SampleEntityTimeLock this$0 -> FXSM
    1:20:void <init>(react.sampler.SampleEntityTimeLock) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleExplosionTime -> IqTL:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleExplosionTime$1 -> IqTL$1:
    react.sampler.SampleExplosionTime this$0 -> Snxt
    1:19:void <init>(react.sampler.SampleExplosionTime) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleFluidPerSecond -> dgOw:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleFluidPerSecond$1 -> dgOw$1:
    react.sampler.SampleFluidPerSecond this$0 -> MCUS
    1:20:void <init>(react.sampler.SampleFluidPerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleFluidPerTick -> dfnw:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    46:53:void sample() -> AyqF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleFluidPerTick$1 -> dfnw$1:
    react.sampler.SampleFluidPerTick this$0 -> IYLR
    1:20:void <init>(react.sampler.SampleFluidPerTick) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleFluidTickTime -> YEMn:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleFluidTickTime$1 -> YEMn$1:
    react.sampler.SampleFluidTickTime this$0 -> HLvf
    1:20:void <init>(react.sampler.SampleFluidTickTime) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleFluidTickUtilization -> DXsE:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    46:53:void sample() -> AyqF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleFluidTickUtilization$1 -> DXsE$1:
    react.sampler.SampleFluidTickUtilization this$0 -> fUMx
    1:20:void <init>(react.sampler.SampleFluidTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleHopperPerSecond -> DbEM:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleHopperPerSecond$1 -> DbEM$1:
    react.sampler.SampleHopperPerSecond this$0 -> RRcs
    1:20:void <init>(react.sampler.SampleHopperPerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleHopperPerTick -> CfqT:
    react.graph.IFormatter formatter -> BSnC
    18:29:void <init>() -> <init>
    34:40:void construct() -> iCOW
    47:54:void sample() -> AyqF
    59:59:java.lang.String get() -> get
    65:65:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleHopperPerTick$1 -> CfqT$1:
    react.sampler.SampleHopperPerTick this$0 -> opiK
    1:20:void <init>(react.sampler.SampleHopperPerTick) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleHopperTickTime -> BtqX:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleHopperTickTime$1 -> BtqX$1:
    react.sampler.SampleHopperTickTime this$0 -> EDOI
    1:20:void <init>(react.sampler.SampleHopperTickTime) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleHopperTickUtilization -> hjlA:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    46:53:void sample() -> AyqF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleHopperTickUtilization$1 -> hjlA$1:
    react.sampler.SampleHopperTickUtilization this$0 -> ioWy
    1:20:void <init>(react.sampler.SampleHopperTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleMemoryAllocated -> wwXW:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleMemoryAllocated$1 -> wwXW$1:
    react.sampler.SampleMemoryAllocated this$0 -> cKco
    1:19:void <init>(react.sampler.SampleMemoryAllocated) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleMemoryAllocationPerSecond -> fJrQ:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleMemoryAllocationPerSecond$1 -> fJrQ$1:
    react.sampler.SampleMemoryAllocationPerSecond this$0 -> PDNT
    1:19:void <init>(react.sampler.SampleMemoryAllocationPerSecond) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleMemoryFree -> fCBg:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleMemoryFree$1 -> fCBg$1:
    react.sampler.SampleMemoryFree this$0 -> MuwU
    1:19:void <init>(react.sampler.SampleMemoryFree) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleMemoryMax -> cIxu:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleMemoryMax$1 -> cIxu$1:
    react.sampler.SampleMemoryMax this$0 -> ydtG
    1:19:void <init>(react.sampler.SampleMemoryMax) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleMemoryUse -> uppn:
    react.graph.IFormatter formatter -> BSnC
    17:27:void <init>() -> <init>
    32:38:void construct() -> iCOW
    43:44:void sample() -> AyqF
    49:49:java.lang.String get() -> get
    55:55:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleMemoryUse$1 -> uppn$1:
    react.sampler.SampleMemoryUse this$0 -> mkCY
    1:19:void <init>(react.sampler.SampleMemoryUse) -> <init>
    24:24:java.lang.String from(double) -> AFlA
react.sampler.SampleRedstonePerSecond -> OsFW:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleRedstonePerSecond$1 -> OsFW$1:
    react.sampler.SampleRedstonePerSecond this$0 -> TXhq
    1:20:void <init>(react.sampler.SampleRedstonePerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleRedstonePerTick -> RHjH:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    46:53:void sample() -> AyqF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleRedstonePerTick$1 -> RHjH$1:
    react.sampler.SampleRedstonePerTick this$0 -> uGfP
    1:20:void <init>(react.sampler.SampleRedstonePerTick) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleRedstoneTickTime -> aDUQ:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleRedstoneTickTime$1 -> aDUQ$1:
    react.sampler.SampleRedstoneTickTime this$0 -> GSEC
    1:20:void <init>(react.sampler.SampleRedstoneTickTime) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleRedstoneTickUtilization -> Pdfb:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    46:53:void sample() -> AyqF
    58:58:java.lang.String get() -> get
    64:64:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleRedstoneTickUtilization$1 -> Pdfb$1:
    react.sampler.SampleRedstoneTickUtilization this$0 -> hIqM
    1:20:void <init>(react.sampler.SampleRedstoneTickUtilization) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleSyncQueue -> PeHP:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleSyncQueue$1 -> PeHP$1:
    react.sampler.SampleSyncQueue this$0 -> YFUl
    1:20:void <init>(react.sampler.SampleSyncQueue) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleTickTime -> RkNS:
    react.graph.IFormatter formatter -> BSnC
    react.gmath.Average aa -> giQm
    17:29:void <init>() -> <init>
    34:40:void construct() -> iCOW
    45:47:void sample() -> AyqF
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleTickTime$1 -> RkNS$1:
    react.sampler.SampleTickTime this$0 -> ophL
    1:21:void <init>(react.sampler.SampleTickTime) -> <init>
    26:26:java.lang.String from(double) -> AFlA
react.sampler.SampleTickUtilization -> YUoF:
    react.graph.IFormatter formatter -> BSnC
    react.gmath.Average aa -> giQm
    17:29:void <init>() -> <init>
    34:40:void construct() -> iCOW
    45:47:void sample() -> AyqF
    52:52:java.lang.String get() -> get
    58:58:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleTickUtilization$1 -> YUoF$1:
    react.sampler.SampleTickUtilization this$0 -> dEtr
    1:21:void <init>(react.sampler.SampleTickUtilization) -> <init>
    26:26:java.lang.String from(double) -> AFlA
react.sampler.SampleTicksPerSecond -> XuOg:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:55:java.lang.String get() -> get
    61:61:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleTicksPerSecond$1 -> XuOg$1:
    react.sampler.SampleTicksPerSecond this$0 -> uXfe
    1:20:void <init>(react.sampler.SampleTicksPerSecond) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleTileDroppedTicks -> uNqO:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleTileDroppedTicks$1 -> uNqO$1:
    react.sampler.SampleTileDroppedTicks this$0 -> gyrF
    1:20:void <init>(react.sampler.SampleTileDroppedTicks) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleTileTime -> EeJl:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleTileTime$1 -> EeJl$1:
    react.sampler.SampleTileTime this$0 -> uihT
    1:20:void <init>(react.sampler.SampleTileTime) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.sampler.SampleTileTimeLock -> piuN:
    react.graph.IFormatter formatter -> BSnC
    18:28:void <init>() -> <init>
    33:39:void construct() -> iCOW
    44:45:void sample() -> AyqF
    50:50:java.lang.String get() -> get
    56:56:react.graph.IFormatter getFormatter() -> HSrV
react.sampler.SampleTileTimeLock$1 -> piuN$1:
    react.sampler.SampleTileTimeLock this$0 -> Rkty
    1:20:void <init>(react.sampler.SampleTileTimeLock) -> <init>
    25:25:java.lang.String from(double) -> AFlA
react.security.checkpoints.SecurityCheckpointAlpha -> fJtx:
    33:33:void <init>() -> <init>
    37:74:void finishScan() -> jXDe
    78:148:void doScan(java.lang.Runnable) -> VUHt
    152:181:byte[] readResource(java.io.File,java.lang.String) -> IEpw
    186:217:react.glang.GMap scan(java.io.File) -> VUHt
    150:150:byte[] access$0(java.io.File,java.lang.String) -> VUHt
react.security.checkpoints.SecurityCheckpointAlpha$1 -> fJtx$1:
    java.lang.Runnable val$r -> sJPg
    1:78:void <init>(java.lang.Runnable) -> <init>
    85:146:void run() -> run
react.security.checkpoints.SecurityCheckpointAlpha$1$1 -> fJtx$1$1:
    react.security.checkpoints.SecurityCheckpointAlpha$1 this$1 -> hSBd
    java.lang.Runnable val$r -> sJPg
    1:137:void <init>(react.security.checkpoints.SecurityCheckpointAlpha$1,java.lang.Runnable) -> <init>
    142:144:void run() -> run
react.security.ipsec.IPSecAlpha -> LrOu:
    java.lang.String ip -> cKel
    12:17:void <init>() -> <init>
    24:36:void run() -> run
    40:40:java.lang.String getIp() -> getIp
react.security.locks.SecurityLockAlpha -> WFym:
    15:49:void <init>() -> <init>
react.security.locks.SecurityLockAlpha$1 -> WFym$1:
    react.security.locks.SecurityLockAlpha this$0 -> HDhO
    java.io.File val$f -> Mmip
    1:22:void <init>(react.security.locks.SecurityLockAlpha,java.io.File) -> <init>
    27:40:void run() -> run
react.slate.IndividualSlate -> jyes:
    10:13:void <init>(java.lang.String,org.bukkit.entity.Player) -> <init>
    21:22:void addViewer(org.bukkit.entity.Player) -> kHrO
react.slate.PhantomSlate -> fmYS:
    react.glang.GList lines -> sJSo
    react.glang.GList viewers -> QPCe
    java.lang.String name -> name
    org.bukkit.scoreboard.Scoreboard slate -> IYMh
    26:33:void <init>(java.lang.String) -> <init>
    38:38:react.glang.GList getLines() -> YMcF
    44:45:void set(int,java.lang.String) -> VUHt
    50:51:void setLines(react.glang.GList) -> rpKU
    56:56:java.lang.String get(int) -> get
    62:68:void update() -> update
    73:74:void setName(java.lang.String) -> setName
    79:79:java.lang.String getName() -> getName
    85:86:void build() -> KLft
    91:95:void addViewer(org.bukkit.entity.Player) -> kHrO
    100:102:void removeViewer(org.bukkit.entity.Player) -> ivRC
    107:107:react.glang.GList getViewers() -> JQxN
    113:113:boolean isViewing(org.bukkit.entity.Player) -> pOot
    119:120:void addLine(java.lang.String) -> VChl
    125:126:void clearLines() -> jNvC
react.slate.Slate -> PBfj:
    void build() -> KLft
    void setName(java.lang.String) -> setName
    java.lang.String getName() -> getName
    react.glang.GList getLines() -> YMcF
    void set(int,java.lang.String) -> VUHt
    void setLines(react.glang.GList) -> rpKU
    java.lang.String get(int) -> get
    void addViewer(org.bukkit.entity.Player) -> kHrO
    void addLine(java.lang.String) -> VChl
    void clearLines() -> jNvC
    void removeViewer(org.bukkit.entity.Player) -> ivRC
    react.glang.GList getViewers() -> JQxN
    boolean isViewing(org.bukkit.entity.Player) -> pOot
    void update() -> update
react.slate.SlateUtil -> LaNj:
    18:18:void <init>() -> <init>
    27:27:org.bukkit.scoreboard.ScoreboardManager getManager() -> LjDL
    37:37:org.bukkit.scoreboard.Scoreboard newBoard() -> cKBc
    51:61:org.bukkit.scoreboard.Objective newObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> IEpw
    66:76:org.bukkit.scoreboard.Objective newHeadObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> VUHt
    90:100:org.bukkit.scoreboard.Objective newTabObjective(org.bukkit.scoreboard.Scoreboard,java.lang.String) -> uxtE
    115:121:void setScore(java.lang.String,int,org.bukkit.scoreboard.Objective) -> IEpw
    134:146:org.bukkit.scoreboard.Scoreboard buildSlate(java.lang.String,react.glang.GList) -> IEpw
    160:172:org.bukkit.scoreboard.Scoreboard buildTabSlate(java.lang.String,react.glang.GList) -> VUHt
    177:187:java.lang.String convertJSON(java.lang.String) -> PRyP
    192:208:java.lang.String[] convertJSON(java.lang.String[]) -> VUHt
    213:214:void setTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> IEpw
react.surge.Main -> aeym:
    react.glang.GList plugins -> EUQk
    react.glang.GMap pluginInstances -> suHc
    react.glang.GList controllerSet -> skvC
    react.glang.GMap anchors -> hcfM
    react.glang.GList classes -> oVwv
    java.lang.reflect.Field nsField -> uOxl
    java.lang.reflect.Field thField -> WYdv
    react.glang.GList tracks -> axbw
    long nsf -> VMoc
    42:46:void <clinit>() -> <clinit>
    50:79:void <init>() -> <init>
    85:85:void onControllerRegistry() -> Rbca
    90:109:long getNanoSync() -> Dajv
    114:115:void requestResetNanos() -> pHVv
    119:127:void requestReload() -> RYrV
    131:134:void requestReload(java.lang.Runnable) -> uxtE
    139:153:int getThreadCount() -> getThreadCount
    162:194:void onStart(react.surge.util.Protocol) -> IEpw
    201:218:void onStop() -> YNEw
    224:224:void onPostInit() -> eGvT
    230:230:void onPreInit() -> tTcG
    234:245:void shutDownAmps() -> ySQb
    249:458:void initializeAmps() -> NDuV
    463:496:void doScan() -> MmFv
    500:522:void scanForPoolDefiners() -> xqqG
    526:542:void scanForRawEvents() -> tLSH
    546:562:void scanForDynamicTrack() -> rVmU
    566:587:void scanForAmps() -> JJLE
    592:603:void onTick() -> JAJp
react.surge.Main$1 -> aeym$1:
    1:119:void <init>() -> <init>
    125:125:void run() -> run
react.surge.PluginAmp -> dVQw:
    react.surge.control.AmpedPlugin plugin -> hkuf
    boolean connected -> connected
    int masterTask -> JJmS
    17:21:void <init>(react.surge.control.AmpedPlugin) -> <init>
    25:25:react.surge.control.AmpedPlugin getPluginInstance() -> oETF
    30:30:boolean isConnected() -> isConnected
    35:55:void connect() -> connect
    59:71:void masterTick() -> TFfl
    75:79:void disconnect() -> disconnect
    83:93:int startTask(int,java.lang.Runnable) -> IEpw
    98:108:int startRepeatingTask(int,int,java.lang.Runnable) -> IEpw
    113:114:void stopTask(int) -> OjGl
    57:57:void access$0(react.surge.PluginAmp) -> IEpw
react.surge.PluginAmp$1 -> dVQw$1:
    react.surge.PluginAmp this$0 -> qfOl
    1:37:void <init>(react.surge.PluginAmp) -> <init>
    42:44:void run() -> run
react.surge.PluginAmp$2 -> dVQw$2:
    react.surge.PluginAmp this$0 -> qfOl
    1:47:void <init>(react.surge.PluginAmp) -> <init>
    52:53:void run() -> run
react.surge.Surge -> kkfk:
    react.surge.PluginAmp amp -> WHaq
    react.glang.GList tickComponents -> xsTj
    react.glang.GList atickComponents -> RthT
    react.surge.sched.TaskManager taskmgr -> iVGu
    react.surge.hotload.HotloadManager hotloadmgr -> kJkf
    java.lang.Thread mainThread -> OcNb
    20:147:void <clinit>() -> <clinit>
    18:18:void <init>() -> <init>
    29:30:void register(org.bukkit.event.Listener) -> IEpw
    34:35:void unregister(org.bukkit.event.Listener) -> unregister
    39:39:java.io.File folder(java.lang.String) -> Jska
    44:44:java.io.File folder() -> TiHy
    49:51:java.io.File getPluginJarFile() -> Wqqd
    56:58:java.io.File getPluginJarFileUnsafe(org.bukkit.plugin.Plugin) -> KDHU
    63:65:void startup() -> startup
    69:69:java.lang.Thread getServerThread() -> NMeI
    74:74:react.glang.GList getTickComponents() -> qKXw
    79:79:react.glang.GList getAsyncTickComponents() -> PdmJ
    84:91:void registerTicked(react.surge.sched.IMasterTickComponent) -> IEpw
    95:102:void unregisterTicked(react.surge.sched.IMasterTickComponent) -> VUHt
    106:111:react.surge.PluginAmp createAmp(react.surge.control.AmpedPlugin) -> IEpw
    116:116:boolean isMainThread() -> isMainThread
    121:122:void stopAmp() -> TGFc
    126:126:boolean hasAmp() -> rWLi
    131:131:react.surge.PluginAmp getAmp() -> KMMf
    136:136:react.surge.sched.TaskManager getTaskManager() -> vAUx
    141:141:react.surge.hotload.HotloadManager getHotloadManager() -> SCbn
react.surge.cluster.Cluster -> GHme:
    react.surge.cluster.ClusterType type -> fClP
    java.lang.Object t -> lfuR
    8:12:void <init>(react.surge.cluster.ClusterType,java.lang.Object) -> <init>
    17:17:react.surge.cluster.ClusterType getType() -> eQHN
    23:24:void set(java.lang.Object) -> set
    29:29:java.lang.Object get() -> get
react.surge.cluster.ClusterBoolean -> dpEN:
    7:8:void <init>(java.lang.Boolean) -> <init>
react.surge.cluster.ClusterDouble -> impv:
    7:8:void <init>(java.lang.Double) -> <init>
react.surge.cluster.ClusterInt -> HveU:
    7:8:void <init>(java.lang.Integer) -> <init>
react.surge.cluster.ClusterLong -> brNp:
    7:8:void <init>(java.lang.Long) -> <init>
react.surge.cluster.ClusterString -> xGYS:
    7:8:void <init>(java.lang.String) -> <init>
react.surge.cluster.ClusterStringList -> OsHE:
    9:10:void <init>(java.util.List) -> <init>
react.surge.cluster.ClusterType -> TFaP:
    react.surge.cluster.ClusterType INT -> oFVb
    react.surge.cluster.ClusterType BOOLEAN -> NVyg
    react.surge.cluster.ClusterType STRING -> KyEk
    react.surge.cluster.ClusterType STRING_LIST -> QWsK
    react.surge.cluster.ClusterType DOUBLE -> UmQI
    react.surge.cluster.ClusterType LONG -> BnKe
    react.surge.cluster.ClusterType[] ENUM$VALUES -> opiw
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.cluster.ClusterType[] values() -> values
    1:1:react.surge.cluster.ClusterType valueOf(java.lang.String) -> valueOf
react.surge.cluster.ConfigurationDataInput -> AOln:
    int[] $SWITCH_TABLE$surge$cluster$ClusterType -> opis
    12:12:void <init>() -> <init>
    17:127:void read(react.surge.cluster.IConfigurable,java.io.File) -> IEpw
    132:257:react.surge.cluster.DataCluster fillDefaults(react.surge.cluster.IConfigurable) -> IEpw
    12:12:int[] $SWITCH_TABLE$surge$cluster$ClusterType() -> kJHU
react.surge.cluster.ConfigurationDataOutput -> sPyv:
    12:12:void <init>() -> <init>
    17:143:void write(react.surge.cluster.IConfigurable,java.io.File) -> VUHt
react.surge.cluster.DataCluster -> TNqn:
    react.glang.GMap clusters -> TXmp
    17:20:void <init>() -> <init>
    24:24:react.glang.GList keys() -> nmDQ
    29:33:void fromJson(react.json.JSONObject) -> kkWN
    37:44:react.json.JSONObject toJson() -> XdWW
    49:56:org.bukkit.configuration.file.FileConfiguration toFileConfiguration() -> APSY
    61:100:void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) -> IEpw
    104:104:boolean contains(java.lang.String) -> contains
    109:109:react.surge.cluster.ClusterType getType(java.lang.String) -> iTPX
    114:114:int getInt(java.lang.String) -> getInt
    119:119:java.lang.Object get(java.lang.String) -> get
    124:129:long getLong(java.lang.String) -> getLong
    134:134:java.lang.String getString(java.lang.String) -> getString
    139:139:double getDouble(java.lang.String) -> getDouble
    144:144:boolean getBoolean(java.lang.String) -> getBoolean
    150:150:java.util.List getStringList(java.lang.String) -> getStringList
    156:190:void trySet(java.lang.String,java.lang.Object) -> mNyO
    194:195:void set(java.lang.String,int) -> kkWN
    199:200:void set(java.lang.String,boolean) -> uxtE
    204:205:void set(java.lang.String,double) -> uxtE
    209:210:void set(java.lang.String,long) -> uxtE
    214:215:void set(java.lang.String,java.lang.String) -> set
    219:220:void set(java.lang.String,java.util.List) -> IEpw
react.surge.cluster.ICluster -> ggil:
    react.surge.cluster.ClusterType getType() -> eQHN
    void set(java.lang.Object) -> set
    java.lang.Object get() -> get
react.surge.cluster.IConfigurable -> eQCr:
react.surge.cluster.IDataInput -> goyv:
    react.surge.cluster.DataCluster read(java.io.File) -> uxtE
react.surge.cluster.IDataOutput -> vstx:
    void write(react.surge.cluster.DataCluster,java.io.File) -> IEpw
react.surge.cluster.Key -> Cwtw:
    java.lang.String value() -> value
react.surge.cluster.KeyPointer -> Divj:
    int value() -> value
react.surge.cluster.KeyStore -> Xtpd:
react.surge.cluster.ReflectedConfigurationException -> royk:
    long serialVersionUID -> serialVersionUID
    3:3:void <init>() -> <init>
react.surge.cluster.YamlDataInput -> eite:
    8:8:void <init>() -> <init>
    13:27:react.surge.cluster.DataCluster read(java.io.File) -> uxtE
react.surge.cluster.YamlDataOutput -> brMo:
    6:6:void <init>() -> <init>
    13:20:void write(react.surge.cluster.DataCluster,java.io.File) -> IEpw
react.surge.collection.GSound -> CVTC:
    java.lang.String sound -> hRfm
    org.bukkit.Sound iSound -> hcha
    java.lang.Float volume -> XnLW
    java.lang.Float pitch -> NNlX
    16:21:void <init>(java.lang.String,java.lang.Float,java.lang.Float) -> <init>
    23:28:void <init>(java.lang.String) -> <init>
    30:35:void <init>(org.bukkit.Sound,java.lang.Float,java.lang.Float) -> <init>
    37:42:void <init>(org.bukkit.Sound) -> <init>
    46:57:void play(org.bukkit.entity.Player) -> YgBo
    61:72:void play(org.bukkit.Location) -> kkWN
    76:89:void play(org.bukkit.entity.Player,org.bukkit.util.Vector) -> IEpw
    93:93:java.lang.String getSound() -> bHAa
    98:99:void setSound(java.lang.String) -> OjGl
    103:103:org.bukkit.Sound getiSound() -> ebKr
    108:109:void setiSound(org.bukkit.Sound) -> IEpw
    113:113:java.lang.Float getVolume() -> GtHj
    118:119:void setVolume(java.lang.Float) -> IEpw
    123:123:java.lang.Float getPitch() -> HLXD
    128:129:void setPitch(java.lang.Float) -> VUHt
react.surge.control.AmpedPlugin -> CxXc:
    react.glang.GList controllers -> rrHE
    react.gconcurrent.ParallelPoolManager pp -> DJAF
    react.surge.server.CoreTickThread ctt -> sAdo
    24:50:void <init>() -> <init>
    void doScan() -> MmFv
    long getNanoSync() -> Dajv
    int getThreadCount() -> getThreadCount
    61:66:void onLoad() -> onLoad
    71:80:void onEnable() -> onEnable
    85:97:void onDisable() -> onDisable
    102:102:react.glang.GList getControllers() -> opJK
    108:109:void registerController(react.surge.control.IController) -> IEpw
    114:125:void onTick() -> JAJp
    130:130:java.lang.String getTickName() -> LywP
    136:136:react.gconcurrent.ParallelPoolManager getThreadPool() -> XKFQ
    142:257:void destroyOldThreads() -> KxES
    void onControllerRegistry() -> Rbca
    void onStart(react.surge.util.Protocol) -> IEpw
    void onStop() -> YNEw
    void onPostInit() -> eGvT
    void onPreInit() -> tTcG
react.surge.control.AmpedPlugin$1 -> CxXc$1:
    react.surge.control.AmpedPlugin this$0 -> xIDl
    1:38:void <init>(react.surge.control.AmpedPlugin,java.lang.String,int,react.gconcurrent.QueueMode) -> <init>
    43:43:long getNanoGate() -> Qxgq
react.surge.control.AmpedPlugin$2 -> CxXc$2:
    react.surge.control.AmpedPlugin this$0 -> xIDl
    1:155:void <init>(react.surge.control.AmpedPlugin) -> <init>
    160:250:void run() -> run
react.surge.control.Control -> PvNI:
react.surge.control.Controller -> vbwh:
    7:10:void <init>() -> <init>
react.surge.control.Disable -> XcrL:
react.surge.control.Enable -> mqoh:
react.surge.control.IController -> fCHh:
    void start() -> start
    void stop() -> stop
    void tick() -> tick
react.surge.control.Instance -> rVkH:
react.surge.control.Plugin -> lLiW:
react.surge.control.SurgePlugin -> ggmY:
    void onStart(react.surge.util.Protocol) -> IEpw
    void onStop() -> YNEw
    void onPostInit() -> eGvT
    void onPreInit() -> tTcG
    void onControllerRegistry() -> Rbca
    void registerController(react.surge.control.IController) -> IEpw
    react.glang.GList getControllers() -> opJK
    react.gconcurrent.ParallelPoolManager getThreadPool() -> XKFQ
react.surge.hotload.HotloadManager -> LaPv:
    react.glang.GMap filemods -> BBxG
    react.glang.GMap filesizes -> PUTK
    react.glang.GMap fileacts -> pQlx
    18:23:void <init>() -> <init>
    27:31:void track(java.io.File,java.lang.Runnable) -> IEpw
    35:38:void untrack(java.io.File) -> KDHU
    42:45:void untrackall() -> hRDB
    50:86:void onTick() -> JAJp
    91:91:java.lang.String getTickName() -> LywP
    14:14:react.glang.GMap access$0(react.surge.hotload.HotloadManager) -> IEpw
    15:15:react.glang.GMap access$1(react.surge.hotload.HotloadManager) -> VUHt
    16:16:react.glang.GMap access$2(react.surge.hotload.HotloadManager) -> uxtE
react.surge.hotload.HotloadManager$1 -> LaPv$1:
    react.surge.hotload.HotloadManager this$0 -> riUg
    1:55:void <init>(react.surge.hotload.HotloadManager) -> <init>
    60:84:void run() -> run
react.surge.nms.NMSClass -> HCbe:
    boolean init -> suIq
    int version -> version
    java.lang.Class PacketPlayOutPlayerListHeaderFooter -> AYfn
    java.lang.Class IChatBaseComponent -> brwx
    java.lang.Class ChatSerializer -> ahFQ
    java.lang.Class PacketPlayOutPlayerInfo -> EwXD
    java.lang.Class PlayerInfoData -> IHLs
    java.lang.Class EnumPlayerInfoAction -> RRff
    java.lang.Class GameProfile -> UucE
    java.lang.Class EnumGamemode -> uXke
    java.lang.Class TileEntitySkull -> fvtB
    java.lang.Class LoadingCache -> bbVW
    6:131:void <clinit>() -> <clinit>
    3:3:void <init>() -> <init>
react.surge.nms.NMSX -> jqWC:
    react.surge.nms.NMSX bountifulAPI -> IGmA
    boolean useOldMethods -> JJpC
    java.lang.String nmsver -> iDfp
    java.lang.Object eTimes -> lpSy
    java.lang.Object eTitle -> lyFC
    java.lang.Object eSubtitle -> QOeA
    20:459:void <clinit>() -> <clinit>
    15:15:void <init>() -> <init>
    26:28:java.lang.String getVersion() -> getVersion
    35:45:void setAi(org.bukkit.entity.LivingEntity,boolean) -> IEpw
    56:70:java.lang.Class getCBNMSClass(java.lang.String) -> Whmh
    75:89:java.lang.Class getCBClass(java.lang.String) -> eHCi
    96:104:java.lang.Object serializeChat(java.lang.String) -> AGNa
    109:114:java.lang.reflect.Field setAccessible(java.lang.reflect.Field) -> VUHt
    119:121:java.lang.reflect.Method setAccessible(java.lang.reflect.Method) -> IEpw
    131:131:java.lang.String getBukkitVersion() -> getBukkitVersion
    141:141:java.lang.String nmsPackage() -> qeMm
    151:151:java.lang.String craftPackage() -> Ihjn
    166:178:void showPickup(org.bukkit.entity.Player,org.bukkit.entity.Entity,org.bukkit.entity.Entity) -> IEpw
    184:193:void sendPacket(org.bukkit.entity.Player,java.lang.Object) -> IEpw
    197:207:java.lang.Class getNMSClass(java.lang.String) -> JYwS
    217:275:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> IEpw
    279:280:void clearTitle(org.bukkit.entity.Player) -> LiMg
    284:316:void sendTabTitle(org.bukkit.entity.Player,java.lang.String,java.lang.String) -> VUHt
    320:375:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> IEpw
    379:405:void sendActionBar(org.bukkit.entity.Player,java.lang.String,int) -> IEpw
    409:410:void sendActionBarToAllPlayers(java.lang.String) -> HSqN
    414:418:void sendActionBarToAllPlayers(java.lang.String,int) -> mNyO
    422:427:java.lang.String getEntityName(org.bukkit.entity.Entity) -> tSmm
    434:447:int ping(org.bukkit.entity.Player) -> fAsQ
react.surge.nms.NMSX$1 -> jqWC$1:
    org.bukkit.entity.Player val$player -> IXdr
    1:382:void <init>(org.bukkit.entity.Player) -> <init>
    387:388:void run() -> run
react.surge.nms.NMSX$2 -> jqWC$2:
    org.bukkit.entity.Player val$player -> IXdr
    java.lang.String val$message -> dpls
    1:395:void <init>(org.bukkit.entity.Player,java.lang.String) -> <init>
    401:402:void run() -> run
react.surge.nms.PacketUtil -> DGtx:
    6:6:void <init>() -> <init>
    20:45:react.surge.nms.PacketUtil$V getVersion() -> OGxd
    50:64:void sendTitle(org.bukkit.entity.Player,java.lang.Integer,java.lang.Integer,java.lang.Integer,java.lang.String,java.lang.String) -> IEpw
    68:82:void clearTitle(org.bukkit.entity.Player) -> LiMg
    86:100:void sendActionBar(org.bukkit.entity.Player,java.lang.String) -> IEpw
react.surge.nms.PacketUtil$V -> DGtx$IEpw:
    react.surge.nms.PacketUtil$V R17 -> slWf
    react.surge.nms.PacketUtil$V R18 -> eboC
    react.surge.nms.PacketUtil$V R19 -> PURh
    react.surge.nms.PacketUtil$V R111 -> eQmQ
    react.surge.nms.PacketUtil$V R110 -> jYOr
    react.surge.nms.PacketUtil$V R112 -> VyIq
    react.surge.nms.PacketUtil$V[] ENUM$VALUES -> YpqG
    8:15:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.nms.PacketUtil$V[] values() -> values
    1:1:react.surge.nms.PacketUtil$V valueOf(java.lang.String) -> valueOf
react.surge.nms.Title -> oEQV:
    java.lang.String title -> title
    java.lang.String subTitle -> KEdx
    java.lang.String action -> action
    java.lang.Integer fadeIn -> qTrh
    java.lang.Integer fadeOut -> gWue
    java.lang.Integer stayTime -> GuNs
    14:19:void <init>() -> <init>
    21:29:void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    31:38:void <init>(java.lang.String,java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    40:46:void <init>(java.lang.String,java.lang.Integer,java.lang.Integer,java.lang.Integer) -> <init>
    52:60:void send(org.bukkit.entity.Player) -> CUas
    64:64:java.lang.String getTitle() -> getTitle
    69:70:void setTitle(java.lang.String) -> setTitle
    74:74:java.lang.String getSubTitle() -> qvOa
    79:80:void setSubTitle(java.lang.String) -> dnsN
    84:84:java.lang.String getAction() -> getAction
    89:90:void setAction(java.lang.String) -> setAction
    94:94:java.lang.Integer getFadeIn() -> KoRN
    99:100:void setFadeIn(java.lang.Integer) -> uxtE
    104:104:java.lang.Integer getFadeOut() -> nuVi
    109:110:void setFadeOut(java.lang.Integer) -> KDHU
    114:114:java.lang.Integer getStayTime() -> dNGD
    119:120:void setStayTime(java.lang.Integer) -> kkWN
react.surge.nms.VersionBukkit -> Gjpu:
    react.surge.nms.VersionBukkit VU -> qoFL
    react.surge.nms.VersionBukkit V7 -> uYNo
    react.surge.nms.VersionBukkit V8 -> qLbI
    react.surge.nms.VersionBukkit V9 -> RAhw
    react.surge.nms.VersionBukkit V11 -> CiCV
    react.surge.nms.VersionBukkit V111 -> scjF
    react.surge.nms.VersionBukkit V112 -> LIIe
    react.surge.nms.VersionBukkit[] ENUM$VALUES -> HUmx
    5:13:void <clinit>() -> <clinit>
    5:5:void <init>(java.lang.String,int) -> <init>
    17:22:boolean tc() -> RRDQ
    27:32:boolean uc() -> psMB
    37:67:react.surge.nms.VersionBukkit get() -> xYAF
    1:1:react.surge.nms.VersionBukkit[] values() -> values
    1:1:react.surge.nms.VersionBukkit valueOf(java.lang.String) -> valueOf
react.surge.sched.IBursterator -> YoeR:
    void burst(java.lang.Object) -> ivRC
    void setTimeLock(double) -> YgBo
    double getEstimatedTimeUse() -> WrTq
    int flush() -> nmEf
    int flush(react.gbench.Profiler) -> IEpw
    void queue(java.lang.Object) -> pOot
    void queue(java.util.List) -> uxtE
    void queue(java.lang.Object[]) -> IEpw
react.surge.sched.ICancellable -> MRox:
    void cancel() -> cancel
react.surge.sched.IMasterTickComponent -> inTL:
    void onTick() -> JAJp
    java.lang.String getTickName() -> LywP
react.surge.sched.ITask -> SLQc:
    int getId() -> getId
    void run() -> run
    boolean isRepeating() -> nSRm
    java.lang.String getName() -> getName
    double getComputeTime() -> qdmA
    double getTotalComputeTime() -> kAXg
    double getActiveTime() -> AHDG
    boolean hasCompleted() -> tvgE
react.surge.sched.Task -> ejWS:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> qetO
    double computeTime -> pkbO
    double totalComputeTime -> mQVd
    double activeTime -> kmTB
    boolean completed -> completed
    react.gbench.Profiler profiler -> sJVp
    react.gbench.Profiler activeProfiler -> klre
    int ticks -> Gcju
    20:42:void <init>(java.lang.String) -> <init>
    44:67:void <init>(java.lang.String,int) -> <init>
    69:97:void <init>(java.lang.String,int,int) -> <init>
    101:110:void setup(java.lang.String,boolean) -> KDHU
    115:121:void cancel() -> cancel
    126:126:int getId() -> getId
    132:132:boolean isRepeating() -> nSRm
    138:138:java.lang.String getName() -> getName
    144:144:double getComputeTime() -> qdmA
    150:150:boolean hasCompleted() -> tvgE
    156:156:double getTotalComputeTime() -> kAXg
    162:162:double getActiveTime() -> AHDG
    17:17:react.gbench.Profiler access$0(react.surge.sched.Task) -> IEpw
    15:15:void access$1(react.surge.sched.Task,boolean) -> IEpw
    16:16:react.gbench.Profiler access$2(react.surge.sched.Task) -> VUHt
    14:14:void access$3(react.surge.sched.Task,double) -> IEpw
    12:12:void access$4(react.surge.sched.Task,double) -> VUHt
    14:14:double access$5(react.surge.sched.Task) -> uxtE
    13:13:void access$6(react.surge.sched.Task,double) -> uxtE
    13:13:double access$7(react.surge.sched.Task) -> KDHU
    12:12:double access$8(react.surge.sched.Task) -> kkWN
react.surge.sched.Task$1 -> ejWS$1:
    react.surge.sched.Task this$0 -> QXWP
    1:25:void <init>(react.surge.sched.Task) -> <init>
    30:40:void run() -> run
react.surge.sched.Task$2 -> ejWS$2:
    react.surge.sched.Task this$0 -> QXWP
    1:49:void <init>(react.surge.sched.Task) -> <init>
    54:65:void run() -> run
react.surge.sched.Task$3 -> ejWS$3:
    react.surge.sched.Task this$0 -> QXWP
    int val$total -> cBxB
    1:74:void <init>(react.surge.sched.Task,int) -> <init>
    79:95:void run() -> run
react.surge.sched.TaskLater -> YpGK:
    int id -> id
    java.lang.String name -> name
    boolean repeating -> qetO
    double computeTime -> pkbO
    double totalComputeTime -> mQVd
    double activeTime -> kmTB
    boolean completed -> completed
    react.gbench.Profiler profiler -> sJVp
    react.gbench.Profiler activeProfiler -> klre
    int ticks -> Gcju
    22:23:void <init>(java.lang.String) -> <init>
    25:48:void <init>(java.lang.String,int) -> <init>
    52:61:void setup(java.lang.String,boolean) -> KDHU
    66:72:void cancel() -> cancel
    77:77:int getId() -> getId
    83:83:boolean isRepeating() -> nSRm
    89:89:java.lang.String getName() -> getName
    95:95:double getComputeTime() -> qdmA
    101:101:boolean hasCompleted() -> tvgE
    107:107:double getTotalComputeTime() -> kAXg
    113:113:double getActiveTime() -> AHDG
    17:17:react.gbench.Profiler access$0(react.surge.sched.TaskLater) -> IEpw
    12:12:void access$1(react.surge.sched.TaskLater,double) -> IEpw
    13:13:double access$2(react.surge.sched.TaskLater) -> VUHt
    12:12:double access$3(react.surge.sched.TaskLater) -> uxtE
    13:13:void access$4(react.surge.sched.TaskLater,double) -> VUHt
    16:16:react.gbench.Profiler access$5(react.surge.sched.TaskLater) -> KDHU
    14:14:double access$6(react.surge.sched.TaskLater) -> kkWN
    14:14:void access$7(react.surge.sched.TaskLater,double) -> uxtE
react.surge.sched.TaskLater$1 -> YpGK$1:
    react.surge.sched.TaskLater this$0 -> PMDV
    1:30:void <init>(react.surge.sched.TaskLater) -> <init>
    35:46:void run() -> run
react.surge.sched.TaskManager -> yBLc:
    react.glang.GList tasks -> nmSL
    react.glang.GMap taskProfiles -> agfA
    11:15:void <init>() -> <init>
    19:20:void add(react.surge.sched.ITask) -> IEpw
    25:35:void onTick() -> JAJp
    39:40:void putFinishingTask(react.surge.sched.ITask) -> VUHt
    44:53:void putTask(react.surge.sched.ITask) -> uxtE
    58:58:java.lang.String getTickName() -> LywP
    63:63:react.glang.GList getTasks() -> clfU
    68:68:react.glang.GMap getTaskProfiles() -> BtyL
react.surge.sched.TaskProfile -> PvNF:
    double activeTime -> kmTB
    double computeTickTime -> lhFh
    double computeTime -> pkbO
    9:14:void <init>() -> <init>
    18:18:double getActiveTime() -> AHDG
    23:24:void setActiveTime(double) -> LiMg
    28:28:double getComputeTickTime() -> ncsg
    33:34:void setComputeTickTime(double) -> fAsQ
    38:38:double getComputeTime() -> qdmA
    43:44:void setComputeTime(double) -> CUas
react.surge.server.AsyncTick -> IpxK:
react.surge.server.CPS -> piuh:
    react.glang.GMap keys -> ifmM
    23:23:void <clinit>() -> <clinit>
    21:21:void <init>() -> <init>
    27:41:react.glang.GList identify(java.lang.String) -> qcwd
    46:99:void scan() -> ydSm
    103:133:java.lang.String readResource(java.io.File,java.lang.String) -> uxtE
react.surge.server.CoreTickThread -> eGtH:
    boolean r -> r
    9:14:void <init>() -> <init>
    19:63:void run() -> run
react.surge.server.MemoryMonitor -> CESv:
    long memoryFree -> whEn
    long memoryUsed -> stkB
    long memoryMax -> keDG
    long lastMemoryUsed -> rXTs
    long memoryUsedAfterGC -> jGkn
    long allocated -> vvCd
    long collected -> QrIx
    long collections -> Rtlg
    long sms -> fTrW
    long memoryAllocatedPerTick -> ayHa
    long memoryCollectedPerTick -> PvyY
    long memoryFullyAllocatedPerTick -> YXBK
    long mah -> tUnD
    long mahs -> VhKB
    22:39:void <init>() -> <init>
    void onAllocationSet() -> baRc
    46:98:void run() -> run
    102:102:long getMemoryFree() -> AaTu
    107:107:long getMemoryUsed() -> getMemoryUsed
    112:112:long getMemoryMax() -> yKFM
    117:117:long getLastMemoryUsed() -> uOYv
    122:122:long getMemoryUsedAfterGC() -> kImA
    127:127:long getAllocated() -> getAllocated
    132:132:long getCollected() -> agDG
    137:137:long getCollections() -> MdYb
    142:142:long getSms() -> pbMl
    147:147:long getMemoryAllocatedPerTick() -> BKHV
    152:152:long getMemoryCollectedPerTick() -> GRHH
    157:157:long getMemoryFullyAllocatedPerTick() -> xHCO
    162:162:long getMah() -> nKFh
    167:167:long getMahs() -> ifKJ
react.surge.server.SuperSampler -> ofsJ:
    react.gmath.Average ticksPerSecondL -> GAkY
    react.gmath.Average tickTimeL -> VxkM
    react.gmath.Average mahL -> Dsvx
    double ticksPerSecond -> wxRs
    double ticksPerSecondRaw -> iUnE
    double tickTime -> sBIg
    double tickTimeRaw -> plDu
    boolean running -> running
    boolean frozen -> VhKO
    double tickUtilizationRaw -> Hwsa
    double tickUtilization -> IGot
    double leftoverTickTime -> bjjn
    long memoryUse -> Rtmp
    long memoryAllocated -> igPD
    long memoryCollected -> SUnP
    long mahs -> VhKB
    int totalChunks -> mayU
    int totalEntities -> TPaH
    int totalDrops -> Jugc
    int totalTiles -> Taaw
    int totalLiving -> QWwq
    int chunksLoaded -> PLeK
    int chunksUnloaded -> Evxp
    react.surge.server.WorldMonitor worldMonitor -> xjjH
    react.surge.server.TPSMonitor tpsMonitor -> oybU
    react.surge.server.MemoryMonitor memoryMonitor -> scjs
    java.lang.StackTraceElement[] lockStack -> bkLE
    react.glang.GMap spikes -> cTHe
    36:122:void <init>() -> <init>
    126:131:void start() -> start
    135:140:void stop() -> stop
    145:149:void onTick() -> JAJp
    154:154:java.lang.String getTickName() -> LywP
    159:159:react.gmath.Average getTicksPerSecondL() -> VxEh
    164:164:double getTicksPerSecond() -> qlqQ
    169:169:double getTicksPerSecondRaw() -> proF
    174:174:boolean isRunning() -> isRunning
    179:179:react.surge.server.TPSMonitor getTpsMonitor() -> pbMv
    184:184:react.gmath.Average getTickTimeL() -> tCep
    189:189:double getTickTime() -> FpgN
    194:194:double getTickTimeRaw() -> lnqr
    199:199:double getTickUtilizationRaw() -> XJfl
    204:204:double getTickUtilization() -> JkrH
    209:209:double getLeftoverTickTime() -> DjaQ
    214:214:react.surge.server.MemoryMonitor getMemoryMonitor() -> hACr
    219:219:long getMemoryUse() -> Gbhh
    224:224:long getMemoryAllocated() -> NpNj
    229:229:long getMemoryCollected() -> gqFH
    234:234:react.gmath.Average getMahL() -> IGJl
    239:239:long getMahs() -> ifKJ
    244:244:int getTotalChunks() -> dpLK
    249:249:int getTotalEntities() -> mPRd
    254:254:int getTotalDrops() -> RkXK
    259:259:int getTotalTiles() -> cJdb
    264:264:int getTotalLiving() -> mGbD
    269:269:react.surge.server.WorldMonitor getWorldMonitor() -> IFix
    274:274:int getChunksLoaded() -> Svjo
    279:279:int getChunksUnloaded() -> ntvq
    284:285:void setTicksPerSecondL(react.gmath.Average) -> IEpw
    289:290:void setTickTimeL(react.gmath.Average) -> VUHt
    294:295:void setMahL(react.gmath.Average) -> uxtE
    299:300:void setTicksPerSecond(double) -> AWkd
    304:305:void setTicksPerSecondRaw(double) -> Sdoy
    309:310:void setTickTime(double) -> wmvi
    314:315:void setTickTimeRaw(double) -> oxBc
    319:320:void setRunning(boolean) -> wCeA
    324:325:void setTickUtilizationRaw(double) -> AiNf
    329:330:void setTickUtilization(double) -> wejS
    334:335:void setLeftoverTickTime(double) -> AWnW
    339:340:void setMemoryUse(long) -> YgBo
    344:345:void setMemoryAllocated(long) -> LiMg
    349:350:void setMemoryCollected(long) -> fAsQ
    354:355:void setMahs(long) -> CUas
    359:360:void setTotalChunks(int) -> Whmh
    364:365:void setTotalEntities(int) -> eHCi
    369:370:void setTotalDrops(int) -> AGNa
    374:375:void setTotalTiles(int) -> JYwS
    379:380:void setTotalLiving(int) -> HSqN
    384:385:void setChunksLoaded(int) -> dnsN
    389:390:void setChunksUnloaded(int) -> qcwd
    394:395:void setWorldMonitor(react.surge.server.WorldMonitor) -> IEpw
    399:400:void setTpsMonitor(react.surge.server.TPSMonitor) -> IEpw
    404:405:void setMemoryMonitor(react.surge.server.MemoryMonitor) -> IEpw
    409:409:boolean isFrozen() -> isFrozen
    414:414:java.lang.StackTraceElement[] getLockStack() -> uXJI
    419:419:react.glang.GMap getSpikes() -> Nflu
    31:31:void access$0(react.surge.server.SuperSampler,int) -> IEpw
    33:33:void access$1(react.surge.server.SuperSampler,int) -> VUHt
    34:34:void access$2(react.surge.server.SuperSampler,int) -> uxtE
    32:32:void access$3(react.surge.server.SuperSampler,int) -> KDHU
    35:35:void access$4(react.surge.server.SuperSampler,int) -> kkWN
    36:36:void access$5(react.surge.server.SuperSampler,int) -> mNyO
    37:37:void access$6(react.surge.server.SuperSampler,int) -> YoSi
    19:19:void access$7(react.surge.server.SuperSampler,double) -> IEpw
    21:21:void access$8(react.surge.server.SuperSampler,double) -> VUHt
    15:15:react.gmath.Average access$9(react.surge.server.SuperSampler) -> IEpw
    19:19:double access$10(react.surge.server.SuperSampler) -> VUHt
    16:16:react.gmath.Average access$11(react.surge.server.SuperSampler) -> uxtE
    21:21:double access$12(react.surge.server.SuperSampler) -> KDHU
    18:18:void access$13(react.surge.server.SuperSampler,double) -> uxtE
    20:20:void access$14(react.surge.server.SuperSampler,double) -> KDHU
    24:24:void access$15(react.surge.server.SuperSampler,double) -> kkWN
    20:20:double access$16(react.surge.server.SuperSampler) -> kkWN
    25:25:void access$17(react.surge.server.SuperSampler,double) -> mNyO
    25:25:double access$18(react.surge.server.SuperSampler) -> mNyO
    26:26:void access$19(react.surge.server.SuperSampler,double) -> YoSi
    23:23:void access$20(react.surge.server.SuperSampler,boolean) -> IEpw
    42:42:react.glang.GMap access$21(react.surge.server.SuperSampler) -> YoSi
    27:27:void access$22(react.surge.server.SuperSampler,long) -> IEpw
    28:28:void access$23(react.surge.server.SuperSampler,long) -> VUHt
    29:29:void access$24(react.surge.server.SuperSampler,long) -> uxtE
    17:17:react.gmath.Average access$25(react.surge.server.SuperSampler) -> EBVa
    30:30:void access$26(react.surge.server.SuperSampler,long) -> KDHU
react.surge.server.SuperSampler$1 -> ofsJ$1:
    react.surge.server.SuperSampler this$0 -> pstJ
    1:71:void <init>(react.surge.server.SuperSampler) -> <init>
    76:83:void updated(int,int,int,int,int,int,int) -> IEpw
react.surge.server.SuperSampler$2 -> ofsJ$2:
    react.surge.server.SuperSampler this$0 -> pstJ
    1:86:void <init>(react.surge.server.SuperSampler) -> <init>
    91:101:void onTicked() -> BKHj
    106:107:void onSpike() -> HDHd
react.surge.server.SuperSampler$3 -> ofsJ$3:
    react.surge.server.SuperSampler this$0 -> pstJ
    1:110:void <init>(react.surge.server.SuperSampler) -> <init>
    115:120:void onAllocationSet() -> baRc
react.surge.server.TPSMonitor -> AaPs:
    double tickTimeMS -> kuew
    double rawTicksPerSecond -> PoIR
    react.gbench.Profiler tickProfiler -> FOiN
    react.gbench.Profiler tickTimeProfiler -> aMtj
    boolean ticked -> wWFM
    java.lang.Thread$State lastState -> wowB
    double actualTickTimeMS -> vmUA
    double ltt -> dybf
    long lastTick -> AsDS
    boolean frozen -> VhKO
    java.lang.StackTraceElement[] lockedStack -> UBcG
    22:38:void <init>() -> <init>
    void onTicked() -> BKHj
    void onSpike() -> HDHd
    47:121:void run() -> run
    125:153:void processState(java.lang.Thread$State) -> IEpw
    157:157:double getTickTimeMS() -> QOCd
    162:162:double getRawTicksPerSecond() -> qSly
    167:167:react.gbench.Profiler getTickProfiler() -> sHrK
    172:172:boolean isTicked() -> TWmq
    177:178:void markTick() -> VxHS
    182:182:react.gbench.Profiler getTickTimeProfiler() -> jypV
    187:187:java.lang.Thread$State getLastState() -> GRIg
    192:192:double getActualTickTimeMS() -> ELCi
    197:197:double getLtt() -> dMkB
    202:202:long getLastTick() -> YLuv
    207:207:boolean isFrozen() -> isFrozen
    212:212:java.lang.StackTraceElement[] getLockedStack() -> uiOS
react.surge.server.WorldMonitor -> jXDe:
    boolean chunksChanged -> AkNj
    boolean dropChanged -> RBJy
    boolean tileChanged -> Dsva
    boolean livingChanged -> lyJF
    boolean totalChanged -> bjjw
    boolean updated -> oqPx
    int totalChunks -> mayU
    int totalDrops -> Jugc
    int totalTiles -> Taaw
    int totalLiving -> QWwq
    int totalEntities -> TPaH
    int chunksLoaded -> PLeK
    int chunksUnloaded -> Evxp
    long ms -> tLSH
    25:44:void <init>() -> <init>
    49:69:void run() -> run
    void updated(int,int,int,int,int,int,int) -> IEpw
    76:81:void on(org.bukkit.event.world.ChunkLoadEvent) -> VUHt
    86:91:void on(org.bukkit.event.world.ChunkUnloadEvent) -> IEpw
    96:97:void on(org.bukkit.event.entity.EntitySpawnEvent) -> IEpw
    102:103:void on(org.bukkit.event.entity.EntityDeathEvent) -> IEpw
    108:109:void on(org.bukkit.event.player.PlayerDropItemEvent) -> IEpw
    114:115:void on(org.bukkit.event.player.PlayerPickupItemEvent) -> IEpw
    120:121:void on(org.bukkit.event.entity.EntityPickupItemEvent) -> IEpw
    126:127:void on(org.bukkit.event.block.BlockPlaceEvent) -> IEpw
    132:133:void on(org.bukkit.event.block.BlockBreakEvent) -> IEpw
    137:138:void doUpdate() -> WHFn
    142:193:void sample() -> AyqF
    197:203:void sampleTotalCount() -> nJgM
    207:213:void sampleLivingCount() -> ELDP
    217:226:void sampleTileCount() -> vuCE
    230:236:void sampleDropCount() -> KfgG
    240:246:void sampleChunkCount() -> GslX
react.surge.text.PhantomSpinner -> YMcF:
    react.surge.text.ProgressSpinner s -> uGnE
    react.surge.text.ProgressSpinner c -> GuSG
    15:19:void <init>(react.surge.util.C,react.surge.util.C,react.surge.util.C) -> <init>
    24:24:java.lang.String toString() -> toString
react.surge.text.ProgressSpinner -> JQxN:
    java.lang.String[] chars -> XnSF
    int index -> index
    react.surge.text.ProgressSpinner DEFAULT -> XwCp
    react.surge.text.ProgressSpinner NETWORK -> EoLf
    react.surge.text.ProgressSpinner CIRCLES -> NqUt
    react.surge.text.ProgressSpinner RANDOMS -> aEgm
    react.surge.text.ProgressSpinner MERGERS -> eJDd
    70:75:void <clinit>() -> <clinit>
    25:29:void <init>(java.lang.String[]) -> <init>
    36:37:void <init>() -> <init>
    45:55:java.lang.String toString() -> toString
    60:60:java.lang.String[] getChars() -> NpQN
    65:65:int getIndex() -> getIndex
react.surge.util.Anchor -> jNvC:
    int value() -> value
react.surge.util.Area -> LjDL:
    org.bukkit.Location location -> pcVa
    java.lang.Double radius -> sRmF
    25:25:boolean within(org.bukkit.Location,org.bukkit.Location,double) -> IEpw
    37:41:void <init>(org.bukkit.Location,java.lang.Double) -> <init>
    45:45:react.surge.util.Cuboid toCuboid() -> sIUj
    57:61:void <init>(org.bukkit.Location,java.lang.Integer) -> <init>
    75:83:java.lang.Double distance(org.bukkit.Location) -> mNyO
    97:97:java.lang.Double slowDistance(org.bukkit.Location) -> YoSi
    109:109:boolean isWithin(org.bukkit.Location) -> EBVa
    119:119:boolean hasEntities() -> hasEntities
    131:141:org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) -> KDHU
    153:163:org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) -> IEpw
    176:205:org.bukkit.entity.Entity[] getNearbyEntities() -> VEDK
    216:226:org.bukkit.entity.Player[] getNearbyPlayers() -> hIWD
    236:236:org.bukkit.Location getLocation() -> getLocation
    247:248:void setLocation(org.bukkit.Location) -> tSmm
    257:257:java.lang.Double getRadius() -> mXeJ
    268:269:void setRadius(java.lang.Double) -> uxtE
    278:283:org.bukkit.Location random() -> XmKc
react.surge.util.Axis -> cKBc:
    react.surge.util.Axis X -> veGq
    react.surge.util.Axis Y -> OJEu
    react.surge.util.Axis Z -> wNXY
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Axis[] ENUM$VALUES -> IQFP
    5:9:void <clinit>() -> <clinit>
    15:20:void <init>(java.lang.String,int,int,int,int) -> <init>
    24:24:org.bukkit.util.Vector positive() -> FyXp
    29:29:org.bukkit.util.Vector negative() -> PBpM
    1:1:react.surge.util.Axis[] values() -> values
    1:1:react.surge.util.Axis valueOf(java.lang.String) -> valueOf
react.surge.util.BlastResistance -> Rbca:
    react.surge.util.BlastResistance BARRIER -> gOjD
    react.surge.util.BlastResistance BEDROCK -> SfsU
    react.surge.util.BlastResistance COMMAND -> kBco
    react.surge.util.BlastResistance ENDER_PORTAL -> MLPh
    react.surge.util.BlastResistance ENDER_PORTAL_FRAME -> GRnx
    react.surge.util.BlastResistance ANVIL -> JSgx
    react.surge.util.BlastResistance ENCHANTMENT_TABLE -> XUAW
    react.surge.util.BlastResistance OBSIDIAN -> wgjG
    react.surge.util.BlastResistance ENDER_CHEST -> CXDR
    react.surge.util.BlastResistance WATER -> GAnQ
    react.surge.util.BlastResistance LAVA -> rrLu
    react.surge.util.BlastResistance STATIONARY_WATER -> jjUb
    react.surge.util.BlastResistance DRAGON_EGG -> JJvs
    react.surge.util.BlastResistance ENDER_STONE -> HxUG
    react.surge.util.BlastResistance COAL_BLOCK -> qfWw
    react.surge.util.BlastResistance DIAMOND_BLOCK -> scmS
    react.surge.util.BlastResistance EMERALD_BLOCK -> pcTt
    react.surge.util.BlastResistance GOLD_BLOCK -> oWaM
    react.surge.util.BlastResistance IRON_BLOCK -> qwYo
    react.surge.util.BlastResistance REDSTONE_BLOCK -> GRmj
    react.surge.util.BlastResistance BRICK -> DsxT
    react.surge.util.BlastResistance BRICK_STAIRS -> kmVw
    react.surge.util.BlastResistance HARD_CLAY -> rXXy
    react.surge.util.BlastResistance STONE -> Ypsx
    react.surge.util.BlastResistance SMOOTH_BRICK -> Ljnc
    react.surge.util.BlastResistance SMOOTH_STAIRS -> QPLL
    react.surge.util.BlastResistance DOUBLE_STONE_SLAB2 -> aEfx
    react.surge.util.BlastResistance STONE_SLAB2 -> huPP
    react.surge.util.BlastResistance IRON_DOOR -> THRw
    react.surge.util.BlastResistance IRON_DOOR_BLOCK -> LcAn
    react.surge.util.BlastResistance IRON_TRAPDOOR -> UJxI
    react.surge.util.BlastResistance MOB_SPAWNER -> tVRd
    react.surge.util.BlastResistance WEB -> BwGO
    react.surge.util.BlastResistance DISPENSER -> yKnx
    react.surge.util.BlastResistance DROPPER -> nTaR
    react.surge.util.BlastResistance FURNACE -> OlJo
    react.surge.util.BlastResistance BURNING_FURNACE -> wyNk
    react.surge.util.BlastResistance BEACON -> OAVs
    react.surge.util.BlastResistance COAL_ORE -> hmBx
    react.surge.util.BlastResistance COCOA -> SESK
    react.surge.util.BlastResistance DIAMOND_ORE -> Hofn
    react.surge.util.BlastResistance EMERALD_ORE -> eQvi
    react.surge.util.BlastResistance FENCE -> xkPH
    react.surge.util.BlastResistance FENCE_GATE -> GKAx
    react.surge.util.BlastResistance ACACIA_FENCE_GATE -> KyRB
    react.surge.util.BlastResistance BIRCH_FENCE_GATE -> ymqc
    react.surge.util.BlastResistance DARK_OAK_FENCE_GATE -> LkSO
    react.surge.util.BlastResistance SPRUCE_FENCE_GATE -> MvfX
    react.surge.util.BlastResistance JUNGLE_FENCE_GATE -> OJGQ
    react.surge.util.BlastResistance ACACIA_FENCE -> WYnW
    react.surge.util.BlastResistance BIRCH_FENCE -> feyd
    react.surge.util.BlastResistance DARK_OAK_FENCE -> XUBQ
    react.surge.util.BlastResistance SPRUCE_FENCE -> Iafr
    react.surge.util.BlastResistance JUNGLE_FENCE -> tEPR
    react.surge.util.BlastResistance ACACIA_WOOD_STAIRS -> tfqp
    react.surge.util.BlastResistance BIRCH_WOOD_STAIRS -> VMyc
    react.surge.util.BlastResistance DARK_OAK_WOOD_STAIRS -> KWLh
    react.surge.util.BlastResistance SPRUCE_WOOD_STAIRS -> mHlJ
    react.surge.util.BlastResistance JUNGLE_WOOD_STAIRS -> qnjg
    react.surge.util.BlastResistance QUARTZ_STAIRS -> wVib
    react.surge.util.BlastResistance COBBLESTONE_STAIRS -> Udiv
    react.surge.util.BlastResistance SANDSTONE_STAIRS -> rOjN
    react.surge.util.BlastResistance NETHER_BRICK_STAIRS -> tocK
    react.surge.util.BlastResistance WOOD_STAIRS -> IHVQ
    react.surge.util.BlastResistance RED_SANDSTONE_STAIRS -> OJGd
    react.surge.util.BlastResistance ACACIA_DOOR -> aFJX
    react.surge.util.BlastResistance BIRCH_DOOR -> NFfS
    react.surge.util.BlastResistance DARK_OAK_DOOR -> DJKH
    react.surge.util.BlastResistance SPRUCE_DOOR -> cedj
    react.surge.util.BlastResistance JUNGLE_DOOR -> kTJw
    react.surge.util.BlastResistance GOLD_ORE -> YNua
    react.surge.util.BlastResistance HOPPER -> rOmo
    react.surge.util.BlastResistance IRON_ORE -> VVnS
    react.surge.util.BlastResistance LAPIS_BLOCK -> TajE
    react.surge.util.BlastResistance LAPIS_ORE -> LQah
    react.surge.util.BlastResistance QUARTZ_ORE -> FicS
    react.surge.util.BlastResistance REDSTONE_ORE -> qLit
    react.surge.util.BlastResistance TRAP_DOOR -> NXIO
    react.surge.util.BlastResistance WOOD -> Vpac
    react.surge.util.BlastResistance CHEST -> IPhu
    react.surge.util.BlastResistance TRAPPED_CHEST -> uQFk
    react.surge.util.BlastResistance WORKBENCH -> BTdV
    react.surge.util.BlastResistance CAULDRON -> oGDx
    react.surge.util.BlastResistance LOG -> jrhs
    react.surge.util.BlastResistance LOG_2 -> Medm
    react.surge.util.BlastResistance BOOKSHELF -> diGk
    react.surge.util.BlastResistance BANNER -> IPge
    react.surge.util.BlastResistance STANDING_BANNER -> eJHK
    react.surge.util.BlastResistance WALL_BANNER -> BnYE
    react.surge.util.BlastResistance JACK_O_LANTERN -> yUAu
    react.surge.util.BlastResistance MELON_BLOCK -> GmEh
    react.surge.util.BlastResistance SKULL -> iMby
    react.surge.util.BlastResistance PUMPKIN -> kdkP
    react.surge.util.BlastResistance SIGN -> sRoh
    react.surge.util.BlastResistance SIGN_POST -> yLPs
    react.surge.util.BlastResistance WALL_SIGN -> pAWB
    react.surge.util.BlastResistance QUARTZ_BLOCK -> hBPU
    react.surge.util.BlastResistance NOTE_BLOCK -> MDDC
    react.surge.util.BlastResistance RED_SANDSTONE -> htsJ
    react.surge.util.BlastResistance SANDSTONE -> Abcn
    react.surge.util.BlastResistance WOOL -> yDAA
    react.surge.util.BlastResistance MONSTER_EGG -> Ajsu
    react.surge.util.BlastResistance RAILS -> KWNy
    react.surge.util.BlastResistance ACTIVATOR_RAIL -> dqYF
    react.surge.util.BlastResistance DETECTOR_RAIL -> eAVs
    react.surge.util.BlastResistance POWERED_RAIL -> BDEI
    react.surge.util.BlastResistance CLAY -> SUtp
    react.surge.util.BlastResistance DIRT -> kvMK
    react.surge.util.BlastResistance GRASS -> MCcH
    react.surge.util.BlastResistance GRAVEL -> iMfT
    react.surge.util.BlastResistance SPONGE -> HVYL
    react.surge.util.BlastResistance BREWING_STAND -> dykb
    react.surge.util.BlastResistance STONE_BUTTON -> AjvH
    react.surge.util.BlastResistance WOOD_BUTTON -> yCcV
    react.surge.util.BlastResistance CAKE_BLOCK -> TsNP
    react.surge.util.BlastResistance ICE -> nvgs
    react.surge.util.BlastResistance PACKED_ICE -> QXcI
    react.surge.util.BlastResistance LEVER -> RKFD
    react.surge.util.BlastResistance MYCEL -> Glgu
    react.surge.util.BlastResistance PISTON_BASE -> GdXM
    react.surge.util.BlastResistance PISTON_EXTENSION -> txXv
    react.surge.util.BlastResistance PISTON_MOVING_PIECE -> XfIY
    react.surge.util.BlastResistance PISTON_STICKY_BASE -> mIRA
    react.surge.util.BlastResistance GOLD_PLATE -> RJdh
    react.surge.util.BlastResistance IRON_PLATE -> apbi
    react.surge.util.BlastResistance STONE_PLATE -> sBQp
    react.surge.util.BlastResistance WOOD_PLATE -> uaih
    react.surge.util.BlastResistance SAND -> sBPv
    react.surge.util.BlastResistance SOUL_SAND -> rPOf
    react.surge.util.BlastResistance CACTUS -> JTNG
    react.surge.util.BlastResistance LADDER -> VpbR
    react.surge.util.BlastResistance NETHERRACK -> RmFm
    react.surge.util.BlastResistance GLASS -> NOWw
    react.surge.util.BlastResistance THIN_GLASS -> Hwyn
    react.surge.util.BlastResistance STAINED_GLASS -> WtFX
    react.surge.util.BlastResistance STAINED_GLASS_PANE -> Ljtc
    react.surge.util.BlastResistance GLOWSTONE -> KyTO
    react.surge.util.BlastResistance REDSTONE_LAMP_OFF -> VVoR
    react.surge.util.BlastResistance REDSTONE_LAMP_ON -> QicX
    react.surge.util.BlastResistance SEA_LANTERN -> mHpS
    react.surge.util.BlastResistance BED_BLOCK -> IrmS
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR -> AACv
    react.surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED -> hAqW
    react.surge.util.BlastResistance HUGE_MUSHROOM_1 -> xtDP
    react.surge.util.BlastResistance HUGE_MUSHROOM_2 -> JSmV
    react.surge.util.BlastResistance LEAVES -> sKAo
    react.surge.util.BlastResistance LEAVES_2 -> Xefw
    react.surge.util.BlastResistance SNOW -> nfEv
    int br -> WkTr
    react.surge.util.BlastResistance[] ENUM$VALUES -> SDua
    10:159:void <clinit>() -> <clinit>
    163:166:void <init>(java.lang.String,int,int) -> <init>
    170:170:int getBlastResistance() -> gpfW
    175:190:int get(org.bukkit.Material) -> IEpw
    1:1:react.surge.util.BlastResistance[] values() -> values
    1:1:react.surge.util.BlastResistance valueOf(java.lang.String) -> valueOf
react.surge.util.Blocks -> Dajv:
    11:11:void <init>() -> <init>
    22:22:org.bukkit.Location getCenter(org.bukkit.block.Block) -> mNyO
react.surge.util.C -> pHVv:
    react.surge.util.C BLACK -> btEe
    react.surge.util.C DARK_BLUE -> uHVn
    react.surge.util.C DARK_GREEN -> wgqu
    react.surge.util.C DARK_AQUA -> tUxG
    react.surge.util.C DARK_RED -> neiM
    react.surge.util.C DARK_PURPLE -> VqEj
    react.surge.util.C GOLD -> YXLM
    react.surge.util.C GRAY -> HDxd
    react.surge.util.C DARK_GRAY -> rHBi
    react.surge.util.C BLUE -> PxFM
    react.surge.util.C GREEN -> Jurq
    react.surge.util.C AQUA -> oyma
    react.surge.util.C RED -> Kpeh
    react.surge.util.C LIGHT_PURPLE -> fMOi
    react.surge.util.C YELLOW -> VyWM
    react.surge.util.C WHITE -> yviV
    react.surge.util.C MAGIC -> WYvO
    react.surge.util.C BOLD -> MChI
    react.surge.util.C STRIKETHROUGH -> slfm
    react.surge.util.C UNDERLINE -> JeSL
    react.surge.util.C ITALIC -> negt
    react.surge.util.C RESET -> vnAW
    char COLOR_CHAR -> COLOR_CHAR
    java.util.regex.Pattern STRIP_COLOR_PATTERN -> STRIP_COLOR_PATTERN
    int intCode -> TsPn
    char code -> nCdw
    boolean isFormat -> whRj
    java.lang.String toString -> SNKI
    java.util.Map BY_ID -> BChe
    java.util.Map BY_CHAR -> EMQK
    java.util.Map dyeChatMap -> oXJX
    java.util.Map chatHexMap -> LtIM
    java.util.Map dyeHexMap -> rXbU
    int[] $SWITCH_TABLE$surge$util$C -> hcuv
    react.surge.util.C[] ENUM$VALUES -> WYtW
    19:727:void <clinit>() -> <clinit>
    334:335:void <init>(java.lang.String,int,char,int) -> <init>
    337:343:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    347:347:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
    357:357:char getChar() -> getChar
    363:363:java.lang.String toString() -> toString
    373:373:org.bukkit.DyeColor dye() -> FVuQ
    378:378:java.lang.String hex() -> IrBE
    388:388:boolean isFormat() -> isFormat
    398:398:boolean isColor() -> isColor
    413:418:react.surge.util.C getByChar(char) -> EBVa
    434:442:react.surge.util.C getByChar(java.lang.String) -> TyVw
    455:460:java.lang.String stripColor(java.lang.String) -> stripColor
    472:477:react.surge.util.C dyeToChat(org.bukkit.DyeColor) -> VUHt
    482:490:org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) -> IEpw
    496:501:java.lang.String chatToHex(org.bukkit.ChatColor) -> VUHt
    506:511:java.lang.String dyeToHex(org.bukkit.DyeColor) -> uxtE
    516:537:org.bukkit.Color hexToColor(java.lang.String) -> LrAF
    542:555:org.bukkit.Color rgbToColor(java.lang.String) -> SeRh
    560:578:java.lang.String generateColorTable() -> QVuD
    588:588:org.bukkit.ChatColor chatColor() -> ryUt
    605:614:java.lang.String translateAlternateColorCodes(char,java.lang.String) -> translateAlternateColorCodes
    619:627:react.surge.util.C fromItemMeta(byte) -> YoSi
    632:679:byte getItemMeta() -> UJPM
    692:717:java.lang.String getLastColors(java.lang.String) -> getLastColors
    1:1:react.surge.util.C[] values() -> values
    1:1:react.surge.util.C valueOf(java.lang.String) -> valueOf
    332:332:void <init>(java.lang.String,int,char,int,react.surge.util.C) -> <init>
    337:337:void <init>(java.lang.String,int,char,int,boolean,react.surge.util.C) -> <init>
    17:17:int[] $SWITCH_TABLE$surge$util$C() -> QphG
react.surge.util.C$1 -> pHVv$1:
    1:23:void <init>(java.lang.String,int,char,int) -> <init>
    27:27:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$10 -> pHVv$2:
    1:122:void <init>(java.lang.String,int,char,int) -> <init>
    126:126:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$11 -> pHVv$3:
    1:133:void <init>(java.lang.String,int,char,int) -> <init>
    137:137:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$12 -> pHVv$4:
    1:144:void <init>(java.lang.String,int,char,int) -> <init>
    148:148:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$13 -> pHVv$5:
    1:155:void <init>(java.lang.String,int,char,int) -> <init>
    159:159:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$14 -> pHVv$6:
    1:166:void <init>(java.lang.String,int,char,int) -> <init>
    170:170:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$15 -> pHVv$7:
    1:177:void <init>(java.lang.String,int,char,int) -> <init>
    181:181:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$16 -> pHVv$8:
    1:188:void <init>(java.lang.String,int,char,int) -> <init>
    192:192:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$17 -> pHVv$9:
    1:199:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    203:203:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$18 -> pHVv$10:
    1:210:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    214:214:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$19 -> pHVv$11:
    1:221:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    225:225:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$2 -> pHVv$12:
    1:34:void <init>(java.lang.String,int,char,int) -> <init>
    38:38:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$20 -> pHVv$13:
    1:232:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    236:236:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$21 -> pHVv$14:
    1:243:void <init>(java.lang.String,int,char,int,boolean) -> <init>
    247:247:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$22 -> pHVv$15:
    1:255:void <init>(java.lang.String,int,char,int) -> <init>
    259:259:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$3 -> pHVv$16:
    1:45:void <init>(java.lang.String,int,char,int) -> <init>
    49:49:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$4 -> pHVv$17:
    1:56:void <init>(java.lang.String,int,char,int) -> <init>
    60:60:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$5 -> pHVv$18:
    1:67:void <init>(java.lang.String,int,char,int) -> <init>
    71:71:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$6 -> pHVv$19:
    1:78:void <init>(java.lang.String,int,char,int) -> <init>
    82:82:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$7 -> pHVv$20:
    1:89:void <init>(java.lang.String,int,char,int) -> <init>
    93:93:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$8 -> pHVv$21:
    1:100:void <init>(java.lang.String,int,char,int) -> <init>
    104:104:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.C$9 -> pHVv$22:
    1:111:void <init>(java.lang.String,int,char,int) -> <init>
    115:115:net.md_5.bungee.api.ChatColor asBungee() -> asBungee
react.surge.util.CDou -> RYrV:
    double number -> iMhB
    double max -> max
    8:12:void <init>(double) -> <init>
    16:18:react.surge.util.CDou set(double) -> WFke
    23:25:react.surge.util.CDou add(double) -> pYEs
    30:32:react.surge.util.CDou sub(double) -> EKIh
    37:37:double get() -> get
    42:48:void circ() -> WGeE
react.surge.util.CMD -> YNEw:
    java.lang.String command -> command
    org.bukkit.command.CommandSender sender -> sender
    boolean virtual -> cfId
    25:30:void <init>(java.lang.String) -> <init>
    39:40:react.surge.util.CMD virtual() -> AGgF
    51:53:void execute(org.bukkit.command.CommandSender) -> kkWN
    60:77:void execute() -> execute
react.surge.util.CNum -> eGvT:
    int number -> number
    int max -> max
    8:12:void <init>(int) -> <init>
    16:18:react.surge.util.CNum set(int) -> TyVw
    23:25:react.surge.util.CNum add(int) -> LrAF
    30:32:react.surge.util.CNum sub(int) -> SeRh
    37:37:int get() -> get
    42:48:void circ() -> WGeE
    52:52:int getMax() -> getMax
    57:59:void setMax(int) -> CLry
react.surge.util.Chunks -> tTcG:
    12:12:void <init>() -> <init>
    23:23:react.glang.GList getLoadedChunks(org.bukkit.World) -> NMRL
    33:40:react.glang.GList getLoadedChunks() -> PmeE
    54:54:react.glang.GList getRadius(org.bukkit.Chunk,int) -> VUHt
    72:72:boolean unload(org.bukkit.Chunk,boolean,boolean) -> IEpw
    86:86:boolean unload(org.bukkit.Chunk,boolean) -> IEpw
    98:98:boolean unload(org.bukkit.Chunk) -> YfcL
    114:124:int unload(react.glang.GList,boolean,boolean) -> IEpw
    138:138:int unload(react.glang.GList,boolean) -> IEpw
    150:150:int unload(react.glang.GList) -> NMRL
    166:166:boolean isLoaded(java.lang.String,int,int) -> IEpw
    182:190:boolean isLoaded(org.bukkit.World,int,int) -> VUHt
    201:205:void load(react.glang.GList) -> wCeA
react.surge.util.Cuboid -> ySQb:
    java.lang.String worldName -> WADU
    int x1 -> yUFW
    int y1 -> Kpdt
    int z1 -> nwJL
    int x2 -> GRwI
    int y2 -> DuBm
    int z2 -> KVtj
    int[] $SWITCH_TABLE$surge$util$Axis -> FGfG
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> Udrn
    42:56:void <init>(org.bukkit.Location,org.bukkit.Location) -> <init>
    60:70:int depth(react.surge.util.Axis) -> IEpw
    83:89:void set(org.bukkit.Location,org.bukkit.Location) -> uxtE
    93:93:boolean hasPlayers() -> ESsA
    98:110:react.glang.GList getPlayers() -> gVah
    115:166:react.glang.GList getEntities() -> lfcW
    177:178:void <init>(org.bukkit.Location) -> <init>
    188:189:void <init>(react.surge.util.Cuboid) -> <init>
    209:218:void <init>(org.bukkit.World,int,int,int,int,int,int) -> <init>
    238:247:void <init>(java.lang.String,int,int,int,int,int,int) -> <init>
    249:258:void <init>(java.util.Map) -> <init>
    263:271:java.util.Map serialize() -> serialize
    276:276:react.surge.util.Cuboid flatten(int) -> WFjs
    287:287:org.bukkit.Location getLowerNE() -> HCjK
    298:298:org.bukkit.Location getUpperSW() -> JtdW
    308:311:org.bukkit.Location getCenter() -> getCenter
    323:328:org.bukkit.World getWorld() -> getWorld
    338:338:int getSizeX() -> qdpg
    348:348:int getSizeY() -> QWVH
    358:358:int getSizeZ() -> tCjQ
    368:368:int getLowerX() -> QEua
    378:378:int getLowerY() -> OasD
    388:388:int getLowerZ() -> GcLx
    398:398:int getUpperX() -> uqbC
    408:408:int getUpperY() -> iemk
    418:418:int getUpperZ() -> bOwJ
    428:438:org.bukkit.block.Block[] corners() -> OYcA
    454:469:react.surge.util.Cuboid expand(react.surge.util.Cuboid$CuboidDirection,int) -> IEpw
    484:484:react.surge.util.Cuboid shift(react.surge.util.Cuboid$CuboidDirection,int) -> VUHt
    500:514:react.surge.util.Cuboid outset(react.surge.util.Cuboid$CuboidDirection,int) -> uxtE
    530:530:react.surge.util.Cuboid inset(react.surge.util.Cuboid$CuboidDirection,int) -> KDHU
    546:546:boolean contains(int,int,int) -> kkWN
    558:558:boolean contains(org.bukkit.block.Block) -> YoSi
    570:570:boolean contains(org.bukkit.Location) -> mGIk
    580:580:int volume() -> dNNb
    591:601:byte averageLightLevel() -> FFWh
    612:612:react.surge.util.Cuboid contract() -> fnGA
    626:666:react.surge.util.Cuboid contract(react.surge.util.Cuboid$CuboidDirection) -> IEpw
    680:695:react.surge.util.Cuboid getFace(react.surge.util.Cuboid$CuboidDirection) -> VUHt
    708:715:boolean containsOnly(org.bukkit.Material) -> VUHt
    727:739:react.surge.util.Cuboid getBoundingCuboid(react.surge.util.Cuboid) -> IEpw
    755:755:org.bukkit.block.Block getRelativeBlock(int,int,int) -> mNyO
    775:775:org.bukkit.block.Block getRelativeBlock(org.bukkit.World,int,int,int) -> IEpw
    786:800:java.util.List getChunks() -> gNfB
    815:819:void fill(int,byte) -> IEpw
    843:843:java.util.Iterator iterator() -> iterator
    854:854:react.surge.util.Cuboid clone() -> iwPD
    865:865:java.lang.String toString() -> toString
    961:970:int hashCode() -> hashCode
    976:1036:boolean equals(java.lang.Object) -> equals
    1:1:java.lang.Object clone() -> clone
    27:27:int[] $SWITCH_TABLE$surge$util$Axis() -> KMVi
    27:27:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> QWYD
react.surge.util.Cuboid$1 -> ySQb$1:
    react.surge.util.Cuboid this$0 -> PxHB
    1:98:void <init>(react.surge.util.Cuboid) -> <init>
    103:108:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> mGIk
    1:1:java.lang.Object onAdapt(java.lang.Object) -> YoSi
react.surge.util.Cuboid$CuboidDirection -> ySQb$IEpw:
    react.surge.util.Cuboid$CuboidDirection North -> xcGy
    react.surge.util.Cuboid$CuboidDirection East -> lFST
    react.surge.util.Cuboid$CuboidDirection South -> cDIL
    react.surge.util.Cuboid$CuboidDirection West -> XelA
    react.surge.util.Cuboid$CuboidDirection Up -> HNLt
    react.surge.util.Cuboid$CuboidDirection Down -> KFTl
    react.surge.util.Cuboid$CuboidDirection Horizontal -> wxtw
    react.surge.util.Cuboid$CuboidDirection Vertical -> WtLL
    react.surge.util.Cuboid$CuboidDirection Both -> rHCo
    react.surge.util.Cuboid$CuboidDirection Unknown -> DSCO
    int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection -> Udrn
    react.surge.util.Cuboid$CuboidDirection[] ENUM$VALUES -> FaXy
    916:928:void <clinit>() -> <clinit>
    916:916:void <init>(java.lang.String,int) -> <init>
    932:953:react.surge.util.Cuboid$CuboidDirection opposite() -> axIf
    1:1:react.surge.util.Cuboid$CuboidDirection[] values() -> values
    1:1:react.surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) -> valueOf
    916:916:int[] $SWITCH_TABLE$surge$util$Cuboid$CuboidDirection() -> QWYD
react.surge.util.Cuboid$CuboidIterator -> ySQb$VUHt:
    org.bukkit.World w -> ubOK
    int baseX -> iMht
    int baseY -> lEqK
    int baseZ -> kvSX
    int x -> x
    int y -> y
    int z -> z
    int sizeX -> QjHS
    int sizeY -> EMSN
    int sizeZ -> wVrG
    react.surge.util.Cuboid this$0 -> PxHB
    875:885:void <init>(react.surge.util.Cuboid,org.bukkit.World,int,int,int,int,int,int) -> <init>
    890:890:boolean hasNext() -> hasNext
    896:906:org.bukkit.block.Block next() -> next
    913:913:void remove() -> remove
    1:1:java.lang.Object next() -> next
react.surge.util.CuboidException -> NDuV:
    long serialVersionUID -> serialVersionUID
    12:13:void <init>(java.lang.String) -> <init>
react.surge.util.D -> MmFv:
    react.glang.GList buffer -> OJOW
    10:10:void <clinit>() -> <clinit>
    8:8:void <init>() -> <init>
    14:18:void flush() -> flush
    22:33:void log(java.lang.String,java.lang.String) -> KDHU
    37:38:void l(java.lang.Object,java.lang.String) -> VUHt
    42:43:void s(java.lang.Object,java.lang.String) -> uxtE
    47:48:void v(java.lang.Object,java.lang.String) -> KDHU
    52:53:void w(java.lang.Object,java.lang.String) -> kkWN
    57:58:void f(java.lang.Object,java.lang.String) -> mNyO
    62:69:void l(java.lang.String) -> CLry
    73:80:void s(java.lang.String) -> WFjs
    84:91:void v(java.lang.String) -> dxEp
    95:102:void w(java.lang.String) -> JsjS
    106:113:void f(java.lang.String) -> wnYh
react.surge.util.DMSRequire -> xqqG:
    react.surge.util.DMSRequirement value() -> vdCa
react.surge.util.DMSRequirement -> tLSH:
    react.surge.util.DMSRequirement SQL -> aNax
    react.surge.util.DMSRequirement[] ENUM$VALUES -> HonO
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DMSRequirement[] values() -> values
    1:1:react.surge.util.DMSRequirement valueOf(java.lang.String) -> valueOf
react.surge.util.Depend -> rVmU:
    react.surge.util.Depend VAULT -> wOCG
    react.surge.util.Depend FAWE -> kTPd
    react.surge.util.Depend WORLDEDIT -> yfJF
    react.surge.util.Depend PROTOLIB -> gXdT
    react.surge.util.Depend CITIZENS -> wOBP
    java.lang.String name -> name
    react.surge.util.Depend[] ENUM$VALUES -> hRup
    5:11:void <clinit>() -> <clinit>
    15:18:void <init>(java.lang.String,int,java.lang.String) -> <init>
    22:22:boolean exists() -> exists
    1:1:react.surge.util.Depend[] values() -> values
    1:1:react.surge.util.Depend valueOf(java.lang.String) -> valueOf
react.surge.util.Dimension -> JJLE:
    int width -> width
    int height -> height
    int depth -> depth
    24:29:void <init>(int,int,int) -> <init>
    39:44:void <init>(int,int) -> <init>
    53:68:react.surge.util.DimensionFace getPane() -> Tqca
    73:73:int getWidth() -> getWidth
    78:78:int getHeight() -> getHeight
    83:83:int getDepth() -> getDepth
react.surge.util.DimensionFace -> oETF:
    react.surge.util.DimensionFace X -> CXOb
    react.surge.util.DimensionFace Y -> kvRq
    react.surge.util.DimensionFace Z -> ualo
    react.surge.util.DimensionFace[] ENUM$VALUES -> hJfN
    8:23:void <clinit>() -> <clinit>
    8:8:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.DimensionFace[] values() -> values
    1:1:react.surge.util.DimensionFace valueOf(java.lang.String) -> valueOf
react.surge.util.Direction -> TFfl:
    react.surge.util.Direction U -> BCjK
    react.surge.util.Direction D -> JnHG
    react.surge.util.Direction N -> qoWJ
    react.surge.util.Direction S -> QXiD
    react.surge.util.Direction E -> PDco
    react.surge.util.Direction W -> rjJB
    int x -> x
    int y -> y
    int z -> z
    react.surge.util.Cuboid$CuboidDirection f -> CXQT
    int[] $SWITCH_TABLE$surge$util$Direction -> kSrc
    react.surge.util.Direction[] ENUM$VALUES -> VNeq
    14:21:void <clinit>() -> <clinit>
    28:34:void <init>(java.lang.String,int,int,int,int,react.surge.util.Cuboid$CuboidDirection) -> <init>
    38:56:react.surge.util.Direction reverse() -> OjcM
    61:61:int x() -> erqq
    66:66:int y() -> DjdC
    71:71:int z() -> z
    76:76:react.surge.util.Cuboid$CuboidDirection f() -> vkrN
    81:81:react.glang.GList news() -> RRJK
    86:86:react.glang.GList udnews() -> EmgH
    91:101:react.surge.util.Direction facing(org.bukkit.entity.Player) -> Sdoy
    115:147:react.surge.util.Direction fromByte(byte) -> EBVa
    158:176:byte byteValue() -> byteValue
    1:1:react.surge.util.Direction[] values() -> values
    1:1:react.surge.util.Direction valueOf(java.lang.String) -> valueOf
    14:14:int[] $SWITCH_TABLE$surge$util$Direction() -> GAHy
react.surge.util.DynamicConfiguration -> TiHy:
react.surge.util.DynamicTracker -> Wqqd:
react.surge.util.Embedded -> NMeI:
    react.glang.GList get() -> LaYr
    void add(java.lang.Object) -> add
react.surge.util.FU -> qKXw:
    long ONE_KB -> ONE_KB
    long ONE_MB -> ONE_MB
    long ONE_GB -> ONE_GB
    java.io.File[] EMPTY_FILE_ARRAY -> EMPTY_FILE_ARRAY
    95:95:void <clinit>() -> <clinit>
    74:75:void <init>() -> <init>
    110:123:java.lang.String byteCountToDisplaySize(long) -> byteCountToDisplaySize
    139:145:void touch(java.io.File) -> touch
    159:159:java.io.File[] convertFileCollectionToFileArray(java.util.Collection) -> convertFileCollectionToFileArray
    179:195:java.io.File toFile(java.net.URL) -> toFile
    222:239:java.io.File[] toFiles(java.net.URL[]) -> toFiles
    256:263:java.net.URL[] toURLs(java.io.File[]) -> toURLs
    290:299:void copyFileToDirectory(java.io.File,java.io.File) -> copyFileToDirectory
    324:325:void copyFile(java.io.File,java.io.File) -> copyFile
    353:385:void copyFile(java.io.File,java.io.File,boolean) -> copyFile
    401:430:void doCopyFile(java.io.File,java.io.File,boolean) -> IEpw
    458:475:void copyDirectoryToDirectory(java.io.File,java.io.File) -> copyDirectoryToDirectory
    503:504:void copyDirectory(java.io.File,java.io.File) -> copyDirectory
    534:555:void copyDirectory(java.io.File,java.io.File,boolean) -> copyDirectory
    572:610:void doCopyDirectory(java.io.File,java.io.File,boolean) -> VUHt
    636:663:void copyURLToFile(java.net.URL,java.io.File) -> copyURLToFile
    676:687:void deleteDirectory(java.io.File) -> deleteDirectory
    699:734:void cleanDirectory(java.io.File) -> cleanDirectory
    753:776:boolean waitFor(java.io.File,int) -> waitFor
    799:807:java.lang.String readFileToString(java.io.File,java.lang.String) -> readFileToString
    823:831:byte[] readFileToByteArray(java.io.File) -> readFileToByteArray
    855:863:java.util.List readLines(java.io.File,java.lang.String) -> readLines
    886:894:void writeStringToFile(java.io.File,java.lang.String,java.lang.String) -> writeStringToFile
    909:917:void writeByteArrayToFile(java.io.File,byte[]) -> writeByteArrayToFile
    942:943:void writeLines(java.io.File,java.lang.String,java.util.Collection) -> writeLines
    970:978:void writeLines(java.io.File,java.lang.String,java.util.Collection,java.lang.String) -> writeLines
    1000:1015:void forceDelete(java.io.File) -> forceDelete
    1030:1037:void forceDeleteOnExit(java.io.File) -> forceDeleteOnExit
    1051:1058:void deleteDirectoryOnExit(java.io.File) -> kkWN
    1072:1107:void cleanDirectoryOnExit(java.io.File) -> mNyO
    1123:1138:void forceMkdir(java.io.File) -> forceMkdir
    1152:1184:long sizeOfDirectory(java.io.File) -> sizeOfDirectory
    1207:1215:boolean isFileNewer(java.io.File,java.io.File) -> isFileNewer
    1236:1240:boolean isFileNewer(java.io.File,java.util.Date) -> isFileNewer
    1260:1268:boolean isFileNewer(java.io.File,long) -> isFileNewer
react.surge.util.Fingerprint -> PdmJ:
    5:5:void <init>() -> <init>
    9:14:java.lang.String randomFingerprint(java.lang.String) -> qcwE
react.surge.util.Health -> TGFc:
    double hp -> PEEX
    19:22:void <init>(double) -> <init>
    31:31:int getFlatHearts() -> FVwQ
    41:41:double getHearts() -> XAxT
    51:51:double getHalfHearts() -> MKJu
    61:61:int getFlatHalfHearts() -> wMSV
react.surge.util.IO -> rWLi:
    char DIR_SEPARATOR_UNIX -> DIR_SEPARATOR_UNIX
    char DIR_SEPARATOR_WINDOWS -> DIR_SEPARATOR_WINDOWS
    char DIR_SEPARATOR -> DIR_SEPARATOR
    java.lang.String LINE_SEPARATOR_UNIX -> LINE_SEPARATOR_UNIX
    java.lang.String LINE_SEPARATOR_WINDOWS -> LINE_SEPARATOR_WINDOWS
    java.lang.String LINE_SEPARATOR -> LINE_SEPARATOR
    int DEFAULT_BUFFER_SIZE -> DEFAULT_BUFFER_SIZE
    97:122:void <clinit>() -> <clinit>
    129:130:void <init>() -> <init>
    146:154:void closeQuietly(java.io.Reader) -> closeQuietly
    169:177:void closeQuietly(java.io.Writer) -> closeQuietly
    192:200:void closeQuietly(java.io.InputStream) -> closeQuietly
    215:223:void closeQuietly(java.io.OutputStream) -> closeQuietly
    243:245:byte[] toByteArray(java.io.InputStream) -> toByteArray
    265:267:byte[] toByteArray(java.io.Reader) -> toByteArray
    293:295:byte[] toByteArray(java.io.Reader,java.lang.String) -> toByteArray
    315:315:byte[] toByteArray(java.lang.String) -> toByteArray
    338:340:char[] toCharArray(java.io.InputStream) -> toCharArray
    366:368:char[] toCharArray(java.io.InputStream,java.lang.String) -> toCharArray
    388:390:char[] toCharArray(java.io.Reader) -> toCharArray
    412:414:java.lang.String toString(java.io.InputStream) -> toString
    439:441:java.lang.String toString(java.io.InputStream,java.lang.String) -> toString
    460:462:java.lang.String toString(java.io.Reader) -> toString
    480:480:java.lang.String toString(byte[]) -> toString
    503:508:java.lang.String toString(byte[],java.lang.String) -> toString
    532:533:java.util.List readLines(java.io.InputStream) -> readLines
    559:565:java.util.List readLines(java.io.InputStream,java.lang.String) -> readLines
    587:595:java.util.List readLines(java.io.Reader) -> readLines
    610:611:java.io.InputStream toInputStream(java.lang.String) -> toInputStream
    632:633:java.io.InputStream toInputStream(java.lang.String,java.lang.String) -> toInputStream
    654:658:void write(byte[],java.io.OutputStream) -> write
    679:683:void write(byte[],java.io.Writer) -> write
    709:719:void write(byte[],java.io.Writer,java.lang.String) -> write
    740:744:void write(char[],java.io.Writer) -> write
    766:770:void write(char[],java.io.OutputStream) -> write
    797:807:void write(char[],java.io.OutputStream,java.lang.String) -> write
    826:830:void write(java.lang.String,java.io.Writer) -> write
    851:855:void write(java.lang.String,java.io.OutputStream) -> write
    880:890:void write(java.lang.String,java.io.OutputStream,java.lang.String) -> write
    909:913:void write(java.lang.StringBuffer,java.io.Writer) -> write
    934:938:void write(java.lang.StringBuffer,java.io.OutputStream) -> write
    963:973:void write(java.lang.StringBuffer,java.io.OutputStream,java.lang.String) -> write
    997:1014:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream) -> writeLines
    1041:1064:void writeLines(java.util.Collection,java.lang.String,java.io.OutputStream,java.lang.String) -> writeLines
    1084:1101:void writeLines(java.util.Collection,java.lang.String,java.io.Writer) -> writeLines
    1132:1137:int copy(java.io.InputStream,java.io.OutputStream) -> copy
    1160:1168:long copyLarge(java.io.InputStream,java.io.OutputStream) -> copyLarge
    1192:1194:void copy(java.io.InputStream,java.io.Writer) -> copy
    1222:1230:void copy(java.io.InputStream,java.io.Writer,java.lang.String) -> copy
    1260:1265:int copy(java.io.Reader,java.io.Writer) -> copy
    1288:1296:long copyLarge(java.io.Reader,java.io.Writer) -> copyLarge
    1324:1328:void copy(java.io.Reader,java.io.OutputStream) -> copy
    1360:1370:void copy(java.io.Reader,java.io.OutputStream,java.lang.String) -> copy
    1394:1415:boolean contentEquals(java.io.InputStream,java.io.InputStream) -> contentEquals
    1439:1460:boolean contentEquals(java.io.Reader,java.io.Reader) -> contentEquals
react.surge.util.Items -> KMMf:
    15:15:void <init>() -> <init>
    26:26:boolean is(org.bukkit.inventory.ItemStack) -> IEpw
    40:40:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material) -> IEpw
    55:55:boolean is(org.bukkit.inventory.ItemStack,react.surge.util.MaterialBlock) -> IEpw
    71:71:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,byte) -> IEpw
    87:87:boolean is(org.bukkit.inventory.ItemStack,org.bukkit.Material,int) -> IEpw
    99:99:boolean hasMeta(org.bukkit.inventory.ItemStack) -> VUHt
    111:111:boolean hasName(org.bukkit.inventory.ItemStack) -> uxtE
    123:123:boolean hasLore(org.bukkit.inventory.ItemStack) -> KDHU
    137:137:boolean hasName(org.bukkit.inventory.ItemStack,java.lang.String) -> IEpw
    151:151:boolean hasLore(org.bukkit.inventory.ItemStack,java.util.List) -> IEpw
    165:165:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment) -> IEpw
    181:186:boolean hasEnchantment(org.bukkit.inventory.ItemStack,org.bukkit.enchantments.Enchantment,int) -> IEpw
    198:203:boolean hasEnchantments(org.bukkit.inventory.ItemStack) -> kkWN
    216:221:react.surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) -> mNyO
    233:233:boolean isBroken(org.bukkit.inventory.ItemStack) -> YoSi
    245:245:boolean hasDurability(org.bukkit.inventory.ItemStack) -> EBVa
    257:267:double getDurabilityPercent(org.bukkit.inventory.ItemStack) -> tSmm
    280:293:void setDurabilityPercent(org.bukkit.inventory.ItemStack,double) -> IEpw
    304:309:short getMaxDurability(org.bukkit.inventory.ItemStack) -> mGIk
    321:326:short getDurability(org.bukkit.inventory.ItemStack) -> AWkd
    339:345:void setDurability(org.bukkit.inventory.ItemStack,short) -> IEpw
    357:363:void setDurability(org.bukkit.inventory.ItemStack,int) -> IEpw
    375:381:void damage(org.bukkit.inventory.ItemStack,int) -> VUHt
    395:438:boolean isMergable(org.bukkit.inventory.ItemStack,org.bukkit.inventory.ItemStack) -> IEpw
react.surge.util.MSound -> vAUx:
    react.surge.util.MSound AMBIENCE_CAVE -> Umff
    react.surge.util.MSound AMBIENCE_RAIN -> OtfU
    react.surge.util.MSound AMBIENCE_THUNDER -> lNde
    react.surge.util.MSound ANVIL_BREAK -> fUds
    react.surge.util.MSound ANVIL_LAND -> CWod
    react.surge.util.MSound ANVIL_USE -> TsTf
    react.surge.util.MSound ARROW_HIT -> EMWG
    react.surge.util.MSound BURP -> Glnd
    react.surge.util.MSound CHEST_CLOSE -> rqxh
    react.surge.util.MSound CHEST_OPEN -> WHwx
    react.surge.util.MSound CLICK -> jrrX
    react.surge.util.MSound DOOR_CLOSE -> JnGF
    react.surge.util.MSound DOOR_OPEN -> rjIE
    react.surge.util.MSound DRINK -> EEEG
    react.surge.util.MSound EAT -> DdDm
    react.surge.util.MSound EXPLODE -> aNcw
    react.surge.util.MSound FALL_BIG -> ipOg
    react.surge.util.MSound FALL_SMALL -> wODd
    react.surge.util.MSound FIRE -> rGdS
    react.surge.util.MSound FIRE_IGNITE -> UTSk
    react.surge.util.MSound FIZZ -> Nqau
    react.surge.util.MSound FUSE -> tMjW
    react.surge.util.MSound GLASS -> iDyb
    react.surge.util.MSound HURT_FLESH -> wxuv
    react.surge.util.MSound ITEM_BREAK -> EwiP
    react.surge.util.MSound ITEM_PICKUP -> kTRQ
    react.surge.util.MSound LAVA -> vBoO
    react.surge.util.MSound LAVA_POP -> THbT
    react.surge.util.MSound LEVEL_UP -> TkEp
    react.surge.util.MSound MINECART_BASE -> rYJU
    react.surge.util.MSound MINECART_INSIDE -> Iruq
    react.surge.util.MSound NOTE_BASS -> MDOD
    react.surge.util.MSound NOTE_PIANO -> wEvF
    react.surge.util.MSound NOTE_BASS_DRUM -> BToR
    react.surge.util.MSound NOTE_STICKS -> puGa
    react.surge.util.MSound NOTE_BASS_GUITAR -> YOaP
    react.surge.util.MSound NOTE_SNARE_DRUM -> neoV
    react.surge.util.MSound NOTE_PLING -> Pnyf
    react.surge.util.MSound ORB_PICKUP -> YrDo
    react.surge.util.MSound PISTON_EXTEND -> kTVL
    react.surge.util.MSound PISTON_RETRACT -> mHxc
    react.surge.util.MSound PORTAL -> mRJk
    react.surge.util.MSound PORTAL_TRAVEL -> Juyb
    react.surge.util.MSound PORTAL_TRIGGER -> qMVB
    react.surge.util.MSound SHOOT_ARROW -> DchF
    react.surge.util.MSound SPLASH -> ffgy
    react.surge.util.MSound SPLASH2 -> ReAG
    react.surge.util.MSound STEP_GRASS -> COcP
    react.surge.util.MSound STEP_GRAVEL -> CGSG
    react.surge.util.MSound STEP_LADDER -> LQjp
    react.surge.util.MSound STEP_SAND -> UTVE
    react.surge.util.MSound STEP_SNOW -> MnaM
    react.surge.util.MSound STEP_STONE -> CObh
    react.surge.util.MSound STEP_WOOD -> mcKr
    react.surge.util.MSound STEP_WOOL -> XwRN
    react.surge.util.MSound SWIM -> tMkx
    react.surge.util.MSound WATER -> kuuo
    react.surge.util.MSound WOOD_CLICK -> QXir
    react.surge.util.MSound BAT_DEATH -> vdtR
    react.surge.util.MSound BAT_HURT -> tyAf
    react.surge.util.MSound BAT_IDLE -> FYLU
    react.surge.util.MSound BAT_LOOP -> btMk
    react.surge.util.MSound BAT_TAKEOFF -> plXP
    react.surge.util.MSound BLAZE_BREATH -> pdGg
    react.surge.util.MSound BLAZE_DEATH -> Nqfj
    react.surge.util.MSound BLAZE_HIT -> xbnA
    react.surge.util.MSound CAT_HISS -> puJC
    react.surge.util.MSound CAT_HIT -> DRgc
    react.surge.util.MSound CAT_MEOW -> PxMn
    react.surge.util.MSound CAT_PURR -> QjPI
    react.surge.util.MSound CAT_PURREOW -> vLEq
    react.surge.util.MSound CHICKEN_IDLE -> kBuB
    react.surge.util.MSound CHICKEN_HURT -> UTYK
    react.surge.util.MSound CHICKEN_EGG_POP -> RmSH
    react.surge.util.MSound CHICKEN_WALK -> BCoW
    react.surge.util.MSound COW_IDLE -> jHcN
    react.surge.util.MSound COW_HURT -> Ewmt
    react.surge.util.MSound COW_WALK -> CrIT
    react.surge.util.MSound CREEPER_HISS -> HNTM
    react.surge.util.MSound CREEPER_DEATH -> vKeY
    react.surge.util.MSound ENDERDRAGON_DEATH -> bbly
    react.surge.util.MSound ENDERDRAGON_GROWL -> rHIk
    react.surge.util.MSound ENDERDRAGON_HIT -> GucD
    react.surge.util.MSound ENDERDRAGON_WINGS -> oaCT
    react.surge.util.MSound ENDERMAN_DEATH -> GeBT
    react.surge.util.MSound ENDERMAN_HIT -> Jmiw
    react.surge.util.MSound ENDERMAN_IDLE -> CaGT
    react.surge.util.MSound ENDERMAN_TELEPORT -> xQjT
    react.surge.util.MSound ENDERMAN_SCREAM -> lEva
    react.surge.util.MSound ENDERMAN_STARE -> HWDJ
    react.surge.util.MSound GHAST_SCREAM -> EVJr
    react.surge.util.MSound GHAST_SCREAM2 -> jkEl
    react.surge.util.MSound GHAST_CHARGE -> QGjr
    react.surge.util.MSound GHAST_DEATH -> MDPQ
    react.surge.util.MSound GHAST_FIREBALL -> DRft
    react.surge.util.MSound GHAST_MOAN -> kSuY
    react.surge.util.MSound IRONGOLEM_DEATH -> hKMX
    react.surge.util.MSound IRONGOLEM_HIT -> Lkbg
    react.surge.util.MSound IRONGOLEM_THROW -> MwVq
    react.surge.util.MSound IRONGOLEM_WALK -> nesR
    react.surge.util.MSound MAGMACUBE_WALK -> PEKV
    react.surge.util.MSound MAGMACUBE_WALK2 -> oGTQ
    react.surge.util.MSound MAGMACUBE_JUMP -> mbon
    react.surge.util.MSound PIG_IDLE -> Sovi
    react.surge.util.MSound PIG_DEATH -> jYgU
    react.surge.util.MSound PIG_WALK -> OckA
    react.surge.util.MSound SHEEP_IDLE -> fEKK
    react.surge.util.MSound SHEEP_SHEAR -> TYhY
    react.surge.util.MSound SHEEP_WALK -> qLxc
    react.surge.util.MSound SILVERFISH_HIT -> BMCe
    react.surge.util.MSound SILVERFISH_KILL -> gjPP
    react.surge.util.MSound SILVERFISH_IDLE -> etkV
    react.surge.util.MSound SILVERFISH_WALK -> bROu
    react.surge.util.MSound SKELETON_IDLE -> FirK
    react.surge.util.MSound SKELETON_DEATH -> LRPK
    react.surge.util.MSound SKELETON_HURT -> wOKG
    react.surge.util.MSound SKELETON_WALK -> UCWw
    react.surge.util.MSound SLIME_ATTACK -> Cyxl
    react.surge.util.MSound SLIME_WALK -> TYgO
    react.surge.util.MSound SLIME_WALK2 -> GJpX
    react.surge.util.MSound SPIDER_IDLE -> CXXW
    react.surge.util.MSound SPIDER_DEATH -> Wspy
    react.surge.util.MSound SPIDER_WALK -> cfRq
    react.surge.util.MSound WITHER_DEATH -> kKgc
    react.surge.util.MSound WITHER_HURT -> GeCv
    react.surge.util.MSound WITHER_IDLE -> NiWp
    react.surge.util.MSound WITHER_SHOOT -> EVLn
    react.surge.util.MSound WITHER_SPAWN -> CWwK
    react.surge.util.MSound WOLF_BARK -> cvsw
    react.surge.util.MSound WOLF_DEATH -> CrIt
    react.surge.util.MSound WOLF_GROWL -> lplq
    react.surge.util.MSound WOLF_HOWL -> noDK
    react.surge.util.MSound WOLF_HURT -> Hgfc
    react.surge.util.MSound WOLF_PANT -> jjft
    react.surge.util.MSound WOLF_SHAKE -> Bevp
    react.surge.util.MSound WOLF_WALK -> etlg
    react.surge.util.MSound WOLF_WHINE -> Qaat
    react.surge.util.MSound ZOMBIE_METAL -> RJri
    react.surge.util.MSound ZOMBIE_WOOD -> uaxk
    react.surge.util.MSound ZOMBIE_WOODBREAK -> qxPb
    react.surge.util.MSound ZOMBIE_IDLE -> KNoX
    react.surge.util.MSound ZOMBIE_DEATH -> VprQ
    react.surge.util.MSound ZOMBIE_HURT -> Rlup
    react.surge.util.MSound ZOMBIE_INFECT -> Soxp
    react.surge.util.MSound ZOMBIE_UNFECT -> fDlE
    react.surge.util.MSound ZOMBIE_REMEDY -> wqQE
    react.surge.util.MSound ZOMBIE_WALK -> gYQH
    react.surge.util.MSound ZOMBIE_PIG_IDLE -> XMEe
    react.surge.util.MSound ZOMBIE_PIG_ANGRY -> nUTY
    react.surge.util.MSound ZOMBIE_PIG_DEATH -> uYfx
    react.surge.util.MSound ZOMBIE_PIG_HURT -> yetA
    react.surge.util.MSound DIG_WOOL -> OuMk
    react.surge.util.MSound DIG_GRASS -> uHeg
    react.surge.util.MSound DIG_GRAVEL -> JKkQ
    react.surge.util.MSound DIG_SAND -> uQVk
    react.surge.util.MSound DIG_SNOW -> tpVx
    react.surge.util.MSound DIG_STONE -> uQVv
    react.surge.util.MSound DIG_WOOD -> eAgO
    react.surge.util.MSound FIREWORK_BLAST -> SpXe
    react.surge.util.MSound FIREWORK_BLAST2 -> mlCb
    react.surge.util.MSound FIREWORK_LARGE_BLAST -> YhyE
    react.surge.util.MSound FIREWORK_LARGE_BLAST2 -> cCqm
    react.surge.util.MSound FIREWORK_TWINKLE -> LlEU
    react.surge.util.MSound FIREWORK_TWINKLE2 -> WlEL
    react.surge.util.MSound FIREWORK_LAUNCH -> lOLm
    react.surge.util.MSound SUCCESSFUL_HIT -> QbBo
    react.surge.util.MSound HORSE_ANGRY -> EpAn
    react.surge.util.MSound HORSE_ARMOR -> Dtmw
    react.surge.util.MSound HORSE_BREATHE -> GmWL
    react.surge.util.MSound HORSE_DEATH -> FacD
    react.surge.util.MSound HORSE_GALLOP -> LRTq
    react.surge.util.MSound HORSE_HIT -> dPJL
    react.surge.util.MSound HORSE_IDLE -> ReHX
    react.surge.util.MSound HORSE_JUMP -> vKkf
    react.surge.util.MSound HORSE_LAND -> NPJk
    react.surge.util.MSound HORSE_SADDLE -> tyJv
    react.surge.util.MSound HORSE_SOFT -> BDWL
    react.surge.util.MSound HORSE_WOOD -> gsEu
    react.surge.util.MSound DONKEY_ANGRY -> THkA
    react.surge.util.MSound DONKEY_DEATH -> greX
    react.surge.util.MSound DONKEY_HIT -> PwsT
    react.surge.util.MSound DONKEY_IDLE -> MTvy
    react.surge.util.MSound HORSE_SKELETON_DEATH -> vLKy
    react.surge.util.MSound HORSE_SKELETON_HIT -> RBdi
    react.surge.util.MSound HORSE_SKELETON_IDLE -> FsGo
    react.surge.util.MSound HORSE_ZOMBIE_DEATH -> PEOm
    react.surge.util.MSound HORSE_ZOMBIE_HIT -> RdhG
    react.surge.util.MSound HORSE_ZOMBIE_IDLE -> lOPV
    react.surge.util.MSound VILLAGER_DEATH -> pclP
    react.surge.util.MSound VILLAGER_HAGGLE -> Gdfm
    react.surge.util.MSound VILLAGER_HIT -> WcUU
    react.surge.util.MSound VILLAGER_IDLE -> iWGo
    react.surge.util.MSound VILLAGER_NO -> YGXX
    react.surge.util.MSound VILLAGER_YES -> cwYN
    java.lang.String pre19sound -> eAhr
    java.lang.String post19sound -> cevV
    org.bukkit.Sound resolvedSound -> QQCY
    react.surge.util.MSound[] ENUM$VALUES -> WQsQ
    8:203:void <clinit>() -> <clinit>
    207:213:void <init>(java.lang.String,int,java.lang.String,java.lang.String) -> <init>
    217:229:org.bukkit.Sound bukkitSound() -> LHGx
    1:1:react.surge.util.MSound[] values() -> values
    1:1:react.surge.util.MSound valueOf(java.lang.String) -> valueOf
react.surge.util.MaterialBlock -> SCbn:
    org.bukkit.Material material -> UmpS
    java.lang.Byte data -> apqw
    27:31:void <init>(org.bukkit.Material,java.lang.Byte) -> <init>
    33:37:void <init>(org.bukkit.Material) -> <init>
    41:42:void <init>(org.bukkit.Location) -> <init>
    44:48:void <init>(org.bukkit.block.BlockState) -> <init>
    50:54:void <init>(org.bukkit.block.Block) -> <init>
    56:60:void <init>() -> <init>
    64:64:org.bukkit.Material getMaterial() -> getMaterial
    69:70:void setMaterial(org.bukkit.Material) -> setMaterial
    74:74:java.lang.Byte getData() -> SenD
    79:80:void setData(java.lang.Byte) -> IEpw
    85:90:java.lang.String toString() -> toString
    96:100:int hashCode() -> hashCode
    106:134:boolean equals(java.lang.Object) -> equals
react.surge.util.P -> eQHN:
    25:25:void <init>() -> <init>
    36:36:boolean isOnline(java.lang.String) -> qJeY
    48:48:org.bukkit.entity.Player getPlayer(java.lang.String) -> getPlayer
    58:58:org.bukkit.entity.Player getAnyPlayer() -> EBrh
    68:68:boolean isAnyOnline() -> pkBG
    80:80:react.glang.GList inWorld(org.bukkit.World) -> wCeA
    92:104:react.glang.GList inChunk(org.bukkit.Chunk) -> rpKU
    118:118:react.glang.GList inArea(org.bukkit.Location,double) -> IEpw
    132:132:react.glang.GList inArea(org.bukkit.Location,int) -> IEpw
    143:144:void disable(org.bukkit.entity.Player) -> wmvi
    154:155:void enable(org.bukkit.entity.Player) -> oxBc
    168:168:org.bukkit.Location targetBlock(org.bukkit.entity.Player,int) -> IEpw
    182:182:org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player,int) -> VUHt
    194:195:boolean hasInventoryOpen(org.bukkit.entity.Player) -> AiNf
    211:243:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player,double,double) -> IEpw
    257:266:int getTotalExperience(org.bukkit.entity.Player) -> wejS
    281:289:void setTotalExperience(org.bukkit.entity.Player,int) -> uxtE
    300:300:boolean canFindPlayer(java.lang.String) -> rUyD
    312:328:org.bukkit.entity.Player findPlayer(java.lang.String) -> qKFT
    338:345:react.glang.GList onlinePlayers() -> AOyS
    357:357:org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) -> AWnW
    368:371:void clear(org.bukkit.entity.Player) -> WFke
    381:385:void clearEffects(org.bukkit.entity.Player) -> pYEs
    398:399:void heal(org.bukkit.entity.Player,double) -> IEpw
    409:410:void heal(org.bukkit.entity.Player) -> EKIh
    421:422:void resetMaxHeath(org.bukkit.entity.Player) -> SBpB
    432:433:void resetHunger(org.bukkit.entity.Player) -> SCQO
    443:444:void kill(org.bukkit.entity.Player) -> HSrV
    455:455:react.surge.util.Shape getShape(org.bukkit.entity.Player) -> mGLN
    467:467:org.bukkit.Location getHand(org.bukkit.entity.Player) -> XcbO
    483:492:org.bukkit.Location getHand(org.bukkit.entity.Player,float,float) -> IEpw
react.surge.util.P$1 -> eQHN$1:
    1:92:void <init>() -> <init>
    97:102:org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) -> mGIk
    1:1:java.lang.Object onAdapt(java.lang.Object) -> YoSi
react.surge.util.P$2 -> eQHN$2:
    java.lang.Double val$doff -> RJtW
    org.bukkit.entity.Player val$e -> Fade
    org.bukkit.entity.Entity[] val$result -> jjkW
    1:224:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Player,org.bukkit.entity.Entity[]) -> <init>
    229:240:void onTrace(org.bukkit.Location) -> AWkd
react.surge.util.PE -> kJHU:
    react.surge.util.PE ABSORPTION -> ReGl
    react.surge.util.PE BLINDNESS -> xswT
    react.surge.util.PE CONFUSION -> kUAG
    react.surge.util.PE DAMAGE_RESISTANCE -> KFcI
    react.surge.util.PE FAST_DIGGING -> xJEF
    react.surge.util.PE FIRE_RESISTANCE -> xJDd
    react.surge.util.PE GLOWING -> RTHt
    react.surge.util.PE HARM -> NPLv
    react.surge.util.PE HEAL -> qVQk
    react.surge.util.PE HEALTH_BOOST -> QXuX
    react.surge.util.PE HUNGER -> PEQd
    react.surge.util.PE INCREASE_DAMAGE -> JUCE
    react.surge.util.PE INVISIBILITY -> mlGj
    react.surge.util.PE JUMP -> DmDM
    react.surge.util.PE LEVITATION -> ULPn
    react.surge.util.PE LUCK -> bsyC
    react.surge.util.PE NIGHT_VISION -> tEfu
    react.surge.util.PE POISON -> mlHN
    react.surge.util.PE REGENERATION -> QbGf
    react.surge.util.PE SATURATION -> Rdih
    react.surge.util.PE SLOW -> eRmw
    react.surge.util.PE SLOW_DIGGING -> NjAD
    react.surge.util.PE SPEED -> QriE
    react.surge.util.PE UNLUCK -> JKqN
    react.surge.util.PE WATER_BREATHING -> MoNE
    react.surge.util.PE WEAKNESS -> EVRb
    react.surge.util.PE WITHER -> lyeH
    192:215:void <clinit>() -> <clinit>
    50:51:void <init>(java.util.Map) -> <init>
    55:56:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean,boolean) -> <init>
    60:61:void <init>(org.bukkit.potion.PotionEffectType,int,int,boolean) -> <init>
    65:66:void <init>(org.bukkit.potion.PotionEffectType,int,int) -> <init>
    71:71:java.util.Map serialize() -> serialize
    77:79:boolean apply(org.bukkit.entity.LivingEntity) -> apply
    85:85:boolean equals(java.lang.Object) -> equals
    91:91:int getAmplifier() -> getAmplifier
    97:97:int getDuration() -> getDuration
    103:103:org.bukkit.potion.PotionEffectType getType() -> getType
    109:109:boolean isAmbient() -> isAmbient
    115:115:boolean hasParticles() -> hasParticles
    121:121:int hashCode() -> hashCode
    127:127:java.lang.String toString() -> toString
    132:132:react.surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) -> IEpw
    144:144:react.surge.util.PE d(int) -> dxEp
    156:156:react.surge.util.PE a(int) -> JsjS
    166:166:org.bukkit.potion.PotionEffect c() -> ifLx
    177:178:void c(org.bukkit.entity.LivingEntity) -> mNyO
    182:183:void crm(org.bukkit.entity.LivingEntity) -> YoSi
    187:188:void rm(org.bukkit.entity.LivingEntity) -> EBVa
react.surge.util.ParticleEffect -> nmDQ:
    react.surge.util.ParticleEffect EXPLOSION_NORMAL -> UUAF
    react.surge.util.ParticleEffect EXPLOSION_LARGE -> whcF
    react.surge.util.ParticleEffect EXPLOSION_HUGE -> SFHu
    react.surge.util.ParticleEffect FIREWORKS_SPARK -> OmAe
    react.surge.util.ParticleEffect WATER_BUBBLE -> lORI
    react.surge.util.ParticleEffect WATER_SPLASH -> sTFa
    react.surge.util.ParticleEffect WATER_WAKE -> qUod
    react.surge.util.ParticleEffect SUSPENDED -> oqmF
    react.surge.util.ParticleEffect SUSPENDED_DEPTH -> Lsxh
    react.surge.util.ParticleEffect CRIT -> QXtk
    react.surge.util.ParticleEffect CRIT_MAGIC -> ViFH
    react.surge.util.ParticleEffect SMOKE_NORMAL -> lXCF
    react.surge.util.ParticleEffect SMOKE_LARGE -> ayfA
    react.surge.util.ParticleEffect SPELL -> VOVF
    react.surge.util.ParticleEffect SPELL_INSTANT -> jkRD
    react.surge.util.ParticleEffect SPELL_MOB -> ORqO
    react.surge.util.ParticleEffect SPELL_MOB_AMBIENT -> oaOR
    react.surge.util.ParticleEffect SPELL_WITCH -> HVmc
    react.surge.util.ParticleEffect DRIP_WATER -> EUtk
    react.surge.util.ParticleEffect DRIP_LAVA -> SFMH
    react.surge.util.ParticleEffect VILLAGER_ANGRY -> FYXm
    react.surge.util.ParticleEffect VILLAGER_HAPPY -> SWNW
    react.surge.util.ParticleEffect TOWN_AURA -> Xnly
    react.surge.util.ParticleEffect NOTE -> QjYi
    react.surge.util.ParticleEffect PORTAL -> xIfM
    react.surge.util.ParticleEffect ENCHANTMENT_TABLE -> gXud
    react.surge.util.ParticleEffect FLAME -> xAUQ
    react.surge.util.ParticleEffect LAVA -> KGEy
    react.surge.util.ParticleEffect FOOTSTEP -> ynkc
    react.surge.util.ParticleEffect CLOUD -> Qixs
    react.surge.util.ParticleEffect REDSTONE -> YPOT
    react.surge.util.ParticleEffect SNOWBALL -> oOlQ
    react.surge.util.ParticleEffect SNOW_SHOVEL -> NYAH
    react.surge.util.ParticleEffect SLIME -> FQIT
    react.surge.util.ParticleEffect HEART -> vwDc
    react.surge.util.ParticleEffect BARRIER -> DKCU
    react.surge.util.ParticleEffect ITEM_CRACK -> gsHn
    react.surge.util.ParticleEffect BLOCK_CRACK -> OdSD
    react.surge.util.ParticleEffect BLOCK_DUST -> Pftd
    react.surge.util.ParticleEffect WATER_DROP -> EpHD
    react.surge.util.ParticleEffect ITEM_TAKE -> RKYN
    react.surge.util.ParticleEffect MOB_APPEARANCE -> Bnnx
    react.surge.util.ParticleEffect DRAGON_BREATH -> fUqg
    react.surge.util.ParticleEffect END_ROD -> hdjJ
    react.surge.util.ParticleEffect DAMAGE_INDICATOR -> dOkc
    react.surge.util.ParticleEffect SWEEP_ATTACK -> wORs
    java.util.Map NAME_MAP -> RdkB
    java.util.Map ID_MAP -> wWcH
    java.lang.String name -> name
    int id -> id
    int requiredVersion -> OAnm
    java.util.List properties -> XoMr
    react.surge.util.ParticleEffect[] ENUM$VALUES -> Rdji
    54:452:void <clinit>() -> <clinit>
    466:472:void <init>(java.lang.String,int,java.lang.String,int,int,react.surge.util.ParticleEffect$ParticleProperty[]) -> <init>
    481:481:java.lang.String getName() -> getName
    491:491:int getId() -> getId
    501:501:int getRequiredVersion() -> vSAR
    511:511:boolean hasProperty(react.surge.util.ParticleEffect$ParticleProperty) -> IEpw
    521:525:boolean isSupported() -> isSupported
    537:545:react.surge.util.ParticleEffect fromName(java.lang.String) -> kHtC
    557:565:react.surge.util.ParticleEffect fromId(int) -> wnYh
    577:578:boolean isWater(org.bukkit.Location) -> kRDe
    591:601:boolean isLongDistance(org.bukkit.Location,java.util.List) -> IEpw
    615:615:boolean isDataCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleData) -> IEpw
    629:629:boolean isColorCorrect(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor) -> IEpw
    665:681:void display(float,int,org.bukkit.Location,double) -> IEpw
    715:728:void display(float,int,org.bukkit.Location,java.util.List) -> IEpw
    761:762:void display(float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> IEpw
    790:807:void display(org.bukkit.util.Vector,float,org.bukkit.Location,double) -> IEpw
    834:851:void display(org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> IEpw
    876:877:void display(org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> IEpw
    899:912:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,double) -> IEpw
    934:947:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,java.util.List) -> IEpw
    968:969:void display(react.surge.util.ParticleEffect$ParticleColor,org.bukkit.Location,org.bukkit.entity.Player[]) -> IEpw
    1004:1020:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,double) -> IEpw
    1055:1068:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,java.util.List) -> IEpw
    1102:1103:void display(react.surge.util.ParticleEffect$ParticleData,float,int,org.bukkit.Location,org.bukkit.entity.Player[]) -> IEpw
    1130:1143:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,double) -> IEpw
    1169:1182:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,java.util.List) -> IEpw
    1207:1208:void display(react.surge.util.ParticleEffect$ParticleData,org.bukkit.util.Vector,float,org.bukkit.Location,org.bukkit.entity.Player[]) -> IEpw
    1:1:react.surge.util.ParticleEffect[] values() -> values
    1:1:react.surge.util.ParticleEffect valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$BlockData -> nmDQ$IEpw:
    1364:1369:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$ItemData -> nmDQ$VUHt:
    1335:1336:void <init>(org.bukkit.Material,byte) -> <init>
react.surge.util.ParticleEffect$NoteColor -> nmDQ$uxtE:
    int note -> note
    1562:1573:void <init>(int) -> <init>
    1583:1583:float getValueX() -> rpft
    1594:1594:float getValueY() -> rhWM
    1605:1605:float getValueZ() -> UdDg
react.surge.util.ParticleEffect$OrdinaryColor -> nmDQ$KDHU:
    int red -> red
    int green -> green
    int blue -> blue
    1435:1464:void <init>(int,int,int) -> <init>
    1474:1475:void <init>(org.bukkit.Color) -> <init>
    1484:1484:int getRed() -> getRed
    1494:1494:int getGreen() -> getGreen
    1504:1504:int getBlue() -> getBlue
    1515:1515:float getValueX() -> rpft
    1526:1526:float getValueY() -> rhWM
    1537:1537:float getValueZ() -> UdDg
react.surge.util.ParticleEffect$ParticleColor -> nmDQ$kkWN:
    1383:1383:void <init>() -> <init>
    float getValueX() -> rpft
    float getValueY() -> rhWM
    float getValueZ() -> UdDg
react.surge.util.ParticleEffect$ParticleColorException -> nmDQ$mNyO:
    long serialVersionUID -> serialVersionUID
    1659:1660:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticleData -> nmDQ$YoSi:
    org.bukkit.Material material -> UmpS
    byte data -> IscQ
    int[] packetData -> vLOf
    1265:1270:void <init>(org.bukkit.Material,byte) -> <init>
    1279:1279:org.bukkit.Material getMaterial() -> getMaterial
    1289:1289:byte getData() -> getData
    1299:1299:int[] getPacketData() -> lgEw
    1309:1309:java.lang.String getPacketDataString() -> VgGm
react.surge.util.ParticleEffect$ParticleDataException -> nmDQ$EBVa:
    long serialVersionUID -> serialVersionUID
    1633:1634:void <init>(java.lang.String) -> <init>
react.surge.util.ParticleEffect$ParticlePacket -> nmDQ$tSmm:
    int version -> version
    java.lang.Class enumParticle -> uILb
    java.lang.reflect.Constructor packetConstructor -> WbyE
    java.lang.reflect.Method getHandle -> IIRY
    java.lang.reflect.Field playerConnection -> mklC
    java.lang.reflect.Method sendPacket -> LAYh
    boolean initialized -> initialized
    react.surge.util.ParticleEffect effect -> FPig
    float offsetX -> GSmK
    float offsetY -> wFeP
    float offsetZ -> vnVV
    float speed -> seLa
    int amount -> tfYm
    boolean longDistance -> wGEW
    react.surge.util.ParticleEffect$ParticleData data -> PVWa
    java.lang.Object packet -> lGEt
    1745:1764:void <init>(react.surge.util.ParticleEffect,float,float,float,float,int,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1788:1789:void <init>(react.surge.util.ParticleEffect,org.bukkit.util.Vector,float,boolean,react.surge.util.ParticleEffect$ParticleData) -> <init>
    1806:1811:void <init>(react.surge.util.ParticleEffect,react.surge.util.ParticleEffect$ParticleColor,boolean) -> <init>
    1826:1862:void initialize() -> initialize
    1871:1875:int getVersion() -> getVersion
    1887:1887:boolean isInitialized() -> isInitialized
    1900:1939:void initializePacket(org.bukkit.Location) -> YfcL
    1956:1965:void sendTo(org.bukkit.Location,org.bukkit.entity.Player) -> IEpw
    1980:1988:void sendTo(org.bukkit.Location,java.util.List) -> VUHt
    2004:2018:void sendTo(org.bukkit.Location,double) -> VUHt
react.surge.util.ParticleEffect$ParticlePacket$PacketInstantiationException -> nmDQ$tSmm$IEpw:
    long serialVersionUID -> serialVersionUID
    2071:2072:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$PacketSendingException -> nmDQ$tSmm$VUHt:
    long serialVersionUID -> serialVersionUID
    2098:2099:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticlePacket$VersionIncompatibleException -> nmDQ$tSmm$uxtE:
    long serialVersionUID -> serialVersionUID
    2044:2045:void <init>(java.lang.String,java.lang.Throwable) -> <init>
react.surge.util.ParticleEffect$ParticleProperty -> nmDQ$mGIk:
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_WATER -> GdoK
    react.surge.util.ParticleEffect$ParticleProperty REQUIRES_DATA -> KiKl
    react.surge.util.ParticleEffect$ParticleProperty DIRECTIONAL -> vmtf
    react.surge.util.ParticleEffect$ParticleProperty COLORABLE -> Pfvd
    react.surge.util.ParticleEffect$ParticleProperty[] ENUM$VALUES -> EgXW
    1219:1236:void <clinit>() -> <clinit>
    1219:1219:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ParticleEffect$ParticleProperty[] values() -> values
    1:1:react.surge.util.ParticleEffect$ParticleProperty valueOf(java.lang.String) -> valueOf
react.surge.util.ParticleEffect$ParticleVersionException -> nmDQ$AWkd:
    long serialVersionUID -> serialVersionUID
    1685:1686:void <init>(java.lang.String) -> <init>
react.surge.util.Paste -> XdWW:
    15:15:void <init>() -> <init>
    28:36:java.lang.String paste(java.lang.String) -> kREl
react.surge.util.Persist -> APSY:
react.surge.util.PluginUtil -> bHAa:
    61:61:void <init>() -> <init>
    72:74:void enable(org.bukkit.plugin.Plugin) -> kkWN
    81:85:void enableAll() -> KEHP
    95:99:void disable(org.bukkit.plugin.Plugin) -> mNyO
    106:110:void disableAll() -> OkFp
    121:121:java.lang.String getFormattedName(org.bukkit.plugin.Plugin) -> YoSi
    135:142:java.lang.String getFormattedName(org.bukkit.plugin.Plugin,boolean) -> IEpw
    154:159:org.bukkit.plugin.Plugin getPluginByName(java.lang.String) -> HTSD
    169:172:java.util.List getPluginNames(boolean) -> UcFc
    184:187:java.lang.String getPluginVersion(java.lang.String) -> cIpX
    200:222:java.lang.String getUsages(org.bukkit.plugin.Plugin) -> EBVa
    237:316:java.util.List findByCommand(java.lang.String) -> wvnE
    337:338:void load(org.bukkit.plugin.Plugin) -> tSmm
    342:364:java.lang.String getPluginFileName(java.lang.String) -> Lyrk
    369:391:java.lang.String getPluginFileNameUnsafe(java.lang.String,org.bukkit.plugin.Plugin) -> IEpw
    404:456:void load(java.lang.String) -> load
    468:473:void reload(org.bukkit.plugin.Plugin) -> mGIk
    480:484:void reloadAll() -> JRee
    496:622:void unload(org.bukkit.plugin.Plugin) -> AWkd
react.surge.util.PoolCount -> ebKr:
react.surge.util.PoolDescriber -> GtHj:
react.surge.util.PoolNanoThrottle -> HLXD:
react.surge.util.PositionalSelector -> opJK:
    react.glang.GSet allowedChunks -> EVVg
    11:14:void <init>() -> <init>
    18:20:void <init>(org.bukkit.Chunk) -> <init>
    22:25:void <init>(org.bukkit.World) -> <init>
    29:30:void addWorld(org.bukkit.World) -> addWorld
    34:35:void addAllWorlds() -> HDPC
    39:40:void addChunk(org.bukkit.Chunk) -> NMRL
    44:44:react.glang.GSet getAllowedChunks() -> IiUa
react.surge.util.Protocol -> XKFQ:
    react.surge.util.Protocol LATEST -> HyRa
    react.surge.util.Protocol R1_12_2 -> TAAC
    react.surge.util.Protocol R1_12_2_PRE -> NjBq
    react.surge.util.Protocol R1_12_1 -> Cibj
    react.surge.util.Protocol R1_12 -> xcYe
    react.surge.util.Protocol R1_11_2 -> RTLS
    react.surge.util.Protocol R1_11_1 -> TcDL
    react.surge.util.Protocol R1_11 -> yoNC
    react.surge.util.Protocol R1_10_2 -> QbKL
    react.surge.util.Protocol R1_10_1 -> fNEV
    react.surge.util.Protocol R1_10 -> mIfo
    react.surge.util.Protocol R1_9_4 -> Khif
    react.surge.util.Protocol R1_9_3 -> jkRY
    react.surge.util.Protocol R1_9_2 -> YjCH
    react.surge.util.Protocol R1_9_1 -> nMOB
    react.surge.util.Protocol R1_9 -> vLUS
    react.surge.util.Protocol R1_8_9 -> nxCJ
    react.surge.util.Protocol R1_8_8 -> PVXu
    react.surge.util.Protocol R1_8_7 -> huox
    react.surge.util.Protocol R1_8_6 -> cwas
    react.surge.util.Protocol R1_8_5 -> aiKg
    react.surge.util.Protocol R1_8_4 -> YjEW
    react.surge.util.Protocol R1_8_3 -> UwJk
    react.surge.util.Protocol R1_8_2 -> EDwj
    react.surge.util.Protocol R1_8_1 -> Xfap
    react.surge.util.Protocol R1_8 -> BLnl
    react.surge.util.Protocol R1_7_10 -> didW
    react.surge.util.Protocol R1_7_9 -> jbdV
    react.surge.util.Protocol R1_7_8 -> bkmy
    react.surge.util.Protocol R1_7_7 -> GSnC
    react.surge.util.Protocol R1_7_6 -> pSSe
    react.surge.util.Protocol R1_7_5 -> fgXd
    react.surge.util.Protocol R1_7_4 -> vDDK
    react.surge.util.Protocol R1_7_3 -> PfyI
    react.surge.util.Protocol R1_7_2 -> VXIs
    react.surge.util.Protocol R1_7_1 -> Ibdo
    react.surge.util.Protocol B1_6_4 -> igqI
    react.surge.util.Protocol B1_6_3 -> eKCe
    react.surge.util.Protocol B1_6_2 -> uAAS
    react.surge.util.Protocol B1_6_1 -> aykX
    react.surge.util.Protocol B1_5_2 -> JDFW
    react.surge.util.Protocol B1_5_1 -> NjEX
    react.surge.util.Protocol B1_5 -> Qrlw
    react.surge.util.Protocol B1_4_7 -> Spbr
    react.surge.util.Protocol B1_4_6 -> WAYr
    react.surge.util.Protocol B1_4_5 -> wXHa
    react.surge.util.Protocol B1_4_4 -> jbdK
    react.surge.util.Protocol B1_4_2 -> Pfxm
    react.surge.util.Protocol B1_3_2 -> mlMk
    react.surge.util.Protocol B1_3_1 -> yoOp
    react.surge.util.Protocol B1_2_5 -> YaTD
    react.surge.util.Protocol B1_2_4 -> Sxsb
    react.surge.util.Protocol EARLIEST -> QGxs
    react.surge.util.Protocol UNKNOWN -> qMeJ
    int version -> version
    java.lang.String packageVersion -> aNxF
    java.lang.String versionName -> yLlH
    boolean netty -> ecuO
    react.surge.util.Protocol[] ENUM$VALUES -> XxBs
    5:60:void <clinit>() -> <clinit>
    69:70:void <init>(java.lang.String,int,int,java.lang.String,boolean) -> <init>
    74:75:void <init>(java.lang.String,int,int) -> <init>
    79:80:void <init>(java.lang.String,int,int,java.lang.String) -> <init>
    84:85:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String) -> <init>
    87:98:void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,boolean) -> <init>
    104:113:boolean hasPackageSupport() -> ELGn
    118:118:java.lang.String getPackageVersion() -> KfkB
    124:124:java.lang.String toString() -> toString
    129:137:react.surge.util.Protocol getSupportedNMSVersion() -> VEGs
    142:150:react.surge.util.Protocol getProtocolVersion() -> eatS
    155:155:react.surge.util.ProtocolRange to(react.surge.util.Protocol) -> VUHt
    160:160:boolean isServerVersion() -> MKNb
    165:165:java.lang.String getVersionString() -> getVersionString
    170:170:boolean isNettySupported() -> aEFv
    175:175:boolean isActualVersion() -> OHdG
    180:185:int getVersion() -> getVersion
    190:195:int getCVersion() -> CNPi
    200:200:int getMetaVersion() -> OsXR
    1:1:react.surge.util.Protocol[] values() -> values
    1:1:react.surge.util.Protocol valueOf(java.lang.String) -> valueOf
react.surge.util.ProtocolRange -> KxES:
    react.surge.util.Protocol from -> YYBr
    react.surge.util.Protocol to -> RePW
    8:12:void <init>(react.surge.util.Protocol,react.surge.util.Protocol) -> <init>
    16:16:react.surge.util.Protocol getFrom() -> vkti
    21:21:react.surge.util.Protocol getTo() -> stNU
    26:26:boolean contains(react.surge.util.Protocol) -> uxtE
    32:32:java.lang.String toString() -> toString
react.surge.util.Range -> hRDB:
    double min -> min
    double max -> max
    21:25:void <init>(double,double) -> <init>
    37:38:void <init>(int,int) -> <init>
    50:51:void <init>(long,long) -> <init>
    60:60:double randomNext() -> ePpt
    70:70:int randomNextInt() -> ThsB
    80:80:long randomNextLong() -> sHxT
    92:92:boolean isWithin(double) -> SBpB
    104:104:boolean isWithin(int) -> qcwE
    116:116:boolean isWithin(long) -> Sdoy
    121:121:double getMin() -> getMin
    126:127:void setMin(double) -> SCQO
    131:131:double getMax() -> getMax
    136:137:void setMax(double) -> bOYT
react.surge.util.RawEvent -> qeMm:
react.surge.util.RayTrace -> Ihjn:
    org.bukkit.Location start -> eBRg
    org.bukkit.util.Vector direction -> VGIO
    java.lang.Double maxDistance -> wFhp
    java.lang.Double distanceCovered -> VWlT
    java.lang.Double step -> HVsi
    java.lang.Boolean stop -> kLXM
    36:44:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double) -> <init>
    51:65:void trace() -> nJjd
    73:74:void stop() -> stop
    85:85:void onTrace(org.bukkit.Location) -> AWkd
    89:89:org.bukkit.Location getStart() -> hcMG
    94:95:void setStart(org.bukkit.Location) -> rpKU
    99:99:org.bukkit.util.Vector getDirection() -> getDirection
    104:105:void setDirection(org.bukkit.util.Vector) -> setDirection
    109:109:java.lang.Double getMaxDistance() -> lEFA
    114:115:void setMaxDistance(java.lang.Double) -> KDHU
    119:119:java.lang.Double getDistanceCovered() -> kAad
    124:125:void setDistanceCovered(java.lang.Double) -> kkWN
    129:129:java.lang.Double getStep() -> fmfx
    134:135:void setStep(java.lang.Double) -> mNyO
react.surge.util.ReflectionUtils -> OGxd:
    34:37:void <init>() -> <init>
    57:66:java.lang.reflect.Constructor getConstructor(java.lang.Class,java.lang.Class[]) -> getConstructor
    90:90:java.lang.reflect.Constructor getConstructor(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Class[]) -> IEpw
    120:120:java.lang.Object instantiateObject(java.lang.Class,java.lang.Object[]) -> IEpw
    156:156:java.lang.Object instantiateObject(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.Object[]) -> IEpw
    178:187:java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[]) -> getMethod
    213:213:java.lang.reflect.Method getMethod(java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Class[]) -> IEpw
    243:243:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,java.lang.Object[]) -> invokeMethod
    275:275:java.lang.Object invokeMethod(java.lang.Object,java.lang.Class,java.lang.String,java.lang.Object[]) -> IEpw
    311:311:java.lang.Object invokeMethod(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,java.lang.String,java.lang.Object[]) -> IEpw
    331:333:java.lang.reflect.Field getField(java.lang.Class,boolean,java.lang.String) -> IEpw
    359:359:java.lang.reflect.Field getField(java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> IEpw
    386:386:java.lang.Object getValue(java.lang.Object,java.lang.Class,boolean,java.lang.String) -> IEpw
    418:418:java.lang.Object getValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String) -> IEpw
    445:445:java.lang.Object getValue(java.lang.Object,boolean,java.lang.String) -> IEpw
    474:475:void setValue(java.lang.Object,java.lang.Class,boolean,java.lang.String,java.lang.Object) -> IEpw
    508:509:void setValue(java.lang.Object,java.lang.String,react.surge.util.ReflectionUtils$PackageType,boolean,java.lang.String,java.lang.Object) -> IEpw
    535:536:void setValue(java.lang.Object,boolean,java.lang.String,java.lang.Object) -> IEpw
react.surge.util.ReflectionUtils$DataType -> OGxd$IEpw:
    react.surge.util.ReflectionUtils$DataType BYTE -> ASAE
    react.surge.util.ReflectionUtils$DataType SHORT -> FjaH
    react.surge.util.ReflectionUtils$DataType INTEGER -> MxGE
    react.surge.util.ReflectionUtils$DataType LONG -> DJhO
    react.surge.util.ReflectionUtils$DataType CHARACTER -> TsiT
    react.surge.util.ReflectionUtils$DataType FLOAT -> OJgV
    react.surge.util.ReflectionUtils$DataType DOUBLE -> HVsx
    react.surge.util.ReflectionUtils$DataType BOOLEAN -> fEXt
    java.util.Map CLASS_MAP -> Akpp
    java.lang.Class primitive -> aWkj
    java.lang.Class reference -> Hgup
    react.surge.util.ReflectionUtils$DataType[] ENUM$VALUES -> HVta
    650:671:void <clinit>() -> <clinit>
    681:685:void <init>(java.lang.String,int,java.lang.Class,java.lang.Class) -> <init>
    694:694:java.lang.Class getPrimitive() -> xjKA
    704:704:java.lang.Class getReference() -> pjbm
    716:716:react.surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) -> VUHt
    728:729:java.lang.Class getPrimitive(java.lang.Class) -> uxtE
    741:742:java.lang.Class getReference(java.lang.Class) -> KDHU
    754:760:java.lang.Class[] getPrimitive(java.lang.Class[]) -> IEpw
    772:778:java.lang.Class[] getReference(java.lang.Class[]) -> VUHt
    790:796:java.lang.Class[] getPrimitive(java.lang.Object[]) -> VUHt
    808:814:java.lang.Class[] getReference(java.lang.Object[]) -> uxtE
    828:842:boolean compare(java.lang.Class[],java.lang.Class[]) -> IEpw
    1:1:react.surge.util.ReflectionUtils$DataType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$DataType valueOf(java.lang.String) -> valueOf
react.surge.util.ReflectionUtils$PackageType -> OGxd$VUHt:
    react.surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER -> SNcg
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT -> vDGC
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK -> FQPB
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO -> vTgS
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND -> hurQ
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS -> FrrE
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS -> qDvn
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY -> TIUx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT -> THsf
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR -> TITc
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP -> HFQu
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY -> BxGh
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP -> tyTk
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA -> QsPY
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION -> UTgr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES -> HODL
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER -> ReQq
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD -> jkUx
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER -> Xfbr
    react.surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL -> Yqup
    java.lang.String path -> path
    react.surge.util.ReflectionUtils$PackageType[] ENUM$VALUES -> tpcS
    547:568:void <clinit>() -> <clinit>
    578:581:void <init>(java.lang.String,int,java.lang.String) -> <init>
    593:594:void <init>(java.lang.String,int,react.surge.util.ReflectionUtils$PackageType,java.lang.String) -> <init>
    603:603:java.lang.String getPath() -> getPath
    618:618:java.lang.Class getClass(java.lang.String) -> getClass
    625:625:java.lang.String toString() -> toString
    635:635:java.lang.String getServerVersion() -> getServerVersion
    1:1:react.surge.util.ReflectionUtils$PackageType[] values() -> values
    1:1:react.surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) -> valueOf
react.surge.util.Refreshable -> qvOa:
    void refresh() -> refresh
react.surge.util.SQLOperation -> KoRN:
    react.surge.util.SQLOperation LOAD -> dieU
    react.surge.util.SQLOperation SAVE -> LlRM
    react.surge.util.SQLOperation[] ENUM$VALUES -> LBAN
    3:5:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.SQLOperation[] values() -> values
    1:1:react.surge.util.SQLOperation valueOf(java.lang.String) -> valueOf
react.surge.util.ServerState -> nuVi:
    react.surge.util.ServerState START -> JDKS
    react.surge.util.ServerState ENABLE -> OKJU
    react.surge.util.ServerState DISABLE -> sBnv
    react.surge.util.ServerState STOP -> nnti
    react.surge.util.ServerState RUNNING -> uHtr
    react.surge.util.ServerState[] ENUM$VALUES -> GTTM
    3:37:void <clinit>() -> <clinit>
    3:3:void <init>(java.lang.String,int) -> <init>
    1:1:react.surge.util.ServerState[] values() -> values
    1:1:react.surge.util.ServerState valueOf(java.lang.String) -> valueOf
react.surge.util.Shape -> dNGD:
    org.bukkit.Location location -> pcVa
    org.bukkit.util.Vector offset -> tqHE
    org.bukkit.util.Vector size -> sLAc
    27:32:void <init>(org.bukkit.Location,org.bukkit.util.Vector,org.bukkit.util.Vector) -> <init>
    44:45:void <init>(org.bukkit.Location,org.bukkit.util.Vector) -> <init>
    55:56:void <init>(org.bukkit.Location) -> <init>
    67:80:boolean isWithinShape(org.bukkit.Location) -> NMRL
    90:94:org.bukkit.Location randomLocation() -> quuw
    104:104:org.bukkit.Location randomSurface() -> RAJm
    114:114:org.bukkit.Location getCenter() -> getCenter
    119:119:org.bukkit.Location getLocation() -> getLocation
    124:124:org.bukkit.util.Vector getOffset() -> wLsa
    129:129:org.bukkit.util.Vector getSize() -> KUhT
react.surge.util.SnowLevel -> RRDQ:
    byte level -> Akrw
    18:21:void <init>(byte) -> <init>
    30:40:byte getLevel() -> fvWl
    51:52:void setLevel(byte) -> tSmm
react.surge.util.SuperCaller -> psMB:
    void run() -> run
react.surge.util.T -> xYAF:
    15:17:void <init>() -> <init>
    void onStop(long,double) -> VUHt
    32:35:void stop() -> stop
react.surge.util.TXT -> WrTq:
    12:12:void <init>() -> <init>
    25:25:java.lang.String repeat(java.lang.String,int) -> repeat
    39:47:react.glang.GList wrap(java.lang.String,int) -> YoSi
    67:67:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> IEpw
    85:85:java.lang.String makeTag(react.surge.util.C,react.surge.util.C,react.surge.util.C,java.lang.String) -> IEpw
    99:99:java.lang.String line(react.surge.util.C,int) -> IEpw
    113:113:java.lang.String underline(react.surge.util.C,int) -> VUHt
    135:140:java.lang.String getLine(react.surge.util.C,int,double,java.lang.String,java.lang.String,java.lang.String) -> IEpw
react.surge.util.Tag -> nmEf:
    java.lang.String value() -> value
react.surge.util.Timer -> nSRm:
    long tns -> KyrV
    long cns -> FYbB
    19:23:void <init>() -> <init>
    30:31:void start() -> start
    38:40:void stop() -> stop
    49:49:long getTime() -> getTime
    59:59:long getLastRun() -> ivok
react.surge.util.VectorMath -> qdmA:
    int[] $SWITCH_TABLE$surge$util$Axis -> FGfG
    int[] $SWITCH_TABLE$org$bukkit$block$BlockFace -> ItMS
    17:17:void <init>() -> <init>
    21:31:org.bukkit.util.Vector scaleStatic(react.surge.util.Axis,org.bukkit.util.Vector,double) -> IEpw
    36:41:org.bukkit.util.Vector scaleX(org.bukkit.util.Vector,double) -> IEpw
    46:51:org.bukkit.util.Vector scaleY(org.bukkit.util.Vector,double) -> VUHt
    56:61:org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector,double) -> uxtE
    66:68:org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) -> IEpw
    73:76:boolean isLookingNear(org.bukkit.Location,org.bukkit.Location,double) -> VUHt
    81:81:org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) -> VUHt
    86:86:org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) -> uxtE
    91:91:org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) -> KDHU
    96:96:org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) -> kkWN
    101:101:org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) -> mNyO
    106:106:org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) -> YoSi
    111:111:double round(double,int) -> kkWN
    116:119:org.bukkit.util.Vector clip(org.bukkit.util.Vector,int) -> IEpw
    124:137:org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector,org.bukkit.util.Vector,double) -> IEpw
    150:235:react.glang.GList split(org.bukkit.block.BlockFace) -> IEpw
    249:249:org.bukkit.util.Vector direction(org.bukkit.Location,org.bukkit.Location) -> KDHU
    254:254:org.bukkit.util.Vector directionNoNormal(org.bukkit.Location,org.bukkit.Location) -> kkWN
    268:268:org.bukkit.util.Vector toVector(float,float) -> IEpw
    281:282:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector) -> IEpw
    296:299:void impulse(org.bukkit.entity.Entity,org.bukkit.util.Vector,double) -> IEpw
    310:325:org.bukkit.util.Vector reverse(org.bukkit.util.Vector) -> EBVa
    337:340:double getSpeed(org.bukkit.util.Vector) -> tSmm
    354:361:react.glang.GList shift(org.bukkit.util.Vector,react.glang.GList) -> IEpw
    373:415:org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) -> mGIk
    429:441:org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector,float) -> IEpw
    455:467:org.bukkit.util.Vector angleRight(org.bukkit.util.Vector,float) -> VUHt
    481:490:org.bukkit.util.Vector angleUp(org.bukkit.util.Vector,float) -> uxtE
    504:513:org.bukkit.util.Vector angleDown(org.bukkit.util.Vector,float) -> KDHU
    526:574:org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) -> AWkd
    17:17:int[] $SWITCH_TABLE$surge$util$Axis() -> KMVi
    17:17:int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() -> kuFf
react.surge.util.VectorMath$1 -> qdmA$1:
    org.bukkit.util.Vector val$vector -> nxGD
    1:354:void <init>(org.bukkit.util.Vector) -> <init>
    359:359:org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) -> kRDe
    1:1:java.lang.Object onAdapt(java.lang.Object) -> YoSi
react.surge.util.W -> kAXg:
    29:29:void <init>() -> <init>
    40:48:boolean visible(org.bukkit.block.Block) -> EBVa
    61:64:void colorArmor(org.bukkit.inventory.ItemStack,org.bukkit.Color) -> IEpw
    75:86:org.bukkit.entity.Entity getEntity(int) -> qJeY
    101:114:int count(org.bukkit.entity.Player,react.surge.util.MaterialBlock) -> IEpw
    131:131:boolean has(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> IEpw
    143:143:int getChunkX(org.bukkit.block.Block) -> tSmm
    155:155:int getChunkY(org.bukkit.block.Block) -> mGIk
    168:169:void dropXp(org.bukkit.Location,int) -> VUHt
    180:180:int getChunkZ(org.bukkit.block.Block) -> AWkd
    196:203:void take(org.bukkit.entity.Player,react.surge.util.MaterialBlock,int) -> VUHt
    219:227:int getManhattanDistance(org.bukkit.Location,org.bukkit.Location,boolean) -> IEpw
    232:239:react.glang.GList news(org.bukkit.Location) -> wCeA
    256:264:int getManhattanDistance(org.bukkit.block.Block,org.bukkit.block.Block,boolean) -> IEpw
    276:276:react.glang.GList getBlocks(org.bukkit.Chunk) -> wCeA
    288:288:org.bukkit.World getSyncWorld(org.bukkit.World) -> UcFc
    300:300:org.bukkit.World toSync(org.bukkit.World) -> AFlA
    312:312:org.bukkit.block.Block toSync(org.bukkit.block.Block) -> kRDe
    324:324:org.bukkit.Location toSync(org.bukkit.Location) -> UcFc
    336:336:org.bukkit.Chunk toSync(org.bukkit.Chunk) -> UcFc
    352:419:react.surge.util.MaterialBlock getMaterialBlock(java.lang.String) -> LFms
    433:445:org.bukkit.block.Block[] getRelative(org.bukkit.block.Block,org.bukkit.block.BlockFace[]) -> IEpw
    460:461:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData) -> IEpw
    478:479:void setTypeAndData(org.bukkit.block.Block,org.bukkit.Material,org.bukkit.material.MaterialData,boolean) -> IEpw
    493:494:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int) -> IEpw
    511:512:void setTypeAndRawData(org.bukkit.block.Block,org.bukkit.Material,int,boolean) -> IEpw
    525:526:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData) -> IEpw
    541:542:void setData(org.bukkit.block.Block,org.bukkit.material.MaterialData,boolean) -> IEpw
    558:568:int getHighestPotionLevel(org.bukkit.potion.PotionEffectType,java.util.Collection) -> IEpw
    580:587:react.glang.GList chunkFaces(org.bukkit.Chunk) -> AFlA
    599:608:react.glang.GList blockFaces(org.bukkit.block.Block) -> YfcL
    620:634:org.bukkit.Location simulateFall(org.bukkit.Location) -> AFlA
    648:663:react.glang.GList chunkRadius(org.bukkit.Chunk,int) -> uxtE
    677:689:react.glang.GList blockRadius(org.bukkit.block.Block,int) -> IEpw
    711:743:org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity,double,double) -> IEpw
    761:768:boolean isLookingAt(org.bukkit.entity.Entity,org.bukkit.entity.Entity,double,double) -> IEpw
    782:782:double differenceOfVectors(org.bukkit.util.Vector,org.bukkit.util.Vector) -> IEpw
react.surge.util.W$1 -> kAXg$1:
    java.lang.Double val$doff -> RJtW
    org.bukkit.entity.Entity val$e -> VyrM
    org.bukkit.entity.Entity[] val$result -> jjkW
    1:724:void <init>(org.bukkit.Location,org.bukkit.util.Vector,java.lang.Double,java.lang.Double,java.lang.Double,org.bukkit.entity.Entity,org.bukkit.entity.Entity[]) -> <init>
    729:740:void onTrace(org.bukkit.Location) -> AWkd
react.surge.util.Worlds -> AHDG:
    12:12:void <init>() -> <init>
    21:21:react.glang.GList getWorlds() -> eGtH
    33:33:boolean hasWorld(java.lang.String) -> ThYI
    45:45:org.bukkit.World getWorld(java.lang.String) -> getWorld
react.surge.util.package-info -> tvgE:
react.text.ColoredString -> clfU:
    react.surge.util.C c -> YYIG
    java.lang.String s -> SOFf
    23:27:void <init>(react.surge.util.C,java.lang.String) -> <init>
    32:32:java.lang.String toString() -> toString
    37:37:react.surge.util.C getC() -> NhDC
    42:43:void setC(react.surge.util.C) -> VUHt
    47:47:java.lang.String getS() -> dyDB
    52:53:void setS(java.lang.String) -> BkuH
react.text.RTEX -> BtyL:
    react.glang.GList extras -> ynsa
    22:25:void <init>(react.text.ColoredString[]) -> <init>
    27:30:void <init>() -> <init>
    34:34:react.glang.GList getExtras() -> jrFq
    44:58:react.json.JSONObject toJSON() -> pYEs
react.text.RTX -> ncsg:
    react.json.JSONArray base -> XLrs
    22:26:void <init>() -> <init>
    36:37:void add(react.json.JSONObject) -> mNyO
    47:51:void addText(java.lang.String) -> addText
    63:67:void addText(java.lang.String,react.surge.util.C) -> VUHt
    81:90:void addTextHover(java.lang.String,react.text.RTEX,react.surge.util.C) -> IEpw
    104:114:void addTextSuggestedCommand(java.lang.String,java.lang.String,react.surge.util.C) -> IEpw
    128:138:void addTextOpenURL(java.lang.String,java.lang.String,react.surge.util.C) -> VUHt
    154:164:void addTextFireCommand(java.lang.String,java.lang.String,react.surge.util.C) -> uxtE
    182:196:void addTextSuggestedHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> IEpw
    212:226:void addTextOpenHoverURL(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> VUHt
    242:256:void addTextFireHoverCommand(java.lang.String,react.text.RTEX,java.lang.String,react.surge.util.C) -> uxtE
    265:265:react.json.JSONArray toJSON() -> prwL
    276:277:void tellRawTo(org.bukkit.entity.Player) -> AyqF
react.text.RawText -> ydSm:
    java.lang.String COLOR_BLACK -> iqHL
    java.lang.String COLOR_DARK_BLUE -> SpiF
    java.lang.String COLOR_DARK_GREEN -> iyWs
    java.lang.String COLOR_DARK_AQUA -> BUdQ
    java.lang.String COLOR_DARK_RED -> RKbb
    java.lang.String COLOR_DARK_PURPLE -> BgIC
    java.lang.String COLOR_GOLD -> yUbA
    java.lang.String COLOR_GRAY -> BMUd
    java.lang.String COLOR_DARK_GRAY -> UelI
    java.lang.String COLOR_BLUE -> susD
    java.lang.String COLOR_GREEN -> digH
    java.lang.String COLOR_AQUA -> tVsP
    java.lang.String COLOR_RED -> GLBj
    java.lang.String COLOR_LIGHT_PURPLE -> TjyN
    java.lang.String COLOR_YELLOW -> wWke
    java.lang.String COLOR_WHITE -> ReTR
    java.lang.String COLOR_NONE -> tFRJ
    java.lang.String HEAD_TEXT -> AIqJ
    java.lang.String HEAD_COLOR -> oXgq
    java.lang.String HEAD_BOLD -> UeoH
    java.lang.String HEAD_ITALIC -> Ltfd
    java.lang.String HEAD_UNDERLINED -> iOFr
    java.lang.String HEAD_STRIKETHROUGH -> SOGp
    java.lang.String HEAD_OBFUSCATED -> tWVe
    java.lang.String HEAD_CLICK_EVENT -> MMVV
    java.lang.String HEAD_HOVER_EVENT -> pKKL
    java.lang.String HEAD_ACTION -> ENPO
    java.lang.String HEAD_VALUE -> PorB
    java.lang.String HEAD_EXTRA -> FruT
    java.lang.String HEAD_ACTION_SHOW_TEXT -> gbRr
    java.lang.String HEAD_ACTION_COMMAND -> Xnwf
    java.util.ArrayList components -> iVwG
    47:50:void <init>() -> <init>
    54:54:react.text.RawText addText(java.lang.String) -> CfhL
    59:59:react.text.RawText addText(java.lang.String,java.lang.String) -> kkWN
    66:108:react.text.RawText addText(java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> IEpw
    113:113:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String) -> IEpw
    120:164:react.text.RawText addTextWithCommand(java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> IEpw
    169:169:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> IEpw
    176:232:react.text.RawText addTextWithHover(java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> IEpw
    237:237:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> IEpw
    244:302:react.text.RawText addTextWithHoverCommand(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,boolean,boolean,boolean,boolean,boolean) -> IEpw
    307:313:java.lang.String compile() -> KDhs
    318:319:void tellRawTo(org.bukkit.plugin.java.JavaPlugin,org.bukkit.entity.Player) -> IEpw

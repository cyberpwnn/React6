// ["C:\Users\cyberpwn\Documents\development\workspace\React6\compile\zelix.log" version=8.0.8 encoding="UTF-8" 2017.10.29 13:24:04]
// DO NOT EDIT THIS FILE. You need it to interpret exception stack traces.


Package: react	=>	
Package: react.action	=>	
Package: react.api	=>	
Package: react.command	=>	
Package: react.controller	=>	
Package: react.sampler	=>	
Package: surge	=>	
Package: surge.cluster	=>	
Package: surge.collection	=>	
Package: surge.control	=>	
Package: surge.hotload	=>	
Package: surge.json	=>	
Package: surge.math	=>	
Package: surge.nms	=>	
Package: surge.pool	=>	
Package: surge.sched	=>	
Package: surge.server	=>	
Package: surge.text	=>	
Package: surge.util	=>	



Class: public react.Base	=>	y
	Source: "Base.java"
	FieldsOf: react.Base
	MethodsOf: react.Base
		public static void msg(org.bukkit.command.CommandSender, java.lang.String) 	=>	a

Class: public react.Info	=>	z
	Source: "Info.java"
	FieldsOf: react.Info
		public static java.lang.String ACTION_PURGE_ENTITIES_DESCRIPTION	=>	ae
		public static java.lang.String ACTION_PURGE_ENTITIES_NAME	=>	ad
		public static java.lang.String COMMAND_HELP	=>	e
		public static java.lang.String COMMAND_HELP_ALIAS_1	=>	f
		public static java.lang.String COMMAND_HELP_ALIAS_2	=>	g
		public static java.lang.String COMMAND_HELP_DESCRIPTION	=>	i
		public static java.lang.String COMMAND_HELP_USAGE	=>	h
		public static java.lang.String COMMAND_MONITOR	=>	j
		public static java.lang.String COMMAND_MONITOR_ALIAS_1	=>	k
		public static java.lang.String COMMAND_MONITOR_ALIAS_2	=>	l
		public static java.lang.String COMMAND_MONITOR_DESCRIPTION	=>	n
		public static java.lang.String COMMAND_MONITOR_USAGE	=>	m
		public static java.lang.String COMMAND_REACT	=>	o
		public static java.lang.String CORE_CACHE	=>	c
		public static java.lang.String CORE_DOTYML	=>	d
		public static java.lang.String CORE_NAME	=>	b
		public static java.lang.String CORE_REACT_DOT	=>	a
		public static java.lang.String MSG_MONITORING_STARTED	=>	q
		public static java.lang.String MSG_MONITORING_STOPPED	=>	r
		public static java.lang.String MSG_PERMISSION	=>	p
		public static java.lang.String NAME_CHUNKS	=>	u
		public static java.lang.String NAME_ENTITIES	=>	v
		public static java.lang.String NAME_MEMORY	=>	t
		public static java.lang.String NAME_TICK	=>	s
		public static java.lang.String PERM_ACCESS	=>	I
		public static java.lang.String PERM_ACT	=>	N
		public static java.lang.String PERM_MONITOR	=>	J
		public static java.lang.String PERM_MONITOR_ENVIRONMENT	=>	M
		public static java.lang.String PERM_MONITOR_MAP	=>	L
		public static java.lang.String PERM_MONITOR_TITLE	=>	K
		public static java.lang.String PERM_RELOAD	=>	O
		public static java.lang.String SAMPLER_ALLOCMEM	=>	V
		public static java.lang.String SAMPLER_CHK	=>	X
		public static java.lang.String SAMPLER_CHKS	=>	Y
		public static java.lang.String SAMPLER_ENT	=>	Z
		public static java.lang.String SAMPLER_ENTDROP	=>	ab
		public static java.lang.String SAMPLER_ENTLIV	=>	aa
		public static java.lang.String SAMPLER_ENTTILE	=>	ac
		public static java.lang.String SAMPLER_FREEMEM	=>	T
		public static java.lang.String SAMPLER_MAHS	=>	W
		public static java.lang.String SAMPLER_MAXMEM	=>	U
		public static java.lang.String SAMPLER_MEM	=>	S
		public static java.lang.String SAMPLER_TICK	=>	Q
		public static java.lang.String SAMPLER_TIU	=>	R
		public static java.lang.String SAMPLER_TPS	=>	P
		public static java.lang.String STATE_MAPPING_ENABLED	=>	y
		public static java.lang.String STATE_MONITORING_ENABLED	=>	x
		public static java.lang.String STATE_MONITORING_LASTTAB	=>	B
		public static java.lang.String STATE_MONITORING_POSTED	=>	A
		public static java.lang.String STATE_MONITORING_SWITCHNOTIFICATION	=>	C
		public static java.lang.String STATE_MONITORING_TAB	=>	w
		public static java.lang.String STATE_PLAYER_HEIGHT_CHANGING	=>	H
		public static java.lang.String STATE_PLAYER_HEIGHT_CURRENT	=>	G
		public static java.lang.String STATE_PLAYER_HOTBAR	=>	D
		public static java.lang.String STATE_PLAYER_SCROLL	=>	F
		public static java.lang.String STATE_PLAYER_SHIFT	=>	E
		public static java.lang.String STATE_SOUND_PLAYS	=>	z
	MethodsOf: react.Info

Class: public react.React	=>	A
	Source: "React.java"
	FieldsOf: react.React
		public react.controller.CommandController commandController	=>	e
		public static react.React instance	=>	a
		public react.controller.MonitorController monitorController	=>	d
		public react.controller.PlayerController playerController	=>	c
		public react.controller.SampleController sampleController	=>	b
	MethodsOf: react.React
		public void disable() 	=>	b
		public void enable() 	=>	a

Class: public react.action.ActionPurgeEntities	=>	G
	Source: "ActionPurgeEntities.java"
	FieldsOf: react.action.ActionPurgeEntities
	MethodsOf: react.action.ActionPurgeEntities
		public void act(react.api.IActionSource, react.api.ISelector[]) 	=>	a
		public void purge(org.bukkit.Chunk, react.api.IActionSource, react.api.ISelector[]) 	=>	a

Class: react.action.ActionPurgeEntities$1	=>	G$a
	Source: "ActionPurgeEntities.java"
	FieldsOf: react.action.ActionPurgeEntities$1
		final synthetic react.action.ActionPurgeEntities this$0	NameNotChanged
		final synthetic org.bukkit.entity.Entity val$i	NameNotChanged
	MethodsOf: react.action.ActionPurgeEntities$1
		public void run() 	NameNotChanged

Class: public abstract react.api.Action	=>	E
	Source: "Action.java"
	FieldsOf: react.api.Action
		private java.lang.String description	=>	b
		private react.api.ActionHandle handle	=>	d
		private java.lang.String name	=>	a
		private double progress	=>	f
		private react.api.ActionState state	=>	e
		private java.lang.String status	=>	c
	MethodsOf: react.api.Action
		public java.lang.String getDescription() 	=>	b
		public react.api.ActionHandle getHandleType() 	=>	c
		public java.lang.String getName() 	=>	a
		public double getProgress() 	=>	f
		public react.api.ActionState getState() 	=>	d
		public java.lang.String getStatus() 	=>	e
		public void setProgress(double) 	=>	a
		public void setStatus(java.lang.String) 	=>	a

Class: public final enum react.api.ActionHandle	=>	a
	Source: "ActionHandle.java"
	FieldsOf: react.api.ActionHandle
		private static final synthetic react.api.ActionHandle[] $VALUES	=>	a
		public static final enum react.api.ActionHandle AUTOMATIC	NameNotChanged
		public static final enum react.api.ActionHandle MANUAL	NameNotChanged
		public static final enum react.api.ActionHandle MUTEX	NameNotChanged
	MethodsOf: react.api.ActionHandle
		public static react.api.ActionHandle valueOf(java.lang.String) 	NameNotChanged
		public static react.api.ActionHandle[] values() 	NameNotChanged

Class: public final enum react.api.ActionState	=>	b
	Source: "ActionState.java"
	FieldsOf: react.api.ActionState
		private static final synthetic react.api.ActionState[] $VALUES	=>	a
		public static final enum react.api.ActionState IDLE	NameNotChanged
		public static final enum react.api.ActionState QUEUED	NameNotChanged
		public static final enum react.api.ActionState RUNNING	NameNotChanged
	MethodsOf: react.api.ActionState
		public static react.api.ActionState valueOf(java.lang.String) 	NameNotChanged
		public static react.api.ActionState[] values() 	NameNotChanged

Class: public final enum react.api.ActionTargetType	=>	c
	Source: "ActionTargetType.java"
	FieldsOf: react.api.ActionTargetType
		private static final synthetic react.api.ActionTargetType[] $VALUES	=>	a
		public static final enum react.api.ActionTargetType POSITIONAL	NameNotChanged
		public static final enum react.api.ActionTargetType SYSTEM	NameNotChanged
	MethodsOf: react.api.ActionTargetType
		public static react.api.ActionTargetType valueOf(java.lang.String) 	NameNotChanged
		public static react.api.ActionTargetType[] values() 	NameNotChanged

Class: public react.api.CommandSenderActionSource	=>	H
	Source: "CommandSenderActionSource.java"
	FieldsOf: react.api.CommandSenderActionSource
		private org.bukkit.command.CommandSender sender	=>	a
	MethodsOf: react.api.CommandSenderActionSource
		public org.bukkit.command.CommandSender getSender() 	=>	a

Class: public react.api.Gate	=>	K
	Source: "Gate.java"
	FieldsOf: react.api.Gate
	MethodsOf: react.api.Gate
		public static void removeEntity(org.bukkit.entity.Entity) 	=>	a

Class: public abstract react.api.IAction	=>	L
	Source: "IAction.java"
	FieldsOf: react.api.IAction
	MethodsOf: react.api.IAction
		public abstract void act(react.api.IActionSource, react.api.ISelector[]) 	=>	a
		public abstract java.lang.String getDescription() 	=>	b
		public abstract react.api.ActionHandle getHandleType() 	=>	c
		public abstract java.lang.String getName() 	=>	a
		public abstract double getProgress() 	=>	f
		public abstract react.api.ActionState getState() 	=>	d
		public abstract java.lang.String getStatus() 	=>	e
		public abstract void setProgress(double) 	=>	a
		public abstract void setStatus(java.lang.String) 	=>	a

Class: public abstract react.api.IActionSource	=>	M
	Source: "IActionSource.java"
	FieldsOf: react.api.IActionSource
	MethodsOf: react.api.IActionSource

Class: public abstract react.api.ICommand	=>	N
	Source: "ICommand.java"
	FieldsOf: react.api.ICommand
	MethodsOf: react.api.ICommand
		public abstract void fire(org.bukkit.command.CommandSender, java.lang.String[]) 	=>	a
		public abstract java.lang.String[] getAliases() 	=>	b
		public abstract java.lang.String getCommand() 	=>	a
		public abstract java.lang.String getDescription() 	=>	e
		public abstract java.lang.String[] getPermissions() 	=>	c
		public abstract react.api.SideGate getSideGate() 	=>	f
		public abstract java.lang.String getUsage() 	=>	d

Class: public abstract react.api.ISampler	=>	O
	Source: "ISampler.java"
	FieldsOf: react.api.ISampler
	MethodsOf: react.api.ISampler
		public abstract void construct() 	=>	i
		public abstract java.lang.String get() 	=>	h
		public abstract surge.util.C getAltColor() 	=>	e
		public abstract surge.util.C getColor() 	=>	d
		public abstract java.lang.String getDescription() 	=>	c
		public abstract java.lang.String getID() 	=>	a
		public abstract int getInterval() 	=>	f
		public abstract java.lang.String getName() 	=>	b
		public abstract double getValue() 	=>	j
		public abstract void sample() 	=>	g
		public abstract void setColor(surge.util.C, surge.util.C) 	=>	a
		public abstract void setDescription(java.lang.String) 	=>	c
		public abstract void setID(java.lang.String) 	=>	a
		public abstract void setInterval(int) 	=>	a
		public abstract void setName(java.lang.String) 	=>	b
		public abstract void setValue(double) 	=>	a

Class: public abstract react.api.ISelector	=>	P
	Source: "ISelector.java"
	FieldsOf: react.api.ISelector
	MethodsOf: react.api.ISelector
		public abstract boolean can(java.lang.Object) 	=>	a
		public abstract surge.collection.GSet getList() 	=>	c
		public abstract react.api.SelectionMode getMode() 	=>	a
		public abstract surge.collection.GSet getPossibilities() 	=>	d
		public abstract java.lang.Class getType() 	=>	b

Class: public abstract annotation react.api.Lang	=>	Q
	Source: "Lang.java"
	FieldsOf: react.api.Lang
	MethodsOf: react.api.Lang
		public abstract java.lang.String value() 	NameNotChanged

Class: public abstract react.api.MSampler	=>	ac
	Source: "MSampler.java"
	FieldsOf: react.api.MSampler
	MethodsOf: react.api.MSampler
		protected surge.server.SuperSampler ss() 	=>	k

Class: public react.api.MonitorHeading	=>	R
	Source: "MonitorHeading.java"
	FieldsOf: react.api.MonitorHeading
		private surge.collection.GList children	=>	b
		private react.api.ISampler head	=>	a
		private java.lang.String name	=>	c
	MethodsOf: react.api.MonitorHeading
		public void addSampler(react.api.ISampler) 	=>	a
		public java.lang.String getChildText() 	=>	d
		public surge.collection.GList getChildren() 	=>	b
		public react.api.ISampler getHead() 	=>	a
		public java.lang.String getHeadText() 	=>	c
		public java.lang.String getName() 	=>	e
		public void setChildren(surge.collection.GList) 	=>	a
		public void setHead(react.api.ISampler) 	=>	b
		public void setName(java.lang.String) 	=>	a

Class: public final enum react.api.Permissable	=>	d
	Source: "Permissable.java"
	FieldsOf: react.api.Permissable
		private static final synthetic react.api.Permissable[] $VALUES	=>	b
		public static final enum react.api.Permissable ACCESS	NameNotChanged
		public static final enum react.api.Permissable ACT	NameNotChanged
		public static final enum react.api.Permissable MONITOR	NameNotChanged
		public static final enum react.api.Permissable MONITOR_ENVIRONMENT	NameNotChanged
		public static final enum react.api.Permissable MONITOR_MAP	NameNotChanged
		public static final enum react.api.Permissable MONITOR_TITLE	NameNotChanged
		public static final enum react.api.Permissable RELOAD	NameNotChanged
		private java.lang.String node	=>	a
	MethodsOf: react.api.Permissable
		public java.lang.String getNode() 	=>	a
		public boolean has(org.bukkit.command.CommandSender) 	=>	a
		public static react.api.Permissable valueOf(java.lang.String) 	NameNotChanged
		public static react.api.Permissable[] values() 	NameNotChanged

Class: public react.api.ReactActionSource	=>	T
	Source: "ReactActionSource.java"
	FieldsOf: react.api.ReactActionSource
	MethodsOf: react.api.ReactActionSource

Class: public abstract react.api.ReactCommand	=>	U
	Source: "ReactCommand.java"
	FieldsOf: react.api.ReactCommand
		protected java.lang.String[] aliases	=>	b
		protected java.lang.String command	=>	a
		protected java.lang.String description	=>	e
		protected java.lang.String[] permissions	=>	c
		protected react.api.SideGate sideGate	=>	f
		protected java.lang.String usage	=>	d
	MethodsOf: react.api.ReactCommand
		public java.lang.String[] getAliases() 	=>	b
		public java.lang.String getCommand() 	=>	a
		public java.lang.String getDescription() 	=>	e
		public java.lang.String[] getPermissions() 	=>	c
		public react.api.SideGate getSideGate() 	=>	f
		public java.lang.String getUsage() 	=>	d

Class: public react.api.ReactPlayer	=>	aa
	Source: "ReactPlayer.java"
	FieldsOf: react.api.ReactPlayer
		public boolean heightMovement	=>	m
		public int hotbarSlot	=>	i
		public static surge.collection.GMap keystore	=>	a
		public double lastHeight	=>	l
		public boolean mapping	=>	c
		public int monitorLastSelection	=>	g
		public boolean monitorPosted	=>	f
		public int monitorSelection	=>	d
		public boolean monitoring	=>	b
		private org.bukkit.entity.Player p	=>	n
		public int plays	=>	e
		public int scroll	=>	k
		public boolean shift	=>	j
		public int switchNotification	=>	h
	MethodsOf: react.api.ReactPlayer
		public int getHotbarSlot() 	=>	g
		public double getLastHeight() 	=>	l
		public int getMonitorLastSelection() 	=>	k
		public boolean getMonitorPosted() 	=>	o
		public int getMonitorSelection() 	=>	f
		public org.bukkit.entity.Player getP() 	=>	e
		public int getPlays() 	=>	p
		public int getScroll() 	=>	j
		public int getSwitchNotification() 	=>	n
		public boolean isHeightMovement() 	=>	m
		public boolean isMapping() 	=>	d
		public boolean isMonitoring() 	=>	c
		public boolean isShift() 	=>	i
		public boolean isShifting() 	=>	h
		public void load() 	=>	b
		public void save() 	=>	a
		public void setHeightMovement(boolean) 	=>	e
		public void setHotbarSlot(int) 	=>	b
		public void setLastHeight(double) 	=>	a
		public void setMapping(boolean) 	=>	b
		public void setMonitorLastSelection(int) 	=>	d
		public void setMonitorPosted(boolean) 	=>	f
		public void setMonitorSelection(int) 	=>	a
		public void setMonitoring(boolean) 	=>	a
		public void setP(org.bukkit.entity.Player) 	=>	a
		public void setPlays(int) 	=>	f
		public void setScroll(int) 	=>	c
		public void setShift(boolean) 	=>	d
		public void setShifting(boolean) 	=>	c
		public void setSwitchNotification(int) 	=>	e

Class: public final enum react.api.SampledType	=>	e
	Source: "SampledType.java"
	FieldsOf: react.api.SampledType
		private static final synthetic react.api.SampledType[] $VALUES	=>	b
		public static final enum react.api.SampledType ALLOCMEM	NameNotChanged
		public static final enum react.api.SampledType CHK	NameNotChanged
		public static final enum react.api.SampledType CHKS	NameNotChanged
		public static final enum react.api.SampledType ENT	NameNotChanged
		public static final enum react.api.SampledType ENTDROP	NameNotChanged
		public static final enum react.api.SampledType ENTLIV	NameNotChanged
		public static final enum react.api.SampledType ENTTILE	NameNotChanged
		public static final enum react.api.SampledType FREEMEM	NameNotChanged
		public static final enum react.api.SampledType MAHS	NameNotChanged
		public static final enum react.api.SampledType MAXMEM	NameNotChanged
		public static final enum react.api.SampledType MEM	NameNotChanged
		public static final enum react.api.SampledType TICK	NameNotChanged
		public static final enum react.api.SampledType TIU	NameNotChanged
		public static final enum react.api.SampledType TPS	NameNotChanged
		private java.lang.String node	=>	a
	MethodsOf: react.api.SampledType
		public java.lang.String getNode() 	=>	a
		public static react.api.SampledType valueOf(java.lang.String) 	NameNotChanged
		public static react.api.SampledType[] values() 	NameNotChanged

Class: public abstract react.api.Sampler	=>	ab
	Source: "Sampler.java"
	FieldsOf: react.api.Sampler
		private surge.util.C altColor	=>	f
		private surge.util.C color	=>	e
		private java.lang.String description	=>	d
		private java.lang.String id	=>	b
		private int interval	=>	g
		private java.lang.String name	=>	c
		private double value	=>	a
	MethodsOf: react.api.Sampler
		public abstract void construct() 	=>	i
		public abstract java.lang.String get() 	=>	h
		public surge.util.C getAltColor() 	=>	e
		public surge.util.C getColor() 	=>	d
		public java.lang.String getDescription() 	=>	c
		public java.lang.String getID() 	=>	a
		public int getInterval() 	=>	f
		public java.lang.String getName() 	=>	b
		public double getValue() 	=>	j
		public abstract void sample() 	=>	g
		public void setColor(surge.util.C, surge.util.C) 	=>	a
		public void setDescription(java.lang.String) 	=>	c
		public void setID(java.lang.String) 	=>	a
		public void setInterval(int) 	=>	a
		public void setName(java.lang.String) 	=>	b
		public void setValue(double) 	=>	a

Class: public final enum react.api.SelectionMode	=>	f
	Source: "SelectionMode.java"
	FieldsOf: react.api.SelectionMode
		private static final synthetic react.api.SelectionMode[] $VALUES	=>	a
		public static final enum react.api.SelectionMode BLACKLIST	NameNotChanged
		public static final enum react.api.SelectionMode WHITELIST	NameNotChanged
	MethodsOf: react.api.SelectionMode
		public static react.api.SelectionMode valueOf(java.lang.String) 	NameNotChanged
		public static react.api.SelectionMode[] values() 	NameNotChanged

Class: public react.api.Selector	=>	ar
	Source: "Selector.java"
	FieldsOf: react.api.Selector
		private surge.collection.GSet list	=>	c
		private react.api.SelectionMode mode	=>	b
		private java.lang.Class objectType	=>	a
		private surge.collection.GSet possibilities	=>	d
	MethodsOf: react.api.Selector
		public boolean can(java.lang.Object) 	=>	a
		public surge.collection.GSet getList() 	=>	c
		public react.api.SelectionMode getMode() 	=>	a
		public surge.collection.GSet getPossibilities() 	=>	d
		public java.lang.Class getType() 	=>	b

Class: public react.api.SelectorEntityType	=>	as
	Source: "SelectorEntityType.java"
	FieldsOf: react.api.SelectorEntityType
	MethodsOf: react.api.SelectorEntityType
		public void add(org.bukkit.entity.EntityType) 	=>	a

Class: public react.api.SelectorPosition	=>	at
	Source: "SelectorPosition.java"
	FieldsOf: react.api.SelectorPosition
	MethodsOf: react.api.SelectorPosition
		public void add(org.bukkit.Chunk) 	=>	a
		public void add(org.bukkit.Chunk, int) 	=>	a
		public void add(org.bukkit.World) 	=>	a
		public void addAll() 	=>	e

Class: public final enum react.api.Side	=>	g
	Source: "Side.java"
	FieldsOf: react.api.Side
		private static final synthetic react.api.Side[] $VALUES	=>	b
		public static final enum react.api.Side CONSOLE	NameNotChanged
		public static final enum react.api.Side PLAYERS	NameNotChanged
		private java.lang.String ss	=>	a
	MethodsOf: react.api.Side
		public static react.api.Side get(org.bukkit.command.CommandSender) 	=>	a
		public java.lang.String ss() 	=>	a
		public static react.api.Side valueOf(java.lang.String) 	NameNotChanged
		public static react.api.Side[] values() 	NameNotChanged

Class: public final enum react.api.SideGate	=>	h
	Source: "SideGate.java"
	FieldsOf: react.api.SideGate
		private static final synthetic react.api.SideGate[] $VALUES	=>	a
		public static final enum react.api.SideGate ANYTHING	NameNotChanged
		public static final enum react.api.SideGate CONSOLES_ONLY	NameNotChanged
		public static final enum react.api.SideGate PLAYERS_ONLY	NameNotChanged
	MethodsOf: react.api.SideGate
		public boolean supports(react.api.Side) 	=>	a
		public static react.api.SideGate valueOf(java.lang.String) 	NameNotChanged
		public static react.api.SideGate[] values() 	NameNotChanged

Class: synthetic react.api.SideGate$1	=>	h$a
	Source: "SideGate.java"
	FieldsOf: react.api.SideGate$1
		static final synthetic int[] $SwitchMap$react$api$SideGate	=>	a
	MethodsOf: react.api.SideGate$1

Class: public react.api.TitleMonitor	=>	au
	Source: "TitleMonitor.java"
	FieldsOf: react.api.TitleMonitor
		private surge.collection.GList headings	=>	a
	MethodsOf: react.api.TitleMonitor
		public void addHeading(react.api.MonitorHeading) 	=>	a
		public react.api.MonitorHeading getHeadFor(int) 	=>	c
		public java.lang.String getHotbarFor(int, boolean) 	=>	a
		public java.lang.String getHotbarHeadFor(int, boolean, react.controller.MonitorController, react.api.ReactPlayer, int) 	=>	a
		public int getMaxSelection() 	=>	a
		public int left(int) 	=>	a
		public int right(int) 	=>	b

Class: public react.command.CommandFreeze	=>	W
	Source: "CommandFreeze.java"
	FieldsOf: react.command.CommandFreeze
	MethodsOf: react.command.CommandFreeze
		public void fire(org.bukkit.command.CommandSender, java.lang.String[]) 	=>	a

Class: public react.command.CommandHelp	=>	X
	Source: "CommandHelp.java"
	FieldsOf: react.command.CommandHelp
	MethodsOf: react.command.CommandHelp
		public void fire(org.bukkit.command.CommandSender, java.lang.String[]) 	=>	a

Class: public react.command.CommandMonitor	=>	Y
	Source: "CommandMonitor.java"
	FieldsOf: react.command.CommandMonitor
	MethodsOf: react.command.CommandMonitor
		public void fire(org.bukkit.command.CommandSender, java.lang.String[]) 	=>	a

Class: public react.controller.ActionController	=>	aX
	Source: "ActionController.java"
	FieldsOf: react.controller.ActionController
	MethodsOf: react.controller.ActionController
		public void start() 	=>	a
		public void stop() 	=>	b
		public void tick() 	=>	c

Class: public react.controller.CommandController	=>	aY
	Source: "CommandController.java"
	FieldsOf: react.controller.CommandController
		private surge.collection.GList commands	=>	a
		private boolean k	=>	b
	MethodsOf: react.controller.CommandController
		public void begin() 	=>	d
		public void f(org.bukkit.command.CommandSender, java.lang.String) 	=>	b
		public void msg(org.bukkit.command.CommandSender, java.lang.String) 	=>	a
		public boolean onCommand(org.bukkit.command.CommandSender, org.bukkit.command.Command, java.lang.String, java.lang.String[]) 	NameNotChanged
		public void start() 	=>	a
		public void stop() 	=>	b
		public void tick() 	=>	c

Class: public react.controller.MonitorController	=>	aZ
	Source: "MonitorController.java"
	FieldsOf: react.controller.MonitorController
		public static int maxCooldown	=>	a
		private surge.collection.GMap posts	=>	c
		private react.api.TitleMonitor titleMonitor	=>	b
	MethodsOf: react.controller.MonitorController
		public float calcVolume(react.api.ReactPlayer) 	=>	a
		public boolean canMonitor(org.bukkit.entity.Player) 	=>	b
		private void changePost(react.api.ReactPlayer) 	=>	b
		public void constructMonitor() 	=>	d
		public java.lang.String getTickName() 	=>	h
		public react.api.TitleMonitor getTitleMonitor() 	=>	e
		private void handlePosting(react.api.ReactPlayer) 	=>	g
		private void handleScrolling(react.api.ReactPlayer) 	=>	e
		private void handleShifting(react.api.ReactPlayer) 	=>	f
		private void handleTriggers(react.api.ReactPlayer) 	=>	d
		public boolean isMonitoring(org.bukkit.entity.Player) 	=>	c
		public void on(org.bukkit.event.player.PlayerJoinEvent) 	=>	a
		public void on(org.bukkit.event.player.PlayerToggleSneakEvent) 	=>	a
		public void onTick() 	=>	g
		public java.lang.String prefixFor(react.api.ReactPlayer, int, int) 	=>	a
		public java.lang.String prefixForSub(react.api.ReactPlayer, surge.util.C, int) 	=>	a
		private void processPlayer(react.api.ReactPlayer) 	=>	c
		public void start() 	=>	a
		public void startMonitoring(org.bukkit.entity.Player) 	=>	d
		public void stop() 	=>	b
		public void stopMonitoring(org.bukkit.entity.Player) 	=>	e
		public void tick() 	=>	c
		public void tickMonitor(react.api.ReactPlayer) 	=>	h
		public void toggleMonitoring(org.bukkit.entity.Player) 	=>	a

Class: public react.controller.PlayerController	=>	a0
	Source: "PlayerController.java"
	FieldsOf: react.controller.PlayerController
		private surge.collection.GList players	=>	a
	MethodsOf: react.controller.PlayerController
		public react.api.ReactPlayer getPlayer(org.bukkit.entity.Player) 	=>	b
		public surge.collection.GList getPlayers() 	=>	d
		public boolean has(org.bukkit.entity.Player) 	=>	a
		public void on(org.bukkit.event.player.PlayerQuitEvent) 	=>	a
		public void start() 	=>	a
		public void stop() 	=>	b
		public void tick() 	=>	c

Class: public react.controller.SampleController	=>	a1
	Source: "SampleController.java"
	FieldsOf: react.controller.SampleController
		private surge.collection.GMap samplers	=>	a
		private surge.server.SuperSampler ss	=>	b
	MethodsOf: react.controller.SampleController
		private void constructSamplers() 	=>	d
		public react.api.ISampler getSampler(java.lang.String) 	=>	a
		public surge.server.SuperSampler getSuperSampler() 	=>	e
		public java.lang.String getTickName() 	=>	h
		public void onTick() 	=>	g
		public void registerSampler(react.api.ISampler) 	=>	a
		public void start() 	=>	a
		public void stop() 	=>	b
		public void tick() 	=>	c

Class: public react.sampler.SampleChunksLoaded	=>	ad
	Source: "SampleChunksLoaded.java"
	FieldsOf: react.sampler.SampleChunksLoaded
	MethodsOf: react.sampler.SampleChunksLoaded
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleChunksLoadedPerSecond	=>	ae
	Source: "SampleChunksLoadedPerSecond.java"
	FieldsOf: react.sampler.SampleChunksLoadedPerSecond
		private surge.math.Average a	=>	h
	MethodsOf: react.sampler.SampleChunksLoadedPerSecond
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleEntitiesDrops	=>	af
	Source: "SampleEntitiesDrops.java"
	FieldsOf: react.sampler.SampleEntitiesDrops
	MethodsOf: react.sampler.SampleEntitiesDrops
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleEntitiesLiving	=>	ag
	Source: "SampleEntitiesLiving.java"
	FieldsOf: react.sampler.SampleEntitiesLiving
	MethodsOf: react.sampler.SampleEntitiesLiving
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleEntitiesTiles	=>	ah
	Source: "SampleEntitiesTiles.java"
	FieldsOf: react.sampler.SampleEntitiesTiles
	MethodsOf: react.sampler.SampleEntitiesTiles
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleEntitiesTotal	=>	ai
	Source: "SampleEntitiesTotal.java"
	FieldsOf: react.sampler.SampleEntitiesTotal
	MethodsOf: react.sampler.SampleEntitiesTotal
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleMemoryAllocated	=>	aj
	Source: "SampleMemoryAllocated.java"
	FieldsOf: react.sampler.SampleMemoryAllocated
	MethodsOf: react.sampler.SampleMemoryAllocated
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleMemoryAllocationPerSecond	=>	ak
	Source: "SampleMemoryAllocationPerSecond.java"
	FieldsOf: react.sampler.SampleMemoryAllocationPerSecond
	MethodsOf: react.sampler.SampleMemoryAllocationPerSecond
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleMemoryFree	=>	al
	Source: "SampleMemoryFree.java"
	FieldsOf: react.sampler.SampleMemoryFree
	MethodsOf: react.sampler.SampleMemoryFree
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleMemoryMax	=>	am
	Source: "SampleMemoryMax.java"
	FieldsOf: react.sampler.SampleMemoryMax
	MethodsOf: react.sampler.SampleMemoryMax
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleMemoryUse	=>	an
	Source: "SampleMemoryUse.java"
	FieldsOf: react.sampler.SampleMemoryUse
	MethodsOf: react.sampler.SampleMemoryUse
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleTickTime	=>	ao
	Source: "SampleTickTime.java"
	FieldsOf: react.sampler.SampleTickTime
	MethodsOf: react.sampler.SampleTickTime
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleTickUtilization	=>	ap
	Source: "SampleTickUtilization.java"
	FieldsOf: react.sampler.SampleTickUtilization
	MethodsOf: react.sampler.SampleTickUtilization
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public react.sampler.SampleTicksPerSecond	=>	aq
	Source: "SampleTicksPerSecond.java"
	FieldsOf: react.sampler.SampleTicksPerSecond
	MethodsOf: react.sampler.SampleTicksPerSecond
		public void construct() 	=>	i
		public java.lang.String get() 	=>	h
		public void sample() 	=>	g

Class: public surge.Main	=>	cA
	Source: "Main.java"
	FieldsOf: surge.Main
		public static surge.collection.GMap anchors	=>	g
		private surge.collection.GList controllerSet	=>	f
		private surge.collection.GMap pluginInstances	=>	e
		private surge.collection.GList plugins	=>	d
	MethodsOf: surge.Main
		private void initializeAmps() 	=>	j
		public void onControllerRegistry() 	=>	d
		public void onPostInit() 	=>	b
		public void onPreInit() 	=>	c
		public void onStart(surge.util.Protocol) 	=>	a
		public void onStop() 	=>	a
		public void onTick() 	=>	g
		private void scanForAmps() 	=>	k
		private void shutDownAmps() 	=>	i

Class: public surge.PluginAmp	=>	av
	Source: "PluginAmp.java"
	FieldsOf: surge.PluginAmp
		private boolean connected	=>	b
		private int masterTask	=>	c
		private surge.control.AmpedPlugin plugin	=>	a
	MethodsOf: surge.PluginAmp
		static synthetic void access$000(surge.PluginAmp) 	NameNotChanged
		public void connect() 	=>	c
		public void disconnect() 	=>	e
		public surge.control.AmpedPlugin getPluginInstance() 	=>	a
		public boolean isConnected() 	=>	b
		private void masterTick() 	=>	d
		public int startRepeatingTask(int, int, java.lang.Runnable) 	=>	a
		public int startTask(int, java.lang.Runnable) 	=>	a
		public void stopTask(int) 	=>	a

Class: surge.PluginAmp$1	=>	av$a
	Source: "PluginAmp.java"
	FieldsOf: surge.PluginAmp$1
		final synthetic surge.PluginAmp this$0	NameNotChanged
	MethodsOf: surge.PluginAmp$1
		public void run() 	NameNotChanged

Class: surge.PluginAmp$2	=>	av$b
	Source: "PluginAmp.java"
	FieldsOf: surge.PluginAmp$2
		final synthetic surge.PluginAmp this$0	NameNotChanged
	MethodsOf: surge.PluginAmp$2
		public void run() 	NameNotChanged

Class: public surge.Surge	=>	aw
	Source: "Surge.java"
	FieldsOf: surge.Surge
		protected static surge.PluginAmp amp	=>	a
		private static surge.collection.GList atickComponents	=>	c
		private static surge.hotload.HotloadManager hotloadmgr	=>	e
		private static java.lang.Thread mainThread	=>	f
		private static surge.sched.TaskManager taskmgr	=>	d
		private static surge.collection.GList tickComponents	=>	b
	MethodsOf: surge.Surge
		public static surge.PluginAmp createAmp(surge.control.AmpedPlugin) 	=>	a
		public static java.io.File folder() 	=>	a
		public static java.io.File folder(java.lang.String) 	=>	a
		public static surge.PluginAmp getAmp() 	=>	j
		public static surge.collection.GList getAsyncTickComponents() 	=>	f
		public static surge.hotload.HotloadManager getHotloadManager() 	=>	l
		public static java.io.File getPluginJarFile() 	=>	b
		public static java.lang.Thread getServerThread() 	=>	d
		public static surge.sched.TaskManager getTaskManager() 	=>	k
		public static surge.collection.GList getTickComponents() 	=>	e
		public static boolean hasAmp() 	=>	i
		public static boolean isMainThread() 	=>	g
		public static void register(org.bukkit.event.Listener) 	=>	a
		public static void registerTicked(surge.sched.IMasterTickComponent) 	=>	a
		private static void startup() 	=>	c
		protected static void stopAmp() 	=>	h
		public static void unregister(org.bukkit.event.Listener) 	=>	b
		public static void unregisterTicked(surge.sched.IMasterTickComponent) 	=>	b

Class: public surge.cluster.Cluster	=>	ax
	Source: "Cluster.java"
	FieldsOf: surge.cluster.Cluster
		private java.lang.Object t	=>	b
		private surge.cluster.ClusterType type	=>	a
	MethodsOf: surge.cluster.Cluster
		public java.lang.Object get() 	=>	b
		public surge.cluster.ClusterType getType() 	=>	a
		public void set(java.lang.Object) 	=>	a

Class: public surge.cluster.ClusterBoolean	=>	ay
	Source: "ClusterBoolean.java"
	FieldsOf: surge.cluster.ClusterBoolean
	MethodsOf: surge.cluster.ClusterBoolean

Class: public surge.cluster.ClusterDouble	=>	az
	Source: "ClusterDouble.java"
	FieldsOf: surge.cluster.ClusterDouble
	MethodsOf: surge.cluster.ClusterDouble

Class: public surge.cluster.ClusterInt	=>	aA
	Source: "ClusterInt.java"
	FieldsOf: surge.cluster.ClusterInt
	MethodsOf: surge.cluster.ClusterInt

Class: public surge.cluster.ClusterLong	=>	aB
	Source: "ClusterLong.java"
	FieldsOf: surge.cluster.ClusterLong
	MethodsOf: surge.cluster.ClusterLong

Class: public surge.cluster.ClusterString	=>	aC
	Source: "ClusterString.java"
	FieldsOf: surge.cluster.ClusterString
	MethodsOf: surge.cluster.ClusterString

Class: public surge.cluster.ClusterStringList	=>	aD
	Source: "ClusterStringList.java"
	FieldsOf: surge.cluster.ClusterStringList
	MethodsOf: surge.cluster.ClusterStringList

Class: public final enum surge.cluster.ClusterType	=>	i
	Source: "ClusterType.java"
	FieldsOf: surge.cluster.ClusterType
		private static final synthetic surge.cluster.ClusterType[] $VALUES	=>	a
		public static final enum surge.cluster.ClusterType BOOLEAN	NameNotChanged
		public static final enum surge.cluster.ClusterType DOUBLE	NameNotChanged
		public static final enum surge.cluster.ClusterType INT	NameNotChanged
		public static final enum surge.cluster.ClusterType LONG	NameNotChanged
		public static final enum surge.cluster.ClusterType STRING	NameNotChanged
		public static final enum surge.cluster.ClusterType STRING_LIST	NameNotChanged
	MethodsOf: surge.cluster.ClusterType
		public static surge.cluster.ClusterType valueOf(java.lang.String) 	NameNotChanged
		public static surge.cluster.ClusterType[] values() 	NameNotChanged

Class: public surge.cluster.ConfigurationDataInput	=>	aE
	Source: "ConfigurationDataInput.java"
	FieldsOf: surge.cluster.ConfigurationDataInput
		private static synthetic int[] $SWITCH_TABLE$surge$cluster$ClusterType	=>	a
	MethodsOf: surge.cluster.ConfigurationDataInput
		static synthetic int[] $SWITCH_TABLE$surge$cluster$ClusterType() 	=>	a
		public surge.cluster.DataCluster fillDefaults(surge.cluster.IConfigurable) 	=>	a
		public void read(surge.cluster.IConfigurable, java.io.File) 	=>	a

Class: public surge.cluster.ConfigurationDataOutput	=>	aF
	Source: "ConfigurationDataOutput.java"
	FieldsOf: surge.cluster.ConfigurationDataOutput
	MethodsOf: surge.cluster.ConfigurationDataOutput
		public void write(surge.cluster.IConfigurable, java.io.File) 	=>	a

Class: public surge.cluster.DataCluster	=>	aG
	Source: "DataCluster.java"
	FieldsOf: surge.cluster.DataCluster
		private surge.collection.GMap clusters	=>	a
	MethodsOf: surge.cluster.DataCluster
		public boolean contains(java.lang.String) 	=>	a
		public void fromFileConfiguration(org.bukkit.configuration.file.FileConfiguration) 	=>	a
		public void fromJson(surge.json.JSONObject) 	=>	a
		public java.lang.Object get(java.lang.String) 	=>	d
		public boolean getBoolean(java.lang.String) 	=>	h
		public double getDouble(java.lang.String) 	=>	g
		public int getInt(java.lang.String) 	=>	c
		public long getLong(java.lang.String) 	=>	e
		public java.lang.String getString(java.lang.String) 	=>	f
		public java.util.List getStringList(java.lang.String) 	=>	i
		public surge.cluster.ClusterType getType(java.lang.String) 	=>	b
		public surge.collection.GList keys() 	=>	a
		public void set(java.lang.String, boolean) 	=>	a
		public void set(java.lang.String, double) 	=>	a
		public void set(java.lang.String, int) 	=>	a
		public void set(java.lang.String, java.lang.String) 	=>	a
		public void set(java.lang.String, java.util.List) 	=>	a
		public void set(java.lang.String, long) 	=>	a
		public org.bukkit.configuration.file.FileConfiguration toFileConfiguration() 	=>	c
		public surge.json.JSONObject toJson() 	=>	b
		public void trySet(java.lang.String, java.lang.Object) 	=>	a

Class: public abstract surge.cluster.ICluster	=>	aH
	Source: "ICluster.java"
	FieldsOf: surge.cluster.ICluster
	MethodsOf: surge.cluster.ICluster
		public abstract java.lang.Object get() 	=>	b
		public abstract surge.cluster.ClusterType getType() 	=>	a
		public abstract void set(java.lang.Object) 	=>	a

Class: public abstract surge.cluster.IConfigurable	=>	aI
	Source: "IConfigurable.java"
	FieldsOf: surge.cluster.IConfigurable
	MethodsOf: surge.cluster.IConfigurable

Class: public abstract surge.cluster.IDataInput	=>	aJ
	Source: "IDataInput.java"
	FieldsOf: surge.cluster.IDataInput
	MethodsOf: surge.cluster.IDataInput
		public abstract surge.cluster.DataCluster read(java.io.File) 	=>	a

Class: public abstract surge.cluster.IDataOutput	=>	aK
	Source: "IDataOutput.java"
	FieldsOf: surge.cluster.IDataOutput
	MethodsOf: surge.cluster.IDataOutput
		public abstract void write(surge.cluster.DataCluster, java.io.File) 	=>	a

Class: public abstract annotation surge.cluster.Key	=>	aL
	Source: "Key.java"
	FieldsOf: surge.cluster.Key
	MethodsOf: surge.cluster.Key
		public abstract java.lang.String value() 	NameNotChanged

Class: public abstract annotation surge.cluster.KeyPointer	=>	aM
	Source: "KeyPointer.java"
	FieldsOf: surge.cluster.KeyPointer
	MethodsOf: surge.cluster.KeyPointer
		public abstract int value() 	NameNotChanged

Class: public abstract annotation surge.cluster.KeyStore	=>	aN
	Source: "KeyStore.java"
	FieldsOf: surge.cluster.KeyStore
	MethodsOf: surge.cluster.KeyStore

Class: public surge.cluster.ReflectedConfigurationException	=>	w
	Source: "ReflectedConfigurationException.java"
	FieldsOf: surge.cluster.ReflectedConfigurationException
		private static final long serialVersionUID	NameNotChanged
	MethodsOf: surge.cluster.ReflectedConfigurationException

Class: public surge.cluster.YamlDataInput	=>	aO
	Source: "YamlDataInput.java"
	FieldsOf: surge.cluster.YamlDataInput
	MethodsOf: surge.cluster.YamlDataInput
		public surge.cluster.DataCluster read(java.io.File) 	=>	a

Class: public surge.cluster.YamlDataOutput	=>	aP
	Source: "YamlDataOutput.java"
	FieldsOf: surge.cluster.YamlDataOutput
	MethodsOf: surge.cluster.YamlDataOutput
		public void write(surge.cluster.DataCluster, java.io.File) 	=>	a

Class: public surge.collection.GBiset	=>	aQ
	Source: "GBiset.java"
	FieldsOf: surge.collection.GBiset
		private java.lang.Object a	=>	b
		private java.lang.Object b	=>	c
	MethodsOf: surge.collection.GBiset
		public java.lang.Object getA() 	=>	a
		public java.lang.Object getB() 	=>	b
		public void setA(java.lang.Object) 	=>	a
		public void setB(java.lang.Object) 	=>	b

Class: public surge.collection.GList	=>	cw
	Source: "GList.java"
	FieldsOf: surge.collection.GList
		private static final long serialVersionUID	NameNotChanged
	MethodsOf: surge.collection.GList
		public void add(java.lang.Object[]) 	=>	a
		public void add(java.util.List) 	=>	a
		public void addFirst(java.lang.Object) 	=>	a
		public surge.collection.GList copy() 	=>	j
		public boolean hasDuplicates() 	=>	g
		public boolean hasIndex(int) 	=>	a
		public java.lang.Object mostCommon() 	=>	a
		public java.lang.Object pickRandom() 	=>	d
		public java.lang.Object pop() 	=>	k
		public void push(java.lang.Object, int) 	=>	a
		public surge.collection.GList qadd(java.lang.Object) 	=>	b
		public surge.collection.GList qdel(java.lang.Object) 	=>	c
		public void remove(surge.collection.GList) 	=>	a
		public surge.collection.GList removeDuplicates() 	=>	f
		public surge.collection.GList reverse() 	=>	i
		public surge.collection.GList shuffle() 	=>	b
		public void sort() 	=>	h
		public surge.collection.GList split() 	=>	c
		public surge.collection.GList stringList() 	=>	e
		public java.lang.String toString() 	NameNotChanged
		public java.lang.String toString(java.lang.String) 	=>	a

Class: surge.collection.GList$1	=>	cw$a
	Source: "GList.java"
	FieldsOf: surge.collection.GList$1
		final synthetic surge.collection.GList this$0	NameNotChanged
	MethodsOf: surge.collection.GList$1
		public int compare(java.lang.Object, java.lang.Object) 	NameNotChanged

Class: public surge.collection.GMap	=>	cx
	Source: "GMap.java"
	FieldsOf: surge.collection.GMap
		private static final long serialVersionUID	NameNotChanged
	MethodsOf: surge.collection.GMap
		public surge.collection.GMap append(surge.collection.GMap) 	=>	a
		public surge.collection.GMap copy() 	=>	a
		public java.lang.Object findKey(java.lang.Object) 	=>	a
		public surge.collection.GMap flip() 	=>	b
		public surge.collection.GList get(surge.collection.GList) 	=>	a
		public surge.collection.GList k() 	=>	c
		public void put(surge.collection.GList, surge.collection.GList) 	=>	a
		public void put(surge.collection.GMap) 	=>	b
		public void putNVD(java.lang.Object, java.lang.Object) 	=>	b
		public surge.collection.GMap qput(java.lang.Object, java.lang.Object) 	=>	a
		public surge.collection.GMap removeDuplicateKeys() 	=>	e
		public surge.collection.GMap removeDuplicateValues() 	=>	f
		public java.lang.String toString() 	NameNotChanged
		public surge.collection.GList v() 	=>	d

Class: public surge.collection.GQuadraset	=>	aR
	Source: "GQuadraset.java"
	FieldsOf: surge.collection.GQuadraset
		private java.lang.Object a	=>	b
		private java.lang.Object b	=>	c
		private java.lang.Object c	=>	d
		private java.lang.Object d	=>	e
		private static final long serialVersionUID	NameNotChanged
	MethodsOf: surge.collection.GQuadraset
		public java.lang.Object getA() 	=>	a
		public java.lang.Object getB() 	=>	b
		public java.lang.Object getC() 	=>	c
		public java.lang.Object getD() 	=>	d
		public void setA(java.lang.Object) 	=>	a
		public void setB(java.lang.Object) 	=>	b
		public void setC(java.lang.Object) 	=>	c
		public void setD(java.lang.Object) 	=>	d

Class: public surge.collection.GSet	=>	cy
	Source: "GSet.java"
	FieldsOf: surge.collection.GSet
		private static final long serialVersionUID	NameNotChanged
	MethodsOf: surge.collection.GSet

Class: public surge.collection.GSound	=>	aS
	Source: "GSound.java"
	FieldsOf: surge.collection.GSound
		private org.bukkit.Sound iSound	=>	b
		private java.lang.Float pitch	=>	d
		private java.lang.String sound	=>	a
		private java.lang.Float volume	=>	c
	MethodsOf: surge.collection.GSound
		public java.lang.Float getPitch() 	=>	d
		public java.lang.String getSound() 	=>	a
		public java.lang.Float getVolume() 	=>	c
		public org.bukkit.Sound getiSound() 	=>	b
		public void play(org.bukkit.Location) 	=>	a
		public void play(org.bukkit.entity.Player) 	=>	a
		public void play(org.bukkit.entity.Player, org.bukkit.util.Vector) 	=>	a
		public void setPitch(java.lang.Float) 	=>	b
		public void setSound(java.lang.String) 	=>	a
		public void setVolume(java.lang.Float) 	=>	a
		public void setiSound(org.bukkit.Sound) 	=>	a

Class: public surge.collection.GTriset	=>	aT
	Source: "GTriset.java"
	FieldsOf: surge.collection.GTriset
		private java.lang.Object a	=>	b
		private java.lang.Object b	=>	c
		private java.lang.Object c	=>	d
	MethodsOf: surge.collection.GTriset
		public java.lang.Object getA() 	=>	a
		public java.lang.Object getB() 	=>	b
		public java.lang.Object getC() 	=>	c
		public void setA(java.lang.Object) 	=>	a
		public void setB(java.lang.Object) 	=>	b
		public void setC(java.lang.Object) 	=>	c

Class: public surge.collection.Snippet	=>	aU
	Source: "Snippet.java"
	FieldsOf: surge.collection.Snippet
	MethodsOf: surge.collection.Snippet

Class: public abstract surge.control.AmpedPlugin	=>	cz
	Source: "AmpedPlugin.java"
	FieldsOf: surge.control.AmpedPlugin
		private surge.collection.GList controllers	=>	a
		private surge.server.CoreTickThread ctt	=>	c
		private surge.pool.ParallelPoolManager pp	=>	b
	MethodsOf: surge.control.AmpedPlugin
		public surge.collection.GList getControllers() 	=>	e
		public surge.pool.ParallelPoolManager getThreadPool() 	=>	f
		public java.lang.String getTickName() 	=>	h
		public abstract void onControllerRegistry() 	=>	d
		public void onDisable() 	NameNotChanged
		public void onEnable() 	NameNotChanged
		public void onLoad() 	NameNotChanged
		public abstract void onPostInit() 	=>	b
		public abstract void onPreInit() 	=>	c
		public abstract void onStart(surge.util.Protocol) 	=>	a
		public abstract void onStop() 	=>	a
		public void onTick() 	=>	g
		public void registerController(surge.control.IController) 	=>	a

Class: public abstract annotation surge.control.Control	=>	aV
	Source: "Control.java"
	FieldsOf: surge.control.Control
	MethodsOf: surge.control.Control

Class: public abstract surge.control.Controller	=>	aW
	Source: "Controller.java"
	FieldsOf: surge.control.Controller
	MethodsOf: surge.control.Controller

Class: public abstract annotation surge.control.Disable	=>	a2
	Source: "Disable.java"
	FieldsOf: surge.control.Disable
	MethodsOf: surge.control.Disable

Class: public abstract annotation surge.control.Enable	=>	a3
	Source: "Enable.java"
	FieldsOf: surge.control.Enable
	MethodsOf: surge.control.Enable

Class: public abstract surge.control.IController	=>	a4
	Source: "IController.java"
	FieldsOf: surge.control.IController
	MethodsOf: surge.control.IController
		public abstract void start() 	=>	a
		public abstract void stop() 	=>	b
		public abstract void tick() 	=>	c

Class: public abstract annotation surge.control.Instance	=>	a5
	Source: "Instance.java"
	FieldsOf: surge.control.Instance
	MethodsOf: surge.control.Instance

Class: public abstract annotation surge.control.Plugin	=>	a6
	Source: "Plugin.java"
	FieldsOf: surge.control.Plugin
	MethodsOf: surge.control.Plugin

Class: public abstract surge.control.SurgePlugin	=>	a7
	Source: "SurgePlugin.java"
	FieldsOf: surge.control.SurgePlugin
	MethodsOf: surge.control.SurgePlugin
		public abstract surge.collection.GList getControllers() 	=>	e
		public abstract surge.pool.ParallelPoolManager getThreadPool() 	=>	f
		public abstract void onControllerRegistry() 	=>	d
		public abstract void onPostInit() 	=>	b
		public abstract void onPreInit() 	=>	c
		public abstract void onStart(surge.util.Protocol) 	=>	a
		public abstract void onStop() 	=>	a
		public abstract void registerController(surge.control.IController) 	=>	a

Class: public surge.hotload.HotloadManager	=>	a8
	Source: "HotloadManager.java"
	FieldsOf: surge.hotload.HotloadManager
		private surge.collection.GMap fileacts	=>	c
		private surge.collection.GMap filemods	=>	a
		private surge.collection.GMap filesizes	=>	b
	MethodsOf: surge.hotload.HotloadManager
		public java.lang.String getTickName() 	=>	h
		public void onTick() 	=>	g
		public void track(java.io.File, java.lang.Runnable) 	=>	a
		public void untrack(java.io.File) 	=>	a
		public void untrackall() 	=>	a

Class: public surge.json.HTTP	=>	a9
	Source: "HTTP.java"
	FieldsOf: surge.json.HTTP
		public static final java.lang.String CRLF	=>	a
	MethodsOf: surge.json.HTTP
		public static surge.json.JSONObject toJSONObject(java.lang.String) 	=>	a
		public static java.lang.String toString(surge.json.JSONObject) 	=>	a

Class: public surge.json.HTTPTokener	=>	be
	Source: "HTTPTokener.java"
	FieldsOf: surge.json.HTTPTokener
	MethodsOf: surge.json.HTTPTokener
		public java.lang.String nextToken() 	=>	g

Class: public surge.json.JSONArray	=>	a_
	Source: "JSONArray.java"
	FieldsOf: surge.json.JSONArray
		private final java.util.ArrayList myArrayList	=>	a
	MethodsOf: surge.json.JSONArray
		public java.lang.Object get(int) 	=>	a
		public java.math.BigDecimal getBigDecimal(int) 	=>	d
		public java.math.BigInteger getBigInteger(int) 	=>	e
		public boolean getBoolean(int) 	=>	b
		public double getDouble(int) 	=>	c
		public java.lang.Enum getEnum(java.lang.Class, int) 	=>	a
		public int getInt(int) 	=>	f
		public surge.json.JSONArray getJSONArray(int) 	=>	g
		public surge.json.JSONObject getJSONObject(int) 	=>	h
		public long getLong(int) 	=>	i
		public java.lang.String getString(int) 	=>	j
		public boolean isNull(int) 	=>	k
		public java.util.Iterator iterator() 	NameNotChanged
		public java.lang.String join(java.lang.String) 	=>	a
		public int length() 	=>	a
		public java.lang.Object opt(int) 	=>	l
		public java.math.BigDecimal optBigDecimal(int, java.math.BigDecimal) 	=>	a
		public java.math.BigInteger optBigInteger(int, java.math.BigInteger) 	=>	a
		public boolean optBoolean(int) 	=>	m
		public boolean optBoolean(int, boolean) 	=>	a
		public double optDouble(int) 	=>	n
		public double optDouble(int, double) 	=>	a
		public java.lang.Enum optEnum(java.lang.Class, int) 	=>	b
		public java.lang.Enum optEnum(java.lang.Class, int, java.lang.Enum) 	=>	a
		public int optInt(int) 	=>	o
		public int optInt(int, int) 	=>	a
		public surge.json.JSONArray optJSONArray(int) 	=>	p
		public surge.json.JSONObject optJSONObject(int) 	=>	q
		public long optLong(int) 	=>	r
		public long optLong(int, long) 	=>	a
		public java.lang.String optString(int) 	=>	s
		public java.lang.String optString(int, java.lang.String) 	=>	a
		public surge.json.JSONArray put(boolean) 	=>	a
		public surge.json.JSONArray put(double) 	=>	a
		public surge.json.JSONArray put(int) 	=>	t
		public surge.json.JSONArray put(int, boolean) 	=>	b
		public surge.json.JSONArray put(int, double) 	=>	b
		public surge.json.JSONArray put(int, int) 	=>	b
		public surge.json.JSONArray put(int, java.lang.Object) 	=>	a
		public surge.json.JSONArray put(int, java.util.Collection) 	=>	a
		public surge.json.JSONArray put(int, java.util.Map) 	=>	a
		public surge.json.JSONArray put(int, long) 	=>	b
		public surge.json.JSONArray put(java.lang.Object) 	=>	a
		public surge.json.JSONArray put(java.util.Collection) 	=>	a
		public surge.json.JSONArray put(java.util.Map) 	=>	a
		public surge.json.JSONArray put(long) 	=>	a
		public java.lang.Object remove(int) 	=>	u
		public boolean similar(java.lang.Object) 	=>	b
		public surge.json.JSONObject toJSONObject(surge.json.JSONArray) 	=>	a
		public java.lang.String toString() 	NameNotChanged
		public java.lang.String toString(int) 	=>	v
		public java.io.Writer write(java.io.Writer) 	=>	a
		java.io.Writer write(java.io.Writer, int, int) 	=>	a

Class: public surge.json.JSONException	=>	cq
	Source: "JSONException.java"
	FieldsOf: surge.json.JSONException
		private java.lang.Throwable cause	=>	a
		private static final long serialVersionUID	NameNotChanged
	MethodsOf: surge.json.JSONException
		public java.lang.Throwable getCause() 	NameNotChanged

Class: public surge.json.JSONML	=>	ba
	Source: "JSONML.java"
	FieldsOf: surge.json.JSONML
	MethodsOf: surge.json.JSONML
		private static java.lang.Object parse(surge.json.XMLTokener, boolean, surge.json.JSONArray) 	=>	a
		public static surge.json.JSONArray toJSONArray(java.lang.String) 	=>	a
		public static surge.json.JSONArray toJSONArray(surge.json.XMLTokener) 	=>	a
		public static surge.json.JSONObject toJSONObject(java.lang.String) 	=>	b
		public static surge.json.JSONObject toJSONObject(surge.json.XMLTokener) 	=>	b
		public static java.lang.String toString(surge.json.JSONArray) 	=>	a
		public static java.lang.String toString(surge.json.JSONObject) 	=>	a

Class: public surge.json.JSONObject	=>	bb
	Source: "JSONObject.java"
	FieldsOf: surge.json.JSONObject
		public static final java.lang.Object NULL	=>	b
		private final java.util.Map map	=>	a
	MethodsOf: surge.json.JSONObject
		public surge.json.JSONObject accumulate(java.lang.String, java.lang.Object) 	=>	a
		public surge.json.JSONObject append(java.lang.String, java.lang.Object) 	=>	b
		public static java.lang.String doubleToString(double) 	=>	a
		public java.lang.Object get(java.lang.String) 	=>	a
		public java.math.BigDecimal getBigDecimal(java.lang.String) 	=>	d
		public java.math.BigInteger getBigInteger(java.lang.String) 	=>	c
		public boolean getBoolean(java.lang.String) 	=>	b
		public double getDouble(java.lang.String) 	=>	e
		public java.lang.Enum getEnum(java.lang.Class, java.lang.String) 	=>	a
		public int getInt(java.lang.String) 	=>	f
		public surge.json.JSONArray getJSONArray(java.lang.String) 	=>	g
		public surge.json.JSONObject getJSONObject(java.lang.String) 	=>	h
		public long getLong(java.lang.String) 	=>	i
		public static java.lang.String[] getNames(java.lang.Object) 	=>	a
		public static java.lang.String[] getNames(surge.json.JSONObject) 	=>	a
		public java.lang.String getString(java.lang.String) 	=>	j
		public boolean has(java.lang.String) 	=>	k
		public surge.json.JSONObject increment(java.lang.String) 	=>	l
		static final void indent(java.io.Writer, int) 	=>	a
		public boolean isNull(java.lang.String) 	=>	m
		public java.util.Set keySet() 	=>	b
		public java.util.Iterator keys() 	=>	a
		public int length() 	=>	c
		public surge.json.JSONArray names() 	=>	d
		public static java.lang.String numberToString(java.lang.Number) 	=>	a
		public java.lang.Object opt(java.lang.String) 	=>	n
		public java.math.BigDecimal optBigDecimal(java.lang.String, java.math.BigDecimal) 	=>	a
		public java.math.BigInteger optBigInteger(java.lang.String, java.math.BigInteger) 	=>	a
		public boolean optBoolean(java.lang.String) 	=>	o
		public boolean optBoolean(java.lang.String, boolean) 	=>	a
		public double optDouble(java.lang.String) 	=>	p
		public double optDouble(java.lang.String, double) 	=>	a
		public java.lang.Enum optEnum(java.lang.Class, java.lang.String) 	=>	b
		public java.lang.Enum optEnum(java.lang.Class, java.lang.String, java.lang.Enum) 	=>	a
		public int optInt(java.lang.String) 	=>	q
		public int optInt(java.lang.String, int) 	=>	a
		public surge.json.JSONArray optJSONArray(java.lang.String) 	=>	r
		public surge.json.JSONObject optJSONObject(java.lang.String) 	=>	s
		public long optLong(java.lang.String) 	=>	t
		public long optLong(java.lang.String, long) 	=>	a
		public java.lang.String optString(java.lang.String) 	=>	u
		public java.lang.String optString(java.lang.String, java.lang.String) 	=>	a
		private void populateMap(java.lang.Object) 	=>	b
		public surge.json.JSONObject put(java.lang.String, boolean) 	=>	b
		public surge.json.JSONObject put(java.lang.String, double) 	=>	b
		public surge.json.JSONObject put(java.lang.String, int) 	=>	b
		public surge.json.JSONObject put(java.lang.String, java.lang.Object) 	=>	c
		public surge.json.JSONObject put(java.lang.String, java.util.Collection) 	=>	a
		public surge.json.JSONObject put(java.lang.String, java.util.Map) 	=>	a
		public surge.json.JSONObject put(java.lang.String, long) 	=>	b
		public surge.json.JSONObject putOnce(java.lang.String, java.lang.Object) 	=>	d
		public surge.json.JSONObject putOpt(java.lang.String, java.lang.Object) 	=>	e
		public static java.lang.String quote(java.lang.String) 	=>	v
		public static java.io.Writer quote(java.lang.String, java.io.Writer) 	=>	a
		public java.lang.Object remove(java.lang.String) 	=>	w
		public boolean similar(java.lang.Object) 	=>	c
		public static java.lang.Object stringToValue(java.lang.String) 	=>	x
		public static void testValidity(java.lang.Object) 	=>	d
		public surge.json.JSONArray toJSONArray(surge.json.JSONArray) 	=>	a
		public java.lang.String toString() 	NameNotChanged
		public java.lang.String toString(int) 	=>	a
		public static java.lang.String valueToString(java.lang.Object) 	=>	e
		public static java.lang.Object wrap(java.lang.Object) 	=>	f
		public java.io.Writer write(java.io.Writer) 	=>	a
		java.io.Writer write(java.io.Writer, int, int) 	=>	a
		static final java.io.Writer writeValue(java.io.Writer, java.lang.Object, int, int) 	=>	a

Class: final surge.json.JSONObject$Null	=>	bb$a
	Source: "JSONObject.java"
	FieldsOf: surge.json.JSONObject$Null
	MethodsOf: surge.json.JSONObject$Null
		protected final java.lang.Object clone() 	NameNotChanged
		public boolean equals(java.lang.Object) 	NameNotChanged
		public java.lang.String toString() 	NameNotChanged

Class: public abstract surge.json.JSONString	=>	bc
	Source: "JSONString.java"
	FieldsOf: surge.json.JSONString
	MethodsOf: surge.json.JSONString
		public abstract java.lang.String toJSONString() 	=>	a

Class: public surge.json.JSONStringer	=>	bh
	Source: "JSONStringer.java"
	FieldsOf: surge.json.JSONStringer
	MethodsOf: surge.json.JSONStringer
		public java.lang.String toString() 	NameNotChanged

Class: public surge.json.JSONTokener	=>	bd
	Source: "JSONTokener.java"
	FieldsOf: surge.json.JSONTokener
		private long character	=>	a
		private boolean eof	=>	b
		private long index	=>	c
		private long line	=>	d
		private char previous	=>	e
		private java.io.Reader reader	=>	f
		private boolean usePrevious	=>	g
	MethodsOf: surge.json.JSONTokener
		public void back() 	=>	a
		public static int dehexchar(char) 	=>	a
		public boolean end() 	=>	b
		public boolean more() 	=>	c
		public char next() 	=>	d
		public char next(char) 	=>	b
		public java.lang.String next(int) 	=>	a
		public char nextClean() 	=>	e
		public java.lang.String nextString(char) 	=>	c
		public java.lang.String nextTo(char) 	=>	d
		public java.lang.String nextTo(java.lang.String) 	=>	a
		public java.lang.Object nextValue() 	=>	f
		public char skipTo(char) 	=>	e
		public surge.json.JSONException syntaxError(java.lang.String) 	=>	b
		public java.lang.String toString() 	NameNotChanged

Class: public surge.json.JSONWriter	=>	bg
	Source: "JSONWriter.java"
	FieldsOf: surge.json.JSONWriter
		private boolean comma	=>	b
		private static final int maxdepth	=>	a
		protected char mode	=>	c
		private final surge.json.JSONObject[] stack	=>	d
		private int top	=>	e
		protected java.io.Writer writer	=>	f
	MethodsOf: surge.json.JSONWriter
		private surge.json.JSONWriter append(java.lang.String) 	=>	a
		public surge.json.JSONWriter array() 	=>	a
		private surge.json.JSONWriter end(char, char) 	=>	a
		public surge.json.JSONWriter endArray() 	=>	b
		public surge.json.JSONWriter endObject() 	=>	c
		public surge.json.JSONWriter key(java.lang.String) 	=>	b
		public surge.json.JSONWriter object() 	=>	d
		private void pop(char) 	=>	a
		private void push(surge.json.JSONObject) 	=>	a
		public surge.json.JSONWriter value(boolean) 	=>	a
		public surge.json.JSONWriter value(double) 	=>	a
		public surge.json.JSONWriter value(java.lang.Object) 	=>	a
		public surge.json.JSONWriter value(long) 	=>	a

Class: public surge.json.XML	=>	bi
	Source: "XML.java"
	FieldsOf: surge.json.XML
		public static final java.lang.Character AMP	=>	a
		public static final java.lang.Character APOS	=>	b
		public static final java.lang.Character BANG	=>	c
		public static final java.lang.Character EQ	=>	d
		public static final java.lang.Character GT	=>	e
		public static final java.lang.Character LT	=>	f
		public static final java.lang.Character QUEST	=>	g
		public static final java.lang.Character QUOT	=>	h
		public static final java.lang.Character SLASH	=>	i
	MethodsOf: surge.json.XML
		public static java.lang.String escape(java.lang.String) 	=>	a
		public static void noSpace(java.lang.String) 	=>	b
		private static boolean parse(surge.json.XMLTokener, surge.json.JSONObject, java.lang.String) 	=>	a
		public static java.lang.Object stringToValue(java.lang.String) 	=>	c
		public static surge.json.JSONObject toJSONObject(java.lang.String) 	=>	d
		public static java.lang.String toString(java.lang.Object) 	=>	a
		public static java.lang.String toString(java.lang.Object, java.lang.String) 	=>	a

Class: public surge.json.XMLTokener	=>	bf
	Source: "XMLTokener.java"
	FieldsOf: surge.json.XMLTokener
		public static final java.util.HashMap entity	=>	h
	MethodsOf: surge.json.XMLTokener
		public java.lang.String nextCDATA() 	=>	g
		public java.lang.Object nextContent() 	=>	h
		public java.lang.Object nextEntity(char) 	=>	f
		public java.lang.Object nextMeta() 	=>	i
		public java.lang.Object nextToken() 	=>	j
		public boolean skipPast(java.lang.String) 	=>	c

Class: public surge.math.ArrayUtils	=>	bj
	Source: "ArrayUtils.java"
	FieldsOf: surge.math.ArrayUtils
	MethodsOf: surge.math.ArrayUtils
		public static void fill(double[], double) 	=>	b
		public static void shiftRight(double[], double) 	=>	a
		public static void wrapRight(double[]) 	=>	a

Class: public surge.math.Average	=>	bk
	Source: "Average.java"
	FieldsOf: surge.math.Average
		private double average	=>	b
		private boolean dirty	=>	c
		private double[] values	=>	a
	MethodsOf: surge.math.Average
		private void calculateAverage() 	=>	b
		public double getAverage() 	=>	a
		public void put(double) 	=>	a

Class: public surge.math.M	=>	bl
	Source: "M.java"
	FieldsOf: surge.math.M
		private static double[] fastsqrt	=>	a
		private static final int modulus	=>	c
		private static final int precision	=>	b
		private static final float[] sin	=>	d
	MethodsOf: surge.math.M
		public static double avg(surge.collection.GList) 	=>	a
		public static int chunkShift(int) 	=>	c
		public static double clip(double, double, double) 	=>	a
		public static float cos(float) 	=>	b
		public static surge.collection.GList cradShift(org.bukkit.Location, double) 	=>	b
		public static double distance(org.bukkit.Location, org.bukkit.Location) 	=>	a
		public static double dof(double, double) 	=>	a
		public static double evaluate(java.lang.String) 	=>	a
		public static double evaluate(java.lang.String, java.lang.Double[]) 	=>	a
		public static int fromRoman(java.lang.String) 	=>	b
		public static double fsqrt(double) 	=>	a
		public static surge.collection.GList getChunks(org.bukkit.Chunk, int) 	=>	a
		public static org.bukkit.block.Block highestBlock(org.bukkit.Location, int, int) 	=>	a
		public static boolean isLoaded(org.bukkit.Location) 	=>	b
		public static boolean isLoaded(org.bukkit.Location, double) 	=>	a
		public static boolean isLoaded(org.bukkit.World, int, int) 	=>	a
		public static void lim(surge.collection.GList, int) 	=>	a
		public static int max(int[]) 	=>	a
		public static double maxSafeRadius(org.bukkit.Location) 	=>	a
		public static double maxSafeRadius(org.bukkit.Location, double, double) 	=>	a
		public static int min(int[]) 	=>	b
		public static long ms() 	=>	b
		public static long ns() 	=>	a
		public static boolean r(java.lang.Double) 	=>	a
		public static int rand(int, int) 	=>	a
		private static java.lang.String repeat(java.lang.String, int) 	=>	a
		public static float sin(float) 	=>	a
		private static float sinLookup(int) 	=>	b
		public static double ticksFromNS(long) 	=>	a
		public static java.lang.String toRoman(int) 	=>	a
		public static double tps(long, int) 	=>	a
		public static boolean within(int, int, int) 	=>	a
		public static boolean within(org.bukkit.Location, org.bukkit.Location, java.lang.Double) 	=>	a

Class: public surge.math.Profiler	=>	bm
	Source: "Profiler.java"
	FieldsOf: surge.math.Profiler
		private long millis	=>	c
		private long nanos	=>	a
		private boolean profiling	=>	f
		private long startMillis	=>	d
		private long startNano	=>	b
		private double time	=>	e
	MethodsOf: surge.math.Profiler
		public void begin() 	=>	a
		public void end() 	=>	b
		public double getHours() 	=>	g
		public long getMillis() 	=>	l
		public double getMilliseconds() 	=>	h
		public double getMinutes() 	=>	f
		public long getNanos() 	=>	j
		public long getNanoseconds() 	=>	i
		public double getSeconds() 	=>	e
		public long getStartMillis() 	=>	m
		public long getStartNano() 	=>	k
		public double getTicks() 	=>	d
		public double getTime() 	=>	n
		public java.lang.String getTime(int) 	=>	a
		public boolean isProfiling() 	=>	o
		public void reset() 	=>	c

Class: public surge.nms.NMSClass	=>	bn
	Source: "NMSClass.java"
	FieldsOf: surge.nms.NMSClass
		public static java.lang.Class ChatSerializer	=>	e
		public static java.lang.Class EnumGamemode	=>	j
		protected static java.lang.Class EnumPlayerInfoAction	=>	h
		public static java.lang.Class GameProfile	=>	i
		public static java.lang.Class IChatBaseComponent	=>	d
		public static java.lang.Class LoadingCache	=>	l
		public static java.lang.Class PacketPlayOutPlayerInfo	=>	f
		public static java.lang.Class PacketPlayOutPlayerListHeaderFooter	=>	c
		public static java.lang.Class PlayerInfoData	=>	g
		public static java.lang.Class TileEntitySkull	=>	k
		private static boolean init	=>	a
		protected static int version	=>	b
	MethodsOf: surge.nms.NMSClass

Class: public surge.nms.NMSX	=>	bo
	Source: "NMSX.java"
	FieldsOf: surge.nms.NMSX
		public static surge.nms.NMSX bountifulAPI	=>	a
		public static java.lang.Object eSubtitle	=>	f
		public static java.lang.Object eTimes	=>	d
		public static java.lang.Object eTitle	=>	e
		public static java.lang.String nmsver	=>	c
		private static boolean useOldMethods	=>	b
	MethodsOf: surge.nms.NMSX
		public static void clearTitle(org.bukkit.entity.Player) 	=>	a
		public static java.lang.String craftPackage() 	=>	d
		public static java.lang.String getBukkitVersion() 	=>	b
		public static java.lang.Class getCBClass(java.lang.String) 	=>	b
		public static java.lang.Class getCBNMSClass(java.lang.String) 	=>	a
		public static java.lang.String getEntityName(org.bukkit.entity.Entity) 	=>	a
		public static java.lang.Class getNMSClass(java.lang.String) 	=>	d
		public static java.lang.String getVersion() 	=>	a
		public static java.lang.String nmsPackage() 	=>	c
		public static int ping(org.bukkit.entity.Player) 	=>	b
		public static void sendActionBar(org.bukkit.entity.Player, java.lang.String) 	=>	a
		public static void sendActionBar(org.bukkit.entity.Player, java.lang.String, int) 	=>	a
		public static void sendActionBarToAllPlayers(java.lang.String) 	=>	e
		public static void sendActionBarToAllPlayers(java.lang.String, int) 	=>	a
		public static void sendPacket(org.bukkit.entity.Player, java.lang.Object) 	=>	a
		public static void sendTabTitle(org.bukkit.entity.Player, java.lang.String, java.lang.String) 	=>	a
		public static void sendTitle(org.bukkit.entity.Player, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String) 	=>	a
		public static java.lang.Object serializeChat(java.lang.String) 	=>	c
		public static java.lang.reflect.Field setAccessible(java.lang.reflect.Field) 	=>	a
		public static java.lang.reflect.Method setAccessible(java.lang.reflect.Method) 	=>	a
		public static void setAi(org.bukkit.entity.LivingEntity, boolean) 	=>	a
		public static void showPickup(org.bukkit.entity.Player, org.bukkit.entity.Entity, org.bukkit.entity.Entity) 	=>	a

Class: surge.nms.NMSX$1	=>	bo$a
	Source: "NMSX.java"
	FieldsOf: surge.nms.NMSX$1
		private final synthetic org.bukkit.entity.Player val$player	NameNotChanged
	MethodsOf: surge.nms.NMSX$1
		public void run() 	NameNotChanged

Class: surge.nms.NMSX$2	=>	bo$b
	Source: "NMSX.java"
	FieldsOf: surge.nms.NMSX$2
		private final synthetic java.lang.String val$message	NameNotChanged
		private final synthetic org.bukkit.entity.Player val$player	NameNotChanged
	MethodsOf: surge.nms.NMSX$2
		public void run() 	NameNotChanged

Class: public surge.nms.PacketUtil	=>	bp
	Source: "PacketUtil.java"
	FieldsOf: surge.nms.PacketUtil
	MethodsOf: surge.nms.PacketUtil
		public static void clearTitle(org.bukkit.entity.Player) 	=>	a
		public static surge.nms.PacketUtil$V getVersion() 	=>	a
		public static void sendActionBar(org.bukkit.entity.Player, java.lang.String) 	=>	a
		public static void sendTitle(org.bukkit.entity.Player, java.lang.Integer, java.lang.Integer, java.lang.Integer, java.lang.String, java.lang.String) 	=>	a

Class: public final enum surge.nms.PacketUtil$V	=>	bp$a
	Source: "PacketUtil.java"
	FieldsOf: surge.nms.PacketUtil$V
		private static final synthetic surge.nms.PacketUtil$V[] ENUM$VALUES	=>	a
		public static final enum surge.nms.PacketUtil$V R110	NameNotChanged
		public static final enum surge.nms.PacketUtil$V R111	NameNotChanged
		public static final enum surge.nms.PacketUtil$V R112	NameNotChanged
		public static final enum surge.nms.PacketUtil$V R17	NameNotChanged
		public static final enum surge.nms.PacketUtil$V R18	NameNotChanged
		public static final enum surge.nms.PacketUtil$V R19	NameNotChanged
	MethodsOf: surge.nms.PacketUtil$V
		public static surge.nms.PacketUtil$V valueOf(java.lang.String) 	NameNotChanged
		public static surge.nms.PacketUtil$V[] values() 	NameNotChanged

Class: public surge.nms.Title	=>	bq
	Source: "Title.java"
	FieldsOf: surge.nms.Title
		private java.lang.String action	=>	c
		private java.lang.Integer fadeIn	=>	d
		private java.lang.Integer fadeOut	=>	e
		private java.lang.Integer stayTime	=>	f
		private java.lang.String subTitle	=>	b
		private java.lang.String title	=>	a
	MethodsOf: surge.nms.Title
		public java.lang.String getAction() 	=>	c
		public java.lang.Integer getFadeIn() 	=>	d
		public java.lang.Integer getFadeOut() 	=>	e
		public java.lang.Integer getStayTime() 	=>	f
		public java.lang.String getSubTitle() 	=>	b
		public java.lang.String getTitle() 	=>	a
		public void send(org.bukkit.entity.Player) 	=>	a
		public void setAction(java.lang.String) 	=>	c
		public void setFadeIn(java.lang.Integer) 	=>	a
		public void setFadeOut(java.lang.Integer) 	=>	b
		public void setStayTime(java.lang.Integer) 	=>	c
		public void setSubTitle(java.lang.String) 	=>	b
		public void setTitle(java.lang.String) 	=>	a

Class: public final enum surge.nms.VersionBukkit	=>	j
	Source: "VersionBukkit.java"
	FieldsOf: surge.nms.VersionBukkit
		private static final synthetic surge.nms.VersionBukkit[] ENUM$VALUES	=>	a
		public static final enum surge.nms.VersionBukkit V11	NameNotChanged
		public static final enum surge.nms.VersionBukkit V111	NameNotChanged
		public static final enum surge.nms.VersionBukkit V112	NameNotChanged
		public static final enum surge.nms.VersionBukkit V7	NameNotChanged
		public static final enum surge.nms.VersionBukkit V8	NameNotChanged
		public static final enum surge.nms.VersionBukkit V9	NameNotChanged
		public static final enum surge.nms.VersionBukkit VU	NameNotChanged
	MethodsOf: surge.nms.VersionBukkit
		public static surge.nms.VersionBukkit get() 	=>	c
		public static boolean tc() 	=>	a
		public static boolean uc() 	=>	b
		public static surge.nms.VersionBukkit valueOf(java.lang.String) 	NameNotChanged
		public static surge.nms.VersionBukkit[] values() 	NameNotChanged

Class: public abstract surge.pool.A	=>	bs
	Source: "A.java"
	FieldsOf: surge.pool.A
	MethodsOf: surge.pool.A

Class: surge.pool.A$1	=>	bs$a
	Source: "A.java"
	FieldsOf: surge.pool.A$1
		final synthetic surge.pool.A this$0	NameNotChanged
	MethodsOf: surge.pool.A$1
		public void run() 	NameNotChanged

Class: public abstract surge.pool.Execution	=>	br
	Source: "Execution.java"
	FieldsOf: surge.pool.Execution
	MethodsOf: surge.pool.Execution

Class: public surge.pool.ParallelPoolManager	=>	bu
	Source: "ParallelPoolManager.java"
	FieldsOf: surge.pool.ParallelPoolManager
		private surge.pool.ThreadInformation info	=>	g
		private java.lang.String key	=>	f
		private surge.pool.QueueMode mode	=>	a
		private int next	=>	c
		private java.util.Queue squeue	=>	e
		private int threadCount	=>	d
		private surge.collection.GList threads	=>	b
	MethodsOf: surge.pool.ParallelPoolManager
		private void createThreads(int) 	=>	a
		public surge.pool.ThreadInformation getAverageInfo() 	=>	o
		public java.lang.String getKey() 	=>	n
		public surge.pool.QueueMode getMode() 	=>	j
		public int getNext() 	=>	k
		public int getQueueSize() 	=>	f
		public int getSize() 	=>	e
		public java.util.Queue getSqueue() 	=>	m
		public int getThreadCount() 	=>	l
		public surge.pool.ParallelThread[] getThreads() 	=>	g
		public long lock() 	=>	b
		private surge.pool.ParallelThread nextThread() 	=>	i
		public void queue(surge.pool.Execution) 	=>	b
		public void shutdown() 	=>	d
		public void start() 	=>	c
		public void syncQueue(surge.pool.Execution) 	=>	a
		public void tickSyncQueue() 	=>	a
		private void updateThreadInformation() 	=>	h

Class: synthetic surge.pool.ParallelPoolManager$1	=>	bu$a
	Source: "ParallelPoolManager.java"
	FieldsOf: surge.pool.ParallelPoolManager$1
		static final synthetic int[] $SwitchMap$surge$pool$QueueMode	=>	a
	MethodsOf: surge.pool.ParallelPoolManager$1

Class: public surge.pool.ParallelThread	=>	cr
	Source: "ParallelThread.java"
	FieldsOf: surge.pool.ParallelThread
		private surge.pool.ThreadInformation info	=>	b
		private java.util.Queue queue	=>	a
	MethodsOf: surge.pool.ParallelThread
		private void conditionallySleep(double) 	=>	a
		private void execute() 	=>	a
		private void execute(surge.pool.Execution) 	=>	a
		public surge.pool.ThreadInformation getInfo() 	=>	c
		public java.util.Queue getQueue() 	=>	b
		public void queue(surge.pool.Execution) 	=>	b
		public void run() 	NameNotChanged

Class: public final enum surge.pool.QueueMode	=>	k
	Source: "QueueMode.java"
	FieldsOf: surge.pool.QueueMode
		private static final synthetic surge.pool.QueueMode[] $VALUES	=>	a
		public static final enum surge.pool.QueueMode ROUND_ROBIN	NameNotChanged
		public static final enum surge.pool.QueueMode SMALLEST	NameNotChanged
	MethodsOf: surge.pool.QueueMode
		public static surge.pool.QueueMode valueOf(java.lang.String) 	NameNotChanged
		public static surge.pool.QueueMode[] values() 	NameNotChanged

Class: public abstract surge.pool.S	=>	bt
	Source: "S.java"
	FieldsOf: surge.pool.S
	MethodsOf: surge.pool.S

Class: surge.pool.S$1	=>	bt$a
	Source: "S.java"
	FieldsOf: surge.pool.S$1
		final synthetic surge.pool.S this$0	NameNotChanged
	MethodsOf: surge.pool.S$1
		public void run() 	NameNotChanged

Class: public surge.pool.ThreadInformation	=>	bv
	Source: "ThreadInformation.java"
	FieldsOf: surge.pool.ThreadInformation
		private final int id	=>	g
		private boolean processing	=>	c
		private int queuedSize	=>	b
		private long tick	=>	f
		private double ticksPerSecond	=>	a
		private surge.math.Average ticksPerSecondAverage	=>	e
		private double utilization	=>	d
	MethodsOf: surge.pool.ThreadInformation
		public int getId() 	=>	h
		public int getQueuedSize() 	=>	b
		public long getTick() 	=>	f
		public long getTickLag() 	=>	g
		public double getTicksPerSecond() 	=>	a
		public double getTicksPerSecondAverage() 	=>	e
		public double getUtilization() 	=>	d
		public boolean isProcessing() 	=>	c
		public void setProcessing(boolean) 	=>	a
		public void setQueuedSize(int) 	=>	a
		public void setTick(long) 	=>	a
		public void setTicksPerSecond(double) 	=>	a
		public void setUtilization(double) 	=>	b

Class: public abstract surge.sched.IBursterator	=>	bw
	Source: "IBursterator.java"
	FieldsOf: surge.sched.IBursterator
	MethodsOf: surge.sched.IBursterator
		public abstract void burst(java.lang.Object) 	=>	a
		public abstract int flush() 	=>	b
		public abstract int flush(surge.math.Profiler) 	=>	a
		public abstract double getEstimatedTimeUse() 	=>	a
		public abstract void queue(java.lang.Object) 	=>	b
		public abstract void queue(java.lang.Object[]) 	=>	a
		public abstract void queue(java.util.List) 	=>	a
		public abstract void setTimeLock(double) 	=>	a

Class: public abstract surge.sched.ICancellable	=>	bx
	Source: "ICancellable.java"
	FieldsOf: surge.sched.ICancellable
	MethodsOf: surge.sched.ICancellable
		public abstract void cancel() 	=>	a

Class: public abstract surge.sched.IMasterTickComponent	=>	by
	Source: "IMasterTickComponent.java"
	FieldsOf: surge.sched.IMasterTickComponent
	MethodsOf: surge.sched.IMasterTickComponent
		public abstract java.lang.String getTickName() 	=>	h
		public abstract void onTick() 	=>	g

Class: public abstract surge.sched.ITask	=>	bz
	Source: "ITask.java"
	FieldsOf: surge.sched.ITask
	MethodsOf: surge.sched.ITask
		public abstract double getActiveTime() 	=>	h
		public abstract double getComputeTime() 	=>	f
		public abstract int getId() 	=>	b
		public abstract java.lang.String getName() 	=>	e
		public abstract double getTotalComputeTime() 	=>	g
		public abstract boolean hasCompleted() 	=>	i
		public abstract boolean isRepeating() 	=>	d
		public abstract void run() 	=>	c

Class: public surge.sched.TICK	=>	bA
	Source: "TICK.java"
	FieldsOf: surge.sched.TICK
		public static long tick	=>	a
	MethodsOf: surge.sched.TICK

Class: public abstract surge.sched.Task	=>	bB
	Source: "Task.java"
	FieldsOf: surge.sched.Task
		private surge.math.Profiler activeProfiler	=>	i
		private double activeTime	=>	f
		private boolean completed	=>	g
		private double computeTime	=>	d
		private int id	=>	a
		private java.lang.String name	=>	b
		private surge.math.Profiler profiler	=>	h
		private boolean repeating	=>	c
		private int ticks	=>	j
		private double totalComputeTime	=>	e
	MethodsOf: surge.sched.Task
		static synthetic surge.math.Profiler access$0(surge.sched.Task) 	NameNotChanged
		static synthetic void access$1(surge.sched.Task, boolean) 	NameNotChanged
		static synthetic double access$10(surge.sched.Task) 	NameNotChanged
		static synthetic surge.math.Profiler access$2(surge.sched.Task) 	NameNotChanged
		static synthetic void access$3(surge.sched.Task, double) 	NameNotChanged
		static synthetic void access$4(surge.sched.Task, double) 	NameNotChanged
		static synthetic double access$5(surge.sched.Task) 	NameNotChanged
		static synthetic void access$6(surge.sched.Task, double) 	NameNotChanged
		static synthetic int access$7(surge.sched.Task) 	NameNotChanged
		static synthetic void access$8(surge.sched.Task, int) 	NameNotChanged
		static synthetic double access$9(surge.sched.Task) 	NameNotChanged
		public void cancel() 	=>	a
		public double getActiveTime() 	=>	h
		public double getComputeTime() 	=>	f
		public int getId() 	=>	b
		public java.lang.String getName() 	=>	e
		public double getTotalComputeTime() 	=>	g
		public boolean hasCompleted() 	=>	i
		public boolean isRepeating() 	=>	d
		private void setup(java.lang.String, boolean) 	=>	a

Class: surge.sched.Task$1	=>	bB$a
	Source: "Task.java"
	FieldsOf: surge.sched.Task$1
		final synthetic surge.sched.Task this$0	NameNotChanged
	MethodsOf: surge.sched.Task$1
		public void run() 	NameNotChanged

Class: surge.sched.Task$2	=>	bB$b
	Source: "Task.java"
	FieldsOf: surge.sched.Task$2
		final synthetic surge.sched.Task this$0	NameNotChanged
	MethodsOf: surge.sched.Task$2
		public void run() 	NameNotChanged

Class: surge.sched.Task$3	=>	bB$c
	Source: "Task.java"
	FieldsOf: surge.sched.Task$3
		final synthetic surge.sched.Task this$0	NameNotChanged
		private final synthetic int val$total	NameNotChanged
	MethodsOf: surge.sched.Task$3
		public void run() 	NameNotChanged

Class: public surge.sched.TaskManager	=>	bC
	Source: "TaskManager.java"
	FieldsOf: surge.sched.TaskManager
		private surge.collection.GMap taskProfiles	=>	b
		private surge.collection.GList tasks	=>	a
	MethodsOf: surge.sched.TaskManager
		public java.lang.String getTickName() 	=>	h
		public void onTick() 	=>	g
		private void putFinishingTask(surge.sched.ITask) 	=>	a
		private void putTask(surge.sched.ITask) 	=>	b

Class: public surge.sched.TaskProfile	=>	bD
	Source: "TaskProfile.java"
	FieldsOf: surge.sched.TaskProfile
		private double activeTime	=>	a
		private double computeTickTime	=>	b
		private double computeTime	=>	c
	MethodsOf: surge.sched.TaskProfile
		public double getActiveTime() 	=>	a
		public double getComputeTickTime() 	=>	b
		public double getComputeTime() 	=>	c
		public void setActiveTime(double) 	=>	a
		public void setComputeTickTime(double) 	=>	b
		public void setComputeTime(double) 	=>	c

Class: public abstract annotation surge.server.AsyncTick	=>	bE
	Source: "AsyncTick.java"
	FieldsOf: surge.server.AsyncTick
	MethodsOf: surge.server.AsyncTick

Class: public surge.server.CoreTickThread	=>	cs
	Source: "CoreTickThread.java"
	FieldsOf: surge.server.CoreTickThread
	MethodsOf: surge.server.CoreTickThread
		public void run() 	NameNotChanged

Class: public abstract surge.server.MemoryMonitor	=>	ct
	Source: "MemoryMonitor.java"
	FieldsOf: surge.server.MemoryMonitor
		private long allocated	=>	f
		private long collected	=>	g
		private long collections	=>	h
		private long lastMemoryUsed	=>	d
		private long mah	=>	m
		private long mahs	=>	n
		private long memoryAllocatedPerTick	=>	j
		private long memoryCollectedPerTick	=>	k
		private long memoryFree	=>	a
		private long memoryFullyAllocatedPerTick	=>	l
		private long memoryMax	=>	c
		private long memoryUsed	=>	b
		private long memoryUsedAfterGC	=>	e
		private long sms	=>	i
	MethodsOf: surge.server.MemoryMonitor
		public long getAllocated() 	=>	g
		public long getCollected() 	=>	h
		public long getCollections() 	=>	i
		public long getLastMemoryUsed() 	=>	e
		public long getMah() 	=>	n
		public long getMahs() 	=>	o
		public long getMemoryAllocatedPerTick() 	=>	k
		public long getMemoryCollectedPerTick() 	=>	l
		public long getMemoryFree() 	=>	b
		public long getMemoryFullyAllocatedPerTick() 	=>	m
		public long getMemoryMax() 	=>	d
		public long getMemoryUsed() 	=>	c
		public long getMemoryUsedAfterGC() 	=>	f
		public long getSms() 	=>	j
		public abstract void onAllocationSet() 	=>	a
		public void run() 	NameNotChanged

Class: public surge.server.SuperSampler	=>	bF
	Source: "SuperSampler.java"
	FieldsOf: surge.server.SuperSampler
		private int chunksLoaded	=>	u
		private int chunksUnloaded	=>	v
		private double leftoverTickTime	=>	k
		private surge.math.Average mahL	=>	c
		private long mahs	=>	o
		private long memoryAllocated	=>	m
		private long memoryCollected	=>	n
		private surge.server.MemoryMonitor memoryMonitor	=>	y
		private long memoryUse	=>	l
		private boolean running	=>	h
		private double tickTime	=>	f
		private surge.math.Average tickTimeL	=>	b
		private double tickTimeRaw	=>	g
		private double tickUtilization	=>	j
		private double tickUtilizationRaw	=>	i
		private double ticksPerSecond	=>	d
		private surge.math.Average ticksPerSecondL	=>	a
		private double ticksPerSecondRaw	=>	e
		private int totalChunks	=>	p
		private int totalDrops	=>	r
		private int totalEntities	=>	q
		private int totalLiving	=>	t
		private int totalTiles	=>	s
		private surge.server.TPSMonitor tpsMonitor	=>	x
		private surge.server.WorldMonitor worldMonitor	=>	w
	MethodsOf: surge.server.SuperSampler
		static synthetic void access$0(surge.server.SuperSampler, int) 	NameNotChanged
		static synthetic void access$1(surge.server.SuperSampler, int) 	NameNotChanged
		static synthetic double access$10(surge.server.SuperSampler) 	NameNotChanged
		static synthetic surge.math.Average access$11(surge.server.SuperSampler) 	NameNotChanged
		static synthetic double access$12(surge.server.SuperSampler) 	NameNotChanged
		static synthetic void access$13(surge.server.SuperSampler, double) 	NameNotChanged
		static synthetic void access$14(surge.server.SuperSampler, double) 	NameNotChanged
		static synthetic void access$15(surge.server.SuperSampler, double) 	NameNotChanged
		static synthetic double access$16(surge.server.SuperSampler) 	NameNotChanged
		static synthetic void access$17(surge.server.SuperSampler, double) 	NameNotChanged
		static synthetic double access$18(surge.server.SuperSampler) 	NameNotChanged
		static synthetic void access$19(surge.server.SuperSampler, double) 	NameNotChanged
		static synthetic void access$2(surge.server.SuperSampler, int) 	NameNotChanged
		static synthetic void access$20(surge.server.SuperSampler, long) 	NameNotChanged
		static synthetic void access$21(surge.server.SuperSampler, long) 	NameNotChanged
		static synthetic void access$22(surge.server.SuperSampler, long) 	NameNotChanged
		static synthetic surge.math.Average access$23(surge.server.SuperSampler) 	NameNotChanged
		static synthetic void access$24(surge.server.SuperSampler, long) 	NameNotChanged
		static synthetic void access$3(surge.server.SuperSampler, int) 	NameNotChanged
		static synthetic void access$4(surge.server.SuperSampler, int) 	NameNotChanged
		static synthetic void access$5(surge.server.SuperSampler, int) 	NameNotChanged
		static synthetic void access$6(surge.server.SuperSampler, int) 	NameNotChanged
		static synthetic void access$7(surge.server.SuperSampler, double) 	NameNotChanged
		static synthetic void access$8(surge.server.SuperSampler, double) 	NameNotChanged
		static synthetic surge.math.Average access$9(surge.server.SuperSampler) 	NameNotChanged
		public int getChunksLoaded() 	=>	B
		public int getChunksUnloaded() 	=>	C
		public double getLeftoverTickTime() 	=>	o
		public surge.math.Average getMahL() 	=>	t
		public long getMahs() 	=>	u
		public long getMemoryAllocated() 	=>	r
		public long getMemoryCollected() 	=>	s
		public surge.server.MemoryMonitor getMemoryMonitor() 	=>	p
		public long getMemoryUse() 	=>	q
		public java.lang.String getTickName() 	=>	h
		public double getTickTime() 	=>	k
		public surge.math.Average getTickTimeL() 	=>	j
		public double getTickTimeRaw() 	=>	l
		public double getTickUtilization() 	=>	n
		public double getTickUtilizationRaw() 	=>	m
		public double getTicksPerSecond() 	=>	d
		public surge.math.Average getTicksPerSecondL() 	=>	c
		public double getTicksPerSecondRaw() 	=>	e
		public int getTotalChunks() 	=>	v
		public int getTotalDrops() 	=>	x
		public int getTotalEntities() 	=>	w
		public int getTotalLiving() 	=>	z
		public int getTotalTiles() 	=>	y
		public surge.server.TPSMonitor getTpsMonitor() 	=>	i
		public surge.server.WorldMonitor getWorldMonitor() 	=>	A
		public boolean isRunning() 	=>	f
		public void onTick() 	=>	g
		public void setChunksLoaded(int) 	=>	f
		public void setChunksUnloaded(int) 	=>	g
		public void setLeftoverTickTime(double) 	=>	g
		public void setMahL(surge.math.Average) 	=>	c
		public void setMahs(long) 	=>	d
		public void setMemoryAllocated(long) 	=>	b
		public void setMemoryCollected(long) 	=>	c
		public void setMemoryMonitor(surge.server.MemoryMonitor) 	=>	a
		public void setMemoryUse(long) 	=>	a
		public void setRunning(boolean) 	=>	a
		public void setTickTime(double) 	=>	c
		public void setTickTimeL(surge.math.Average) 	=>	b
		public void setTickTimeRaw(double) 	=>	d
		public void setTickUtilization(double) 	=>	f
		public void setTickUtilizationRaw(double) 	=>	e
		public void setTicksPerSecond(double) 	=>	a
		public void setTicksPerSecondL(surge.math.Average) 	=>	a
		public void setTicksPerSecondRaw(double) 	=>	b
		public void setTotalChunks(int) 	=>	a
		public void setTotalDrops(int) 	=>	c
		public void setTotalEntities(int) 	=>	b
		public void setTotalLiving(int) 	=>	e
		public void setTotalTiles(int) 	=>	d
		public void setTpsMonitor(surge.server.TPSMonitor) 	=>	a
		public void setWorldMonitor(surge.server.WorldMonitor) 	=>	a
		public void start() 	=>	a
		public void stop() 	=>	b

Class: surge.server.SuperSampler$1	=>	bF$c
	Source: "SuperSampler.java"
	FieldsOf: surge.server.SuperSampler$1
		final synthetic surge.server.SuperSampler this$0	NameNotChanged
	MethodsOf: surge.server.SuperSampler$1
		public void updated(int, int, int, int, int, int, int) 	=>	a

Class: surge.server.SuperSampler$2	=>	bF$b
	Source: "SuperSampler.java"
	FieldsOf: surge.server.SuperSampler$2
		final synthetic surge.server.SuperSampler this$0	NameNotChanged
	MethodsOf: surge.server.SuperSampler$2
		public void onTicked() 	=>	a

Class: surge.server.SuperSampler$3	=>	bF$a
	Source: "SuperSampler.java"
	FieldsOf: surge.server.SuperSampler$3
		final synthetic surge.server.SuperSampler this$0	NameNotChanged
	MethodsOf: surge.server.SuperSampler$3
		public void onAllocationSet() 	=>	a

Class: public abstract surge.server.TPSMonitor	=>	cu
	Source: "TPSMonitor.java"
	FieldsOf: surge.server.TPSMonitor
		private double actualTickTimeMS	=>	g
		private java.lang.Thread$State lastState	=>	f
		private long lastTick	=>	i
		private double ltt	=>	h
		private double rawTicksPerSecond	=>	b
		private surge.math.Profiler tickProfiler	=>	c
		private double tickTimeMS	=>	a
		private surge.math.Profiler tickTimeProfiler	=>	d
		private boolean ticked	=>	e
	MethodsOf: surge.server.TPSMonitor
		public double getActualTickTimeMS() 	=>	i
		public java.lang.Thread$State getLastState() 	=>	h
		public double getRawTicksPerSecond() 	=>	c
		public surge.math.Profiler getTickProfiler() 	=>	d
		public double getTickTimeMS() 	=>	b
		public surge.math.Profiler getTickTimeProfiler() 	=>	g
		public boolean isTicked() 	=>	e
		public void markTick() 	=>	f
		public abstract void onTicked() 	=>	a
		private void processState(java.lang.Thread$State) 	=>	a
		public void run() 	NameNotChanged

Class: public abstract surge.server.WorldMonitor	=>	cv
	Source: "WorldMonitor.java"
	FieldsOf: surge.server.WorldMonitor
		private boolean chunksChanged	=>	a
		private int chunksLoaded	=>	l
		private int chunksUnloaded	=>	m
		private boolean dropChanged	=>	b
		private boolean livingChanged	=>	d
		private long ms	=>	n
		private boolean tileChanged	=>	c
		private boolean totalChanged	=>	e
		private int totalChunks	=>	g
		private int totalDrops	=>	h
		private int totalEntities	=>	k
		private int totalLiving	=>	j
		private int totalTiles	=>	i
		private boolean updated	=>	f
	MethodsOf: surge.server.WorldMonitor
		private void doUpdate() 	=>	a
		public void on(org.bukkit.event.block.BlockBreakEvent) 	=>	a
		public void on(org.bukkit.event.block.BlockPlaceEvent) 	=>	a
		public void on(org.bukkit.event.entity.EntityDeathEvent) 	=>	a
		public void on(org.bukkit.event.entity.EntityPickupItemEvent) 	=>	a
		public void on(org.bukkit.event.entity.EntitySpawnEvent) 	=>	a
		public void on(org.bukkit.event.player.PlayerDropItemEvent) 	=>	a
		public void on(org.bukkit.event.player.PlayerPickupItemEvent) 	=>	a
		public void on(org.bukkit.event.world.ChunkLoadEvent) 	=>	a
		public void on(org.bukkit.event.world.ChunkUnloadEvent) 	=>	a
		public void run() 	NameNotChanged
		private void sample() 	=>	b
		private void sampleChunkCount() 	=>	g
		private void sampleDropCount() 	=>	f
		private void sampleLivingCount() 	=>	d
		private void sampleTileCount() 	=>	e
		private void sampleTotalCount() 	=>	c
		public abstract void updated(int, int, int, int, int, int, int) 	=>	a

Class: public surge.text.PhantomSpinner	=>	bG
	Source: "PhantomSpinner.java"
	FieldsOf: surge.text.PhantomSpinner
		private surge.text.ProgressSpinner c	=>	b
		private surge.text.ProgressSpinner s	=>	a
	MethodsOf: surge.text.PhantomSpinner
		public java.lang.String toString() 	NameNotChanged

Class: public surge.text.ProgressSpinner	=>	bH
	Source: "ProgressSpinner.java"
	FieldsOf: surge.text.ProgressSpinner
		public static final surge.text.ProgressSpinner CIRCLES	=>	e
		public static final surge.text.ProgressSpinner DEFAULT	=>	c
		public static final surge.text.ProgressSpinner MERGERS	=>	g
		public static final surge.text.ProgressSpinner NETWORK	=>	d
		public static final surge.text.ProgressSpinner RANDOMS	=>	f
		private java.lang.String[] chars	=>	a
		private int index	=>	b
	MethodsOf: surge.text.ProgressSpinner
		public java.lang.String[] getChars() 	=>	a
		public int getIndex() 	=>	b
		public java.lang.String toString() 	NameNotChanged

Class: public abstract surge.util.Adapter	=>	bI
	Source: "Adapter.java"
	FieldsOf: surge.util.Adapter
	MethodsOf: surge.util.Adapter
		public abstract java.lang.Object adapt(java.lang.Object) 	=>	a
		public abstract java.lang.Object onAdapt(java.lang.Object) 	=>	b

Class: public abstract annotation surge.util.Anchor	=>	bJ
	Source: "Anchor.java"
	FieldsOf: surge.util.Anchor
	MethodsOf: surge.util.Anchor
		public abstract int value() 	NameNotChanged

Class: public surge.util.Area	=>	bK
	Source: "Area.java"
	FieldsOf: surge.util.Area
		private org.bukkit.Location location	=>	a
		private java.lang.Double radius	=>	b
	MethodsOf: surge.util.Area
		public java.lang.Double distance(org.bukkit.Location) 	=>	a
		public org.bukkit.Location getLocation() 	=>	e
		public org.bukkit.entity.Entity[] getNearbyEntities() 	=>	c
		public org.bukkit.entity.Entity[] getNearbyEntities(java.lang.Class) 	=>	a
		public org.bukkit.entity.Entity[] getNearbyEntities(org.bukkit.entity.EntityType) 	=>	a
		public org.bukkit.entity.Player[] getNearbyPlayers() 	=>	d
		public java.lang.Double getRadius() 	=>	f
		public boolean hasEntities() 	=>	b
		public boolean isWithin(org.bukkit.Location) 	=>	c
		public org.bukkit.Location random() 	=>	g
		public void setLocation(org.bukkit.Location) 	=>	d
		public void setRadius(java.lang.Double) 	=>	a
		public java.lang.Double slowDistance(org.bukkit.Location) 	=>	b
		public surge.util.Cuboid toCuboid() 	=>	a
		public static boolean within(org.bukkit.Location, org.bukkit.Location, double) 	=>	a

Class: public final enum surge.util.Axis	=>	l
	Source: "Axis.java"
	FieldsOf: surge.util.Axis
		private static final synthetic surge.util.Axis[] $VALUES	=>	d
		public static final enum surge.util.Axis X	NameNotChanged
		public static final enum surge.util.Axis Y	NameNotChanged
		public static final enum surge.util.Axis Z	NameNotChanged
		private int x	=>	a
		private int y	=>	b
		private int z	=>	c
	MethodsOf: surge.util.Axis
		public org.bukkit.util.Vector negative() 	=>	b
		public org.bukkit.util.Vector positive() 	=>	a
		public static surge.util.Axis valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.Axis[] values() 	NameNotChanged

Class: public final enum surge.util.BlastResistance	=>	m
	Source: "BlastResistance.java"
	FieldsOf: surge.util.BlastResistance
		private static final synthetic surge.util.BlastResistance[] $VALUES	=>	b
		public static final enum surge.util.BlastResistance ACACIA_DOOR	NameNotChanged
		public static final enum surge.util.BlastResistance ACACIA_FENCE	NameNotChanged
		public static final enum surge.util.BlastResistance ACACIA_FENCE_GATE	NameNotChanged
		public static final enum surge.util.BlastResistance ACACIA_WOOD_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance ACTIVATOR_RAIL	NameNotChanged
		public static final enum surge.util.BlastResistance ANVIL	NameNotChanged
		public static final enum surge.util.BlastResistance BANNER	NameNotChanged
		public static final enum surge.util.BlastResistance BARRIER	NameNotChanged
		public static final enum surge.util.BlastResistance BEACON	NameNotChanged
		public static final enum surge.util.BlastResistance BEDROCK	NameNotChanged
		public static final enum surge.util.BlastResistance BED_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance BIRCH_DOOR	NameNotChanged
		public static final enum surge.util.BlastResistance BIRCH_FENCE	NameNotChanged
		public static final enum surge.util.BlastResistance BIRCH_FENCE_GATE	NameNotChanged
		public static final enum surge.util.BlastResistance BIRCH_WOOD_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance BOOKSHELF	NameNotChanged
		public static final enum surge.util.BlastResistance BREWING_STAND	NameNotChanged
		public static final enum surge.util.BlastResistance BRICK	NameNotChanged
		public static final enum surge.util.BlastResistance BRICK_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance BURNING_FURNACE	NameNotChanged
		public static final enum surge.util.BlastResistance CACTUS	NameNotChanged
		public static final enum surge.util.BlastResistance CAKE_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance CAULDRON	NameNotChanged
		public static final enum surge.util.BlastResistance CHEST	NameNotChanged
		public static final enum surge.util.BlastResistance CLAY	NameNotChanged
		public static final enum surge.util.BlastResistance COAL_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance COAL_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance COBBLESTONE_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance COCOA	NameNotChanged
		public static final enum surge.util.BlastResistance COMMAND	NameNotChanged
		public static final enum surge.util.BlastResistance DARK_OAK_DOOR	NameNotChanged
		public static final enum surge.util.BlastResistance DARK_OAK_FENCE	NameNotChanged
		public static final enum surge.util.BlastResistance DARK_OAK_FENCE_GATE	NameNotChanged
		public static final enum surge.util.BlastResistance DARK_OAK_WOOD_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance DAYLIGHT_DETECTOR	NameNotChanged
		public static final enum surge.util.BlastResistance DAYLIGHT_DETECTOR_INVERTED	NameNotChanged
		public static final enum surge.util.BlastResistance DETECTOR_RAIL	NameNotChanged
		public static final enum surge.util.BlastResistance DIAMOND_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance DIAMOND_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance DIRT	NameNotChanged
		public static final enum surge.util.BlastResistance DISPENSER	NameNotChanged
		public static final enum surge.util.BlastResistance DOUBLE_STONE_SLAB2	NameNotChanged
		public static final enum surge.util.BlastResistance DRAGON_EGG	NameNotChanged
		public static final enum surge.util.BlastResistance DROPPER	NameNotChanged
		public static final enum surge.util.BlastResistance EMERALD_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance EMERALD_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance ENCHANTMENT_TABLE	NameNotChanged
		public static final enum surge.util.BlastResistance ENDER_CHEST	NameNotChanged
		public static final enum surge.util.BlastResistance ENDER_PORTAL	NameNotChanged
		public static final enum surge.util.BlastResistance ENDER_PORTAL_FRAME	NameNotChanged
		public static final enum surge.util.BlastResistance ENDER_STONE	NameNotChanged
		public static final enum surge.util.BlastResistance FENCE	NameNotChanged
		public static final enum surge.util.BlastResistance FENCE_GATE	NameNotChanged
		public static final enum surge.util.BlastResistance FURNACE	NameNotChanged
		public static final enum surge.util.BlastResistance GLASS	NameNotChanged
		public static final enum surge.util.BlastResistance GLOWSTONE	NameNotChanged
		public static final enum surge.util.BlastResistance GOLD_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance GOLD_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance GOLD_PLATE	NameNotChanged
		public static final enum surge.util.BlastResistance GRASS	NameNotChanged
		public static final enum surge.util.BlastResistance GRAVEL	NameNotChanged
		public static final enum surge.util.BlastResistance HARD_CLAY	NameNotChanged
		public static final enum surge.util.BlastResistance HOPPER	NameNotChanged
		public static final enum surge.util.BlastResistance HUGE_MUSHROOM_1	NameNotChanged
		public static final enum surge.util.BlastResistance HUGE_MUSHROOM_2	NameNotChanged
		public static final enum surge.util.BlastResistance ICE	NameNotChanged
		public static final enum surge.util.BlastResistance IRON_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance IRON_DOOR	NameNotChanged
		public static final enum surge.util.BlastResistance IRON_DOOR_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance IRON_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance IRON_PLATE	NameNotChanged
		public static final enum surge.util.BlastResistance IRON_TRAPDOOR	NameNotChanged
		public static final enum surge.util.BlastResistance JACK_O_LANTERN	NameNotChanged
		public static final enum surge.util.BlastResistance JUNGLE_DOOR	NameNotChanged
		public static final enum surge.util.BlastResistance JUNGLE_FENCE	NameNotChanged
		public static final enum surge.util.BlastResistance JUNGLE_FENCE_GATE	NameNotChanged
		public static final enum surge.util.BlastResistance JUNGLE_WOOD_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance LADDER	NameNotChanged
		public static final enum surge.util.BlastResistance LAPIS_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance LAPIS_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance LAVA	NameNotChanged
		public static final enum surge.util.BlastResistance LEAVES	NameNotChanged
		public static final enum surge.util.BlastResistance LEAVES_2	NameNotChanged
		public static final enum surge.util.BlastResistance LEVER	NameNotChanged
		public static final enum surge.util.BlastResistance LOG	NameNotChanged
		public static final enum surge.util.BlastResistance LOG_2	NameNotChanged
		public static final enum surge.util.BlastResistance MELON_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance MOB_SPAWNER	NameNotChanged
		public static final enum surge.util.BlastResistance MONSTER_EGG	NameNotChanged
		public static final enum surge.util.BlastResistance MYCEL	NameNotChanged
		public static final enum surge.util.BlastResistance NETHERRACK	NameNotChanged
		public static final enum surge.util.BlastResistance NETHER_BRICK_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance NOTE_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance OBSIDIAN	NameNotChanged
		public static final enum surge.util.BlastResistance PACKED_ICE	NameNotChanged
		public static final enum surge.util.BlastResistance PISTON_BASE	NameNotChanged
		public static final enum surge.util.BlastResistance PISTON_EXTENSION	NameNotChanged
		public static final enum surge.util.BlastResistance PISTON_MOVING_PIECE	NameNotChanged
		public static final enum surge.util.BlastResistance PISTON_STICKY_BASE	NameNotChanged
		public static final enum surge.util.BlastResistance POWERED_RAIL	NameNotChanged
		public static final enum surge.util.BlastResistance PUMPKIN	NameNotChanged
		public static final enum surge.util.BlastResistance QUARTZ_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance QUARTZ_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance QUARTZ_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance RAILS	NameNotChanged
		public static final enum surge.util.BlastResistance REDSTONE_BLOCK	NameNotChanged
		public static final enum surge.util.BlastResistance REDSTONE_LAMP_OFF	NameNotChanged
		public static final enum surge.util.BlastResistance REDSTONE_LAMP_ON	NameNotChanged
		public static final enum surge.util.BlastResistance REDSTONE_ORE	NameNotChanged
		public static final enum surge.util.BlastResistance RED_SANDSTONE	NameNotChanged
		public static final enum surge.util.BlastResistance RED_SANDSTONE_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance SAND	NameNotChanged
		public static final enum surge.util.BlastResistance SANDSTONE	NameNotChanged
		public static final enum surge.util.BlastResistance SANDSTONE_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance SEA_LANTERN	NameNotChanged
		public static final enum surge.util.BlastResistance SIGN	NameNotChanged
		public static final enum surge.util.BlastResistance SIGN_POST	NameNotChanged
		public static final enum surge.util.BlastResistance SKULL	NameNotChanged
		public static final enum surge.util.BlastResistance SMOOTH_BRICK	NameNotChanged
		public static final enum surge.util.BlastResistance SMOOTH_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance SNOW	NameNotChanged
		public static final enum surge.util.BlastResistance SOUL_SAND	NameNotChanged
		public static final enum surge.util.BlastResistance SPONGE	NameNotChanged
		public static final enum surge.util.BlastResistance SPRUCE_DOOR	NameNotChanged
		public static final enum surge.util.BlastResistance SPRUCE_FENCE	NameNotChanged
		public static final enum surge.util.BlastResistance SPRUCE_FENCE_GATE	NameNotChanged
		public static final enum surge.util.BlastResistance SPRUCE_WOOD_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance STAINED_GLASS	NameNotChanged
		public static final enum surge.util.BlastResistance STAINED_GLASS_PANE	NameNotChanged
		public static final enum surge.util.BlastResistance STANDING_BANNER	NameNotChanged
		public static final enum surge.util.BlastResistance STATIONARY_WATER	NameNotChanged
		public static final enum surge.util.BlastResistance STONE	NameNotChanged
		public static final enum surge.util.BlastResistance STONE_BUTTON	NameNotChanged
		public static final enum surge.util.BlastResistance STONE_PLATE	NameNotChanged
		public static final enum surge.util.BlastResistance STONE_SLAB2	NameNotChanged
		public static final enum surge.util.BlastResistance THIN_GLASS	NameNotChanged
		public static final enum surge.util.BlastResistance TRAPPED_CHEST	NameNotChanged
		public static final enum surge.util.BlastResistance TRAP_DOOR	NameNotChanged
		public static final enum surge.util.BlastResistance WALL_BANNER	NameNotChanged
		public static final enum surge.util.BlastResistance WALL_SIGN	NameNotChanged
		public static final enum surge.util.BlastResistance WATER	NameNotChanged
		public static final enum surge.util.BlastResistance WEB	NameNotChanged
		public static final enum surge.util.BlastResistance WOOD	NameNotChanged
		public static final enum surge.util.BlastResistance WOOD_BUTTON	NameNotChanged
		public static final enum surge.util.BlastResistance WOOD_PLATE	NameNotChanged
		public static final enum surge.util.BlastResistance WOOD_STAIRS	NameNotChanged
		public static final enum surge.util.BlastResistance WOOL	NameNotChanged
		public static final enum surge.util.BlastResistance WORKBENCH	NameNotChanged
		private int br	=>	a
	MethodsOf: surge.util.BlastResistance
		public static int get(org.bukkit.Material) 	=>	a
		public int getBlastResistance() 	=>	a
		public static surge.util.BlastResistance valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.BlastResistance[] values() 	NameNotChanged

Class: public surge.util.Blocks	=>	bL
	Source: "Blocks.java"
	FieldsOf: surge.util.Blocks
	MethodsOf: surge.util.Blocks
		public static org.bukkit.Location getCenter(org.bukkit.block.Block) 	=>	a

Class: public enum surge.util.C	=>	n
	Source: "C.java"
	FieldsOf: surge.util.C
		private static synthetic int[] $SWITCH_TABLE$surge$util$C	=>	k
		public static final enum surge.util.C AQUA	NameNotChanged
		public static final enum surge.util.C BLACK	NameNotChanged
		public static final enum surge.util.C BLUE	NameNotChanged
		public static final enum surge.util.C BOLD	NameNotChanged
		private static final java.util.Map BY_CHAR	=>	g
		private static final java.util.Map BY_ID	=>	f
		public static final char COLOR_CHAR	NameNotChanged
		public static final enum surge.util.C DARK_AQUA	NameNotChanged
		public static final enum surge.util.C DARK_BLUE	NameNotChanged
		public static final enum surge.util.C DARK_GRAY	NameNotChanged
		public static final enum surge.util.C DARK_GREEN	NameNotChanged
		public static final enum surge.util.C DARK_PURPLE	NameNotChanged
		public static final enum surge.util.C DARK_RED	NameNotChanged
		private static final synthetic surge.util.C[] ENUM$VALUES	=>	l
		public static final enum surge.util.C GOLD	NameNotChanged
		public static final enum surge.util.C GRAY	NameNotChanged
		public static final enum surge.util.C GREEN	NameNotChanged
		public static final enum surge.util.C ITALIC	NameNotChanged
		public static final enum surge.util.C LIGHT_PURPLE	NameNotChanged
		public static final enum surge.util.C MAGIC	NameNotChanged
		public static final enum surge.util.C RED	NameNotChanged
		public static final enum surge.util.C RESET	NameNotChanged
		public static final enum surge.util.C STRIKETHROUGH	NameNotChanged
		private static final java.util.regex.Pattern STRIP_COLOR_PATTERN	=>	a
		public static final enum surge.util.C UNDERLINE	NameNotChanged
		public static final enum surge.util.C WHITE	NameNotChanged
		public static final enum surge.util.C YELLOW	NameNotChanged
		private static final java.util.Map chatHexMap	=>	i
		private final char code	=>	c
		private static final java.util.Map dyeChatMap	=>	h
		private static final java.util.Map dyeHexMap	=>	j
		private final int intCode	=>	b
		private final boolean isFormat	=>	d
		private final java.lang.String toString	=>	e
	MethodsOf: surge.util.C
		static synthetic int[] $SWITCH_TABLE$surge$util$C() 	=>	j
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a
		public org.bukkit.ChatColor chatColor() 	=>	h
		public static org.bukkit.DyeColor chatToDye(org.bukkit.ChatColor) 	=>	a
		public static java.lang.String chatToHex(org.bukkit.ChatColor) 	=>	b
		public org.bukkit.DyeColor dye() 	=>	c
		public static surge.util.C dyeToChat(org.bukkit.DyeColor) 	=>	a
		public static java.lang.String dyeToHex(org.bukkit.DyeColor) 	=>	b
		public static surge.util.C fromItemMeta(byte) 	=>	a
		public static java.lang.String generateColorTable() 	=>	g
		public static surge.util.C getByChar(char) 	=>	a
		public static surge.util.C getByChar(java.lang.String) 	=>	a
		public char getChar() 	=>	b
		public byte getItemMeta() 	=>	i
		public static java.lang.String getLastColors(java.lang.String) 	=>	e
		public java.lang.String hex() 	=>	d
		public static org.bukkit.Color hexToColor(java.lang.String) 	=>	c
		public boolean isColor() 	=>	f
		public boolean isFormat() 	=>	e
		public static org.bukkit.Color rgbToColor(java.lang.String) 	=>	d
		public static java.lang.String stripColor(java.lang.String) 	=>	b
		public java.lang.String toString() 	NameNotChanged
		public static java.lang.String translateAlternateColorCodes(char, java.lang.String) 	=>	a
		public static surge.util.C valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.C[] values() 	NameNotChanged

Class: enum surge.util.C$1	=>	n$a
	Source: "C.java"
	FieldsOf: surge.util.C$1
	MethodsOf: surge.util.C$1
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$10	=>	n$b
	Source: "C.java"
	FieldsOf: surge.util.C$10
	MethodsOf: surge.util.C$10
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$11	=>	n$c
	Source: "C.java"
	FieldsOf: surge.util.C$11
	MethodsOf: surge.util.C$11
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$12	=>	n$d
	Source: "C.java"
	FieldsOf: surge.util.C$12
	MethodsOf: surge.util.C$12
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$13	=>	n$e
	Source: "C.java"
	FieldsOf: surge.util.C$13
	MethodsOf: surge.util.C$13
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$14	=>	n$f
	Source: "C.java"
	FieldsOf: surge.util.C$14
	MethodsOf: surge.util.C$14
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$15	=>	n$g
	Source: "C.java"
	FieldsOf: surge.util.C$15
	MethodsOf: surge.util.C$15
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$16	=>	n$h
	Source: "C.java"
	FieldsOf: surge.util.C$16
	MethodsOf: surge.util.C$16
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$17	=>	n$i
	Source: "C.java"
	FieldsOf: surge.util.C$17
	MethodsOf: surge.util.C$17
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$18	=>	n$j
	Source: "C.java"
	FieldsOf: surge.util.C$18
	MethodsOf: surge.util.C$18
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$19	=>	n$k
	Source: "C.java"
	FieldsOf: surge.util.C$19
	MethodsOf: surge.util.C$19
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$2	=>	n$l
	Source: "C.java"
	FieldsOf: surge.util.C$2
	MethodsOf: surge.util.C$2
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$20	=>	n$m
	Source: "C.java"
	FieldsOf: surge.util.C$20
	MethodsOf: surge.util.C$20
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$21	=>	n$o
	Source: "C.java"
	FieldsOf: surge.util.C$21
	MethodsOf: surge.util.C$21
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$22	=>	n$p
	Source: "C.java"
	FieldsOf: surge.util.C$22
	MethodsOf: surge.util.C$22
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$3	=>	n$q
	Source: "C.java"
	FieldsOf: surge.util.C$3
	MethodsOf: surge.util.C$3
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$4	=>	n$r
	Source: "C.java"
	FieldsOf: surge.util.C$4
	MethodsOf: surge.util.C$4
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$5	=>	n$s
	Source: "C.java"
	FieldsOf: surge.util.C$5
	MethodsOf: surge.util.C$5
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$6	=>	n$t
	Source: "C.java"
	FieldsOf: surge.util.C$6
	MethodsOf: surge.util.C$6
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$7	=>	n$u
	Source: "C.java"
	FieldsOf: surge.util.C$7
	MethodsOf: surge.util.C$7
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$8	=>	n$v
	Source: "C.java"
	FieldsOf: surge.util.C$8
	MethodsOf: surge.util.C$8
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: enum surge.util.C$9	=>	n$w
	Source: "C.java"
	FieldsOf: surge.util.C$9
	MethodsOf: surge.util.C$9
		public net.md_5.bungee.api.ChatColor asBungee() 	=>	a

Class: public surge.util.CDou	=>	bM
	Source: "CDou.java"
	FieldsOf: surge.util.CDou
		private double max	=>	b
		private double number	=>	a
	MethodsOf: surge.util.CDou
		public surge.util.CDou add(double) 	=>	b
		public void circ() 	=>	b
		public double get() 	=>	a
		public surge.util.CDou set(double) 	=>	a
		public surge.util.CDou sub(double) 	=>	c

Class: public surge.util.CMD	=>	bN
	Source: "CMD.java"
	FieldsOf: surge.util.CMD
		private java.lang.String command	=>	a
		private org.bukkit.command.CommandSender sender	=>	b
		private boolean virtual	=>	c
	MethodsOf: surge.util.CMD
		public void execute() 	=>	b
		public void execute(org.bukkit.command.CommandSender) 	=>	a
		public surge.util.CMD virtual() 	=>	a

Class: public surge.util.CNum	=>	bO
	Source: "CNum.java"
	FieldsOf: surge.util.CNum
		private int max	=>	b
		private int number	=>	a
	MethodsOf: surge.util.CNum
		public surge.util.CNum add(int) 	=>	b
		public void circ() 	=>	b
		public int get() 	=>	a
		public int getMax() 	=>	c
		public surge.util.CNum set(int) 	=>	a
		public void setMax(int) 	=>	d
		public surge.util.CNum sub(int) 	=>	c

Class: public surge.util.Chunks	=>	bP
	Source: "Chunks.java"
	FieldsOf: surge.util.Chunks
	MethodsOf: surge.util.Chunks
		public static surge.collection.GList getLoadedChunks() 	=>	a
		public static surge.collection.GList getLoadedChunks(org.bukkit.World) 	=>	a
		public static surge.collection.GList getRadius(org.bukkit.Chunk, int) 	=>	a
		public static boolean isLoaded(java.lang.String, int, int) 	=>	a
		public static boolean isLoaded(org.bukkit.World, int, int) 	=>	a
		public static void load(surge.collection.GList) 	=>	b
		public static boolean unload(org.bukkit.Chunk) 	=>	a
		public static boolean unload(org.bukkit.Chunk, boolean) 	=>	a
		public static boolean unload(org.bukkit.Chunk, boolean, boolean) 	=>	a
		public static int unload(surge.collection.GList) 	=>	a
		public static int unload(surge.collection.GList, boolean) 	=>	a
		public static int unload(surge.collection.GList, boolean, boolean) 	=>	a

Class: public surge.util.Cuboid	=>	bQ
	Source: "Cuboid.java"
	FieldsOf: surge.util.Cuboid
		protected final java.lang.String worldName	=>	a
		protected int x1	=>	b
		protected int x2	=>	e
		protected int y1	=>	c
		protected int y2	=>	f
		protected int z1	=>	d
		protected int z2	=>	g
	MethodsOf: surge.util.Cuboid
		public byte averageLightLevel() 	=>	s
		public bridge synthetic java.lang.Object clone() 	NameNotChanged
		public surge.util.Cuboid clone() 	=>	v
		public boolean contains(int, int, int) 	=>	a
		public boolean contains(org.bukkit.Location) 	=>	a
		public boolean contains(org.bukkit.block.Block) 	=>	a
		public boolean containsOnly(org.bukkit.Material) 	=>	a
		public surge.util.Cuboid contract() 	=>	t
		public surge.util.Cuboid contract(surge.util.Cuboid$CuboidDirection) 	=>	a
		public org.bukkit.block.Block[] corners() 	=>	q
		public int depth(surge.util.Axis) 	=>	a
		public boolean equals(java.lang.Object) 	NameNotChanged
		public surge.util.Cuboid expand(surge.util.Cuboid$CuboidDirection, int) 	=>	a
		public void fill(int, byte) 	=>	a
		public surge.util.Cuboid flatten(int) 	=>	a
		public surge.util.Cuboid getBoundingCuboid(surge.util.Cuboid) 	=>	a
		public org.bukkit.Location getCenter() 	=>	f
		public java.util.List getChunks() 	=>	u
		public surge.collection.GList getEntities() 	=>	c
		public surge.util.Cuboid getFace(surge.util.Cuboid$CuboidDirection) 	=>	b
		public org.bukkit.Location getLowerNE() 	=>	d
		public int getLowerX() 	=>	k
		public int getLowerY() 	=>	l
		public int getLowerZ() 	=>	m
		public surge.collection.GList getPlayers() 	=>	b
		public org.bukkit.block.Block getRelativeBlock(int, int, int) 	=>	b
		public org.bukkit.block.Block getRelativeBlock(org.bukkit.World, int, int, int) 	=>	a
		public int getSizeX() 	=>	h
		public int getSizeY() 	=>	i
		public int getSizeZ() 	=>	j
		public org.bukkit.Location getUpperSW() 	=>	e
		public int getUpperX() 	=>	n
		public int getUpperY() 	=>	o
		public int getUpperZ() 	=>	p
		public org.bukkit.World getWorld() 	=>	g
		public boolean hasPlayers() 	=>	a
		public int hashCode() 	NameNotChanged
		public surge.util.Cuboid inset(surge.util.Cuboid$CuboidDirection, int) 	=>	d
		public java.util.Iterator iterator() 	NameNotChanged
		public surge.util.Cuboid outset(surge.util.Cuboid$CuboidDirection, int) 	=>	c
		public java.util.Map serialize() 	NameNotChanged
		public void set(org.bukkit.Location, org.bukkit.Location) 	=>	a
		public surge.util.Cuboid shift(surge.util.Cuboid$CuboidDirection, int) 	=>	b
		public java.lang.String toString() 	NameNotChanged
		public int volume() 	=>	r

Class: surge.util.Cuboid$1	=>	bQ$c
	Source: "Cuboid.java"
	FieldsOf: surge.util.Cuboid$1
		final synthetic surge.util.Cuboid this$0	NameNotChanged
	MethodsOf: surge.util.Cuboid$1
		public bridge synthetic java.lang.Object onAdapt(java.lang.Object) 	=>	a
		public org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) 	=>	a

Class: synthetic surge.util.Cuboid$2	=>	bQ$a
	Source: "Cuboid.java"
	FieldsOf: surge.util.Cuboid$2
		static final synthetic int[] $SwitchMap$surge$util$Axis	=>	a
		static final synthetic int[] $SwitchMap$surge$util$Cuboid$CuboidDirection	=>	b
	MethodsOf: surge.util.Cuboid$2

Class: public final enum surge.util.Cuboid$CuboidDirection	=>	bQ$d
	Source: "Cuboid.java"
	FieldsOf: surge.util.Cuboid$CuboidDirection
		private static final synthetic surge.util.Cuboid$CuboidDirection[] $VALUES	=>	a
		public static final enum surge.util.Cuboid$CuboidDirection Both	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection Down	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection East	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection Horizontal	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection North	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection South	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection Unknown	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection Up	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection Vertical	NameNotChanged
		public static final enum surge.util.Cuboid$CuboidDirection West	NameNotChanged
	MethodsOf: surge.util.Cuboid$CuboidDirection
		public surge.util.Cuboid$CuboidDirection opposite() 	=>	a
		public static surge.util.Cuboid$CuboidDirection valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.Cuboid$CuboidDirection[] values() 	NameNotChanged

Class: public surge.util.Cuboid$CuboidIterator	=>	bQ$b
	Source: "Cuboid.java"
	FieldsOf: surge.util.Cuboid$CuboidIterator
		private int baseX	=>	b
		private int baseY	=>	c
		private int baseZ	=>	d
		private int sizeX	=>	h
		private int sizeY	=>	i
		private int sizeZ	=>	j
		final synthetic surge.util.Cuboid this$0	NameNotChanged
		private org.bukkit.World w	=>	a
		private int x	=>	e
		private int y	=>	f
		private int z	=>	g
	MethodsOf: surge.util.Cuboid$CuboidIterator
		public boolean hasNext() 	NameNotChanged
		public bridge synthetic java.lang.Object next() 	NameNotChanged
		public org.bukkit.block.Block next() 	=>	a
		public void remove() 	NameNotChanged

Class: public surge.util.CuboidException	=>	x
	Source: "CuboidException.java"
	FieldsOf: surge.util.CuboidException
		private static final long serialVersionUID	NameNotChanged
	MethodsOf: surge.util.CuboidException

Class: public surge.util.D	=>	bR
	Source: "D.java"
	FieldsOf: surge.util.D
		private static surge.collection.GList buffer	=>	a
	MethodsOf: surge.util.D
		public static void f(java.lang.Object, java.lang.String) 	=>	e
		public static void f(java.lang.String) 	=>	e
		public static void flush() 	=>	a
		public static void l(java.lang.Object, java.lang.String) 	=>	a
		public static void l(java.lang.String) 	=>	a
		private static void log(java.lang.String, java.lang.String) 	=>	a
		public static void s(java.lang.Object, java.lang.String) 	=>	b
		public static void s(java.lang.String) 	=>	b
		public static void v(java.lang.Object, java.lang.String) 	=>	c
		public static void v(java.lang.String) 	=>	c
		public static void w(java.lang.Object, java.lang.String) 	=>	d
		public static void w(java.lang.String) 	=>	d

Class: public abstract annotation surge.util.DMSRequire	=>	bS
	Source: "DMSRequire.java"
	FieldsOf: surge.util.DMSRequire
	MethodsOf: surge.util.DMSRequire
		public abstract surge.util.DMSRequirement value() 	NameNotChanged

Class: public final enum surge.util.DMSRequirement	=>	o
	Source: "DMSRequirement.java"
	FieldsOf: surge.util.DMSRequirement
		private static final synthetic surge.util.DMSRequirement[] ENUM$VALUES	=>	a
		public static final enum surge.util.DMSRequirement SQL	NameNotChanged
	MethodsOf: surge.util.DMSRequirement
		public static surge.util.DMSRequirement valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.DMSRequirement[] values() 	NameNotChanged

Class: public final enum surge.util.Depend	=>	p
	Source: "Depend.java"
	FieldsOf: surge.util.Depend
		public static final enum surge.util.Depend CITIZENS	NameNotChanged
		private static final synthetic surge.util.Depend[] ENUM$VALUES	=>	b
		public static final enum surge.util.Depend FAWE	NameNotChanged
		public static final enum surge.util.Depend PROTOLIB	NameNotChanged
		public static final enum surge.util.Depend VAULT	NameNotChanged
		public static final enum surge.util.Depend WORLDEDIT	NameNotChanged
		private java.lang.String name	=>	a
	MethodsOf: surge.util.Depend
		public boolean exists() 	=>	a
		public static surge.util.Depend valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.Depend[] values() 	NameNotChanged

Class: public surge.util.Dimension	=>	bT
	Source: "Dimension.java"
	FieldsOf: surge.util.Dimension
		private final int depth	=>	c
		private final int height	=>	b
		private final int width	=>	a
	MethodsOf: surge.util.Dimension
		public int getDepth() 	=>	d
		public int getHeight() 	=>	c
		public surge.util.DimensionFace getPane() 	=>	a
		public int getWidth() 	=>	b

Class: public final enum surge.util.DimensionFace	=>	q
	Source: "DimensionFace.java"
	FieldsOf: surge.util.DimensionFace
		private static final synthetic surge.util.DimensionFace[] $VALUES	=>	a
		public static final enum surge.util.DimensionFace X	NameNotChanged
		public static final enum surge.util.DimensionFace Y	NameNotChanged
		public static final enum surge.util.DimensionFace Z	NameNotChanged
	MethodsOf: surge.util.DimensionFace
		public static surge.util.DimensionFace valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.DimensionFace[] values() 	NameNotChanged

Class: public final enum surge.util.Direction	=>	r
	Source: "Direction.java"
	FieldsOf: surge.util.Direction
		private static synthetic int[] $SWITCH_TABLE$surge$util$Direction	=>	e
		public static final enum surge.util.Direction D	NameNotChanged
		public static final enum surge.util.Direction E	NameNotChanged
		private static final synthetic surge.util.Direction[] ENUM$VALUES	=>	f
		public static final enum surge.util.Direction N	NameNotChanged
		public static final enum surge.util.Direction S	NameNotChanged
		public static final enum surge.util.Direction U	NameNotChanged
		public static final enum surge.util.Direction W	NameNotChanged
		private surge.util.Cuboid$CuboidDirection f	=>	d
		private int x	=>	a
		private int y	=>	b
		private int z	=>	c
	MethodsOf: surge.util.Direction
		static synthetic int[] $SWITCH_TABLE$surge$util$Direction() 	=>	i
		public byte byteValue() 	=>	h
		public surge.util.Cuboid$CuboidDirection f() 	=>	e
		public static surge.util.Direction facing(org.bukkit.entity.Player) 	=>	a
		public static surge.util.Direction fromByte(byte) 	=>	a
		public static surge.collection.GList news() 	=>	f
		public surge.util.Direction reverse() 	=>	a
		public static surge.collection.GList udnews() 	=>	g
		public static surge.util.Direction valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.Direction[] values() 	NameNotChanged
		public int x() 	=>	b
		public int y() 	=>	c
		public int z() 	=>	d

Class: public abstract surge.util.Embedded	=>	bU
	Source: "Embedded.java"
	FieldsOf: surge.util.Embedded
	MethodsOf: surge.util.Embedded
		public abstract void add(java.lang.Object) 	=>	a
		public abstract surge.collection.GList get() 	=>	a

Class: public surge.util.F	=>	bV
	Source: "F.java"
	FieldsOf: surge.util.F
		private static java.text.DecimalFormat DF	=>	b
		private static final java.util.NavigableMap MAP	=>	e
		private static final java.lang.String[] NAMES	=>	c
		private static java.text.NumberFormat NF	=>	a
		private static final java.math.BigInteger THOUSAND	=>	d
	MethodsOf: surge.util.F
		public static java.lang.String b(double) 	=>	a
		public static java.lang.String b(int) 	=>	a
		public static java.lang.String b(java.math.BigInteger) 	=>	a
		public static java.lang.String b(long) 	=>	a
		public static java.lang.String cname(java.lang.String) 	=>	c
		public static java.lang.String color(java.lang.String) 	=>	a
		public static surge.collection.GList color(java.util.List) 	=>	a
		public static java.lang.String f(double) 	=>	b
		public static java.lang.String f(double, int) 	=>	b
		public static java.lang.String f(float) 	=>	a
		public static java.lang.String f(float, int) 	=>	a
		public static java.lang.String f(int) 	=>	b
		public static java.lang.String f(long) 	=>	g
		public static java.lang.String fd(double, int) 	=>	c
		public static java.lang.String fileSize(long) 	=>	b
		public static surge.collection.GList getParameters(java.lang.String, char) 	=>	a
		private static void instantiate() 	=>	a
		public static java.lang.String mem(long) 	=>	e
		public static java.lang.String memSize(long) 	=>	c
		public static java.lang.String memx(long) 	=>	f
		public static java.lang.String msSeconds(long) 	=>	h
		public static java.lang.String msSeconds(long, int) 	=>	b
		public static java.lang.String nsMs(long) 	=>	i
		public static java.lang.String nsMs(long, int) 	=>	c
		public static java.lang.String nsMsd(long, int) 	=>	d
		public static java.lang.String ofSize(long, int) 	=>	a
		public static java.lang.String ofSize(long, int, surge.util.C) 	=>	a
		public static java.lang.String pc(double) 	=>	c
		public static java.lang.String pc(double, int) 	=>	d
		public static java.lang.String pc(float) 	=>	b
		public static java.lang.String pc(float, int) 	=>	b
		public static java.lang.String pc(int, int) 	=>	a
		public static java.lang.String pc(int, int, int) 	=>	a
		public static java.lang.String pc(long, long) 	=>	a
		public static java.lang.String pc(long, long, int) 	=>	a
		public static java.lang.String repeat(java.lang.String, int) 	=>	c
		public static java.lang.String stamp() 	=>	b
		public static java.lang.String stamp(long) 	=>	d
		public static java.lang.String time(double, int) 	=>	a
		public static java.lang.String trim(java.lang.String, int) 	=>	b
		public static surge.collection.GList wrap(java.lang.String) 	=>	b
		public static surge.collection.GList wrap(java.lang.String, int) 	=>	a

Class: public surge.util.FU	=>	bW
	Source: "FU.java"
	FieldsOf: surge.util.FU
		public static final java.io.File[] EMPTY_FILE_ARRAY	=>	d
		public static final long ONE_GB	=>	c
		public static final long ONE_KB	=>	a
		public static final long ONE_MB	=>	b
	MethodsOf: surge.util.FU
		public static java.lang.String byteCountToDisplaySize(long) 	=>	a
		public static void cleanDirectory(java.io.File) 	=>	c
		private static void cleanDirectoryOnExit(java.io.File) 	=>	h
		public static java.io.File[] convertFileCollectionToFileArray(java.util.Collection) 	=>	a
		public static void copyDirectory(java.io.File, java.io.File) 	=>	d
		public static void copyDirectory(java.io.File, java.io.File, boolean) 	=>	c
		public static void copyDirectoryToDirectory(java.io.File, java.io.File) 	=>	c
		public static void copyFile(java.io.File, java.io.File) 	=>	b
		public static void copyFile(java.io.File, java.io.File, boolean) 	=>	a
		public static void copyFileToDirectory(java.io.File, java.io.File) 	=>	a
		public static void copyURLToFile(java.net.URL, java.io.File) 	=>	a
		public static void deleteDirectory(java.io.File) 	=>	b
		private static void deleteDirectoryOnExit(java.io.File) 	=>	g
		private static void doCopyDirectory(java.io.File, java.io.File, boolean) 	=>	d
		private static void doCopyFile(java.io.File, java.io.File, boolean) 	=>	b
		public static void forceDelete(java.io.File) 	=>	e
		public static void forceDeleteOnExit(java.io.File) 	=>	f
		public static void forceMkdir(java.io.File) 	=>	i
		public static boolean isFileNewer(java.io.File, java.io.File) 	=>	e
		public static boolean isFileNewer(java.io.File, java.util.Date) 	=>	a
		public static boolean isFileNewer(java.io.File, long) 	=>	a
		public static byte[] readFileToByteArray(java.io.File) 	=>	d
		public static java.lang.String readFileToString(java.io.File, java.lang.String) 	=>	a
		public static java.util.List readLines(java.io.File, java.lang.String) 	=>	b
		public static long sizeOfDirectory(java.io.File) 	=>	j
		public static java.io.File toFile(java.net.URL) 	=>	a
		public static java.io.File[] toFiles(java.net.URL[]) 	=>	a
		public static java.net.URL[] toURLs(java.io.File[]) 	=>	a
		public static void touch(java.io.File) 	=>	a
		public static boolean waitFor(java.io.File, int) 	=>	a
		public static void writeByteArrayToFile(java.io.File, byte[]) 	=>	a
		public static void writeLines(java.io.File, java.lang.String, java.util.Collection) 	=>	a
		public static void writeLines(java.io.File, java.lang.String, java.util.Collection, java.lang.String) 	=>	a
		public static void writeStringToFile(java.io.File, java.lang.String, java.lang.String) 	=>	a

Class: public surge.util.FinalDouble	=>	bX
	Source: "FinalDouble.java"
	FieldsOf: surge.util.FinalDouble
		private double i	=>	a
	MethodsOf: surge.util.FinalDouble
		public void add(double) 	=>	b
		public double get() 	=>	a
		public void set(double) 	=>	a
		public void sub(double) 	=>	c

Class: public surge.util.FinalFloat	=>	bY
	Source: "FinalFloat.java"
	FieldsOf: surge.util.FinalFloat
		private float i	=>	a
	MethodsOf: surge.util.FinalFloat
		public void add(float) 	=>	b
		public float get() 	=>	a
		public void set(float) 	=>	a
		public void sub(float) 	=>	c

Class: public surge.util.FinalInteger	=>	bZ
	Source: "FinalInteger.java"
	FieldsOf: surge.util.FinalInteger
		private int i	=>	a
	MethodsOf: surge.util.FinalInteger
		public void add(int) 	=>	b
		public int get() 	=>	a
		public void set(int) 	=>	a
		public void sub(int) 	=>	c

Class: public surge.util.FinalLong	=>	b0
	Source: "FinalLong.java"
	FieldsOf: surge.util.FinalLong
		private long i	=>	a
	MethodsOf: surge.util.FinalLong
		public void add(long) 	=>	b
		public long get() 	=>	a
		public void set(long) 	=>	a
		public void sub(long) 	=>	c

Class: public surge.util.FinalString	=>	b1
	Source: "FinalString.java"
	FieldsOf: surge.util.FinalString
		private java.lang.String string	=>	a
	MethodsOf: surge.util.FinalString
		public java.lang.String get() 	=>	a
		public void set(java.lang.String) 	=>	a

Class: public surge.util.Fingerprint	=>	b2
	Source: "Fingerprint.java"
	FieldsOf: surge.util.Fingerprint
	MethodsOf: surge.util.Fingerprint
		public static java.lang.String randomFingerprint(java.lang.String) 	=>	a

Class: public abstract surge.util.GListAdapter	=>	b3
	Source: "GListAdapter.java"
	FieldsOf: surge.util.GListAdapter
	MethodsOf: surge.util.GListAdapter
		public java.util.List adapt(java.util.List) 	=>	a
		public abstract java.lang.Object onAdapt(java.lang.Object) 	=>	a

Class: public surge.util.Health	=>	b4
	Source: "Health.java"
	FieldsOf: surge.util.Health
		private double hp	=>	a
	MethodsOf: surge.util.Health
		public int getFlatHalfHearts() 	=>	d
		public int getFlatHearts() 	=>	a
		public double getHalfHearts() 	=>	c
		public double getHearts() 	=>	b

Class: public surge.util.IO	=>	b5
	Source: "IO.java"
	FieldsOf: surge.util.IO
		private static final int DEFAULT_BUFFER_SIZE	=>	g
		public static final char DIR_SEPARATOR	=>	c
		public static final char DIR_SEPARATOR_UNIX	=>	a
		public static final char DIR_SEPARATOR_WINDOWS	=>	b
		public static final java.lang.String LINE_SEPARATOR	=>	f
		public static final java.lang.String LINE_SEPARATOR_UNIX	=>	d
		public static final java.lang.String LINE_SEPARATOR_WINDOWS	=>	e
	MethodsOf: surge.util.IO
		public static void closeQuietly(java.io.InputStream) 	=>	a
		public static void closeQuietly(java.io.OutputStream) 	=>	a
		public static void closeQuietly(java.io.Reader) 	=>	a
		public static void closeQuietly(java.io.Writer) 	=>	a
		public static boolean contentEquals(java.io.InputStream, java.io.InputStream) 	=>	a
		public static boolean contentEquals(java.io.Reader, java.io.Reader) 	=>	a
		public static int copy(java.io.InputStream, java.io.OutputStream) 	=>	a
		public static void copy(java.io.InputStream, java.io.Writer) 	=>	a
		public static void copy(java.io.InputStream, java.io.Writer, java.lang.String) 	=>	a
		public static void copy(java.io.Reader, java.io.OutputStream) 	=>	a
		public static void copy(java.io.Reader, java.io.OutputStream, java.lang.String) 	=>	a
		public static int copy(java.io.Reader, java.io.Writer) 	=>	a
		public static long copyLarge(java.io.InputStream, java.io.OutputStream) 	=>	b
		public static long copyLarge(java.io.Reader, java.io.Writer) 	=>	b
		public static java.util.List readLines(java.io.InputStream) 	=>	e
		public static java.util.List readLines(java.io.InputStream, java.lang.String) 	=>	c
		public static java.util.List readLines(java.io.Reader) 	=>	e
		public static byte[] toByteArray(java.io.InputStream) 	=>	b
		public static byte[] toByteArray(java.io.Reader) 	=>	b
		public static byte[] toByteArray(java.io.Reader, java.lang.String) 	=>	a
		public static byte[] toByteArray(java.lang.String) 	=>	a
		public static char[] toCharArray(java.io.InputStream) 	=>	c
		public static char[] toCharArray(java.io.InputStream, java.lang.String) 	=>	a
		public static char[] toCharArray(java.io.Reader) 	=>	c
		public static java.io.InputStream toInputStream(java.lang.String) 	=>	b
		public static java.io.InputStream toInputStream(java.lang.String, java.lang.String) 	=>	a
		public static java.lang.String toString(byte[]) 	=>	a
		public static java.lang.String toString(byte[], java.lang.String) 	=>	a
		public static java.lang.String toString(java.io.InputStream) 	=>	d
		public static java.lang.String toString(java.io.InputStream, java.lang.String) 	=>	b
		public static java.lang.String toString(java.io.Reader) 	=>	d
		public static void write(byte[], java.io.OutputStream) 	=>	a
		public static void write(byte[], java.io.Writer) 	=>	a
		public static void write(byte[], java.io.Writer, java.lang.String) 	=>	a
		public static void write(char[], java.io.OutputStream) 	=>	a
		public static void write(char[], java.io.OutputStream, java.lang.String) 	=>	a
		public static void write(char[], java.io.Writer) 	=>	a
		public static void write(java.lang.String, java.io.OutputStream) 	=>	a
		public static void write(java.lang.String, java.io.OutputStream, java.lang.String) 	=>	a
		public static void write(java.lang.String, java.io.Writer) 	=>	a
		public static void write(java.lang.StringBuffer, java.io.OutputStream) 	=>	a
		public static void write(java.lang.StringBuffer, java.io.OutputStream, java.lang.String) 	=>	a
		public static void write(java.lang.StringBuffer, java.io.Writer) 	=>	a
		public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream) 	=>	a
		public static void writeLines(java.util.Collection, java.lang.String, java.io.OutputStream, java.lang.String) 	=>	a
		public static void writeLines(java.util.Collection, java.lang.String, java.io.Writer) 	=>	a

Class: public surge.util.Items	=>	b6
	Source: "Items.java"
	FieldsOf: surge.util.Items
	MethodsOf: surge.util.Items
		public static void damage(org.bukkit.inventory.ItemStack, int) 	=>	b
		public static short getDurability(org.bukkit.inventory.ItemStack) 	=>	k
		public static double getDurabilityPercent(org.bukkit.inventory.ItemStack) 	=>	i
		public static short getMaxDurability(org.bukkit.inventory.ItemStack) 	=>	j
		public static boolean hasDurability(org.bukkit.inventory.ItemStack) 	=>	h
		public static boolean hasEnchantment(org.bukkit.inventory.ItemStack, org.bukkit.enchantments.Enchantment) 	=>	a
		public static boolean hasEnchantment(org.bukkit.inventory.ItemStack, org.bukkit.enchantments.Enchantment, int) 	=>	a
		public static boolean hasEnchantments(org.bukkit.inventory.ItemStack) 	=>	e
		public static boolean hasLore(org.bukkit.inventory.ItemStack) 	=>	d
		public static boolean hasLore(org.bukkit.inventory.ItemStack, java.util.List) 	=>	a
		public static boolean hasMeta(org.bukkit.inventory.ItemStack) 	=>	b
		public static boolean hasName(org.bukkit.inventory.ItemStack) 	=>	c
		public static boolean hasName(org.bukkit.inventory.ItemStack, java.lang.String) 	=>	a
		public static boolean is(org.bukkit.inventory.ItemStack) 	=>	a
		public static boolean is(org.bukkit.inventory.ItemStack, org.bukkit.Material) 	=>	a
		public static boolean is(org.bukkit.inventory.ItemStack, org.bukkit.Material, byte) 	=>	a
		public static boolean is(org.bukkit.inventory.ItemStack, org.bukkit.Material, int) 	=>	a
		public static boolean is(org.bukkit.inventory.ItemStack, surge.util.MaterialBlock) 	=>	a
		public static boolean isBroken(org.bukkit.inventory.ItemStack) 	=>	g
		public static boolean isMergable(org.bukkit.inventory.ItemStack, org.bukkit.inventory.ItemStack) 	=>	a
		public static void setDurability(org.bukkit.inventory.ItemStack, int) 	=>	a
		public static void setDurability(org.bukkit.inventory.ItemStack, short) 	=>	a
		public static void setDurabilityPercent(org.bukkit.inventory.ItemStack, double) 	=>	a
		public static surge.util.MaterialBlock toMaterialBlock(org.bukkit.inventory.ItemStack) 	=>	f

Class: public final enum surge.util.MSound	=>	s
	Source: "MSound.java"
	FieldsOf: surge.util.MSound
		public static final enum surge.util.MSound AMBIENCE_CAVE	NameNotChanged
		public static final enum surge.util.MSound AMBIENCE_RAIN	NameNotChanged
		public static final enum surge.util.MSound AMBIENCE_THUNDER	NameNotChanged
		public static final enum surge.util.MSound ANVIL_BREAK	NameNotChanged
		public static final enum surge.util.MSound ANVIL_LAND	NameNotChanged
		public static final enum surge.util.MSound ANVIL_USE	NameNotChanged
		public static final enum surge.util.MSound ARROW_HIT	NameNotChanged
		public static final enum surge.util.MSound BAT_DEATH	NameNotChanged
		public static final enum surge.util.MSound BAT_HURT	NameNotChanged
		public static final enum surge.util.MSound BAT_IDLE	NameNotChanged
		public static final enum surge.util.MSound BAT_LOOP	NameNotChanged
		public static final enum surge.util.MSound BAT_TAKEOFF	NameNotChanged
		public static final enum surge.util.MSound BLAZE_BREATH	NameNotChanged
		public static final enum surge.util.MSound BLAZE_DEATH	NameNotChanged
		public static final enum surge.util.MSound BLAZE_HIT	NameNotChanged
		public static final enum surge.util.MSound BURP	NameNotChanged
		public static final enum surge.util.MSound CAT_HISS	NameNotChanged
		public static final enum surge.util.MSound CAT_HIT	NameNotChanged
		public static final enum surge.util.MSound CAT_MEOW	NameNotChanged
		public static final enum surge.util.MSound CAT_PURR	NameNotChanged
		public static final enum surge.util.MSound CAT_PURREOW	NameNotChanged
		public static final enum surge.util.MSound CHEST_CLOSE	NameNotChanged
		public static final enum surge.util.MSound CHEST_OPEN	NameNotChanged
		public static final enum surge.util.MSound CHICKEN_EGG_POP	NameNotChanged
		public static final enum surge.util.MSound CHICKEN_HURT	NameNotChanged
		public static final enum surge.util.MSound CHICKEN_IDLE	NameNotChanged
		public static final enum surge.util.MSound CHICKEN_WALK	NameNotChanged
		public static final enum surge.util.MSound CLICK	NameNotChanged
		public static final enum surge.util.MSound COW_HURT	NameNotChanged
		public static final enum surge.util.MSound COW_IDLE	NameNotChanged
		public static final enum surge.util.MSound COW_WALK	NameNotChanged
		public static final enum surge.util.MSound CREEPER_DEATH	NameNotChanged
		public static final enum surge.util.MSound CREEPER_HISS	NameNotChanged
		public static final enum surge.util.MSound DIG_GRASS	NameNotChanged
		public static final enum surge.util.MSound DIG_GRAVEL	NameNotChanged
		public static final enum surge.util.MSound DIG_SAND	NameNotChanged
		public static final enum surge.util.MSound DIG_SNOW	NameNotChanged
		public static final enum surge.util.MSound DIG_STONE	NameNotChanged
		public static final enum surge.util.MSound DIG_WOOD	NameNotChanged
		public static final enum surge.util.MSound DIG_WOOL	NameNotChanged
		public static final enum surge.util.MSound DONKEY_ANGRY	NameNotChanged
		public static final enum surge.util.MSound DONKEY_DEATH	NameNotChanged
		public static final enum surge.util.MSound DONKEY_HIT	NameNotChanged
		public static final enum surge.util.MSound DONKEY_IDLE	NameNotChanged
		public static final enum surge.util.MSound DOOR_CLOSE	NameNotChanged
		public static final enum surge.util.MSound DOOR_OPEN	NameNotChanged
		public static final enum surge.util.MSound DRINK	NameNotChanged
		public static final enum surge.util.MSound EAT	NameNotChanged
		public static final enum surge.util.MSound ENDERDRAGON_DEATH	NameNotChanged
		public static final enum surge.util.MSound ENDERDRAGON_GROWL	NameNotChanged
		public static final enum surge.util.MSound ENDERDRAGON_HIT	NameNotChanged
		public static final enum surge.util.MSound ENDERDRAGON_WINGS	NameNotChanged
		public static final enum surge.util.MSound ENDERMAN_DEATH	NameNotChanged
		public static final enum surge.util.MSound ENDERMAN_HIT	NameNotChanged
		public static final enum surge.util.MSound ENDERMAN_IDLE	NameNotChanged
		public static final enum surge.util.MSound ENDERMAN_SCREAM	NameNotChanged
		public static final enum surge.util.MSound ENDERMAN_STARE	NameNotChanged
		public static final enum surge.util.MSound ENDERMAN_TELEPORT	NameNotChanged
		private static final synthetic surge.util.MSound[] ENUM$VALUES	=>	d
		public static final enum surge.util.MSound EXPLODE	NameNotChanged
		public static final enum surge.util.MSound FALL_BIG	NameNotChanged
		public static final enum surge.util.MSound FALL_SMALL	NameNotChanged
		public static final enum surge.util.MSound FIRE	NameNotChanged
		public static final enum surge.util.MSound FIREWORK_BLAST	NameNotChanged
		public static final enum surge.util.MSound FIREWORK_BLAST2	NameNotChanged
		public static final enum surge.util.MSound FIREWORK_LARGE_BLAST	NameNotChanged
		public static final enum surge.util.MSound FIREWORK_LARGE_BLAST2	NameNotChanged
		public static final enum surge.util.MSound FIREWORK_LAUNCH	NameNotChanged
		public static final enum surge.util.MSound FIREWORK_TWINKLE	NameNotChanged
		public static final enum surge.util.MSound FIREWORK_TWINKLE2	NameNotChanged
		public static final enum surge.util.MSound FIRE_IGNITE	NameNotChanged
		public static final enum surge.util.MSound FIZZ	NameNotChanged
		public static final enum surge.util.MSound FUSE	NameNotChanged
		public static final enum surge.util.MSound GHAST_CHARGE	NameNotChanged
		public static final enum surge.util.MSound GHAST_DEATH	NameNotChanged
		public static final enum surge.util.MSound GHAST_FIREBALL	NameNotChanged
		public static final enum surge.util.MSound GHAST_MOAN	NameNotChanged
		public static final enum surge.util.MSound GHAST_SCREAM	NameNotChanged
		public static final enum surge.util.MSound GHAST_SCREAM2	NameNotChanged
		public static final enum surge.util.MSound GLASS	NameNotChanged
		public static final enum surge.util.MSound HORSE_ANGRY	NameNotChanged
		public static final enum surge.util.MSound HORSE_ARMOR	NameNotChanged
		public static final enum surge.util.MSound HORSE_BREATHE	NameNotChanged
		public static final enum surge.util.MSound HORSE_DEATH	NameNotChanged
		public static final enum surge.util.MSound HORSE_GALLOP	NameNotChanged
		public static final enum surge.util.MSound HORSE_HIT	NameNotChanged
		public static final enum surge.util.MSound HORSE_IDLE	NameNotChanged
		public static final enum surge.util.MSound HORSE_JUMP	NameNotChanged
		public static final enum surge.util.MSound HORSE_LAND	NameNotChanged
		public static final enum surge.util.MSound HORSE_SADDLE	NameNotChanged
		public static final enum surge.util.MSound HORSE_SKELETON_DEATH	NameNotChanged
		public static final enum surge.util.MSound HORSE_SKELETON_HIT	NameNotChanged
		public static final enum surge.util.MSound HORSE_SKELETON_IDLE	NameNotChanged
		public static final enum surge.util.MSound HORSE_SOFT	NameNotChanged
		public static final enum surge.util.MSound HORSE_WOOD	NameNotChanged
		public static final enum surge.util.MSound HORSE_ZOMBIE_DEATH	NameNotChanged
		public static final enum surge.util.MSound HORSE_ZOMBIE_HIT	NameNotChanged
		public static final enum surge.util.MSound HORSE_ZOMBIE_IDLE	NameNotChanged
		public static final enum surge.util.MSound HURT_FLESH	NameNotChanged
		public static final enum surge.util.MSound IRONGOLEM_DEATH	NameNotChanged
		public static final enum surge.util.MSound IRONGOLEM_HIT	NameNotChanged
		public static final enum surge.util.MSound IRONGOLEM_THROW	NameNotChanged
		public static final enum surge.util.MSound IRONGOLEM_WALK	NameNotChanged
		public static final enum surge.util.MSound ITEM_BREAK	NameNotChanged
		public static final enum surge.util.MSound ITEM_PICKUP	NameNotChanged
		public static final enum surge.util.MSound LAVA	NameNotChanged
		public static final enum surge.util.MSound LAVA_POP	NameNotChanged
		public static final enum surge.util.MSound LEVEL_UP	NameNotChanged
		public static final enum surge.util.MSound MAGMACUBE_JUMP	NameNotChanged
		public static final enum surge.util.MSound MAGMACUBE_WALK	NameNotChanged
		public static final enum surge.util.MSound MAGMACUBE_WALK2	NameNotChanged
		public static final enum surge.util.MSound MINECART_BASE	NameNotChanged
		public static final enum surge.util.MSound MINECART_INSIDE	NameNotChanged
		public static final enum surge.util.MSound NOTE_BASS	NameNotChanged
		public static final enum surge.util.MSound NOTE_BASS_DRUM	NameNotChanged
		public static final enum surge.util.MSound NOTE_BASS_GUITAR	NameNotChanged
		public static final enum surge.util.MSound NOTE_PIANO	NameNotChanged
		public static final enum surge.util.MSound NOTE_PLING	NameNotChanged
		public static final enum surge.util.MSound NOTE_SNARE_DRUM	NameNotChanged
		public static final enum surge.util.MSound NOTE_STICKS	NameNotChanged
		public static final enum surge.util.MSound ORB_PICKUP	NameNotChanged
		public static final enum surge.util.MSound PIG_DEATH	NameNotChanged
		public static final enum surge.util.MSound PIG_IDLE	NameNotChanged
		public static final enum surge.util.MSound PIG_WALK	NameNotChanged
		public static final enum surge.util.MSound PISTON_EXTEND	NameNotChanged
		public static final enum surge.util.MSound PISTON_RETRACT	NameNotChanged
		public static final enum surge.util.MSound PORTAL	NameNotChanged
		public static final enum surge.util.MSound PORTAL_TRAVEL	NameNotChanged
		public static final enum surge.util.MSound PORTAL_TRIGGER	NameNotChanged
		public static final enum surge.util.MSound SHEEP_IDLE	NameNotChanged
		public static final enum surge.util.MSound SHEEP_SHEAR	NameNotChanged
		public static final enum surge.util.MSound SHEEP_WALK	NameNotChanged
		public static final enum surge.util.MSound SHOOT_ARROW	NameNotChanged
		public static final enum surge.util.MSound SILVERFISH_HIT	NameNotChanged
		public static final enum surge.util.MSound SILVERFISH_IDLE	NameNotChanged
		public static final enum surge.util.MSound SILVERFISH_KILL	NameNotChanged
		public static final enum surge.util.MSound SILVERFISH_WALK	NameNotChanged
		public static final enum surge.util.MSound SKELETON_DEATH	NameNotChanged
		public static final enum surge.util.MSound SKELETON_HURT	NameNotChanged
		public static final enum surge.util.MSound SKELETON_IDLE	NameNotChanged
		public static final enum surge.util.MSound SKELETON_WALK	NameNotChanged
		public static final enum surge.util.MSound SLIME_ATTACK	NameNotChanged
		public static final enum surge.util.MSound SLIME_WALK	NameNotChanged
		public static final enum surge.util.MSound SLIME_WALK2	NameNotChanged
		public static final enum surge.util.MSound SPIDER_DEATH	NameNotChanged
		public static final enum surge.util.MSound SPIDER_IDLE	NameNotChanged
		public static final enum surge.util.MSound SPIDER_WALK	NameNotChanged
		public static final enum surge.util.MSound SPLASH	NameNotChanged
		public static final enum surge.util.MSound SPLASH2	NameNotChanged
		public static final enum surge.util.MSound STEP_GRASS	NameNotChanged
		public static final enum surge.util.MSound STEP_GRAVEL	NameNotChanged
		public static final enum surge.util.MSound STEP_LADDER	NameNotChanged
		public static final enum surge.util.MSound STEP_SAND	NameNotChanged
		public static final enum surge.util.MSound STEP_SNOW	NameNotChanged
		public static final enum surge.util.MSound STEP_STONE	NameNotChanged
		public static final enum surge.util.MSound STEP_WOOD	NameNotChanged
		public static final enum surge.util.MSound STEP_WOOL	NameNotChanged
		public static final enum surge.util.MSound SUCCESSFUL_HIT	NameNotChanged
		public static final enum surge.util.MSound SWIM	NameNotChanged
		public static final enum surge.util.MSound VILLAGER_DEATH	NameNotChanged
		public static final enum surge.util.MSound VILLAGER_HAGGLE	NameNotChanged
		public static final enum surge.util.MSound VILLAGER_HIT	NameNotChanged
		public static final enum surge.util.MSound VILLAGER_IDLE	NameNotChanged
		public static final enum surge.util.MSound VILLAGER_NO	NameNotChanged
		public static final enum surge.util.MSound VILLAGER_YES	NameNotChanged
		public static final enum surge.util.MSound WATER	NameNotChanged
		public static final enum surge.util.MSound WITHER_DEATH	NameNotChanged
		public static final enum surge.util.MSound WITHER_HURT	NameNotChanged
		public static final enum surge.util.MSound WITHER_IDLE	NameNotChanged
		public static final enum surge.util.MSound WITHER_SHOOT	NameNotChanged
		public static final enum surge.util.MSound WITHER_SPAWN	NameNotChanged
		public static final enum surge.util.MSound WOLF_BARK	NameNotChanged
		public static final enum surge.util.MSound WOLF_DEATH	NameNotChanged
		public static final enum surge.util.MSound WOLF_GROWL	NameNotChanged
		public static final enum surge.util.MSound WOLF_HOWL	NameNotChanged
		public static final enum surge.util.MSound WOLF_HURT	NameNotChanged
		public static final enum surge.util.MSound WOLF_PANT	NameNotChanged
		public static final enum surge.util.MSound WOLF_SHAKE	NameNotChanged
		public static final enum surge.util.MSound WOLF_WALK	NameNotChanged
		public static final enum surge.util.MSound WOLF_WHINE	NameNotChanged
		public static final enum surge.util.MSound WOOD_CLICK	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_DEATH	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_HURT	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_IDLE	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_INFECT	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_METAL	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_PIG_ANGRY	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_PIG_DEATH	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_PIG_HURT	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_PIG_IDLE	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_REMEDY	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_UNFECT	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_WALK	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_WOOD	NameNotChanged
		public static final enum surge.util.MSound ZOMBIE_WOODBREAK	NameNotChanged
		private java.lang.String post19sound	=>	b
		private java.lang.String pre19sound	=>	a
		private org.bukkit.Sound resolvedSound	=>	c
	MethodsOf: surge.util.MSound
		public org.bukkit.Sound bukkitSound() 	=>	a
		public static surge.util.MSound valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.MSound[] values() 	NameNotChanged

Class: public surge.util.MaterialBlock	=>	b7
	Source: "MaterialBlock.java"
	FieldsOf: surge.util.MaterialBlock
		private java.lang.Byte data	=>	b
		private org.bukkit.Material material	=>	a
	MethodsOf: surge.util.MaterialBlock
		public boolean equals(java.lang.Object) 	NameNotChanged
		public java.lang.Byte getData() 	=>	b
		public org.bukkit.Material getMaterial() 	=>	a
		public int hashCode() 	NameNotChanged
		public void setData(java.lang.Byte) 	=>	a
		public void setMaterial(org.bukkit.Material) 	=>	a
		public java.lang.String toString() 	NameNotChanged

Class: public surge.util.P	=>	b8
	Source: "P.java"
	FieldsOf: surge.util.P
	MethodsOf: surge.util.P
		public static boolean canFindPlayer(java.lang.String) 	=>	c
		public static void clear(org.bukkit.entity.Player) 	=>	f
		public static void clearEffects(org.bukkit.entity.Player) 	=>	g
		public static void disable(org.bukkit.entity.Player) 	=>	a
		public static void enable(org.bukkit.entity.Player) 	=>	b
		public static org.bukkit.entity.Player findPlayer(java.lang.String) 	=>	d
		public static org.bukkit.entity.Player getAnyPlayer() 	=>	a
		public static org.bukkit.Location getCrotchLocation(org.bukkit.entity.Player) 	=>	e
		public static org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Player, double, double) 	=>	a
		public static org.bukkit.Location getHand(org.bukkit.entity.Player) 	=>	m
		public static org.bukkit.Location getHand(org.bukkit.entity.Player, float, float) 	=>	a
		public static org.bukkit.entity.Player getPlayer(java.lang.String) 	=>	b
		public static surge.util.Shape getShape(org.bukkit.entity.Player) 	=>	l
		public static int getTotalExperience(org.bukkit.entity.Player) 	=>	d
		public static boolean hasInventoryOpen(org.bukkit.entity.Player) 	=>	c
		public static void heal(org.bukkit.entity.Player) 	=>	h
		public static void heal(org.bukkit.entity.Player, double) 	=>	a
		public static surge.collection.GList inArea(org.bukkit.Location, double) 	=>	a
		public static surge.collection.GList inArea(org.bukkit.Location, int) 	=>	a
		public static surge.collection.GList inChunk(org.bukkit.Chunk) 	=>	a
		public static surge.collection.GList inWorld(org.bukkit.World) 	=>	a
		public static boolean isAnyOnline() 	=>	b
		public static boolean isOnline(java.lang.String) 	=>	a
		public static void kill(org.bukkit.entity.Player) 	=>	k
		public static surge.collection.GList onlinePlayers() 	=>	c
		public static void resetHunger(org.bukkit.entity.Player) 	=>	j
		public static void resetMaxHeath(org.bukkit.entity.Player) 	=>	i
		public static void setTotalExperience(org.bukkit.entity.Player, int) 	=>	c
		public static org.bukkit.Location targetBlock(org.bukkit.entity.Player, int) 	=>	a
		public static org.bukkit.entity.Entity targetEntity(org.bukkit.entity.Player, int) 	=>	b

Class: surge.util.P$1	=>	b8$b
	Source: "P.java"
	FieldsOf: surge.util.P$1
	MethodsOf: surge.util.P$1
		public bridge synthetic java.lang.Object onAdapt(java.lang.Object) 	=>	a
		public org.bukkit.entity.Player onAdapt(org.bukkit.entity.Entity) 	=>	a

Class: surge.util.P$2	=>	b8$a
	Source: "P.java"
	FieldsOf: surge.util.P$2
		private final synthetic java.lang.Double val$doff	NameNotChanged
		private final synthetic org.bukkit.entity.Player val$e	NameNotChanged
		private final synthetic org.bukkit.entity.Entity[] val$result	NameNotChanged
	MethodsOf: surge.util.P$2
		public void onTrace(org.bukkit.Location) 	=>	a

Class: public surge.util.PE	=>	cB
	Source: "PE.java"
	FieldsOf: surge.util.PE
		public static surge.util.PE ABSORPTION	=>	a
		public static surge.util.PE BLINDNESS	=>	b
		public static surge.util.PE CONFUSION	=>	c
		public static surge.util.PE DAMAGE_RESISTANCE	=>	d
		public static surge.util.PE FAST_DIGGING	=>	e
		public static surge.util.PE FIRE_RESISTANCE	=>	f
		public static surge.util.PE GLOWING	=>	g
		public static surge.util.PE HARM	=>	h
		public static surge.util.PE HEAL	=>	i
		public static surge.util.PE HEALTH_BOOST	=>	j
		public static surge.util.PE HUNGER	=>	k
		public static surge.util.PE INCREASE_DAMAGE	=>	l
		public static surge.util.PE INVISIBILITY	=>	m
		public static surge.util.PE JUMP	=>	n
		public static surge.util.PE LEVITATION	=>	o
		public static surge.util.PE LUCK	=>	p
		public static surge.util.PE NIGHT_VISION	=>	q
		public static surge.util.PE POISON	=>	r
		public static surge.util.PE REGENERATION	=>	s
		public static surge.util.PE SATURATION	=>	t
		public static surge.util.PE SLOW	=>	u
		public static surge.util.PE SLOW_DIGGING	=>	v
		public static surge.util.PE SPEED	=>	w
		public static surge.util.PE UNLUCK	=>	x
		public static surge.util.PE WATER_BREATHING	=>	y
		public static surge.util.PE WEAKNESS	=>	z
		public static surge.util.PE WITHER	=>	A
	MethodsOf: surge.util.PE
		public surge.util.PE a(int) 	=>	b
		public boolean apply(org.bukkit.entity.LivingEntity) 	NameNotChanged
		public org.bukkit.potion.PotionEffect c() 	=>	a
		public void c(org.bukkit.entity.LivingEntity) 	=>	a
		public void crm(org.bukkit.entity.LivingEntity) 	=>	b
		public surge.util.PE d(int) 	=>	a
		public static surge.util.PE defaulted(org.bukkit.potion.PotionEffectType) 	=>	a
		public boolean equals(java.lang.Object) 	NameNotChanged
		public int getAmplifier() 	NameNotChanged
		public int getDuration() 	NameNotChanged
		public org.bukkit.potion.PotionEffectType getType() 	NameNotChanged
		public boolean hasParticles() 	NameNotChanged
		public int hashCode() 	NameNotChanged
		public boolean isAmbient() 	NameNotChanged
		public void rm(org.bukkit.entity.LivingEntity) 	=>	c
		public java.util.Map serialize() 	NameNotChanged
		public java.lang.String toString() 	NameNotChanged

Class: public surge.util.Paste	=>	b9
	Source: "Paste.java"
	FieldsOf: surge.util.Paste
	MethodsOf: surge.util.Paste
		public static java.lang.String paste(java.lang.String) 	=>	a

Class: public abstract annotation surge.util.Persist	=>	b_
	Source: "Persist.java"
	FieldsOf: surge.util.Persist
	MethodsOf: surge.util.Persist

Class: public surge.util.PluginUtil	=>	ca
	Source: "PluginUtil.java"
	FieldsOf: surge.util.PluginUtil
	MethodsOf: surge.util.PluginUtil
		public static void disable(org.bukkit.plugin.Plugin) 	=>	b
		public static void disableAll() 	=>	b
		public static void enable(org.bukkit.plugin.Plugin) 	=>	a
		public static void enableAll() 	=>	a
		public static java.util.List findByCommand(java.lang.String) 	=>	c
		public static java.lang.String getFormattedName(org.bukkit.plugin.Plugin) 	=>	c
		public static java.lang.String getFormattedName(org.bukkit.plugin.Plugin, boolean) 	=>	a
		public static org.bukkit.plugin.Plugin getPluginByName(java.lang.String) 	=>	a
		public static java.lang.String getPluginFileName(java.lang.String) 	=>	d
		public static java.util.List getPluginNames(boolean) 	=>	a
		public static java.lang.String getPluginVersion(java.lang.String) 	=>	b
		public static java.lang.String getUsages(org.bukkit.plugin.Plugin) 	=>	d
		public static void load(java.lang.String) 	=>	e
		private static void load(org.bukkit.plugin.Plugin) 	=>	e
		public static void reload(org.bukkit.plugin.Plugin) 	=>	f
		public static void reloadAll() 	=>	c
		public static void unload(org.bukkit.plugin.Plugin) 	=>	g

Class: public surge.util.PositionalSelector	=>	cb
	Source: "PositionalSelector.java"
	FieldsOf: surge.util.PositionalSelector
		private surge.collection.GSet allowedChunks	=>	a
	MethodsOf: surge.util.PositionalSelector
		public void addAllWorlds() 	=>	a
		public void addChunk(org.bukkit.Chunk) 	=>	a
		public void addWorld(org.bukkit.World) 	=>	a
		public surge.collection.GSet getAllowedChunks() 	=>	b

Class: public final enum surge.util.Protocol	=>	t
	Source: "Protocol.java"
	FieldsOf: surge.util.Protocol
		private static final synthetic surge.util.Protocol[] $VALUES	=>	c
		public static final enum surge.util.Protocol B1_2_4	NameNotChanged
		public static final enum surge.util.Protocol B1_2_5	NameNotChanged
		public static final enum surge.util.Protocol B1_3_1	NameNotChanged
		public static final enum surge.util.Protocol B1_3_2	NameNotChanged
		public static final enum surge.util.Protocol B1_4_2	NameNotChanged
		public static final enum surge.util.Protocol B1_4_4	NameNotChanged
		public static final enum surge.util.Protocol B1_4_5	NameNotChanged
		public static final enum surge.util.Protocol B1_4_6	NameNotChanged
		public static final enum surge.util.Protocol B1_4_7	NameNotChanged
		public static final enum surge.util.Protocol B1_5	NameNotChanged
		public static final enum surge.util.Protocol B1_5_1	NameNotChanged
		public static final enum surge.util.Protocol B1_5_2	NameNotChanged
		public static final enum surge.util.Protocol B1_6_1	NameNotChanged
		public static final enum surge.util.Protocol B1_6_2	NameNotChanged
		public static final enum surge.util.Protocol B1_6_3	NameNotChanged
		public static final enum surge.util.Protocol B1_6_4	NameNotChanged
		public static final enum surge.util.Protocol EARLIEST	NameNotChanged
		public static final enum surge.util.Protocol LATEST	NameNotChanged
		public static final enum surge.util.Protocol R1_10	NameNotChanged
		public static final enum surge.util.Protocol R1_10_1	NameNotChanged
		public static final enum surge.util.Protocol R1_10_2	NameNotChanged
		public static final enum surge.util.Protocol R1_11	NameNotChanged
		public static final enum surge.util.Protocol R1_11_1	NameNotChanged
		public static final enum surge.util.Protocol R1_11_2	NameNotChanged
		public static final enum surge.util.Protocol R1_12	NameNotChanged
		public static final enum surge.util.Protocol R1_12_1	NameNotChanged
		public static final enum surge.util.Protocol R1_12_2	NameNotChanged
		public static final enum surge.util.Protocol R1_12_2_PRE	NameNotChanged
		public static final enum surge.util.Protocol R1_7_1	NameNotChanged
		public static final enum surge.util.Protocol R1_7_10	NameNotChanged
		public static final enum surge.util.Protocol R1_7_2	NameNotChanged
		public static final enum surge.util.Protocol R1_7_3	NameNotChanged
		public static final enum surge.util.Protocol R1_7_4	NameNotChanged
		public static final enum surge.util.Protocol R1_7_5	NameNotChanged
		public static final enum surge.util.Protocol R1_7_6	NameNotChanged
		public static final enum surge.util.Protocol R1_7_7	NameNotChanged
		public static final enum surge.util.Protocol R1_7_8	NameNotChanged
		public static final enum surge.util.Protocol R1_7_9	NameNotChanged
		public static final enum surge.util.Protocol R1_8	NameNotChanged
		public static final enum surge.util.Protocol R1_8_1	NameNotChanged
		public static final enum surge.util.Protocol R1_8_2	NameNotChanged
		public static final enum surge.util.Protocol R1_8_3	NameNotChanged
		public static final enum surge.util.Protocol R1_8_4	NameNotChanged
		public static final enum surge.util.Protocol R1_8_5	NameNotChanged
		public static final enum surge.util.Protocol R1_8_6	NameNotChanged
		public static final enum surge.util.Protocol R1_8_7	NameNotChanged
		public static final enum surge.util.Protocol R1_8_8	NameNotChanged
		public static final enum surge.util.Protocol R1_8_9	NameNotChanged
		public static final enum surge.util.Protocol R1_9	NameNotChanged
		public static final enum surge.util.Protocol R1_9_1	NameNotChanged
		public static final enum surge.util.Protocol R1_9_2	NameNotChanged
		public static final enum surge.util.Protocol R1_9_3	NameNotChanged
		public static final enum surge.util.Protocol R1_9_4	NameNotChanged
		public static final enum surge.util.Protocol UNKNOWN	NameNotChanged
		private java.lang.String search	=>	b
		private int version	=>	a
	MethodsOf: surge.util.Protocol
		public int getMetaVersion() 	=>	g
		public static surge.util.Protocol getProtocolVersion() 	=>	a
		public int getVersion() 	=>	f
		public java.lang.String getVersionString() 	=>	c
		public boolean isActualVersion() 	=>	e
		public boolean isNettySupported() 	=>	d
		public boolean isServerVersion() 	=>	b
		public surge.util.ProtocolRange to(surge.util.Protocol) 	=>	a
		public static surge.util.Protocol valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.Protocol[] values() 	NameNotChanged

Class: public surge.util.ProtocolRange	=>	cc
	Source: "ProtocolRange.java"
	FieldsOf: surge.util.ProtocolRange
		private surge.util.Protocol from	=>	a
		private surge.util.Protocol to	=>	b
	MethodsOf: surge.util.ProtocolRange
		public boolean contains(surge.util.Protocol) 	=>	a
		public surge.util.Protocol getFrom() 	=>	a
		public surge.util.Protocol getTo() 	=>	b
		public java.lang.String toString() 	NameNotChanged

Class: public surge.util.Range	=>	cd
	Source: "Range.java"
	FieldsOf: surge.util.Range
		private double max	=>	b
		private double min	=>	a
	MethodsOf: surge.util.Range
		public double getMax() 	=>	e
		public double getMin() 	=>	d
		public boolean isWithin(double) 	=>	a
		public boolean isWithin(int) 	=>	a
		public boolean isWithin(long) 	=>	a
		public double randomNext() 	=>	a
		public int randomNextInt() 	=>	b
		public long randomNextLong() 	=>	c
		public void setMax(double) 	=>	c
		public void setMin(double) 	=>	b

Class: public surge.util.RayTrace	=>	ce
	Source: "RayTrace.java"
	FieldsOf: surge.util.RayTrace
		private org.bukkit.util.Vector direction	=>	b
		private java.lang.Double distanceCovered	=>	d
		private java.lang.Double maxDistance	=>	c
		private org.bukkit.Location start	=>	a
		private java.lang.Double step	=>	e
		private java.lang.Boolean stop	=>	f
	MethodsOf: surge.util.RayTrace
		public org.bukkit.util.Vector getDirection() 	=>	d
		public java.lang.Double getDistanceCovered() 	=>	f
		public java.lang.Double getMaxDistance() 	=>	e
		public org.bukkit.Location getStart() 	=>	c
		public java.lang.Double getStep() 	=>	g
		public void onTrace(org.bukkit.Location) 	=>	a
		public void setDirection(org.bukkit.util.Vector) 	=>	a
		public void setDistanceCovered(java.lang.Double) 	=>	b
		public void setMaxDistance(java.lang.Double) 	=>	a
		public void setStart(org.bukkit.Location) 	=>	b
		public void setStep(java.lang.Double) 	=>	c
		public void stop() 	=>	b
		public void trace() 	=>	a

Class: public final surge.util.ReflectionUtils	=>	cf
	Source: "ReflectionUtils.java"
	FieldsOf: surge.util.ReflectionUtils
	MethodsOf: surge.util.ReflectionUtils
		public static java.lang.reflect.Constructor getConstructor(java.lang.Class, java.lang.Class[]) 	=>	a
		public static java.lang.reflect.Constructor getConstructor(java.lang.String, surge.util.ReflectionUtils$PackageType, java.lang.Class[]) 	=>	a
		public static java.lang.reflect.Field getField(java.lang.Class, boolean, java.lang.String) 	=>	a
		public static java.lang.reflect.Field getField(java.lang.String, surge.util.ReflectionUtils$PackageType, boolean, java.lang.String) 	=>	a
		public static java.lang.reflect.Method getMethod(java.lang.Class, java.lang.String, java.lang.Class[]) 	=>	a
		public static java.lang.reflect.Method getMethod(java.lang.String, surge.util.ReflectionUtils$PackageType, java.lang.String, java.lang.Class[]) 	=>	a
		public static java.lang.Object getValue(java.lang.Object, boolean, java.lang.String) 	=>	a
		public static java.lang.Object getValue(java.lang.Object, java.lang.Class, boolean, java.lang.String) 	=>	a
		public static java.lang.Object getValue(java.lang.Object, java.lang.String, surge.util.ReflectionUtils$PackageType, boolean, java.lang.String) 	=>	a
		public static java.lang.Object instantiateObject(java.lang.Class, java.lang.Object[]) 	=>	a
		public static java.lang.Object instantiateObject(java.lang.String, surge.util.ReflectionUtils$PackageType, java.lang.Object[]) 	=>	a
		public static java.lang.Object invokeMethod(java.lang.Object, java.lang.Class, java.lang.String, java.lang.Object[]) 	=>	a
		public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, java.lang.Object[]) 	=>	a
		public static java.lang.Object invokeMethod(java.lang.Object, java.lang.String, surge.util.ReflectionUtils$PackageType, java.lang.String, java.lang.Object[]) 	=>	a
		public static void setValue(java.lang.Object, boolean, java.lang.String, java.lang.Object) 	=>	a
		public static void setValue(java.lang.Object, java.lang.Class, boolean, java.lang.String, java.lang.Object) 	=>	a
		public static void setValue(java.lang.Object, java.lang.String, surge.util.ReflectionUtils$PackageType, boolean, java.lang.String, java.lang.Object) 	=>	a

Class: public final enum surge.util.ReflectionUtils$DataType	=>	cf$b
	Source: "ReflectionUtils.java"
	FieldsOf: surge.util.ReflectionUtils$DataType
		public static final enum surge.util.ReflectionUtils$DataType BOOLEAN	NameNotChanged
		public static final enum surge.util.ReflectionUtils$DataType BYTE	NameNotChanged
		public static final enum surge.util.ReflectionUtils$DataType CHARACTER	NameNotChanged
		private static final java.util.Map CLASS_MAP	=>	a
		public static final enum surge.util.ReflectionUtils$DataType DOUBLE	NameNotChanged
		private static final synthetic surge.util.ReflectionUtils$DataType[] ENUM$VALUES	=>	d
		public static final enum surge.util.ReflectionUtils$DataType FLOAT	NameNotChanged
		public static final enum surge.util.ReflectionUtils$DataType INTEGER	NameNotChanged
		public static final enum surge.util.ReflectionUtils$DataType LONG	NameNotChanged
		public static final enum surge.util.ReflectionUtils$DataType SHORT	NameNotChanged
		private final java.lang.Class primitive	=>	b
		private final java.lang.Class reference	=>	c
	MethodsOf: surge.util.ReflectionUtils$DataType
		public static boolean compare(java.lang.Class[], java.lang.Class[]) 	=>	a
		public static surge.util.ReflectionUtils$DataType fromClass(java.lang.Class) 	=>	a
		public java.lang.Class getPrimitive() 	=>	a
		public static java.lang.Class getPrimitive(java.lang.Class) 	=>	b
		public static java.lang.Class[] getPrimitive(java.lang.Class[]) 	=>	a
		public static java.lang.Class[] getPrimitive(java.lang.Object[]) 	=>	a
		public java.lang.Class getReference() 	=>	b
		public static java.lang.Class getReference(java.lang.Class) 	=>	c
		public static java.lang.Class[] getReference(java.lang.Class[]) 	=>	b
		public static java.lang.Class[] getReference(java.lang.Object[]) 	=>	b
		public static surge.util.ReflectionUtils$DataType valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.ReflectionUtils$DataType[] values() 	NameNotChanged

Class: public final enum surge.util.ReflectionUtils$PackageType	=>	cf$a
	Source: "ReflectionUtils.java"
	FieldsOf: surge.util.ReflectionUtils$PackageType
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_BLOCK	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CHUNKIO	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_COMMAND	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_CONVERSATIONS	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENCHANTMENS	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_ENTITY	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_EVENT	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_GENERATOR	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_HELP	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_INVENTORY	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_MAP	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_METADATA	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_POTION	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_PROJECTILES	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCHEDULER	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_SCOREBOARD	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UPDATER	NameNotChanged
		public static final enum surge.util.ReflectionUtils$PackageType CRAFTBUKKIT_UTIL	NameNotChanged
		private static final synthetic surge.util.ReflectionUtils$PackageType[] ENUM$VALUES	=>	b
		public static final enum surge.util.ReflectionUtils$PackageType MINECRAFT_SERVER	NameNotChanged
		private final java.lang.String path	=>	a
	MethodsOf: surge.util.ReflectionUtils$PackageType
		public java.lang.Class getClass(java.lang.String) 	=>	a
		public java.lang.String getPath() 	=>	a
		public static java.lang.String getServerVersion() 	=>	b
		public java.lang.String toString() 	NameNotChanged
		public static surge.util.ReflectionUtils$PackageType valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.ReflectionUtils$PackageType[] values() 	NameNotChanged

Class: public abstract surge.util.Refreshable	=>	cg
	Source: "Refreshable.java"
	FieldsOf: surge.util.Refreshable
	MethodsOf: surge.util.Refreshable
		public abstract void refresh() 	=>	a

Class: public final enum surge.util.SQLOperation	=>	u
	Source: "SQLOperation.java"
	FieldsOf: surge.util.SQLOperation
		private static final synthetic surge.util.SQLOperation[] ENUM$VALUES	=>	a
		public static final enum surge.util.SQLOperation LOAD	NameNotChanged
		public static final enum surge.util.SQLOperation SAVE	NameNotChanged
	MethodsOf: surge.util.SQLOperation
		public static surge.util.SQLOperation valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.SQLOperation[] values() 	NameNotChanged

Class: public final enum surge.util.ServerState	=>	v
	Source: "ServerState.java"
	FieldsOf: surge.util.ServerState
		public static final enum surge.util.ServerState DISABLE	NameNotChanged
		public static final enum surge.util.ServerState ENABLE	NameNotChanged
		private static final synthetic surge.util.ServerState[] ENUM$VALUES	=>	a
		public static final enum surge.util.ServerState RUNNING	NameNotChanged
		public static final enum surge.util.ServerState START	NameNotChanged
		public static final enum surge.util.ServerState STOP	NameNotChanged
	MethodsOf: surge.util.ServerState
		public static surge.util.ServerState valueOf(java.lang.String) 	NameNotChanged
		public static surge.util.ServerState[] values() 	NameNotChanged

Class: public surge.util.Shape	=>	ch
	Source: "Shape.java"
	FieldsOf: surge.util.Shape
		private org.bukkit.Location location	=>	a
		private org.bukkit.util.Vector offset	=>	b
		private org.bukkit.util.Vector size	=>	c
	MethodsOf: surge.util.Shape
		public org.bukkit.Location getCenter() 	=>	c
		public org.bukkit.Location getLocation() 	=>	d
		public org.bukkit.util.Vector getOffset() 	=>	e
		public org.bukkit.util.Vector getSize() 	=>	f
		public boolean isWithinShape(org.bukkit.Location) 	=>	a
		public org.bukkit.Location randomLocation() 	=>	a
		public org.bukkit.Location randomSurface() 	=>	b

Class: public surge.util.SnowLevel	=>	ci
	Source: "SnowLevel.java"
	FieldsOf: surge.util.SnowLevel
		private byte level	=>	a
	MethodsOf: surge.util.SnowLevel
		public byte getLevel() 	=>	a
		public void setLevel(byte) 	=>	a

Class: public abstract surge.util.T	=>	cm
	Source: "T.java"
	FieldsOf: surge.util.T
	MethodsOf: surge.util.T
		public abstract void onStop(long, double) 	=>	a
		public void stop() 	=>	b

Class: public surge.util.TXT	=>	cj
	Source: "TXT.java"
	FieldsOf: surge.util.TXT
	MethodsOf: surge.util.TXT
		public static java.lang.String getLine(surge.util.C, int, double, java.lang.String, java.lang.String, java.lang.String) 	=>	a
		public static java.lang.String line(surge.util.C, int) 	=>	a
		public static java.lang.String makeTag(surge.util.C, surge.util.C, surge.util.C, java.lang.String) 	=>	a
		public static java.lang.String makeTag(surge.util.C, surge.util.C, surge.util.C, surge.util.C, java.lang.String) 	=>	a
		public static java.lang.String repeat(java.lang.String, int) 	=>	a
		public static java.lang.String underline(surge.util.C, int) 	=>	b
		public static surge.collection.GList wrap(java.lang.String, int) 	=>	b

Class: public abstract annotation surge.util.Tag	=>	ck
	Source: "Tag.java"
	FieldsOf: surge.util.Tag
	MethodsOf: surge.util.Tag
		public abstract java.lang.String value() 	NameNotChanged

Class: public surge.util.Timer	=>	cl
	Source: "Timer.java"
	FieldsOf: surge.util.Timer
		private long cns	=>	b
		private long tns	=>	a
	MethodsOf: surge.util.Timer
		public long getLastRun() 	=>	d
		public long getTime() 	=>	c
		public void start() 	=>	a
		public void stop() 	=>	b

Class: public surge.util.VectorMath	=>	cn
	Source: "VectorMath.java"
	FieldsOf: surge.util.VectorMath
		private static synthetic int[] $SWITCH_TABLE$org$bukkit$block$BlockFace	=>	b
		private static synthetic int[] $SWITCH_TABLE$surge$util$Axis	=>	a
	MethodsOf: surge.util.VectorMath
		static synthetic int[] $SWITCH_TABLE$org$bukkit$block$BlockFace() 	=>	b
		static synthetic int[] $SWITCH_TABLE$surge$util$Axis() 	=>	a
		public static org.bukkit.util.Vector angleDown(org.bukkit.util.Vector, float) 	=>	d
		public static org.bukkit.util.Vector angleLeft(org.bukkit.util.Vector, float) 	=>	a
		public static org.bukkit.util.Vector angleRight(org.bukkit.util.Vector, float) 	=>	b
		public static org.bukkit.util.Vector angleUp(org.bukkit.util.Vector, float) 	=>	c
		public static org.bukkit.util.Vector clip(org.bukkit.util.Vector, int) 	=>	a
		public static org.bukkit.util.Vector direction(org.bukkit.Location, org.bukkit.Location) 	=>	a
		public static org.bukkit.util.Vector directionNoNormal(org.bukkit.Location, org.bukkit.Location) 	=>	b
		public static org.bukkit.block.BlockFace getBlockFace(org.bukkit.util.Vector) 	=>	j
		public static double getSpeed(org.bukkit.util.Vector) 	=>	i
		public static void impulse(org.bukkit.entity.Entity, org.bukkit.util.Vector) 	=>	a
		public static void impulse(org.bukkit.entity.Entity, org.bukkit.util.Vector, double) 	=>	a
		public static boolean isLookingNear(org.bukkit.Location, org.bukkit.Location, double) 	=>	a
		public static org.bukkit.util.Vector reverse(org.bukkit.util.Vector) 	=>	h
		public static org.bukkit.util.Vector reverseXZ(org.bukkit.util.Vector) 	=>	a
		public static org.bukkit.util.Vector rotate90CCX(org.bukkit.util.Vector) 	=>	c
		public static org.bukkit.util.Vector rotate90CCY(org.bukkit.util.Vector) 	=>	e
		public static org.bukkit.util.Vector rotate90CCZ(org.bukkit.util.Vector) 	=>	g
		public static org.bukkit.util.Vector rotate90CX(org.bukkit.util.Vector) 	=>	b
		public static org.bukkit.util.Vector rotate90CY(org.bukkit.util.Vector) 	=>	d
		public static org.bukkit.util.Vector rotate90CZ(org.bukkit.util.Vector) 	=>	f
		public static org.bukkit.util.Vector rotateVectorCC(org.bukkit.util.Vector, org.bukkit.util.Vector, double) 	=>	a
		private static double round(double, int) 	=>	a
		public static org.bukkit.util.Vector scaleStatic(surge.util.Axis, org.bukkit.util.Vector, double) 	=>	a
		public static org.bukkit.util.Vector scaleX(org.bukkit.util.Vector, double) 	=>	a
		public static org.bukkit.util.Vector scaleY(org.bukkit.util.Vector, double) 	=>	b
		public static org.bukkit.util.Vector scaleZ(org.bukkit.util.Vector, double) 	=>	c
		public static surge.collection.GList shift(org.bukkit.util.Vector, surge.collection.GList) 	=>	a
		public static surge.collection.GList split(org.bukkit.block.BlockFace) 	=>	a
		public static org.bukkit.util.Vector toVector(float, float) 	=>	a
		public static org.bukkit.util.Vector triNormalize(org.bukkit.util.Vector) 	=>	k

Class: surge.util.VectorMath$1	=>	cn$a
	Source: "VectorMath.java"
	FieldsOf: surge.util.VectorMath$1
		private final synthetic org.bukkit.util.Vector val$vector	NameNotChanged
	MethodsOf: surge.util.VectorMath$1
		public bridge synthetic java.lang.Object onAdapt(java.lang.Object) 	=>	a
		public org.bukkit.util.Vector onAdapt(org.bukkit.util.Vector) 	=>	a

Class: public surge.util.W	=>	co
	Source: "W.java"
	FieldsOf: surge.util.W
	MethodsOf: surge.util.W
		public static surge.collection.GList blockFaces(org.bukkit.block.Block) 	=>	f
		public static surge.collection.GList blockRadius(org.bukkit.block.Block, int) 	=>	a
		public static surge.collection.GList chunkFaces(org.bukkit.Chunk) 	=>	c
		public static surge.collection.GList chunkRadius(org.bukkit.Chunk, int) 	=>	a
		public static void colorArmor(org.bukkit.inventory.ItemStack, org.bukkit.Color) 	=>	a
		public static int count(org.bukkit.entity.Player, surge.util.MaterialBlock) 	=>	a
		public static double differenceOfVectors(org.bukkit.util.Vector, org.bukkit.util.Vector) 	=>	a
		public static void dropXp(org.bukkit.Location, int) 	=>	a
		public static surge.collection.GList getBlocks(org.bukkit.Chunk) 	=>	a
		public static int getChunkX(org.bukkit.block.Block) 	=>	b
		public static int getChunkY(org.bukkit.block.Block) 	=>	c
		public static int getChunkZ(org.bukkit.block.Block) 	=>	d
		public static org.bukkit.entity.Entity getEntity(int) 	=>	a
		public static org.bukkit.entity.Entity getEntityLookingAt(org.bukkit.entity.Entity, double, double) 	=>	a
		public static int getHighestPotionLevel(org.bukkit.potion.PotionEffectType, java.util.Collection) 	=>	a
		public static int getManhattanDistance(org.bukkit.Location, org.bukkit.Location, boolean) 	=>	a
		public static int getManhattanDistance(org.bukkit.block.Block, org.bukkit.block.Block, boolean) 	=>	a
		public static surge.util.MaterialBlock getMaterialBlock(java.lang.String) 	=>	a
		public static org.bukkit.block.Block[] getRelative(org.bukkit.block.Block, org.bukkit.block.BlockFace[]) 	=>	a
		public static org.bukkit.World getSyncWorld(org.bukkit.World) 	=>	a
		public static boolean has(org.bukkit.entity.Player, surge.util.MaterialBlock, int) 	=>	a
		public static boolean isLookingAt(org.bukkit.entity.Entity, org.bukkit.entity.Entity, double, double) 	=>	a
		public static surge.collection.GList news(org.bukkit.Location) 	=>	a
		public static void setData(org.bukkit.block.Block, org.bukkit.material.MaterialData) 	=>	a
		public static void setData(org.bukkit.block.Block, org.bukkit.material.MaterialData, boolean) 	=>	a
		public static void setTypeAndData(org.bukkit.block.Block, org.bukkit.Material, org.bukkit.material.MaterialData) 	=>	a
		public static void setTypeAndData(org.bukkit.block.Block, org.bukkit.Material, org.bukkit.material.MaterialData, boolean) 	=>	a
		public static void setTypeAndRawData(org.bukkit.block.Block, org.bukkit.Material, int) 	=>	a
		public static void setTypeAndRawData(org.bukkit.block.Block, org.bukkit.Material, int, boolean) 	=>	a
		public static org.bukkit.Location simulateFall(org.bukkit.Location) 	=>	c
		public static void take(org.bukkit.entity.Player, surge.util.MaterialBlock, int) 	=>	b
		public static org.bukkit.Chunk toSync(org.bukkit.Chunk) 	=>	b
		public static org.bukkit.Location toSync(org.bukkit.Location) 	=>	b
		public static org.bukkit.World toSync(org.bukkit.World) 	=>	b
		public static org.bukkit.block.Block toSync(org.bukkit.block.Block) 	=>	e
		public static boolean visible(org.bukkit.block.Block) 	=>	a

Class: final surge.util.W$1	=>	co$a
	Source: "W.java"
	FieldsOf: surge.util.W$1
		final synthetic java.lang.Double val$doff	NameNotChanged
		final synthetic org.bukkit.entity.Entity val$e	NameNotChanged
		final synthetic org.bukkit.entity.Entity[] val$result	NameNotChanged
	MethodsOf: surge.util.W$1
		public void onTrace(org.bukkit.Location) 	=>	a

Class: public surge.util.Worlds	=>	cp
	Source: "Worlds.java"
	FieldsOf: surge.util.Worlds
	MethodsOf: surge.util.Worlds
		public static org.bukkit.World getWorld(java.lang.String) 	=>	b
		public static surge.collection.GList getWorlds() 	=>	a
		public static boolean hasWorld(java.lang.String) 	=>	a

Class: abstract synthetic surge.util.package-info	=>	package-info
	Source: "package-info.java"
	FieldsOf: surge.util.package-info
	MethodsOf: surge.util.package-info


AutoReflectionClass: c0
